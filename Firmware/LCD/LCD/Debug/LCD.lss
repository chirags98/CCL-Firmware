
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000019a4  00001a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800180  00800180  00001ab8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f38  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0b  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c2  00000000  00000000  000048fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  000059c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000630  00000000  00000000  00005e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001acc  00000000  00000000  000064c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ea       	ldi	r30, 0xA4	; 164
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 38       	cpi	r26, 0x80	; 128
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e8       	ldi	r26, 0x80	; 128
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3a       	cpi	r26, 0xA1	; 161
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ab 09 	call	0x1356	; 0x1356 <main>
      9e:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	d8 2e       	mov	r13, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     104:	06 2f       	mov	r16, r22
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	10 16       	cp	r1, r16
     10a:	11 06       	cpc	r1, r17
     10c:	2c f5       	brge	.+74     	; 0x158 <avg_read_adc_channel+0x6c>
     10e:	c1 e0       	ldi	r28, 0x01	; 1
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	81 2c       	mov	r8, r1
     114:	91 2c       	mov	r9, r1
     116:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
     118:	e8 2e       	mov	r14, r24
     11a:	f1 2c       	mov	r15, r1
     11c:	c7 01       	movw	r24, r14
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	9c 01       	movw	r18, r24
     124:	25 56       	subi	r18, 0x65	; 101
     126:	3e 4f       	sbci	r19, 0xFE	; 254
     128:	79 01       	movw	r14, r18
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	8d 2d       	mov	r24, r13
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel];
     130:	f7 01       	movw	r30, r14
     132:	60 81       	ld	r22, Z
     134:	71 81       	ldd	r23, Z+1	; 0x01
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
     142:	c5 01       	movw	r24, r10
     144:	b4 01       	movw	r22, r8
     146:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3>
     14a:	4b 01       	movw	r8, r22
     14c:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     14e:	21 96       	adiw	r28, 0x01	; 1
     150:	0c 17       	cp	r16, r28
     152:	1d 07       	cpc	r17, r29
     154:	54 f7       	brge	.-44     	; 0x12a <avg_read_adc_channel+0x3e>
     156:	03 c0       	rjmp	.+6      	; 0x15e <avg_read_adc_channel+0x72>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     158:	81 2c       	mov	r8, r1
     15a:	91 2c       	mov	r9, r1
     15c:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
	}
	
	adc_val[channel] = val/i;
     15e:	cd 2d       	mov	r28, r13
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	b8 01       	movw	r22, r16
     164:	11 0f       	add	r17, r17
     166:	88 0b       	sbc	r24, r24
     168:	99 0b       	sbc	r25, r25
     16a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     16e:	9b 01       	movw	r18, r22
     170:	ac 01       	movw	r20, r24
     172:	c5 01       	movw	r24, r10
     174:	b4 01       	movw	r22, r8
     176:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
     17a:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     17e:	cc 0f       	add	r28, r28
     180:	dd 1f       	adc	r29, r29
     182:	c5 56       	subi	r28, 0x65	; 101
     184:	de 4f       	sbci	r29, 0xFE	; 254
     186:	79 83       	std	Y+1, r23	; 0x01
     188:	68 83       	st	Y, r22
	
	return adc_val[channel];
     18a:	88 81       	ld	r24, Y
     18c:	99 81       	ldd	r25, Y+1	; 0x01
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	bf 90       	pop	r11
     19e:	af 90       	pop	r10
     1a0:	9f 90       	pop	r9
     1a2:	8f 90       	pop	r8
     1a4:	08 95       	ret

000001a6 <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	0f 92       	push	r0
     1ae:	11 24       	eor	r1, r1
     1b0:	2f 93       	push	r18
     1b2:	3f 93       	push	r19
     1b4:	4f 93       	push	r20
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	ef 93       	push	r30
     1bc:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1be:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1c2:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	adc_val[channel] = 0x03 && high;
     1ca:	ef 70       	andi	r30, 0x0F	; 15
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	81 11       	cpse	r24, r1
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_21+0x34>
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	ee 0f       	add	r30, r30
     1dc:	ff 1f       	adc	r31, r31
     1de:	e5 56       	subi	r30, 0x65	; 101
     1e0:	fe 4f       	sbci	r31, 0xFE	; 254
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1e6:	20 81       	ld	r18, Z
     1e8:	31 81       	ldd	r19, Z+1	; 0x01
     1ea:	32 2f       	mov	r19, r18
     1ec:	22 27       	eor	r18, r18
     1ee:	31 83       	std	Z+1, r19	; 0x01
     1f0:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	98 2f       	mov	r25, r24
     1f6:	88 27       	eor	r24, r24
     1f8:	84 0f       	add	r24, r20
     1fa:	91 1d       	adc	r25, r1
     1fc:	91 83       	std	Z+1, r25	; 0x01
     1fe:	80 83       	st	Z, r24
     200:	ff 91       	pop	r31
     202:	ef 91       	pop	r30
     204:	9f 91       	pop	r25
     206:	8f 91       	pop	r24
     208:	4f 91       	pop	r20
     20a:	3f 91       	pop	r19
     20c:	2f 91       	pop	r18
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <update_current>:
}

void print_mos_power(char row, char col)
{
	lcd_print4(row, col, power_mos, "mW", "W");
}
     218:	65 e0       	ldi	r22, 0x05	; 5
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     220:	bc 01       	movw	r22, r24
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     22a:	27 ee       	ldi	r18, 0xE7	; 231
     22c:	3b ef       	ldi	r19, 0xFB	; 251
     22e:	49 ef       	ldi	r20, 0xF9	; 249
     230:	5f e3       	ldi	r21, 0x3F	; 63
     232:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     236:	2a e9       	ldi	r18, 0x9A	; 154
     238:	39 e9       	ldi	r19, 0x99	; 153
     23a:	49 e9       	ldi	r20, 0x99	; 153
     23c:	5e e3       	ldi	r21, 0x3E	; 62
     23e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3>
     242:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <offset>
     246:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <offset+0x1>
     24a:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <offset+0x2>
     24e:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <offset+0x3>
     252:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3>
     256:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <current>
     25a:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <current+0x1>
     25e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <current+0x2>
     262:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <current+0x3>
     266:	08 95       	ret

00000268 <update_voltage>:
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	65 e0       	ldi	r22, 0x05	; 5
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     278:	bc 01       	movw	r22, r24
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     282:	2c ee       	ldi	r18, 0xEC	; 236
     284:	31 e5       	ldi	r19, 0x51	; 81
     286:	4a ee       	ldi	r20, 0xEA	; 234
     288:	51 e4       	ldi	r21, 0x41	; 65
     28a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     28e:	6b 01       	movw	r12, r22
     290:	7c 01       	movw	r14, r24
     292:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fixsfsi>
     296:	cb 01       	movw	r24, r22
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divmodhi4>
     2a0:	bc 01       	movw	r22, r24
     2a2:	99 0f       	add	r25, r25
     2a4:	88 0b       	sbc	r24, r24
     2a6:	99 0b       	sbc	r25, r25
     2a8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     2ac:	9b 01       	movw	r18, r22
     2ae:	ac 01       	movw	r20, r24
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__subsf3>
     2b8:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <voltage>
     2bc:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <voltage+0x1>
     2c0:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <voltage+0x2>
     2c4:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <voltage+0x3>
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <update_power>:
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	c0 90 92 01 	lds	r12, 0x0192	; 0x800192 <current>
     2ea:	d0 90 93 01 	lds	r13, 0x0193	; 0x800193 <current+0x1>
     2ee:	e0 90 94 01 	lds	r14, 0x0194	; 0x800194 <current+0x2>
     2f2:	f0 90 95 01 	lds	r15, 0x0195	; 0x800195 <current+0x3>
     2f6:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <voltage>
     2fa:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <voltage+0x1>
     2fe:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <voltage+0x2>
     302:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <voltage+0x3>
     306:	c7 01       	movw	r24, r14
     308:	b6 01       	movw	r22, r12
     30a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4a e7       	ldi	r20, 0x7A	; 122
     314:	54 e4       	ldi	r21, 0x44	; 68
     316:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
     31a:	4b 01       	movw	r8, r22
     31c:	5c 01       	movw	r10, r24
     31e:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fixsfsi>
     322:	ca e0       	ldi	r28, 0x0A	; 10
     324:	d0 e0       	ldi	r29, 0x00	; 0
     326:	cb 01       	movw	r24, r22
     328:	be 01       	movw	r22, r28
     32a:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divmodhi4>
     32e:	bc 01       	movw	r22, r24
     330:	99 0f       	add	r25, r25
     332:	88 0b       	sbc	r24, r24
     334:	99 0b       	sbc	r25, r25
     336:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     33a:	9b 01       	movw	r18, r22
     33c:	ac 01       	movw	r20, r24
     33e:	c5 01       	movw	r24, r10
     340:	b4 01       	movw	r22, r8
     342:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__subsf3>
     346:	4b 01       	movw	r8, r22
     348:	5c 01       	movw	r10, r24
     34a:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <power>
     34e:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <power+0x1>
     352:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <power+0x2>
     356:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <power+0x3>
     35a:	a7 01       	movw	r20, r14
     35c:	96 01       	movw	r18, r12
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	4a e7       	ldi	r20, 0x7A	; 122
     36c:	54 e4       	ldi	r21, 0x44	; 68
     36e:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
     372:	9b 01       	movw	r18, r22
     374:	ac 01       	movw	r20, r24
     376:	c5 01       	movw	r24, r10
     378:	b4 01       	movw	r22, r8
     37a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__subsf3>
     37e:	6b 01       	movw	r12, r22
     380:	7c 01       	movw	r14, r24
     382:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fixsfsi>
     386:	cb 01       	movw	r24, r22
     388:	be 01       	movw	r22, r28
     38a:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divmodhi4>
     38e:	bc 01       	movw	r22, r24
     390:	99 0f       	add	r25, r25
     392:	88 0b       	sbc	r24, r24
     394:	99 0b       	sbc	r25, r25
     396:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__subsf3>
     3a6:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <power_mos>
     3aa:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <power_mos+0x1>
     3ae:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <power_mos+0x2>
     3b2:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <power_mos+0x3>
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	bf 90       	pop	r11
     3c4:	af 90       	pop	r10
     3c6:	9f 90       	pop	r9
     3c8:	8f 90       	pop	r8
     3ca:	08 95       	ret

000003cc <update_gate_voltage>:
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	6a e0       	ldi	r22, 0x0A	; 10
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     3dc:	bc 01       	movw	r22, r24
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     3e6:	2a e0       	ldi	r18, 0x0A	; 10
     3e8:	37 ed       	ldi	r19, 0xD7	; 215
     3ea:	4b e2       	ldi	r20, 0x2B	; 43
     3ec:	51 e4       	ldi	r21, 0x41	; 65
     3ee:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fixsfsi>
     3fa:	cb 01       	movw	r24, r22
     3fc:	6a e0       	ldi	r22, 0x0A	; 10
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divmodhi4>
     404:	bc 01       	movw	r22, r24
     406:	99 0f       	add	r25, r25
     408:	88 0b       	sbc	r24, r24
     40a:	99 0b       	sbc	r25, r25
     40c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     410:	9b 01       	movw	r18, r22
     412:	ac 01       	movw	r20, r24
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__subsf3>
     41c:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <gate_voltage>
     420:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <gate_voltage+0x1>
     424:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <gate_voltage+0x2>
     428:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <gate_voltage+0x3>
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	08 95       	ret

00000436 <print_current>:
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <current>
     442:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <current+0x1>
     446:	40 91 94 01 	lds	r20, 0x0194	; 0x800194 <current+0x2>
     44a:	50 91 95 01 	lds	r21, 0x0195	; 0x800195 <current+0x3>
     44e:	0f 2e       	mov	r0, r31
     450:	f9 e0       	ldi	r31, 0x09	; 9
     452:	ef 2e       	mov	r14, r31
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
     45a:	08 e0       	ldi	r16, 0x08	; 8
     45c:	11 e0       	ldi	r17, 0x01	; 1
     45e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <lcd_print4>
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	08 95       	ret

0000046c <print_voltage>:
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <voltage>
     478:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <voltage+0x1>
     47c:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <voltage+0x2>
     480:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <voltage+0x3>
     484:	0f 2e       	mov	r0, r31
     486:	fc e0       	ldi	r31, 0x0C	; 12
     488:	ef 2e       	mov	r14, r31
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	ff 2e       	mov	r15, r31
     48e:	f0 2d       	mov	r31, r0
     490:	0b e0       	ldi	r16, 0x0B	; 11
     492:	11 e0       	ldi	r17, 0x01	; 1
     494:	0e 94 f5 08 	call	0x11ea	; 0x11ea <lcd_print4>
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	08 95       	ret

000004a2 <print_power>:
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <power>
     4ae:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <power+0x1>
     4b2:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <power+0x2>
     4b6:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <power+0x3>
     4ba:	0f 2e       	mov	r0, r31
     4bc:	ff e0       	ldi	r31, 0x0F	; 15
     4be:	ef 2e       	mov	r14, r31
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	ff 2e       	mov	r15, r31
     4c4:	f0 2d       	mov	r31, r0
     4c6:	0e e0       	ldi	r16, 0x0E	; 14
     4c8:	11 e0       	ldi	r17, 0x01	; 1
     4ca:	0e 94 f5 08 	call	0x11ea	; 0x11ea <lcd_print4>
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	08 95       	ret

000004d8 <print_fan_status>:

void print_fan_status(void)
{
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
	static char val = 0;	//To create a schmitt trigger like mechanism for power, voltage and current.
	
	if (power_mos > fan_power_thresh)
     4dc:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
     4e0:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
     4e4:	be 01       	movw	r22, r28
     4e6:	0d 2e       	mov	r0, r29
     4e8:	00 0c       	add	r0, r0
     4ea:	88 0b       	sbc	r24, r24
     4ec:	99 0b       	sbc	r25, r25
     4ee:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     4f2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <power_mos>
     4f6:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <power_mos+0x1>
     4fa:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <power_mos+0x2>
     4fe:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <power_mos+0x3>
     502:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__cmpsf2>
     506:	88 23       	and	r24, r24
     508:	a4 f4       	brge	.+40     	; 0x532 <print_fan_status+0x5a>
	{
		if (val == 0)	//If values are set at the nominal value decrease the values
     50a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <val.1847>
     50e:	81 11       	cpse	r24, r1
     510:	09 c0       	rjmp	.+18     	; 0x524 <print_fan_status+0x4c>
		{
			fan_power_thresh -= 500;
     512:	c4 5f       	subi	r28, 0xF4	; 244
     514:	d1 40       	sbci	r29, 0x01	; 1
     516:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     51a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			val = 1;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <val.1847>
		}
		
		lcd_string2(2,10, "Fan On ");
     524:	41 e1       	ldi	r20, 0x11	; 17
     526:	51 e0       	ldi	r21, 0x01	; 1
     528:	6a e0       	ldi	r22, 0x0A	; 10
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
     530:	12 c0       	rjmp	.+36     	; 0x556 <print_fan_status+0x7e>
	}
	
	else
	{
		if (val == 1)	//If levels during last check was more than threshold - reset threshold to nominal values
     532:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <val.1847>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	41 f4       	brne	.+16     	; 0x54a <print_fan_status+0x72>
		{
			fan_power_thresh += 500;
     53a:	cc 50       	subi	r28, 0x0C	; 12
     53c:	de 4f       	sbci	r29, 0xFE	; 254
     53e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     542:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			val = 0;
     546:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <val.1847>
		}
		
		lcd_string2(2,10, "Fan Off");
     54a:	49 e1       	ldi	r20, 0x19	; 25
     54c:	51 e0       	ldi	r21, 0x01	; 1
     54e:	6a e0       	ldi	r22, 0x0A	; 10
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
	}	
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <check_thresholds>:

char check_thresholds()
{
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
	static char val = 0;	//To create a schmitt trigger like mechanism for power, voltage and current.
	
	//If less than threshold
	if (current<current_thresh && voltage<v_thresh && power_mos<power_thresh)
     570:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <current_thresh>
     574:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <current_thresh+0x1>
     578:	c0 90 92 01 	lds	r12, 0x0192	; 0x800192 <current>
     57c:	d0 90 93 01 	lds	r13, 0x0193	; 0x800193 <current+0x1>
     580:	e0 90 94 01 	lds	r14, 0x0194	; 0x800194 <current+0x2>
     584:	f0 90 95 01 	lds	r15, 0x0195	; 0x800195 <current+0x3>
     588:	be 01       	movw	r22, r28
     58a:	0d 2e       	mov	r0, r29
     58c:	00 0c       	add	r0, r0
     58e:	88 0b       	sbc	r24, r24
     590:	99 0b       	sbc	r25, r25
     592:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     596:	a7 01       	movw	r20, r14
     598:	96 01       	movw	r18, r12
     59a:	0e 94 27 0c 	call	0x184e	; 0x184e <__gesf2>
     59e:	18 16       	cp	r1, r24
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <check_thresholds+0x48>
     5a2:	4b c0       	rjmp	.+150    	; 0x63a <check_thresholds+0xde>
     5a4:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <v_thresh>
     5a8:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <v_thresh+0x1>
     5ac:	b8 01       	movw	r22, r16
     5ae:	01 2e       	mov	r0, r17
     5b0:	00 0c       	add	r0, r0
     5b2:	88 0b       	sbc	r24, r24
     5b4:	99 0b       	sbc	r25, r25
     5b6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     5ba:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <voltage>
     5be:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <voltage+0x1>
     5c2:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <voltage+0x2>
     5c6:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <voltage+0x3>
     5ca:	0e 94 27 0c 	call	0x184e	; 0x184e <__gesf2>
     5ce:	18 16       	cp	r1, r24
     5d0:	a4 f5       	brge	.+104    	; 0x63a <check_thresholds+0xde>
     5d2:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <power_thresh>
     5d6:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <power_thresh+0x1>
     5da:	b5 01       	movw	r22, r10
     5dc:	0b 2c       	mov	r0, r11
     5de:	00 0c       	add	r0, r0
     5e0:	88 0b       	sbc	r24, r24
     5e2:	99 0b       	sbc	r25, r25
     5e4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     5e8:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <power_mos>
     5ec:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <power_mos+0x1>
     5f0:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <power_mos+0x2>
     5f4:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <power_mos+0x3>
     5f8:	0e 94 27 0c 	call	0x184e	; 0x184e <__gesf2>
     5fc:	18 16       	cp	r1, r24
     5fe:	ec f4       	brge	.+58     	; 0x63a <check_thresholds+0xde>
	{
		if (val == 1)	//If levels during last check was more than threshold - reset threshold to nominal values
     600:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	09 f0       	breq	.+2      	; 0x60a <check_thresholds+0xae>
     608:	79 c0       	rjmp	.+242    	; 0x6fc <check_thresholds+0x1a0>
		{
			power_thresh += 500;
     60a:	8c e0       	ldi	r24, 0x0C	; 12
     60c:	a8 1a       	sub	r10, r24
     60e:	8e ef       	ldi	r24, 0xFE	; 254
     610:	b8 0a       	sbc	r11, r24
     612:	b0 92 03 01 	sts	0x0103, r11	; 0x800103 <power_thresh+0x1>
     616:	a0 92 02 01 	sts	0x0102, r10	; 0x800102 <power_thresh>
			v_thresh += 500;
     61a:	0c 50       	subi	r16, 0x0C	; 12
     61c:	1e 4f       	sbci	r17, 0xFE	; 254
     61e:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <v_thresh+0x1>
     622:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <v_thresh>
			current_thresh += 100;
     626:	cc 59       	subi	r28, 0x9C	; 156
     628:	df 4f       	sbci	r29, 0xFF	; 255
     62a:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <current_thresh+0x1>
     62e:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <current_thresh>
			val = 0;	//Values have been reset
     632:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
		}
		
		return 0;	//All okay
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	68 c0       	rjmp	.+208    	; 0x70a <check_thresholds+0x1ae>
	}
	
	//If greater than threshold
	else
	{	
		if (val == 0)	//If values are set at the nominal value decrease the values
     63a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
     63e:	81 11       	cpse	r24, r1
     640:	1d c0       	rjmp	.+58     	; 0x67c <check_thresholds+0x120>
		{
			power_thresh -= 500;
     642:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power_thresh>
     646:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power_thresh+0x1>
     64a:	84 5f       	subi	r24, 0xF4	; 244
     64c:	91 40       	sbci	r25, 0x01	; 1
     64e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <power_thresh+0x1>
     652:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <power_thresh>
			v_thresh -= 500;
     656:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <v_thresh>
     65a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <v_thresh+0x1>
     65e:	84 5f       	subi	r24, 0xF4	; 244
     660:	91 40       	sbci	r25, 0x01	; 1
     662:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <v_thresh+0x1>
     666:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <v_thresh>
			current_thresh -= 100;
     66a:	c4 56       	subi	r28, 0x64	; 100
     66c:	d1 09       	sbc	r29, r1
     66e:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <current_thresh+0x1>
     672:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <current_thresh>
			val = 1;	//Values have been decreased
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		}
		
		if (power_mos>power_thresh)
     67c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <power_thresh>
     680:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <power_thresh+0x1>
     684:	07 2e       	mov	r0, r23
     686:	00 0c       	add	r0, r0
     688:	88 0b       	sbc	r24, r24
     68a:	99 0b       	sbc	r25, r25
     68c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     690:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <power_mos>
     694:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <power_mos+0x1>
     698:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <power_mos+0x2>
     69c:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <power_mos+0x3>
     6a0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__cmpsf2>
     6a4:	88 23       	and	r24, r24
     6a6:	64 f1       	brlt	.+88     	; 0x700 <check_thresholds+0x1a4>
			return 1;
	
		else if (voltage>v_thresh)
     6a8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <v_thresh>
     6ac:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <v_thresh+0x1>
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     6bc:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <voltage>
     6c0:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <voltage+0x1>
     6c4:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <voltage+0x2>
     6c8:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <voltage+0x3>
     6cc:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__cmpsf2>
     6d0:	88 23       	and	r24, r24
     6d2:	c4 f0       	brlt	.+48     	; 0x704 <check_thresholds+0x1a8>
			return 2;

		else if (current>current_thresh)	
     6d4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <current_thresh>
     6d8:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <current_thresh+0x1>
     6dc:	07 2e       	mov	r0, r23
     6de:	00 0c       	add	r0, r0
     6e0:	88 0b       	sbc	r24, r24
     6e2:	99 0b       	sbc	r25, r25
     6e4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	0e 94 27 0c 	call	0x184e	; 0x184e <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	44 f0       	brlt	.+16     	; 0x708 <check_thresholds+0x1ac>
			return 3;
	
		else
			return 4;	//Error
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	07 c0       	rjmp	.+14     	; 0x70a <check_thresholds+0x1ae>
			v_thresh += 500;
			current_thresh += 100;
			val = 0;	//Values have been reset
		}
		
		return 0;	//All okay
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <check_thresholds+0x1ae>
			current_thresh -= 100;
			val = 1;	//Values have been decreased
		}
		
		if (power_mos>power_thresh)
			return 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	03 c0       	rjmp	.+6      	; 0x70a <check_thresholds+0x1ae>
	
		else if (voltage>v_thresh)
			return 2;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	01 c0       	rjmp	.+2      	; 0x70a <check_thresholds+0x1ae>

		else if (current>current_thresh)	
			return 3;
     708:	83 e0       	ldi	r24, 0x03	; 3
	
		else
			return 4;	//Error
	}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	bf 90       	pop	r11
     71c:	af 90       	pop	r10
     71e:	08 95       	ret

00000720 <Bit_Reverse>:
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     720:	98 2f       	mov	r25, r24
     722:	99 1f       	adc	r25, r25
     724:	99 27       	eor	r25, r25
     726:	99 1f       	adc	r25, r25
     728:	86 fd       	sbrc	r24, 6
     72a:	02 c0       	rjmp	.+4      	; 0x730 <Bit_Reverse+0x10>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	01 c0       	rjmp	.+2      	; 0x732 <Bit_Reverse+0x12>
     730:	22 e0       	ldi	r18, 0x02	; 2
     732:	92 2b       	or	r25, r18
     734:	85 fd       	sbrc	r24, 5
     736:	02 c0       	rjmp	.+4      	; 0x73c <Bit_Reverse+0x1c>
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	01 c0       	rjmp	.+2      	; 0x73e <Bit_Reverse+0x1e>
     73c:	24 e0       	ldi	r18, 0x04	; 4
     73e:	92 2b       	or	r25, r18
     740:	84 fd       	sbrc	r24, 4
     742:	02 c0       	rjmp	.+4      	; 0x748 <Bit_Reverse+0x28>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	01 c0       	rjmp	.+2      	; 0x74a <Bit_Reverse+0x2a>
     748:	28 e0       	ldi	r18, 0x08	; 8
     74a:	92 2b       	or	r25, r18
     74c:	83 fd       	sbrc	r24, 3
     74e:	02 c0       	rjmp	.+4      	; 0x754 <Bit_Reverse+0x34>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	01 c0       	rjmp	.+2      	; 0x756 <Bit_Reverse+0x36>
     754:	20 e1       	ldi	r18, 0x10	; 16
     756:	92 2b       	or	r25, r18
     758:	82 fd       	sbrc	r24, 2
     75a:	02 c0       	rjmp	.+4      	; 0x760 <Bit_Reverse+0x40>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	01 c0       	rjmp	.+2      	; 0x762 <Bit_Reverse+0x42>
     760:	20 e2       	ldi	r18, 0x20	; 32
     762:	92 2b       	or	r25, r18
     764:	81 fd       	sbrc	r24, 1
     766:	02 c0       	rjmp	.+4      	; 0x76c <Bit_Reverse+0x4c>
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	01 c0       	rjmp	.+2      	; 0x76e <Bit_Reverse+0x4e>
     76c:	20 e4       	ldi	r18, 0x40	; 64
     76e:	92 2b       	or	r25, r18
     770:	80 fd       	sbrc	r24, 0
     772:	02 c0       	rjmp	.+4      	; 0x778 <Bit_Reverse+0x58>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	01 c0       	rjmp	.+2      	; 0x77a <Bit_Reverse+0x5a>
     778:	80 e8       	ldi	r24, 0x80	; 128
     77a:	89 2b       	or	r24, r25
     77c:	08 95       	ret

0000077e <lcd_wr_command>:
     77e:	cf 93       	push	r28
     780:	c8 2f       	mov	r28, r24
     782:	80 7f       	andi	r24, 0xF0	; 240
     784:	0e 94 90 03 	call	0x720	; 0x720 <Bit_Reverse>
     788:	88 0f       	add	r24, r24
     78a:	88 0f       	add	r24, r24
     78c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <temp.1773>
     790:	8b b1       	in	r24, 0x0b	; 11
     792:	83 7c       	andi	r24, 0xC3	; 195
     794:	8b b9       	out	0x0b, r24	; 11
     796:	9b b1       	in	r25, 0x0b	; 11
     798:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <temp.1773>
     79c:	89 2b       	or	r24, r25
     79e:	8b b9       	out	0x0b, r24	; 11
     7a0:	5f 98       	cbi	0x0b, 7	; 11
     7a2:	5e 9a       	sbi	0x0b, 6	; 11
     7a4:	8f e1       	ldi	r24, 0x1F	; 31
     7a6:	9e e4       	ldi	r25, 0x4E	; 78
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <lcd_wr_command+0x2a>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <lcd_wr_command+0x30>
     7ae:	00 00       	nop
     7b0:	5e 98       	cbi	0x0b, 6	; 11
     7b2:	8c 2f       	mov	r24, r28
     7b4:	82 95       	swap	r24
     7b6:	80 7f       	andi	r24, 0xF0	; 240
     7b8:	0e 94 90 03 	call	0x720	; 0x720 <Bit_Reverse>
     7bc:	9b b1       	in	r25, 0x0b	; 11
     7be:	93 7c       	andi	r25, 0xC3	; 195
     7c0:	9b b9       	out	0x0b, r25	; 11
     7c2:	9b b1       	in	r25, 0x0b	; 11
     7c4:	88 0f       	add	r24, r24
     7c6:	88 0f       	add	r24, r24
     7c8:	98 2b       	or	r25, r24
     7ca:	9b b9       	out	0x0b, r25	; 11
     7cc:	5f 98       	cbi	0x0b, 7	; 11
     7ce:	5e 9a       	sbi	0x0b, 6	; 11
     7d0:	8f e1       	ldi	r24, 0x1F	; 31
     7d2:	9e e4       	ldi	r25, 0x4E	; 78
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <lcd_wr_command+0x56>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <lcd_wr_command+0x5c>
     7da:	00 00       	nop
     7dc:	5e 98       	cbi	0x0b, 6	; 11
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <lcd_port_config>:
     7e2:	8a b1       	in	r24, 0x0a	; 10
     7e4:	8c 6f       	ori	r24, 0xFC	; 252
     7e6:	8a b9       	out	0x0a, r24	; 10
     7e8:	8b b1       	in	r24, 0x0b	; 11
     7ea:	84 70       	andi	r24, 0x04	; 4
     7ec:	8b b9       	out	0x0b, r24	; 11
     7ee:	08 95       	ret

000007f0 <lcd_wr_char>:
     7f0:	cf 93       	push	r28
     7f2:	c8 2f       	mov	r28, r24
     7f4:	80 7f       	andi	r24, 0xF0	; 240
     7f6:	0e 94 90 03 	call	0x720	; 0x720 <Bit_Reverse>
     7fa:	9b b1       	in	r25, 0x0b	; 11
     7fc:	93 7c       	andi	r25, 0xC3	; 195
     7fe:	9b b9       	out	0x0b, r25	; 11
     800:	9b b1       	in	r25, 0x0b	; 11
     802:	88 0f       	add	r24, r24
     804:	88 0f       	add	r24, r24
     806:	98 2b       	or	r25, r24
     808:	9b b9       	out	0x0b, r25	; 11
     80a:	5f 9a       	sbi	0x0b, 7	; 11
     80c:	5e 9a       	sbi	0x0b, 6	; 11
     80e:	8f e1       	ldi	r24, 0x1F	; 31
     810:	9e e4       	ldi	r25, 0x4E	; 78
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <lcd_wr_char+0x22>
     816:	00 c0       	rjmp	.+0      	; 0x818 <lcd_wr_char+0x28>
     818:	00 00       	nop
     81a:	5e 98       	cbi	0x0b, 6	; 11
     81c:	8c 2f       	mov	r24, r28
     81e:	82 95       	swap	r24
     820:	80 7f       	andi	r24, 0xF0	; 240
     822:	0e 94 90 03 	call	0x720	; 0x720 <Bit_Reverse>
     826:	9b b1       	in	r25, 0x0b	; 11
     828:	93 7c       	andi	r25, 0xC3	; 195
     82a:	9b b9       	out	0x0b, r25	; 11
     82c:	9b b1       	in	r25, 0x0b	; 11
     82e:	88 0f       	add	r24, r24
     830:	88 0f       	add	r24, r24
     832:	98 2b       	or	r25, r24
     834:	9b b9       	out	0x0b, r25	; 11
     836:	5f 9a       	sbi	0x0b, 7	; 11
     838:	5e 9a       	sbi	0x0b, 6	; 11
     83a:	8f e1       	ldi	r24, 0x1F	; 31
     83c:	9e e4       	ldi	r25, 0x4E	; 78
     83e:	01 97       	sbiw	r24, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <lcd_wr_char+0x4e>
     842:	00 c0       	rjmp	.+0      	; 0x844 <lcd_wr_char+0x54>
     844:	00 00       	nop
     846:	5e 98       	cbi	0x0b, 6	; 11
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <lcd_home>:
     84c:	80 e8       	ldi	r24, 0x80	; 128
     84e:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
     852:	08 95       	ret

00000854 <lcd_string>:
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ec 01       	movw	r28, r24
     85a:	88 81       	ld	r24, Y
     85c:	88 23       	and	r24, r24
     85e:	31 f0       	breq	.+12     	; 0x86c <lcd_string+0x18>
     860:	21 96       	adiw	r28, 0x01	; 1
     862:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
     866:	89 91       	ld	r24, Y+
     868:	81 11       	cpse	r24, r1
     86a:	fb cf       	rjmp	.-10     	; 0x862 <lcd_string+0xe>
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <lcd_cursor>:
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	19 f0       	breq	.+6      	; 0x87c <lcd_cursor+0xa>
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	31 f0       	breq	.+12     	; 0x886 <lcd_cursor+0x14>
     87a:	08 95       	ret
     87c:	8f e7       	ldi	r24, 0x7F	; 127
     87e:	86 0f       	add	r24, r22
     880:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
     884:	08 95       	ret
     886:	8f eb       	ldi	r24, 0xBF	; 191
     888:	86 0f       	add	r24, r22
     88a:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
     88e:	08 95       	ret

00000890 <lcd_string2>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ea 01       	movw	r28, r20
     896:	0e 94 39 04 	call	0x872	; 0x872 <lcd_cursor>
     89a:	88 81       	ld	r24, Y
     89c:	88 23       	and	r24, r24
     89e:	31 f0       	breq	.+12     	; 0x8ac <lcd_string2+0x1c>
     8a0:	21 96       	adiw	r28, 0x01	; 1
     8a2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
     8a6:	89 91       	ld	r24, Y+
     8a8:	81 11       	cpse	r24, r1
     8aa:	fb cf       	rjmp	.-10     	; 0x8a2 <lcd_string2+0x12>
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <lcd_start>:
     8b2:	8f e9       	ldi	r24, 0x9F	; 159
     8b4:	9f e0       	ldi	r25, 0x0F	; 15
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_start+0x4>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <lcd_start+0xa>
     8bc:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8be:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
     8c0:	80 e3       	ldi	r24, 0x30	; 48
     8c2:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     8c4:	5e 9a       	sbi	0x0b, 6	; 11
     8c6:	ef e1       	ldi	r30, 0x1F	; 31
     8c8:	fe e4       	ldi	r31, 0x4E	; 78
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <lcd_start+0x18>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <lcd_start+0x1e>
     8d0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8d2:	5e 98       	cbi	0x0b, 6	; 11
     8d4:	ef e9       	ldi	r30, 0x9F	; 159
     8d6:	ff e0       	ldi	r31, 0x0F	; 15
     8d8:	31 97       	sbiw	r30, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <lcd_start+0x26>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <lcd_start+0x2c>
     8de:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8e0:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     8e2:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     8e4:	5e 9a       	sbi	0x0b, 6	; 11
     8e6:	ef e1       	ldi	r30, 0x1F	; 31
     8e8:	fe e4       	ldi	r31, 0x4E	; 78
     8ea:	31 97       	sbiw	r30, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <lcd_start+0x38>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <lcd_start+0x3e>
     8f0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8f2:	5e 98       	cbi	0x0b, 6	; 11
     8f4:	ef e9       	ldi	r30, 0x9F	; 159
     8f6:	ff e0       	ldi	r31, 0x0F	; 15
     8f8:	31 97       	sbiw	r30, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <lcd_start+0x46>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <lcd_start+0x4c>
     8fe:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     900:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     902:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     904:	5e 9a       	sbi	0x0b, 6	; 11
     906:	8f e1       	ldi	r24, 0x1F	; 31
     908:	9e e4       	ldi	r25, 0x4E	; 78
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <__stack+0xb>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0x11>
     910:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     912:	5e 98       	cbi	0x0b, 6	; 11
     914:	ef e9       	ldi	r30, 0x9F	; 159
     916:	ff e0       	ldi	r31, 0x0F	; 15
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0x19>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0x1f>
     91e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     920:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
     922:	80 e1       	ldi	r24, 0x10	; 16
     924:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     926:	5e 9a       	sbi	0x0b, 6	; 11
     928:	8f e9       	ldi	r24, 0x9F	; 159
     92a:	9f e0       	ldi	r25, 0x0F	; 15
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <__stack+0x2d>
     930:	00 c0       	rjmp	.+0      	; 0x932 <__stack+0x33>
     932:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     934:	5e 98       	cbi	0x0b, 6	; 11
     936:	ef e9       	ldi	r30, 0x9F	; 159
     938:	ff e0       	ldi	r31, 0x0F	; 15
     93a:	31 97       	sbiw	r30, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <__stack+0x3b>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <__stack+0x41>
     940:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     942:	88 e2       	ldi	r24, 0x28	; 40
     944:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
     94e:	8c e0       	ldi	r24, 0x0C	; 12
     950:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
     954:	80 e8       	ldi	r24, 0x80	; 128
     956:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
     95a:	08 95       	ret

0000095c <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	0e 94 bf 03 	call	0x77e	; 0x77e <lcd_wr_command>
     962:	08 95       	ret

00000964 <lcd_print5>:
* Logic:
* Example Call: lcd_print(1,1,val,3)
*/
//002 and not 0020
static void lcd_print5(char row, char coloumn, unsigned int value, int digits, char* str)
{
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	7a 01       	movw	r14, r20
     976:	69 01       	movw	r12, r18
	if(value)
     978:	41 15       	cp	r20, r1
     97a:	51 05       	cpc	r21, r1
     97c:	09 f4       	brne	.+2      	; 0x980 <lcd_print5+0x1c>
     97e:	e6 c0       	rjmp	.+460    	; 0xb4c <lcd_print5+0x1e8>
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
		{
			if ((num & 1) == 1)
     980:	40 fd       	sbrc	r20, 0
     982:	0c c0       	rjmp	.+24     	; 0x99c <lcd_print5+0x38>
     984:	9a 01       	movw	r18, r20
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	02 c0       	rjmp	.+4      	; 0x98e <lcd_print5+0x2a>
     98a:	20 fd       	sbrc	r18, 0
     98c:	08 c0       	rjmp	.+16     	; 0x99e <lcd_print5+0x3a>
			{
				break;
			}
			else
			{
				count++;
     98e:	cf 5f       	subi	r28, 0xFF	; 255
				num = num >> 1;
     990:	36 95       	lsr	r19
     992:	27 95       	ror	r18
	if(value)
	{
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
     994:	21 15       	cp	r18, r1
     996:	31 05       	cpc	r19, r1
     998:	c1 f7       	brne	.-16     	; 0x98a <lcd_print5+0x26>
     99a:	01 c0       	rjmp	.+2      	; 0x99e <lcd_print5+0x3a>
		{
			if ((num & 1) == 1)
     99c:	c0 e0       	ldi	r28, 0x00	; 0
				num = num >> 1;
			}
		}
		
		unsigned char flag=0;
		if(row==0||coloumn==0)
     99e:	88 23       	and	r24, r24
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <lcd_print5+0x42>
     9a2:	61 11       	cpse	r22, r1
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <lcd_print5+0x48>
			lcd_home();
     9a6:	0e 94 26 04 	call	0x84c	; 0x84c <lcd_home>
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <lcd_print5+0x4c>
		else
			lcd_cursor(row,coloumn);
     9ac:	0e 94 39 04 	call	0x872	; 0x872 <lcd_cursor>
	
		if(digits==5 || flag==1)
     9b0:	25 e0       	ldi	r18, 0x05	; 5
     9b2:	c2 16       	cp	r12, r18
     9b4:	d1 04       	cpc	r13, r1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <lcd_print5+0x56>
     9b8:	d8 c0       	rjmp	.+432    	; 0xb6a <lcd_print5+0x206>
		{	
			million=value/10000+48;
			//if(count < 5)
			lcd_wr_char(million);
     9ba:	97 01       	movw	r18, r14
     9bc:	32 95       	swap	r19
     9be:	22 95       	swap	r18
     9c0:	2f 70       	andi	r18, 0x0F	; 15
     9c2:	23 27       	eor	r18, r19
     9c4:	3f 70       	andi	r19, 0x0F	; 15
     9c6:	23 27       	eor	r18, r19
     9c8:	a7 e4       	ldi	r26, 0x47	; 71
     9ca:	b3 e0       	ldi	r27, 0x03	; 3
     9cc:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     9d0:	96 95       	lsr	r25
     9d2:	87 95       	ror	r24
     9d4:	96 95       	lsr	r25
     9d6:	87 95       	ror	r24
     9d8:	96 95       	lsr	r25
     9da:	87 95       	ror	r24
     9dc:	80 5d       	subi	r24, 0xD0	; 208
     9de:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
		if(digits==4 || flag==1)
		{
			temp = value/1000;
			thousand = temp%10 + 48;
			//if(count < 4)
			lcd_wr_char(thousand);
     9e2:	97 01       	movw	r18, r14
     9e4:	36 95       	lsr	r19
     9e6:	27 95       	ror	r18
     9e8:	36 95       	lsr	r19
     9ea:	27 95       	ror	r18
     9ec:	36 95       	lsr	r19
     9ee:	27 95       	ror	r18
     9f0:	a5 ec       	ldi	r26, 0xC5	; 197
     9f2:	b0 e2       	ldi	r27, 0x20	; 32
     9f4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     9f8:	ac 01       	movw	r20, r24
     9fa:	52 95       	swap	r21
     9fc:	42 95       	swap	r20
     9fe:	4f 70       	andi	r20, 0x0F	; 15
     a00:	45 27       	eor	r20, r21
     a02:	5f 70       	andi	r21, 0x0F	; 15
     a04:	45 27       	eor	r20, r21
     a06:	9a 01       	movw	r18, r20
     a08:	ad ec       	ldi	r26, 0xCD	; 205
     a0a:	bc ec       	ldi	r27, 0xCC	; 204
     a0c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     a10:	96 95       	lsr	r25
     a12:	87 95       	ror	r24
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	9c 01       	movw	r18, r24
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	fa 01       	movw	r30, r20
     a34:	e8 1b       	sub	r30, r24
     a36:	f9 0b       	sbc	r31, r25
     a38:	cf 01       	movw	r24, r30
     a3a:	80 5d       	subi	r24, 0xD0	; 208
     a3c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <lcd_print5+0xe6>
			
			flag=1;
		}
		if(digits==3 || flag==1)
     a42:	f3 e0       	ldi	r31, 0x03	; 3
     a44:	cf 16       	cp	r12, r31
     a46:	d1 04       	cpc	r13, r1
     a48:	51 f5       	brne	.+84     	; 0xa9e <lcd_print5+0x13a>
		{
			temp = value/100;
			hundred = temp%10 + 48;
			//if(count < 3)
			lcd_wr_char(hundred);
     a4a:	97 01       	movw	r18, r14
     a4c:	36 95       	lsr	r19
     a4e:	27 95       	ror	r18
     a50:	36 95       	lsr	r19
     a52:	27 95       	ror	r18
     a54:	ab e7       	ldi	r26, 0x7B	; 123
     a56:	b4 e1       	ldi	r27, 0x14	; 20
     a58:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     a5c:	ac 01       	movw	r20, r24
     a5e:	56 95       	lsr	r21
     a60:	47 95       	ror	r20
     a62:	9a 01       	movw	r18, r20
     a64:	ad ec       	ldi	r26, 0xCD	; 205
     a66:	bc ec       	ldi	r27, 0xCC	; 204
     a68:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     a6c:	96 95       	lsr	r25
     a6e:	87 95       	ror	r24
     a70:	96 95       	lsr	r25
     a72:	87 95       	ror	r24
     a74:	96 95       	lsr	r25
     a76:	87 95       	ror	r24
     a78:	9c 01       	movw	r18, r24
     a7a:	22 0f       	add	r18, r18
     a7c:	33 1f       	adc	r19, r19
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	9a 01       	movw	r18, r20
     a90:	28 1b       	sub	r18, r24
     a92:	39 0b       	sbc	r19, r25
     a94:	c9 01       	movw	r24, r18
     a96:	80 5d       	subi	r24, 0xD0	; 208
     a98:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <lcd_print5+0x144>
			flag=1;
		}
		if(digits==2 || flag==1)
     a9e:	32 e0       	ldi	r19, 0x02	; 2
     aa0:	c3 16       	cp	r12, r19
     aa2:	d1 04       	cpc	r13, r1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <lcd_print5+0x144>
     aa6:	67 c0       	rjmp	.+206    	; 0xb76 <lcd_print5+0x212>
		{
			temp = value/10;
			tens = temp%10 + 48;
			//if(count < 2)
			lcd_wr_char(tens);
     aa8:	97 01       	movw	r18, r14
     aaa:	ad ec       	ldi	r26, 0xCD	; 205
     aac:	bc ec       	ldi	r27, 0xCC	; 204
     aae:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     ab2:	ac 01       	movw	r20, r24
     ab4:	56 95       	lsr	r21
     ab6:	47 95       	ror	r20
     ab8:	56 95       	lsr	r21
     aba:	47 95       	ror	r20
     abc:	56 95       	lsr	r21
     abe:	47 95       	ror	r20
     ac0:	9a 01       	movw	r18, r20
     ac2:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     ac6:	96 95       	lsr	r25
     ac8:	87 95       	ror	r24
     aca:	96 95       	lsr	r25
     acc:	87 95       	ror	r24
     ace:	96 95       	lsr	r25
     ad0:	87 95       	ror	r24
     ad2:	9c 01       	movw	r18, r24
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	82 0f       	add	r24, r18
     ae6:	93 1f       	adc	r25, r19
     ae8:	fa 01       	movw	r30, r20
     aea:	e8 1b       	sub	r30, r24
     aec:	f9 0b       	sbc	r31, r25
     aee:	cf 01       	movw	r24, r30
     af0:	80 5d       	subi	r24, 0xD0	; 208
     af2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			flag=1;
		}
		if(digits==1 || flag==1)
		{
			unit = value%10 + 48;
			if(count < 1)
     af6:	c1 11       	cpse	r28, r1
     af8:	1d c0       	rjmp	.+58     	; 0xb34 <lcd_print5+0x1d0>
				lcd_wr_char(unit);
     afa:	97 01       	movw	r18, r14
     afc:	ad ec       	ldi	r26, 0xCD	; 205
     afe:	bc ec       	ldi	r27, 0xCC	; 204
     b00:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	96 95       	lsr	r25
     b0e:	87 95       	ror	r24
     b10:	9c 01       	movw	r18, r24
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	82 0f       	add	r24, r18
     b24:	93 1f       	adc	r25, r19
     b26:	97 01       	movw	r18, r14
     b28:	28 1b       	sub	r18, r24
     b2a:	39 0b       	sbc	r19, r25
     b2c:	c9 01       	movw	r24, r18
     b2e:	80 5d       	subi	r24, 0xD0	; 208
     b30:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
		}
		if(digits>5)
     b34:	36 e0       	ldi	r19, 0x06	; 6
     b36:	c3 16       	cp	r12, r19
     b38:	d1 04       	cpc	r13, r1
     b3a:	1c f0       	brlt	.+6      	; 0xb42 <lcd_print5+0x1de>
		{
			lcd_wr_char('E');
     b3c:	85 e4       	ldi	r24, 0x45	; 69
     b3e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     b42:	f8 01       	movw	r30, r16
     b44:	80 81       	ld	r24, Z
     b46:	81 11       	cpse	r24, r1
     b48:	08 c0       	rjmp	.+16     	; 0xb5a <lcd_print5+0x1f6>
     b4a:	1c c0       	rjmp	.+56     	; 0xb84 <lcd_print5+0x220>
		}
	}
	
	else	//if(value==0)
	{
		lcd_wr_char('0'); //print one 0
     b4c:	80 e3       	ldi	r24, 0x30	; 48
     b4e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
		lcd_wr_char('0'); //print one 0
     b52:	80 e3       	ldi	r24, 0x30	; 48
     b54:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
     b58:	f4 cf       	rjmp	.-24     	; 0xb42 <lcd_print5+0x1de>
     b5a:	e8 01       	movw	r28, r16
     b5c:	21 96       	adiw	r28, 0x01	; 1
	}
	
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     b5e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     b62:	89 91       	ld	r24, Y+
     b64:	81 11       	cpse	r24, r1
     b66:	fb cf       	rjmp	.-10     	; 0xb5e <lcd_print5+0x1fa>
     b68:	0d c0       	rjmp	.+26     	; 0xb84 <lcd_print5+0x220>
			//if(count < 5)
			lcd_wr_char(million);
			
			flag=1;
		}
		if(digits==4 || flag==1)
     b6a:	f4 e0       	ldi	r31, 0x04	; 4
     b6c:	cf 16       	cp	r12, r31
     b6e:	d1 04       	cpc	r13, r1
     b70:	09 f0       	breq	.+2      	; 0xb74 <lcd_print5+0x210>
     b72:	67 cf       	rjmp	.-306    	; 0xa42 <lcd_print5+0xde>
     b74:	36 cf       	rjmp	.-404    	; 0x9e2 <lcd_print5+0x7e>
			tens = temp%10 + 48;
			//if(count < 2)
			lcd_wr_char(tens);
			flag=1;
		}
		if(digits==1 || flag==1)
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	c2 16       	cp	r12, r18
     b7a:	d1 04       	cpc	r13, r1
     b7c:	d9 f6       	brne	.-74     	; 0xb34 <lcd_print5+0x1d0>
		{
			unit = value%10 + 48;
			if(count < 1)
     b7e:	c1 11       	cpse	r28, r1
     b80:	e0 cf       	rjmp	.-64     	; 0xb42 <lcd_print5+0x1de>
     b82:	bb cf       	rjmp	.-138    	; 0xafa <lcd_print5+0x196>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	08 95       	ret

00000b96 <lcd_print2>:

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	6a 01       	movw	r12, r20
     ba6:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     ba8:	88 23       	and	r24, r24
     baa:	11 f0       	breq	.+4      	; 0xbb0 <lcd_print2+0x1a>
     bac:	61 11       	cpse	r22, r1
     bae:	03 c0       	rjmp	.+6      	; 0xbb6 <lcd_print2+0x20>
	{
		lcd_home();
     bb0:	0e 94 26 04 	call	0x84c	; 0x84c <lcd_home>
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     bb6:	0e 94 39 04 	call	0x872	; 0x872 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     bba:	25 e0       	ldi	r18, 0x05	; 5
     bbc:	e2 16       	cp	r14, r18
     bbe:	f1 04       	cpc	r15, r1
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <lcd_print2+0x2e>
     bc2:	b9 c0       	rjmp	.+370    	; 0xd36 <lcd_print2+0x1a0>
	{
		million=value/10000+48;
     bc4:	96 01       	movw	r18, r12
     bc6:	32 95       	swap	r19
     bc8:	22 95       	swap	r18
     bca:	2f 70       	andi	r18, 0x0F	; 15
     bcc:	23 27       	eor	r18, r19
     bce:	3f 70       	andi	r19, 0x0F	; 15
     bd0:	23 27       	eor	r18, r19
     bd2:	a7 e4       	ldi	r26, 0x47	; 71
     bd4:	b3 e0       	ldi	r27, 0x03	; 3
     bd6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     bda:	96 95       	lsr	r25
     bdc:	87 95       	ror	r24
     bde:	96 95       	lsr	r25
     be0:	87 95       	ror	r24
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	c0 96       	adiw	r24, 0x30	; 48
		if(million != '0')
     be8:	80 33       	cpi	r24, 0x30	; 48
     bea:	91 05       	cpc	r25, r1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <lcd_print2+0x5a>
     bee:	70 c0       	rjmp	.+224    	; 0xcd0 <lcd_print2+0x13a>
		{
			lcd_wr_char(million);
     bf0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;	
     bf4:	c1 e0       	ldi	r28, 0x01	; 1
     bf6:	6d c0       	rjmp	.+218    	; 0xcd2 <lcd_print2+0x13c>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     bf8:	c1 11       	cpse	r28, r1
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <lcd_print2+0x6a>
     bfc:	a2 c0       	rjmp	.+324    	; 0xd42 <lcd_print2+0x1ac>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     bfe:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     c00:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;
     c04:	cf 5f       	subi	r28, 0xFF	; 255
     c06:	9d c0       	rjmp	.+314    	; 0xd42 <lcd_print2+0x1ac>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     c08:	33 e0       	ldi	r19, 0x03	; 3
     c0a:	e3 16       	cp	r14, r19
     c0c:	f1 04       	cpc	r15, r1
     c0e:	51 f4       	brne	.+20     	; 0xc24 <lcd_print2+0x8e>
     c10:	2f c1       	rjmp	.+606    	; 0xe70 <lcd_print2+0x2da>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     c12:	cc 23       	and	r28, r28
     c14:	09 f4       	brne	.+2      	; 0xc18 <lcd_print2+0x82>
     c16:	c1 c0       	rjmp	.+386    	; 0xd9a <lcd_print2+0x204>
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <lcd_print2+0x86>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c1a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     c1c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;
     c20:	cf 5f       	subi	r28, 0xFF	; 255
     c22:	bb c0       	rjmp	.+374    	; 0xd9a <lcd_print2+0x204>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	e8 16       	cp	r14, r24
     c28:	f1 04       	cpc	r15, r1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <lcd_print2+0x98>
     c2c:	e0 c0       	rjmp	.+448    	; 0xdee <lcd_print2+0x258>
     c2e:	4d c1       	rjmp	.+666    	; 0xeca <lcd_print2+0x334>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     c30:	cc 23       	and	r28, r28
     c32:	39 f0       	breq	.+14     	; 0xc42 <lcd_print2+0xac>
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <lcd_print2+0xa2>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c36:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     c38:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;
     c3c:	cf 5f       	subi	r28, 0xFF	; 255
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <lcd_print2+0xac>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c40:	c0 e0       	ldi	r28, 0x00	; 0
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
     c42:	96 01       	movw	r18, r12
     c44:	ad ec       	ldi	r26, 0xCD	; 205
     c46:	bc ec       	ldi	r27, 0xCC	; 204
     c48:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     c4c:	96 95       	lsr	r25
     c4e:	87 95       	ror	r24
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	9c 01       	movw	r18, r24
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	82 0f       	add	r24, r18
     c6c:	93 1f       	adc	r25, r19
     c6e:	f6 01       	movw	r30, r12
     c70:	e8 1b       	sub	r30, r24
     c72:	f9 0b       	sbc	r31, r25
     c74:	cf 01       	movw	r24, r30
     c76:	80 5d       	subi	r24, 0xD0	; 208
     c78:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
		count++;
     c7c:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     c7e:	f6 e0       	ldi	r31, 0x06	; 6
     c80:	ef 16       	cp	r14, r31
     c82:	f1 04       	cpc	r15, r1
     c84:	1c f0       	brlt	.+6      	; 0xc8c <lcd_print2+0xf6>
	{
		lcd_wr_char('E');
     c86:	85 e4       	ldi	r24, 0x45	; 69
     c88:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
	}
	
	while(*str != '\0')
     c8c:	f8 01       	movw	r30, r16
     c8e:	80 81       	ld	r24, Z
     c90:	88 23       	and	r24, r24
     c92:	09 f4       	brne	.+2      	; 0xc96 <lcd_print2+0x100>
     c94:	b3 c0       	rjmp	.+358    	; 0xdfc <lcd_print2+0x266>
     c96:	0f 5f       	subi	r16, 0xFF	; 255
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     c9a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
		count++;
     c9e:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     ca0:	ff ef       	ldi	r31, 0xFF	; 255
     ca2:	ef 1a       	sub	r14, r31
     ca4:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     ca6:	f8 01       	movw	r30, r16
     ca8:	81 91       	ld	r24, Z+
     caa:	8f 01       	movw	r16, r30
     cac:	81 11       	cpse	r24, r1
     cae:	f5 cf       	rjmp	.-22     	; 0xc9a <lcd_print2+0x104>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     cb0:	8c 2f       	mov	r24, r28
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	8e 15       	cp	r24, r14
     cb6:	9f 05       	cpc	r25, r15
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <lcd_print2+0x126>
     cba:	32 c1       	rjmp	.+612    	; 0xf20 <lcd_print2+0x38a>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     cbc:	80 e2       	ldi	r24, 0x20	; 32
     cbe:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;
     cc2:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
	{
		while(count != digits)
     cc4:	8c 2f       	mov	r24, r28
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	8e 15       	cp	r24, r14
     cca:	9f 05       	cpc	r25, r15
     ccc:	b9 f7       	brne	.-18     	; 0xcbc <lcd_print2+0x126>
     cce:	28 c1       	rjmp	.+592    	; 0xf20 <lcd_print2+0x38a>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     cd0:	c0 e0       	ldi	r28, 0x00	; 0
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
     cd2:	96 01       	movw	r18, r12
     cd4:	36 95       	lsr	r19
     cd6:	27 95       	ror	r18
     cd8:	36 95       	lsr	r19
     cda:	27 95       	ror	r18
     cdc:	36 95       	lsr	r19
     cde:	27 95       	ror	r18
     ce0:	a5 ec       	ldi	r26, 0xC5	; 197
     ce2:	b0 e2       	ldi	r27, 0x20	; 32
     ce4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     ce8:	ac 01       	movw	r20, r24
     cea:	52 95       	swap	r21
     cec:	42 95       	swap	r20
     cee:	4f 70       	andi	r20, 0x0F	; 15
     cf0:	45 27       	eor	r20, r21
     cf2:	5f 70       	andi	r21, 0x0F	; 15
     cf4:	45 27       	eor	r20, r21
     cf6:	9a 01       	movw	r18, r20
     cf8:	ad ec       	ldi	r26, 0xCD	; 205
     cfa:	bc ec       	ldi	r27, 0xCC	; 204
     cfc:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	96 95       	lsr	r25
     d06:	87 95       	ror	r24
     d08:	96 95       	lsr	r25
     d0a:	87 95       	ror	r24
     d0c:	9c 01       	movw	r18, r24
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	9a 01       	movw	r18, r20
     d24:	28 1b       	sub	r18, r24
     d26:	39 0b       	sbc	r19, r25
     d28:	c9 01       	movw	r24, r18
     d2a:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     d2c:	80 33       	cpi	r24, 0x30	; 48
     d2e:	91 05       	cpc	r25, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <lcd_print2+0x19e>
     d32:	62 cf       	rjmp	.-316    	; 0xbf8 <lcd_print2+0x62>
     d34:	65 cf       	rjmp	.-310    	; 0xc00 <lcd_print2+0x6a>
			lcd_wr_char(million);
			count++;	
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     d36:	34 e0       	ldi	r19, 0x04	; 4
     d38:	e3 16       	cp	r14, r19
     d3a:	f1 04       	cpc	r15, r1
     d3c:	09 f0       	breq	.+2      	; 0xd40 <lcd_print2+0x1aa>
     d3e:	64 cf       	rjmp	.-312    	; 0xc08 <lcd_print2+0x72>
     d40:	64 c0       	rjmp	.+200    	; 0xe0a <lcd_print2+0x274>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
     d42:	96 01       	movw	r18, r12
     d44:	36 95       	lsr	r19
     d46:	27 95       	ror	r18
     d48:	36 95       	lsr	r19
     d4a:	27 95       	ror	r18
     d4c:	ab e7       	ldi	r26, 0x7B	; 123
     d4e:	b4 e1       	ldi	r27, 0x14	; 20
     d50:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     d54:	ac 01       	movw	r20, r24
     d56:	56 95       	lsr	r21
     d58:	47 95       	ror	r20
     d5a:	9a 01       	movw	r18, r20
     d5c:	ad ec       	ldi	r26, 0xCD	; 205
     d5e:	bc ec       	ldi	r27, 0xCC	; 204
     d60:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     d64:	96 95       	lsr	r25
     d66:	87 95       	ror	r24
     d68:	96 95       	lsr	r25
     d6a:	87 95       	ror	r24
     d6c:	96 95       	lsr	r25
     d6e:	87 95       	ror	r24
     d70:	9c 01       	movw	r18, r24
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	fa 01       	movw	r30, r20
     d88:	e8 1b       	sub	r30, r24
     d8a:	f9 0b       	sbc	r31, r25
     d8c:	cf 01       	movw	r24, r30
     d8e:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
     d90:	80 33       	cpi	r24, 0x30	; 48
     d92:	91 05       	cpc	r25, r1
     d94:	09 f0       	breq	.+2      	; 0xd98 <lcd_print2+0x202>
     d96:	42 cf       	rjmp	.-380    	; 0xc1c <lcd_print2+0x86>
     d98:	3c cf       	rjmp	.-392    	; 0xc12 <lcd_print2+0x7c>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
     d9a:	96 01       	movw	r18, r12
     d9c:	ad ec       	ldi	r26, 0xCD	; 205
     d9e:	bc ec       	ldi	r27, 0xCC	; 204
     da0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     da4:	ac 01       	movw	r20, r24
     da6:	56 95       	lsr	r21
     da8:	47 95       	ror	r20
     daa:	56 95       	lsr	r21
     dac:	47 95       	ror	r20
     dae:	56 95       	lsr	r21
     db0:	47 95       	ror	r20
     db2:	9a 01       	movw	r18, r20
     db4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	9c 01       	movw	r18, r24
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19
     dda:	9a 01       	movw	r18, r20
     ddc:	28 1b       	sub	r18, r24
     dde:	39 0b       	sbc	r19, r25
     de0:	c9 01       	movw	r24, r18
     de2:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
     de4:	80 33       	cpi	r24, 0x30	; 48
     de6:	91 05       	cpc	r25, r1
     de8:	09 f0       	breq	.+2      	; 0xdec <lcd_print2+0x256>
     dea:	26 cf       	rjmp	.-436    	; 0xc38 <lcd_print2+0xa2>
     dec:	21 cf       	rjmp	.-446    	; 0xc30 <lcd_print2+0x9a>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     dee:	31 e0       	ldi	r19, 0x01	; 1
     df0:	e3 16       	cp	r14, r19
     df2:	f1 04       	cpc	r15, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <lcd_print2+0x262>
     df6:	24 cf       	rjmp	.-440    	; 0xc40 <lcd_print2+0xaa>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     df8:	c0 e0       	ldi	r28, 0x00	; 0
     dfa:	41 cf       	rjmp	.-382    	; 0xc7e <lcd_print2+0xe8>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     dfc:	8c 2f       	mov	r24, r28
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	8e 15       	cp	r24, r14
     e02:	9f 05       	cpc	r25, r15
     e04:	0c f4       	brge	.+2      	; 0xe08 <lcd_print2+0x272>
     e06:	5a cf       	rjmp	.-332    	; 0xcbc <lcd_print2+0x126>
     e08:	8b c0       	rjmp	.+278    	; 0xf20 <lcd_print2+0x38a>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
     e0a:	96 01       	movw	r18, r12
     e0c:	36 95       	lsr	r19
     e0e:	27 95       	ror	r18
     e10:	36 95       	lsr	r19
     e12:	27 95       	ror	r18
     e14:	36 95       	lsr	r19
     e16:	27 95       	ror	r18
     e18:	a5 ec       	ldi	r26, 0xC5	; 197
     e1a:	b0 e2       	ldi	r27, 0x20	; 32
     e1c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     e20:	ac 01       	movw	r20, r24
     e22:	52 95       	swap	r21
     e24:	42 95       	swap	r20
     e26:	4f 70       	andi	r20, 0x0F	; 15
     e28:	45 27       	eor	r20, r21
     e2a:	5f 70       	andi	r21, 0x0F	; 15
     e2c:	45 27       	eor	r20, r21
     e2e:	9a 01       	movw	r18, r20
     e30:	ad ec       	ldi	r26, 0xCD	; 205
     e32:	bc ec       	ldi	r27, 0xCC	; 204
     e34:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     e38:	96 95       	lsr	r25
     e3a:	87 95       	ror	r24
     e3c:	96 95       	lsr	r25
     e3e:	87 95       	ror	r24
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	9c 01       	movw	r18, r24
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	fa 01       	movw	r30, r20
     e5c:	e8 1b       	sub	r30, r24
     e5e:	f9 0b       	sbc	r31, r25
     e60:	cf 01       	movw	r24, r30
     e62:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     e64:	80 33       	cpi	r24, 0x30	; 48
     e66:	91 05       	cpc	r25, r1
     e68:	09 f0       	breq	.+2      	; 0xe6c <lcd_print2+0x2d6>
     e6a:	c9 ce       	rjmp	.-622    	; 0xbfe <lcd_print2+0x68>
     e6c:	c0 e0       	ldi	r28, 0x00	; 0
     e6e:	69 cf       	rjmp	.-302    	; 0xd42 <lcd_print2+0x1ac>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
     e70:	96 01       	movw	r18, r12
     e72:	36 95       	lsr	r19
     e74:	27 95       	ror	r18
     e76:	36 95       	lsr	r19
     e78:	27 95       	ror	r18
     e7a:	ab e7       	ldi	r26, 0x7B	; 123
     e7c:	b4 e1       	ldi	r27, 0x14	; 20
     e7e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     e82:	ac 01       	movw	r20, r24
     e84:	56 95       	lsr	r21
     e86:	47 95       	ror	r20
     e88:	9a 01       	movw	r18, r20
     e8a:	ad ec       	ldi	r26, 0xCD	; 205
     e8c:	bc ec       	ldi	r27, 0xCC	; 204
     e8e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     e92:	96 95       	lsr	r25
     e94:	87 95       	ror	r24
     e96:	96 95       	lsr	r25
     e98:	87 95       	ror	r24
     e9a:	96 95       	lsr	r25
     e9c:	87 95       	ror	r24
     e9e:	9c 01       	movw	r18, r24
     ea0:	22 0f       	add	r18, r18
     ea2:	33 1f       	adc	r19, r19
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	82 0f       	add	r24, r18
     eb2:	93 1f       	adc	r25, r19
     eb4:	9a 01       	movw	r18, r20
     eb6:	28 1b       	sub	r18, r24
     eb8:	39 0b       	sbc	r19, r25
     eba:	c9 01       	movw	r24, r18
     ebc:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
     ebe:	80 33       	cpi	r24, 0x30	; 48
     ec0:	91 05       	cpc	r25, r1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <lcd_print2+0x330>
     ec4:	aa ce       	rjmp	.-684    	; 0xc1a <lcd_print2+0x84>
     ec6:	c0 e0       	ldi	r28, 0x00	; 0
     ec8:	68 cf       	rjmp	.-304    	; 0xd9a <lcd_print2+0x204>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
     eca:	96 01       	movw	r18, r12
     ecc:	ad ec       	ldi	r26, 0xCD	; 205
     ece:	bc ec       	ldi	r27, 0xCC	; 204
     ed0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     ed4:	ac 01       	movw	r20, r24
     ed6:	56 95       	lsr	r21
     ed8:	47 95       	ror	r20
     eda:	56 95       	lsr	r21
     edc:	47 95       	ror	r20
     ede:	56 95       	lsr	r21
     ee0:	47 95       	ror	r20
     ee2:	9a 01       	movw	r18, r20
     ee4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     ee8:	96 95       	lsr	r25
     eea:	87 95       	ror	r24
     eec:	96 95       	lsr	r25
     eee:	87 95       	ror	r24
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	9c 01       	movw	r18, r24
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	82 0f       	add	r24, r18
     f08:	93 1f       	adc	r25, r19
     f0a:	fa 01       	movw	r30, r20
     f0c:	e8 1b       	sub	r30, r24
     f0e:	f9 0b       	sbc	r31, r25
     f10:	cf 01       	movw	r24, r30
     f12:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
     f14:	80 33       	cpi	r24, 0x30	; 48
     f16:	91 05       	cpc	r25, r1
     f18:	09 f0       	breq	.+2      	; 0xf1c <lcd_print2+0x386>
     f1a:	8d ce       	rjmp	.-742    	; 0xc36 <lcd_print2+0xa0>
     f1c:	c0 e0       	ldi	r28, 0x00	; 0
     f1e:	91 ce       	rjmp	.-734    	; 0xc42 <lcd_print2+0xac>
		{
			lcd_wr_char(32);
			count++;
		}	
	}
}
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	08 95       	ret

00000f30 <lcd_print3>:

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	8a 01       	movw	r16, r20
     f3c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     f3e:	88 23       	and	r24, r24
     f40:	11 f0       	breq	.+4      	; 0xf46 <lcd_print3+0x16>
     f42:	61 11       	cpse	r22, r1
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <lcd_print3+0x1c>
	{
		lcd_home();
     f46:	0e 94 26 04 	call	0x84c	; 0x84c <lcd_home>
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <lcd_print3+0x20>
	}
	else
	{
		lcd_cursor(row,coloumn);
     f4c:	0e 94 39 04 	call	0x872	; 0x872 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     f50:	c5 30       	cpi	r28, 0x05	; 5
     f52:	d1 05       	cpc	r29, r1
     f54:	09 f0       	breq	.+2      	; 0xf58 <lcd_print3+0x28>
     f56:	8f c0       	rjmp	.+286    	; 0x1076 <lcd_print3+0x146>
	{
		million=value/10000+48;
     f58:	98 01       	movw	r18, r16
     f5a:	32 95       	swap	r19
     f5c:	22 95       	swap	r18
     f5e:	2f 70       	andi	r18, 0x0F	; 15
     f60:	23 27       	eor	r18, r19
     f62:	3f 70       	andi	r19, 0x0F	; 15
     f64:	23 27       	eor	r18, r19
     f66:	a7 e4       	ldi	r26, 0x47	; 71
     f68:	b3 e0       	ldi	r27, 0x03	; 3
     f6a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	96 95       	lsr	r25
     f78:	87 95       	ror	r24
     f7a:	c0 96       	adiw	r24, 0x30	; 48
		if(million != '0')
     f7c:	80 33       	cpi	r24, 0x30	; 48
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <lcd_print3+0x54>
     f82:	46 c0       	rjmp	.+140    	; 0x1010 <lcd_print3+0xe0>
		{
			lcd_wr_char(million);
     f84:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;
     f88:	ff 24       	eor	r15, r15
     f8a:	f3 94       	inc	r15
     f8c:	42 c0       	rjmp	.+132    	; 0x1012 <lcd_print3+0xe2>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     f8e:	f1 10       	cpse	r15, r1
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <lcd_print3+0x66>
     f92:	76 c0       	rjmp	.+236    	; 0x1080 <lcd_print3+0x150>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     f94:	f1 2c       	mov	r15, r1
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     f96:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;
     f9a:	f3 94       	inc	r15
     f9c:	71 c0       	rjmp	.+226    	; 0x1080 <lcd_print3+0x150>
		}
		flag=1;
	}
	
	if(digits==3 || flag==1)
     f9e:	c3 30       	cpi	r28, 0x03	; 3
     fa0:	d1 05       	cpc	r29, r1
     fa2:	51 f4       	brne	.+20     	; 0xfb8 <lcd_print3+0x88>
     fa4:	fb c0       	rjmp	.+502    	; 0x119c <lcd_print3+0x26c>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     fa6:	ff 20       	and	r15, r15
     fa8:	09 f4       	brne	.+2      	; 0xfac <lcd_print3+0x7c>
     faa:	96 c0       	rjmp	.+300    	; 0x10d8 <lcd_print3+0x1a8>
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <lcd_print3+0x80>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     fae:	f1 2c       	mov	r15, r1
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     fb0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
			count++;
     fb4:	f3 94       	inc	r15
     fb6:	90 c0       	rjmp	.+288    	; 0x10d8 <lcd_print3+0x1a8>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     fb8:	c2 30       	cpi	r28, 0x02	; 2
     fba:	d1 05       	cpc	r29, r1
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <lcd_print3+0x90>
     fbe:	b6 c0       	rjmp	.+364    	; 0x112c <lcd_print3+0x1fc>
     fc0:	fe c0       	rjmp	.+508    	; 0x11be <lcd_print3+0x28e>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     fc2:	f1 10       	cpse	r15, r1
		{
			lcd_wr_char(tens);
     fc4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
     fc8:	98 01       	movw	r18, r16
     fca:	ad ec       	ldi	r26, 0xCD	; 205
     fcc:	bc ec       	ldi	r27, 0xCC	; 204
     fce:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
     fd2:	96 95       	lsr	r25
     fd4:	87 95       	ror	r24
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	9c 01       	movw	r18, r24
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	82 0f       	add	r24, r18
     ff2:	93 1f       	adc	r25, r19
     ff4:	98 01       	movw	r18, r16
     ff6:	28 1b       	sub	r18, r24
     ff8:	39 0b       	sbc	r19, r25
     ffa:	c9 01       	movw	r24, r18
     ffc:	80 5d       	subi	r24, 0xD0	; 208
     ffe:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
		count++;
	}
	if(digits>5)
    1002:	26 97       	sbiw	r28, 0x06	; 6
    1004:	0c f4       	brge	.+2      	; 0x1008 <lcd_print3+0xd8>
    1006:	eb c0       	rjmp	.+470    	; 0x11de <lcd_print3+0x2ae>
	{
		lcd_wr_char('E');
    1008:	85 e4       	ldi	r24, 0x45	; 69
    100a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <lcd_wr_char>
	}
}
    100e:	e7 c0       	rjmp	.+462    	; 0x11de <lcd_print3+0x2ae>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
    1010:	f1 2c       	mov	r15, r1
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
    1012:	98 01       	movw	r18, r16
    1014:	36 95       	lsr	r19
    1016:	27 95       	ror	r18
    1018:	36 95       	lsr	r19
    101a:	27 95       	ror	r18
    101c:	36 95       	lsr	r19
    101e:	27 95       	ror	r18
    1020:	a5 ec       	ldi	r26, 0xC5	; 197
    1022:	b0 e2       	ldi	r27, 0x20	; 32
    1024:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    1028:	ac 01       	movw	r20, r24
    102a:	52 95       	swap	r21
    102c:	42 95       	swap	r20
    102e:	4f 70       	andi	r20, 0x0F	; 15
    1030:	45 27       	eor	r20, r21
    1032:	5f 70       	andi	r21, 0x0F	; 15
    1034:	45 27       	eor	r20, r21
    1036:	9a 01       	movw	r18, r20
    1038:	ad ec       	ldi	r26, 0xCD	; 205
    103a:	bc ec       	ldi	r27, 0xCC	; 204
    103c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	96 95       	lsr	r25
    104a:	87 95       	ror	r24
    104c:	9c 01       	movw	r18, r24
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	82 0f       	add	r24, r18
    1060:	93 1f       	adc	r25, r19
    1062:	9a 01       	movw	r18, r20
    1064:	28 1b       	sub	r18, r24
    1066:	39 0b       	sbc	r19, r25
    1068:	c9 01       	movw	r24, r18
    106a:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    106c:	80 33       	cpi	r24, 0x30	; 48
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <lcd_print3+0x144>
    1072:	8d cf       	rjmp	.-230    	; 0xf8e <lcd_print3+0x5e>
    1074:	90 cf       	rjmp	.-224    	; 0xf96 <lcd_print3+0x66>
			lcd_wr_char(million);
			count++;
		}
		flag=1;
	}
	if(digits==4 || flag==1)
    1076:	c4 30       	cpi	r28, 0x04	; 4
    1078:	d1 05       	cpc	r29, r1
    107a:	09 f0       	breq	.+2      	; 0x107e <lcd_print3+0x14e>
    107c:	90 cf       	rjmp	.-224    	; 0xf9e <lcd_print3+0x6e>
    107e:	5b c0       	rjmp	.+182    	; 0x1136 <lcd_print3+0x206>
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
    1080:	98 01       	movw	r18, r16
    1082:	36 95       	lsr	r19
    1084:	27 95       	ror	r18
    1086:	36 95       	lsr	r19
    1088:	27 95       	ror	r18
    108a:	ab e7       	ldi	r26, 0x7B	; 123
    108c:	b4 e1       	ldi	r27, 0x14	; 20
    108e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    1092:	ac 01       	movw	r20, r24
    1094:	56 95       	lsr	r21
    1096:	47 95       	ror	r20
    1098:	9a 01       	movw	r18, r20
    109a:	ad ec       	ldi	r26, 0xCD	; 205
    109c:	bc ec       	ldi	r27, 0xCC	; 204
    109e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    10a2:	96 95       	lsr	r25
    10a4:	87 95       	ror	r24
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	9c 01       	movw	r18, r24
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	82 0f       	add	r24, r18
    10c2:	93 1f       	adc	r25, r19
    10c4:	9a 01       	movw	r18, r20
    10c6:	28 1b       	sub	r18, r24
    10c8:	39 0b       	sbc	r19, r25
    10ca:	c9 01       	movw	r24, r18
    10cc:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
    10ce:	80 33       	cpi	r24, 0x30	; 48
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <lcd_print3+0x1a6>
    10d4:	6d cf       	rjmp	.-294    	; 0xfb0 <lcd_print3+0x80>
    10d6:	67 cf       	rjmp	.-306    	; 0xfa6 <lcd_print3+0x76>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
    10d8:	98 01       	movw	r18, r16
    10da:	ad ec       	ldi	r26, 0xCD	; 205
    10dc:	bc ec       	ldi	r27, 0xCC	; 204
    10de:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    10e2:	ac 01       	movw	r20, r24
    10e4:	56 95       	lsr	r21
    10e6:	47 95       	ror	r20
    10e8:	56 95       	lsr	r21
    10ea:	47 95       	ror	r20
    10ec:	56 95       	lsr	r21
    10ee:	47 95       	ror	r20
    10f0:	9a 01       	movw	r18, r20
    10f2:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    10f6:	96 95       	lsr	r25
    10f8:	87 95       	ror	r24
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	9c 01       	movw	r18, r24
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	9a 01       	movw	r18, r20
    111a:	28 1b       	sub	r18, r24
    111c:	39 0b       	sbc	r19, r25
    111e:	c9 01       	movw	r24, r18
    1120:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
    1122:	80 33       	cpi	r24, 0x30	; 48
    1124:	91 05       	cpc	r25, r1
    1126:	09 f0       	breq	.+2      	; 0x112a <lcd_print3+0x1fa>
    1128:	4d cf       	rjmp	.-358    	; 0xfc4 <lcd_print3+0x94>
    112a:	4b cf       	rjmp	.-362    	; 0xfc2 <lcd_print3+0x92>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
    112c:	c1 30       	cpi	r28, 0x01	; 1
    112e:	d1 05       	cpc	r29, r1
    1130:	09 f0       	breq	.+2      	; 0x1134 <lcd_print3+0x204>
    1132:	67 cf       	rjmp	.-306    	; 0x1002 <lcd_print3+0xd2>
    1134:	49 cf       	rjmp	.-366    	; 0xfc8 <lcd_print3+0x98>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
    1136:	98 01       	movw	r18, r16
    1138:	36 95       	lsr	r19
    113a:	27 95       	ror	r18
    113c:	36 95       	lsr	r19
    113e:	27 95       	ror	r18
    1140:	36 95       	lsr	r19
    1142:	27 95       	ror	r18
    1144:	a5 ec       	ldi	r26, 0xC5	; 197
    1146:	b0 e2       	ldi	r27, 0x20	; 32
    1148:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    114c:	ac 01       	movw	r20, r24
    114e:	52 95       	swap	r21
    1150:	42 95       	swap	r20
    1152:	4f 70       	andi	r20, 0x0F	; 15
    1154:	45 27       	eor	r20, r21
    1156:	5f 70       	andi	r21, 0x0F	; 15
    1158:	45 27       	eor	r20, r21
    115a:	9a 01       	movw	r18, r20
    115c:	ad ec       	ldi	r26, 0xCD	; 205
    115e:	bc ec       	ldi	r27, 0xCC	; 204
    1160:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	9c 01       	movw	r18, r24
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	9a 01       	movw	r18, r20
    1188:	28 1b       	sub	r18, r24
    118a:	39 0b       	sbc	r19, r25
    118c:	c9 01       	movw	r24, r18
    118e:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    1190:	80 33       	cpi	r24, 0x30	; 48
    1192:	91 05       	cpc	r25, r1
    1194:	09 f0       	breq	.+2      	; 0x1198 <lcd_print3+0x268>
    1196:	fe ce       	rjmp	.-516    	; 0xf94 <lcd_print3+0x64>
    1198:	f1 2c       	mov	r15, r1
    119a:	72 cf       	rjmp	.-284    	; 0x1080 <lcd_print3+0x150>
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
    119c:	c8 01       	movw	r24, r16
    119e:	64 e6       	ldi	r22, 0x64	; 100
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	0e 94 99 0c 	call	0x1932	; 0x1932 <__udivmodhi4>
    11a6:	cb 01       	movw	r24, r22
    11a8:	6a e0       	ldi	r22, 0x0A	; 10
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	0e 94 99 0c 	call	0x1932	; 0x1932 <__udivmodhi4>
    11b0:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
    11b2:	80 33       	cpi	r24, 0x30	; 48
    11b4:	91 05       	cpc	r25, r1
    11b6:	09 f0       	breq	.+2      	; 0x11ba <lcd_print3+0x28a>
    11b8:	fa ce       	rjmp	.-524    	; 0xfae <lcd_print3+0x7e>
    11ba:	f1 2c       	mov	r15, r1
    11bc:	8d cf       	rjmp	.-230    	; 0x10d8 <lcd_print3+0x1a8>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
    11be:	2a e0       	ldi	r18, 0x0A	; 10
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	c8 01       	movw	r24, r16
    11c4:	b9 01       	movw	r22, r18
    11c6:	0e 94 99 0c 	call	0x1932	; 0x1932 <__udivmodhi4>
    11ca:	cb 01       	movw	r24, r22
    11cc:	b9 01       	movw	r22, r18
    11ce:	0e 94 99 0c 	call	0x1932	; 0x1932 <__udivmodhi4>
    11d2:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	91 05       	cpc	r25, r1
    11d8:	09 f0       	breq	.+2      	; 0x11dc <lcd_print3+0x2ac>
    11da:	f4 ce       	rjmp	.-536    	; 0xfc4 <lcd_print3+0x94>
    11dc:	f5 ce       	rjmp	.-534    	; 0xfc8 <lcd_print3+0x98>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	08 95       	ret

000011ea <lcd_print4>:

//27.345A //27mA ...
void lcd_print4(char row, char col, float value, char* str1, char* str2)
{
    11ea:	8f 92       	push	r8
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	d8 2f       	mov	r29, r24
    1200:	c6 2f       	mov	r28, r22
    1202:	49 01       	movw	r8, r18
    1204:	5a 01       	movw	r10, r20
	//Print in mA, mW, mW etc
	if (value<1000)
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	4a e7       	ldi	r20, 0x7A	; 122
    120c:	54 e4       	ldi	r21, 0x44	; 68
    120e:	c5 01       	movw	r24, r10
    1210:	b4 01       	movw	r22, r8
    1212:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__cmpsf2>
    1216:	88 23       	and	r24, r24
    1218:	64 f4       	brge	.+24     	; 0x1232 <lcd_print4+0x48>
	{
		lcd_print2(row,col,value,4, str1);
    121a:	c5 01       	movw	r24, r10
    121c:	b4 01       	movw	r22, r8
    121e:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    1222:	24 e0       	ldi	r18, 0x04	; 4
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	ab 01       	movw	r20, r22
    1228:	6c 2f       	mov	r22, r28
    122a:	8d 2f       	mov	r24, r29
    122c:	0e 94 cb 05 	call	0xb96	; 0xb96 <lcd_print2>
    1230:	7b c0       	rjmp	.+246    	; 0x1328 <lcd_print4+0x13e>
		}	
		*/
	}
	
	//Print in A, V, W etc and clear the space after(incase previous was >=10000)
	else if (value>=1000 && value < 10000)
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a e7       	ldi	r20, 0x7A	; 122
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	c5 01       	movw	r24, r10
    123c:	b4 01       	movw	r22, r8
    123e:	0e 94 27 0c 	call	0x184e	; 0x184e <__gesf2>
    1242:	88 23       	and	r24, r24
    1244:	cc f1       	brlt	.+114    	; 0x12b8 <lcd_print4+0xce>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e4       	ldi	r19, 0x40	; 64
    124a:	4c e1       	ldi	r20, 0x1C	; 28
    124c:	56 e4       	ldi	r21, 0x46	; 70
    124e:	c5 01       	movw	r24, r10
    1250:	b4 01       	movw	r22, r8
    1252:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__cmpsf2>
    1256:	88 23       	and	r24, r24
    1258:	7c f5       	brge	.+94     	; 0x12b8 <lcd_print4+0xce>
	{
		lcd_print3(row, col, value/1000, 1);
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a e7       	ldi	r20, 0x7A	; 122
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	c5 01       	movw	r24, r10
    1264:	b4 01       	movw	r22, r8
    1266:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
    126a:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	ab 01       	movw	r20, r22
    1274:	6c 2f       	mov	r22, r28
    1276:	8d 2f       	mov	r24, r29
    1278:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_print3>
		lcd_string2(row, col+1, ".");				//Print the decimal point
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	6c 0f       	add	r22, r28
    1280:	41 e2       	ldi	r20, 0x21	; 33
    1282:	51 e0       	ldi	r21, 0x01	; 1
    1284:	8d 2f       	mov	r24, r29
    1286:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
		
		lcd_print5(row, col+2, (int)value%1000, 3, str2);		
    128a:	c5 01       	movw	r24, r10
    128c:	b4 01       	movw	r22, r8
    128e:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fixsfsi>
    1292:	cb 01       	movw	r24, r22
    1294:	68 ee       	ldi	r22, 0xE8	; 232
    1296:	73 e0       	ldi	r23, 0x03	; 3
    1298:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divmodhi4>
    129c:	62 e0       	ldi	r22, 0x02	; 2
    129e:	6c 0f       	add	r22, r28
    12a0:	87 01       	movw	r16, r14
    12a2:	23 e0       	ldi	r18, 0x03	; 3
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	ac 01       	movw	r20, r24
    12a8:	8d 2f       	mov	r24, r29
    12aa:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_print5>
		/*							//Print A, V etc
		lcd_print(row, col+2, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		
		lcd_string("  ");
    12ae:	83 e2       	ldi	r24, 0x23	; 35
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 2a 04 	call	0x854	; 0x854 <lcd_string>
    12b6:	38 c0       	rjmp	.+112    	; 0x1328 <lcd_print4+0x13e>
	}
	
	//Print in A, V, W etc
	else if (value>=10000)
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e4       	ldi	r19, 0x40	; 64
    12bc:	4c e1       	ldi	r20, 0x1C	; 28
    12be:	56 e4       	ldi	r21, 0x46	; 70
    12c0:	c5 01       	movw	r24, r10
    12c2:	b4 01       	movw	r22, r8
    12c4:	0e 94 27 0c 	call	0x184e	; 0x184e <__gesf2>
    12c8:	88 23       	and	r24, r24
    12ca:	74 f1       	brlt	.+92     	; 0x1328 <lcd_print4+0x13e>
	{
		lcd_print3(row, col, value/1000, 2);
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4a e7       	ldi	r20, 0x7A	; 122
    12d2:	54 e4       	ldi	r21, 0x44	; 68
    12d4:	c5 01       	movw	r24, r10
    12d6:	b4 01       	movw	r22, r8
    12d8:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
    12dc:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    12e0:	22 e0       	ldi	r18, 0x02	; 2
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	ab 01       	movw	r20, r22
    12e6:	6c 2f       	mov	r22, r28
    12e8:	8d 2f       	mov	r24, r29
    12ea:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_print3>
		lcd_string2(row, col+2, ".");				//Print the decimal point
    12ee:	62 e0       	ldi	r22, 0x02	; 2
    12f0:	6c 0f       	add	r22, r28
    12f2:	41 e2       	ldi	r20, 0x21	; 33
    12f4:	51 e0       	ldi	r21, 0x01	; 1
    12f6:	8d 2f       	mov	r24, r29
    12f8:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
		
		lcd_print5(row, col+3, (int)value%1000, 3, str2);
    12fc:	c5 01       	movw	r24, r10
    12fe:	b4 01       	movw	r22, r8
    1300:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fixsfsi>
    1304:	cb 01       	movw	r24, r22
    1306:	68 ee       	ldi	r22, 0xE8	; 232
    1308:	73 e0       	ldi	r23, 0x03	; 3
    130a:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divmodhi4>
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	6c 0f       	add	r22, r28
    1312:	87 01       	movw	r16, r14
    1314:	23 e0       	ldi	r18, 0x03	; 3
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	ac 01       	movw	r20, r24
    131a:	8d 2f       	mov	r24, r29
    131c:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_print5>
		
		/*					
		lcd_print(row, col+3, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		lcd_string(" ");
    1320:	84 e2       	ldi	r24, 0x24	; 36
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 2a 04 	call	0x854	; 0x854 <lcd_string>
	}	
} 
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	9f 90       	pop	r9
    133a:	8f 90       	pop	r8
    133c:	08 95       	ret

0000133e <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
    133e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <lcd_port_config>
	adc_pin_config();
    1342:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
    1346:	08 95       	ret

00001348 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
    1348:	f8 94       	cli
	lcd_start();
    134a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <lcd_start>
	adc_config();
    134e:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
    1352:	78 94       	sei
    1354:	08 95       	ret

00001356 <main>:
}

int main(void)
{
	port_config();
    1356:	0e 94 9f 09 	call	0x133e	; 0x133e <port_config>
	init_devices();
    135a:	0e 94 a4 09 	call	0x1348	; 0x1348 <init_devices>
		
	lcd_string2(1, 7, "CCL");
    135e:	46 e2       	ldi	r20, 0x26	; 38
    1360:	51 e0       	ldi	r21, 0x01	; 1
    1362:	67 e0       	ldi	r22, 0x07	; 7
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
    136a:	2f ef       	ldi	r18, 0xFF	; 255
    136c:	85 ea       	ldi	r24, 0xA5	; 165
    136e:	9e e0       	ldi	r25, 0x0E	; 14
    1370:	21 50       	subi	r18, 0x01	; 1
    1372:	80 40       	sbci	r24, 0x00	; 0
    1374:	90 40       	sbci	r25, 0x00	; 0
    1376:	e1 f7       	brne	.-8      	; 0x1370 <main+0x1a>
    1378:	00 c0       	rjmp	.+0      	; 0x137a <main+0x24>
    137a:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)	//Check if external 12v is connected
    137c:	1d 9b       	sbis	0x03, 5	; 3
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <main+0x50>
	{
		extern float offset;
		lcd_string2(2,1,"Supply Connected");
    1380:	4a e2       	ldi	r20, 0x2A	; 42
    1382:	51 e0       	ldi	r21, 0x01	; 1
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
		offset = 4;
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a0 e8       	ldi	r26, 0x80	; 128
    1392:	b0 e4       	ldi	r27, 0x40	; 64
    1394:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <offset>
    1398:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <offset+0x1>
    139c:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <offset+0x2>
    13a0:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <offset+0x3>
    13a4:	12 c0       	rjmp	.+36     	; 0x13ca <main+0x74>
	}
	
	else				//Check if external 12v is NOT connected
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
    13a6:	4b e3       	ldi	r20, 0x3B	; 59
    13a8:	51 e0       	ldi	r21, 0x01	; 1
    13aa:	62 e0       	ldi	r22, 0x02	; 2
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
		offset = 31.2;
    13b2:	8a e9       	ldi	r24, 0x9A	; 154
    13b4:	99 e9       	ldi	r25, 0x99	; 153
    13b6:	a9 ef       	ldi	r26, 0xF9	; 249
    13b8:	b1 e4       	ldi	r27, 0x41	; 65
    13ba:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <offset>
    13be:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <offset+0x1>
    13c2:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <offset+0x2>
    13c6:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <offset+0x3>
    13ca:	2f ef       	ldi	r18, 0xFF	; 255
    13cc:	8b e4       	ldi	r24, 0x4B	; 75
    13ce:	9d e1       	ldi	r25, 0x1D	; 29
    13d0:	21 50       	subi	r18, 0x01	; 1
    13d2:	80 40       	sbci	r24, 0x00	; 0
    13d4:	90 40       	sbci	r25, 0x00	; 0
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <main+0x7a>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <main+0x84>
    13da:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
    13dc:	0e 94 ae 04 	call	0x95c	; 0x95c <lcd_clear>
		1 for power 
		2 for voltage 		
		3 for current
		4 for error
		*/
		char flag = 0;						
    13e0:	10 e0       	ldi	r17, 0x00	; 0
					print_current(1,1);
					if(flag == 3)
					break;
					
					lcd_string2(2, 1, "Current Exceeded");
					flag = 3;
    13e2:	d3 e0       	ldi	r29, 0x03	; 3
				default:
					if(flag)
					break;
				
					lcd_string2(1, 6, "Error");
					flag = 4;
    13e4:	04 e0       	ldi	r16, 0x04	; 4
	_delay_ms(600);
	lcd_clear();
	
	while (1)
	{
		update_current();
    13e6:	0e 94 0c 01 	call	0x218	; 0x218 <update_current>
		update_voltage();
    13ea:	0e 94 34 01 	call	0x268	; 0x268 <update_voltage>
		update_power();
    13ee:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_power>
		update_gate_voltage();
    13f2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <update_gate_voltage>
	
	if(check_thresholds()==0)		//If under safe limits print everything
    13f6:	0e 94 ae 02 	call	0x55c	; 0x55c <check_thresholds>
    13fa:	81 11       	cpse	r24, r1
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <main+0xc6>
	//if(1)	
	{	
		print_current(1,1);
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	0e 94 1b 02 	call	0x436	; 0x436 <print_current>
		print_voltage(1,10);
    1406:	6a e0       	ldi	r22, 0x0A	; 10
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 36 02 	call	0x46c	; 0x46c <print_voltage>
		print_power(2,1);
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_power>
		//print_gate_voltage(2,10);
		//print_mos_power(2,10);
		
		print_fan_status();
    1416:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <print_fan_status>
    141a:	e5 cf       	rjmp	.-54     	; 0x13e6 <main+0x90>
	}
	else							//If over safe limits print what is exceeded and show its value
	{		
		lcd_clear();
    141c:	0e 94 ae 04 	call	0x95c	; 0x95c <lcd_clear>
		1 for power 
		2 for voltage 		
		3 for current
		4 for error
		*/
		char flag = 0;						
    1420:	c1 2f       	mov	r28, r17
		
		while(check_thresholds())	//Stay here until over safe limits 
    1422:	42 c0       	rjmp	.+132    	; 0x14a8 <main+0x152>
		{	
			update_current();
    1424:	0e 94 0c 01 	call	0x218	; 0x218 <update_current>
			update_voltage();
    1428:	0e 94 34 01 	call	0x268	; 0x268 <update_voltage>
			update_power();
    142c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_power>
			update_gate_voltage();
    1430:	0e 94 e6 01 	call	0x3cc	; 0x3cc <update_gate_voltage>
			
			switch (check_thresholds())	//Switch according to what limit is exceeded
    1434:	0e 94 ae 02 	call	0x55c	; 0x55c <check_thresholds>
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	89 f0       	breq	.+34     	; 0x145e <main+0x108>
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	e9 f0       	breq	.+58     	; 0x147a <main+0x124>
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	49 f5       	brne	.+82     	; 0x1496 <main+0x140>
			{
				case 1:				//Power exceeds threshold
					print_power(1,1);					
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_power>
					if(flag == 1)		//To print what is exceeded only once
    144a:	c1 30       	cpi	r28, 0x01	; 1
    144c:	69 f1       	breq	.+90     	; 0x14a8 <main+0x152>
					break;
						
					lcd_string2(2, 1, "Power Exceeded");
    144e:	49 e4       	ldi	r20, 0x49	; 73
    1450:	51 e0       	ldi	r21, 0x01	; 1
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
					flag = 1;		//What is exceeded is printed once
    145a:	c1 e0       	ldi	r28, 0x01	; 1
					break;
    145c:	25 c0       	rjmp	.+74     	; 0x14a8 <main+0x152>
			
				case 2:	//Voltage exceeds threshold
					print_voltage(1,1);
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	0e 94 36 02 	call	0x46c	; 0x46c <print_voltage>
					if(flag == 2)
    1466:	c2 30       	cpi	r28, 0x02	; 2
    1468:	f9 f0       	breq	.+62     	; 0x14a8 <main+0x152>
					break;
					
					lcd_string2(2, 1, "Voltage Exceeded");
    146a:	48 e5       	ldi	r20, 0x58	; 88
    146c:	51 e0       	ldi	r21, 0x01	; 1
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
					flag = 2;
    1476:	c2 e0       	ldi	r28, 0x02	; 2
					break;
    1478:	17 c0       	rjmp	.+46     	; 0x14a8 <main+0x152>
			 
				case 3:	//Current exceeds threshold
					print_current(1,1);
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	0e 94 1b 02 	call	0x436	; 0x436 <print_current>
					if(flag == 3)
    1482:	c3 30       	cpi	r28, 0x03	; 3
    1484:	89 f0       	breq	.+34     	; 0x14a8 <main+0x152>
					break;
					
					lcd_string2(2, 1, "Current Exceeded");
    1486:	49 e6       	ldi	r20, 0x69	; 105
    1488:	51 e0       	ldi	r21, 0x01	; 1
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
					flag = 3;
    1492:	cd 2f       	mov	r28, r29
					break;
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <main+0x152>
			
				default:
					if(flag)
    1496:	c1 11       	cpse	r28, r1
    1498:	07 c0       	rjmp	.+14     	; 0x14a8 <main+0x152>
					break;
				
					lcd_string2(1, 6, "Error");
    149a:	4a e7       	ldi	r20, 0x7A	; 122
    149c:	51 e0       	ldi	r21, 0x01	; 1
    149e:	66 e0       	ldi	r22, 0x06	; 6
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	0e 94 48 04 	call	0x890	; 0x890 <lcd_string2>
					flag = 4;
    14a6:	c0 2f       	mov	r28, r16
		3 for current
		4 for error
		*/
		char flag = 0;						
		
		while(check_thresholds())	//Stay here until over safe limits 
    14a8:	0e 94 ae 02 	call	0x55c	; 0x55c <check_thresholds>
    14ac:	81 11       	cpse	r24, r1
    14ae:	ba cf       	rjmp	.-140    	; 0x1424 <main+0xce>
					lcd_string2(1, 6, "Error");
					flag = 4;
					break;
			}
		}
		lcd_clear();
    14b0:	0e 94 ae 04 	call	0x95c	; 0x95c <lcd_clear>
    14b4:	98 cf       	rjmp	.-208    	; 0x13e6 <main+0x90>

000014b6 <__subsf3>:
    14b6:	50 58       	subi	r21, 0x80	; 128

000014b8 <__addsf3>:
    14b8:	bb 27       	eor	r27, r27
    14ba:	aa 27       	eor	r26, r26
    14bc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__addsf3x>
    14c0:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_round>
    14c4:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_pscA>
    14c8:	38 f0       	brcs	.+14     	; 0x14d8 <__addsf3+0x20>
    14ca:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_pscB>
    14ce:	20 f0       	brcs	.+8      	; 0x14d8 <__addsf3+0x20>
    14d0:	39 f4       	brne	.+14     	; 0x14e0 <__addsf3+0x28>
    14d2:	9f 3f       	cpi	r25, 0xFF	; 255
    14d4:	19 f4       	brne	.+6      	; 0x14dc <__addsf3+0x24>
    14d6:	26 f4       	brtc	.+8      	; 0x14e0 <__addsf3+0x28>
    14d8:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_nan>
    14dc:	0e f4       	brtc	.+2      	; 0x14e0 <__addsf3+0x28>
    14de:	e0 95       	com	r30
    14e0:	e7 fb       	bst	r30, 7
    14e2:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_inf>

000014e6 <__addsf3x>:
    14e6:	e9 2f       	mov	r30, r25
    14e8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_split3>
    14ec:	58 f3       	brcs	.-42     	; 0x14c4 <__addsf3+0xc>
    14ee:	ba 17       	cp	r27, r26
    14f0:	62 07       	cpc	r22, r18
    14f2:	73 07       	cpc	r23, r19
    14f4:	84 07       	cpc	r24, r20
    14f6:	95 07       	cpc	r25, r21
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <__addsf3x+0x1c>
    14fa:	79 f4       	brne	.+30     	; 0x151a <__addsf3x+0x34>
    14fc:	a6 f5       	brtc	.+104    	; 0x1566 <__addsf3x+0x80>
    14fe:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_zero>
    1502:	0e f4       	brtc	.+2      	; 0x1506 <__addsf3x+0x20>
    1504:	e0 95       	com	r30
    1506:	0b 2e       	mov	r0, r27
    1508:	ba 2f       	mov	r27, r26
    150a:	a0 2d       	mov	r26, r0
    150c:	0b 01       	movw	r0, r22
    150e:	b9 01       	movw	r22, r18
    1510:	90 01       	movw	r18, r0
    1512:	0c 01       	movw	r0, r24
    1514:	ca 01       	movw	r24, r20
    1516:	a0 01       	movw	r20, r0
    1518:	11 24       	eor	r1, r1
    151a:	ff 27       	eor	r31, r31
    151c:	59 1b       	sub	r21, r25
    151e:	99 f0       	breq	.+38     	; 0x1546 <__addsf3x+0x60>
    1520:	59 3f       	cpi	r21, 0xF9	; 249
    1522:	50 f4       	brcc	.+20     	; 0x1538 <__addsf3x+0x52>
    1524:	50 3e       	cpi	r21, 0xE0	; 224
    1526:	68 f1       	brcs	.+90     	; 0x1582 <__addsf3x+0x9c>
    1528:	1a 16       	cp	r1, r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	a2 2f       	mov	r26, r18
    152e:	23 2f       	mov	r18, r19
    1530:	34 2f       	mov	r19, r20
    1532:	44 27       	eor	r20, r20
    1534:	58 5f       	subi	r21, 0xF8	; 248
    1536:	f3 cf       	rjmp	.-26     	; 0x151e <__addsf3x+0x38>
    1538:	46 95       	lsr	r20
    153a:	37 95       	ror	r19
    153c:	27 95       	ror	r18
    153e:	a7 95       	ror	r26
    1540:	f0 40       	sbci	r31, 0x00	; 0
    1542:	53 95       	inc	r21
    1544:	c9 f7       	brne	.-14     	; 0x1538 <__addsf3x+0x52>
    1546:	7e f4       	brtc	.+30     	; 0x1566 <__addsf3x+0x80>
    1548:	1f 16       	cp	r1, r31
    154a:	ba 0b       	sbc	r27, r26
    154c:	62 0b       	sbc	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	84 0b       	sbc	r24, r20
    1552:	ba f0       	brmi	.+46     	; 0x1582 <__addsf3x+0x9c>
    1554:	91 50       	subi	r25, 0x01	; 1
    1556:	a1 f0       	breq	.+40     	; 0x1580 <__addsf3x+0x9a>
    1558:	ff 0f       	add	r31, r31
    155a:	bb 1f       	adc	r27, r27
    155c:	66 1f       	adc	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	c2 f7       	brpl	.-16     	; 0x1554 <__addsf3x+0x6e>
    1564:	0e c0       	rjmp	.+28     	; 0x1582 <__addsf3x+0x9c>
    1566:	ba 0f       	add	r27, r26
    1568:	62 1f       	adc	r22, r18
    156a:	73 1f       	adc	r23, r19
    156c:	84 1f       	adc	r24, r20
    156e:	48 f4       	brcc	.+18     	; 0x1582 <__addsf3x+0x9c>
    1570:	87 95       	ror	r24
    1572:	77 95       	ror	r23
    1574:	67 95       	ror	r22
    1576:	b7 95       	ror	r27
    1578:	f7 95       	ror	r31
    157a:	9e 3f       	cpi	r25, 0xFE	; 254
    157c:	08 f0       	brcs	.+2      	; 0x1580 <__addsf3x+0x9a>
    157e:	b0 cf       	rjmp	.-160    	; 0x14e0 <__addsf3+0x28>
    1580:	93 95       	inc	r25
    1582:	88 0f       	add	r24, r24
    1584:	08 f0       	brcs	.+2      	; 0x1588 <__addsf3x+0xa2>
    1586:	99 27       	eor	r25, r25
    1588:	ee 0f       	add	r30, r30
    158a:	97 95       	ror	r25
    158c:	87 95       	ror	r24
    158e:	08 95       	ret

00001590 <__cmpsf2>:
    1590:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fp_cmp>
    1594:	08 f4       	brcc	.+2      	; 0x1598 <__cmpsf2+0x8>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	08 95       	ret

0000159a <__divsf3>:
    159a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divsf3x>
    159e:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_round>
    15a2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_pscB>
    15a6:	58 f0       	brcs	.+22     	; 0x15be <__divsf3+0x24>
    15a8:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_pscA>
    15ac:	40 f0       	brcs	.+16     	; 0x15be <__divsf3+0x24>
    15ae:	29 f4       	brne	.+10     	; 0x15ba <__divsf3+0x20>
    15b0:	5f 3f       	cpi	r21, 0xFF	; 255
    15b2:	29 f0       	breq	.+10     	; 0x15be <__divsf3+0x24>
    15b4:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_inf>
    15b8:	51 11       	cpse	r21, r1
    15ba:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__fp_szero>
    15be:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_nan>

000015c2 <__divsf3x>:
    15c2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_split3>
    15c6:	68 f3       	brcs	.-38     	; 0x15a2 <__divsf3+0x8>

000015c8 <__divsf3_pse>:
    15c8:	99 23       	and	r25, r25
    15ca:	b1 f3       	breq	.-20     	; 0x15b8 <__divsf3+0x1e>
    15cc:	55 23       	and	r21, r21
    15ce:	91 f3       	breq	.-28     	; 0x15b4 <__divsf3+0x1a>
    15d0:	95 1b       	sub	r25, r21
    15d2:	55 0b       	sbc	r21, r21
    15d4:	bb 27       	eor	r27, r27
    15d6:	aa 27       	eor	r26, r26
    15d8:	62 17       	cp	r22, r18
    15da:	73 07       	cpc	r23, r19
    15dc:	84 07       	cpc	r24, r20
    15de:	38 f0       	brcs	.+14     	; 0x15ee <__divsf3_pse+0x26>
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	22 0f       	add	r18, r18
    15e6:	33 1f       	adc	r19, r19
    15e8:	44 1f       	adc	r20, r20
    15ea:	aa 1f       	adc	r26, r26
    15ec:	a9 f3       	breq	.-22     	; 0x15d8 <__divsf3_pse+0x10>
    15ee:	35 d0       	rcall	.+106    	; 0x165a <__divsf3_pse+0x92>
    15f0:	0e 2e       	mov	r0, r30
    15f2:	3a f0       	brmi	.+14     	; 0x1602 <__divsf3_pse+0x3a>
    15f4:	e0 e8       	ldi	r30, 0x80	; 128
    15f6:	32 d0       	rcall	.+100    	; 0x165c <__divsf3_pse+0x94>
    15f8:	91 50       	subi	r25, 0x01	; 1
    15fa:	50 40       	sbci	r21, 0x00	; 0
    15fc:	e6 95       	lsr	r30
    15fe:	00 1c       	adc	r0, r0
    1600:	ca f7       	brpl	.-14     	; 0x15f4 <__divsf3_pse+0x2c>
    1602:	2b d0       	rcall	.+86     	; 0x165a <__divsf3_pse+0x92>
    1604:	fe 2f       	mov	r31, r30
    1606:	29 d0       	rcall	.+82     	; 0x165a <__divsf3_pse+0x92>
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	bb 1f       	adc	r27, r27
    1610:	26 17       	cp	r18, r22
    1612:	37 07       	cpc	r19, r23
    1614:	48 07       	cpc	r20, r24
    1616:	ab 07       	cpc	r26, r27
    1618:	b0 e8       	ldi	r27, 0x80	; 128
    161a:	09 f0       	breq	.+2      	; 0x161e <__divsf3_pse+0x56>
    161c:	bb 0b       	sbc	r27, r27
    161e:	80 2d       	mov	r24, r0
    1620:	bf 01       	movw	r22, r30
    1622:	ff 27       	eor	r31, r31
    1624:	93 58       	subi	r25, 0x83	; 131
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	3a f0       	brmi	.+14     	; 0x1638 <__divsf3_pse+0x70>
    162a:	9e 3f       	cpi	r25, 0xFE	; 254
    162c:	51 05       	cpc	r21, r1
    162e:	78 f0       	brcs	.+30     	; 0x164e <__divsf3_pse+0x86>
    1630:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_inf>
    1634:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__fp_szero>
    1638:	5f 3f       	cpi	r21, 0xFF	; 255
    163a:	e4 f3       	brlt	.-8      	; 0x1634 <__divsf3_pse+0x6c>
    163c:	98 3e       	cpi	r25, 0xE8	; 232
    163e:	d4 f3       	brlt	.-12     	; 0x1634 <__divsf3_pse+0x6c>
    1640:	86 95       	lsr	r24
    1642:	77 95       	ror	r23
    1644:	67 95       	ror	r22
    1646:	b7 95       	ror	r27
    1648:	f7 95       	ror	r31
    164a:	9f 5f       	subi	r25, 0xFF	; 255
    164c:	c9 f7       	brne	.-14     	; 0x1640 <__divsf3_pse+0x78>
    164e:	88 0f       	add	r24, r24
    1650:	91 1d       	adc	r25, r1
    1652:	96 95       	lsr	r25
    1654:	87 95       	ror	r24
    1656:	97 f9       	bld	r25, 7
    1658:	08 95       	ret
    165a:	e1 e0       	ldi	r30, 0x01	; 1
    165c:	66 0f       	add	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	bb 1f       	adc	r27, r27
    1664:	62 17       	cp	r22, r18
    1666:	73 07       	cpc	r23, r19
    1668:	84 07       	cpc	r24, r20
    166a:	ba 07       	cpc	r27, r26
    166c:	20 f0       	brcs	.+8      	; 0x1676 <__divsf3_pse+0xae>
    166e:	62 1b       	sub	r22, r18
    1670:	73 0b       	sbc	r23, r19
    1672:	84 0b       	sbc	r24, r20
    1674:	ba 0b       	sbc	r27, r26
    1676:	ee 1f       	adc	r30, r30
    1678:	88 f7       	brcc	.-30     	; 0x165c <__divsf3_pse+0x94>
    167a:	e0 95       	com	r30
    167c:	08 95       	ret

0000167e <__fixsfsi>:
    167e:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    1682:	68 94       	set
    1684:	b1 11       	cpse	r27, r1
    1686:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__fp_szero>
    168a:	08 95       	ret

0000168c <__fixunssfsi>:
    168c:	0e 94 06 0c 	call	0x180c	; 0x180c <__fp_splitA>
    1690:	88 f0       	brcs	.+34     	; 0x16b4 <__fixunssfsi+0x28>
    1692:	9f 57       	subi	r25, 0x7F	; 127
    1694:	98 f0       	brcs	.+38     	; 0x16bc <__fixunssfsi+0x30>
    1696:	b9 2f       	mov	r27, r25
    1698:	99 27       	eor	r25, r25
    169a:	b7 51       	subi	r27, 0x17	; 23
    169c:	b0 f0       	brcs	.+44     	; 0x16ca <__fixunssfsi+0x3e>
    169e:	e1 f0       	breq	.+56     	; 0x16d8 <__fixunssfsi+0x4c>
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	1a f0       	brmi	.+6      	; 0x16b0 <__fixunssfsi+0x24>
    16aa:	ba 95       	dec	r27
    16ac:	c9 f7       	brne	.-14     	; 0x16a0 <__fixunssfsi+0x14>
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <__fixunssfsi+0x4c>
    16b0:	b1 30       	cpi	r27, 0x01	; 1
    16b2:	91 f0       	breq	.+36     	; 0x16d8 <__fixunssfsi+0x4c>
    16b4:	0e 94 20 0c 	call	0x1840	; 0x1840 <__fp_zero>
    16b8:	b1 e0       	ldi	r27, 0x01	; 1
    16ba:	08 95       	ret
    16bc:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_zero>
    16c0:	67 2f       	mov	r22, r23
    16c2:	78 2f       	mov	r23, r24
    16c4:	88 27       	eor	r24, r24
    16c6:	b8 5f       	subi	r27, 0xF8	; 248
    16c8:	39 f0       	breq	.+14     	; 0x16d8 <__fixunssfsi+0x4c>
    16ca:	b9 3f       	cpi	r27, 0xF9	; 249
    16cc:	cc f3       	brlt	.-14     	; 0x16c0 <__fixunssfsi+0x34>
    16ce:	86 95       	lsr	r24
    16d0:	77 95       	ror	r23
    16d2:	67 95       	ror	r22
    16d4:	b3 95       	inc	r27
    16d6:	d9 f7       	brne	.-10     	; 0x16ce <__fixunssfsi+0x42>
    16d8:	3e f4       	brtc	.+14     	; 0x16e8 <__fixunssfsi+0x5c>
    16da:	90 95       	com	r25
    16dc:	80 95       	com	r24
    16de:	70 95       	com	r23
    16e0:	61 95       	neg	r22
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	8f 4f       	sbci	r24, 0xFF	; 255
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	08 95       	ret

000016ea <__floatunsisf>:
    16ea:	e8 94       	clt
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <__floatsisf+0x12>

000016ee <__floatsisf>:
    16ee:	97 fb       	bst	r25, 7
    16f0:	3e f4       	brtc	.+14     	; 0x1700 <__floatsisf+0x12>
    16f2:	90 95       	com	r25
    16f4:	80 95       	com	r24
    16f6:	70 95       	com	r23
    16f8:	61 95       	neg	r22
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	99 23       	and	r25, r25
    1702:	a9 f0       	breq	.+42     	; 0x172e <__floatsisf+0x40>
    1704:	f9 2f       	mov	r31, r25
    1706:	96 e9       	ldi	r25, 0x96	; 150
    1708:	bb 27       	eor	r27, r27
    170a:	93 95       	inc	r25
    170c:	f6 95       	lsr	r31
    170e:	87 95       	ror	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b7 95       	ror	r27
    1716:	f1 11       	cpse	r31, r1
    1718:	f8 cf       	rjmp	.-16     	; 0x170a <__floatsisf+0x1c>
    171a:	fa f4       	brpl	.+62     	; 0x175a <__floatsisf+0x6c>
    171c:	bb 0f       	add	r27, r27
    171e:	11 f4       	brne	.+4      	; 0x1724 <__floatsisf+0x36>
    1720:	60 ff       	sbrs	r22, 0
    1722:	1b c0       	rjmp	.+54     	; 0x175a <__floatsisf+0x6c>
    1724:	6f 5f       	subi	r22, 0xFF	; 255
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	8f 4f       	sbci	r24, 0xFF	; 255
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	16 c0       	rjmp	.+44     	; 0x175a <__floatsisf+0x6c>
    172e:	88 23       	and	r24, r24
    1730:	11 f0       	breq	.+4      	; 0x1736 <__floatsisf+0x48>
    1732:	96 e9       	ldi	r25, 0x96	; 150
    1734:	11 c0       	rjmp	.+34     	; 0x1758 <__floatsisf+0x6a>
    1736:	77 23       	and	r23, r23
    1738:	21 f0       	breq	.+8      	; 0x1742 <__floatsisf+0x54>
    173a:	9e e8       	ldi	r25, 0x8E	; 142
    173c:	87 2f       	mov	r24, r23
    173e:	76 2f       	mov	r23, r22
    1740:	05 c0       	rjmp	.+10     	; 0x174c <__floatsisf+0x5e>
    1742:	66 23       	and	r22, r22
    1744:	71 f0       	breq	.+28     	; 0x1762 <__floatsisf+0x74>
    1746:	96 e8       	ldi	r25, 0x86	; 134
    1748:	86 2f       	mov	r24, r22
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	2a f0       	brmi	.+10     	; 0x175a <__floatsisf+0x6c>
    1750:	9a 95       	dec	r25
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	da f7       	brpl	.-10     	; 0x1750 <__floatsisf+0x62>
    175a:	88 0f       	add	r24, r24
    175c:	96 95       	lsr	r25
    175e:	87 95       	ror	r24
    1760:	97 f9       	bld	r25, 7
    1762:	08 95       	ret

00001764 <__fp_cmp>:
    1764:	99 0f       	add	r25, r25
    1766:	00 08       	sbc	r0, r0
    1768:	55 0f       	add	r21, r21
    176a:	aa 0b       	sbc	r26, r26
    176c:	e0 e8       	ldi	r30, 0x80	; 128
    176e:	fe ef       	ldi	r31, 0xFE	; 254
    1770:	16 16       	cp	r1, r22
    1772:	17 06       	cpc	r1, r23
    1774:	e8 07       	cpc	r30, r24
    1776:	f9 07       	cpc	r31, r25
    1778:	c0 f0       	brcs	.+48     	; 0x17aa <__fp_cmp+0x46>
    177a:	12 16       	cp	r1, r18
    177c:	13 06       	cpc	r1, r19
    177e:	e4 07       	cpc	r30, r20
    1780:	f5 07       	cpc	r31, r21
    1782:	98 f0       	brcs	.+38     	; 0x17aa <__fp_cmp+0x46>
    1784:	62 1b       	sub	r22, r18
    1786:	73 0b       	sbc	r23, r19
    1788:	84 0b       	sbc	r24, r20
    178a:	95 0b       	sbc	r25, r21
    178c:	39 f4       	brne	.+14     	; 0x179c <__fp_cmp+0x38>
    178e:	0a 26       	eor	r0, r26
    1790:	61 f0       	breq	.+24     	; 0x17aa <__fp_cmp+0x46>
    1792:	23 2b       	or	r18, r19
    1794:	24 2b       	or	r18, r20
    1796:	25 2b       	or	r18, r21
    1798:	21 f4       	brne	.+8      	; 0x17a2 <__fp_cmp+0x3e>
    179a:	08 95       	ret
    179c:	0a 26       	eor	r0, r26
    179e:	09 f4       	brne	.+2      	; 0x17a2 <__fp_cmp+0x3e>
    17a0:	a1 40       	sbci	r26, 0x01	; 1
    17a2:	a6 95       	lsr	r26
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	81 1d       	adc	r24, r1
    17a8:	81 1d       	adc	r24, r1
    17aa:	08 95       	ret

000017ac <__fp_inf>:
    17ac:	97 f9       	bld	r25, 7
    17ae:	9f 67       	ori	r25, 0x7F	; 127
    17b0:	80 e8       	ldi	r24, 0x80	; 128
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	08 95       	ret

000017b8 <__fp_nan>:
    17b8:	9f ef       	ldi	r25, 0xFF	; 255
    17ba:	80 ec       	ldi	r24, 0xC0	; 192
    17bc:	08 95       	ret

000017be <__fp_pscA>:
    17be:	00 24       	eor	r0, r0
    17c0:	0a 94       	dec	r0
    17c2:	16 16       	cp	r1, r22
    17c4:	17 06       	cpc	r1, r23
    17c6:	18 06       	cpc	r1, r24
    17c8:	09 06       	cpc	r0, r25
    17ca:	08 95       	ret

000017cc <__fp_pscB>:
    17cc:	00 24       	eor	r0, r0
    17ce:	0a 94       	dec	r0
    17d0:	12 16       	cp	r1, r18
    17d2:	13 06       	cpc	r1, r19
    17d4:	14 06       	cpc	r1, r20
    17d6:	05 06       	cpc	r0, r21
    17d8:	08 95       	ret

000017da <__fp_round>:
    17da:	09 2e       	mov	r0, r25
    17dc:	03 94       	inc	r0
    17de:	00 0c       	add	r0, r0
    17e0:	11 f4       	brne	.+4      	; 0x17e6 <__fp_round+0xc>
    17e2:	88 23       	and	r24, r24
    17e4:	52 f0       	brmi	.+20     	; 0x17fa <__fp_round+0x20>
    17e6:	bb 0f       	add	r27, r27
    17e8:	40 f4       	brcc	.+16     	; 0x17fa <__fp_round+0x20>
    17ea:	bf 2b       	or	r27, r31
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__fp_round+0x18>
    17ee:	60 ff       	sbrs	r22, 0
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <__fp_round+0x20>
    17f2:	6f 5f       	subi	r22, 0xFF	; 255
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	08 95       	ret

000017fc <__fp_split3>:
    17fc:	57 fd       	sbrc	r21, 7
    17fe:	90 58       	subi	r25, 0x80	; 128
    1800:	44 0f       	add	r20, r20
    1802:	55 1f       	adc	r21, r21
    1804:	59 f0       	breq	.+22     	; 0x181c <__fp_splitA+0x10>
    1806:	5f 3f       	cpi	r21, 0xFF	; 255
    1808:	71 f0       	breq	.+28     	; 0x1826 <__fp_splitA+0x1a>
    180a:	47 95       	ror	r20

0000180c <__fp_splitA>:
    180c:	88 0f       	add	r24, r24
    180e:	97 fb       	bst	r25, 7
    1810:	99 1f       	adc	r25, r25
    1812:	61 f0       	breq	.+24     	; 0x182c <__fp_splitA+0x20>
    1814:	9f 3f       	cpi	r25, 0xFF	; 255
    1816:	79 f0       	breq	.+30     	; 0x1836 <__fp_splitA+0x2a>
    1818:	87 95       	ror	r24
    181a:	08 95       	ret
    181c:	12 16       	cp	r1, r18
    181e:	13 06       	cpc	r1, r19
    1820:	14 06       	cpc	r1, r20
    1822:	55 1f       	adc	r21, r21
    1824:	f2 cf       	rjmp	.-28     	; 0x180a <__fp_split3+0xe>
    1826:	46 95       	lsr	r20
    1828:	f1 df       	rcall	.-30     	; 0x180c <__fp_splitA>
    182a:	08 c0       	rjmp	.+16     	; 0x183c <__fp_splitA+0x30>
    182c:	16 16       	cp	r1, r22
    182e:	17 06       	cpc	r1, r23
    1830:	18 06       	cpc	r1, r24
    1832:	99 1f       	adc	r25, r25
    1834:	f1 cf       	rjmp	.-30     	; 0x1818 <__fp_splitA+0xc>
    1836:	86 95       	lsr	r24
    1838:	71 05       	cpc	r23, r1
    183a:	61 05       	cpc	r22, r1
    183c:	08 94       	sec
    183e:	08 95       	ret

00001840 <__fp_zero>:
    1840:	e8 94       	clt

00001842 <__fp_szero>:
    1842:	bb 27       	eor	r27, r27
    1844:	66 27       	eor	r22, r22
    1846:	77 27       	eor	r23, r23
    1848:	cb 01       	movw	r24, r22
    184a:	97 f9       	bld	r25, 7
    184c:	08 95       	ret

0000184e <__gesf2>:
    184e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fp_cmp>
    1852:	08 f4       	brcc	.+2      	; 0x1856 <__gesf2+0x8>
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	08 95       	ret

00001858 <__mulsf3>:
    1858:	0e 94 3f 0c 	call	0x187e	; 0x187e <__mulsf3x>
    185c:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_round>
    1860:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_pscA>
    1864:	38 f0       	brcs	.+14     	; 0x1874 <__mulsf3+0x1c>
    1866:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_pscB>
    186a:	20 f0       	brcs	.+8      	; 0x1874 <__mulsf3+0x1c>
    186c:	95 23       	and	r25, r21
    186e:	11 f0       	breq	.+4      	; 0x1874 <__mulsf3+0x1c>
    1870:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_inf>
    1874:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_nan>
    1878:	11 24       	eor	r1, r1
    187a:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__fp_szero>

0000187e <__mulsf3x>:
    187e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_split3>
    1882:	70 f3       	brcs	.-36     	; 0x1860 <__mulsf3+0x8>

00001884 <__mulsf3_pse>:
    1884:	95 9f       	mul	r25, r21
    1886:	c1 f3       	breq	.-16     	; 0x1878 <__mulsf3+0x20>
    1888:	95 0f       	add	r25, r21
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	55 1f       	adc	r21, r21
    188e:	62 9f       	mul	r22, r18
    1890:	f0 01       	movw	r30, r0
    1892:	72 9f       	mul	r23, r18
    1894:	bb 27       	eor	r27, r27
    1896:	f0 0d       	add	r31, r0
    1898:	b1 1d       	adc	r27, r1
    189a:	63 9f       	mul	r22, r19
    189c:	aa 27       	eor	r26, r26
    189e:	f0 0d       	add	r31, r0
    18a0:	b1 1d       	adc	r27, r1
    18a2:	aa 1f       	adc	r26, r26
    18a4:	64 9f       	mul	r22, r20
    18a6:	66 27       	eor	r22, r22
    18a8:	b0 0d       	add	r27, r0
    18aa:	a1 1d       	adc	r26, r1
    18ac:	66 1f       	adc	r22, r22
    18ae:	82 9f       	mul	r24, r18
    18b0:	22 27       	eor	r18, r18
    18b2:	b0 0d       	add	r27, r0
    18b4:	a1 1d       	adc	r26, r1
    18b6:	62 1f       	adc	r22, r18
    18b8:	73 9f       	mul	r23, r19
    18ba:	b0 0d       	add	r27, r0
    18bc:	a1 1d       	adc	r26, r1
    18be:	62 1f       	adc	r22, r18
    18c0:	83 9f       	mul	r24, r19
    18c2:	a0 0d       	add	r26, r0
    18c4:	61 1d       	adc	r22, r1
    18c6:	22 1f       	adc	r18, r18
    18c8:	74 9f       	mul	r23, r20
    18ca:	33 27       	eor	r19, r19
    18cc:	a0 0d       	add	r26, r0
    18ce:	61 1d       	adc	r22, r1
    18d0:	23 1f       	adc	r18, r19
    18d2:	84 9f       	mul	r24, r20
    18d4:	60 0d       	add	r22, r0
    18d6:	21 1d       	adc	r18, r1
    18d8:	82 2f       	mov	r24, r18
    18da:	76 2f       	mov	r23, r22
    18dc:	6a 2f       	mov	r22, r26
    18de:	11 24       	eor	r1, r1
    18e0:	9f 57       	subi	r25, 0x7F	; 127
    18e2:	50 40       	sbci	r21, 0x00	; 0
    18e4:	9a f0       	brmi	.+38     	; 0x190c <__mulsf3_pse+0x88>
    18e6:	f1 f0       	breq	.+60     	; 0x1924 <__mulsf3_pse+0xa0>
    18e8:	88 23       	and	r24, r24
    18ea:	4a f0       	brmi	.+18     	; 0x18fe <__mulsf3_pse+0x7a>
    18ec:	ee 0f       	add	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	bb 1f       	adc	r27, r27
    18f2:	66 1f       	adc	r22, r22
    18f4:	77 1f       	adc	r23, r23
    18f6:	88 1f       	adc	r24, r24
    18f8:	91 50       	subi	r25, 0x01	; 1
    18fa:	50 40       	sbci	r21, 0x00	; 0
    18fc:	a9 f7       	brne	.-22     	; 0x18e8 <__mulsf3_pse+0x64>
    18fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1900:	51 05       	cpc	r21, r1
    1902:	80 f0       	brcs	.+32     	; 0x1924 <__mulsf3_pse+0xa0>
    1904:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_inf>
    1908:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__fp_szero>
    190c:	5f 3f       	cpi	r21, 0xFF	; 255
    190e:	e4 f3       	brlt	.-8      	; 0x1908 <__mulsf3_pse+0x84>
    1910:	98 3e       	cpi	r25, 0xE8	; 232
    1912:	d4 f3       	brlt	.-12     	; 0x1908 <__mulsf3_pse+0x84>
    1914:	86 95       	lsr	r24
    1916:	77 95       	ror	r23
    1918:	67 95       	ror	r22
    191a:	b7 95       	ror	r27
    191c:	f7 95       	ror	r31
    191e:	e7 95       	ror	r30
    1920:	9f 5f       	subi	r25, 0xFF	; 255
    1922:	c1 f7       	brne	.-16     	; 0x1914 <__mulsf3_pse+0x90>
    1924:	fe 2b       	or	r31, r30
    1926:	88 0f       	add	r24, r24
    1928:	91 1d       	adc	r25, r1
    192a:	96 95       	lsr	r25
    192c:	87 95       	ror	r24
    192e:	97 f9       	bld	r25, 7
    1930:	08 95       	ret

00001932 <__udivmodhi4>:
    1932:	aa 1b       	sub	r26, r26
    1934:	bb 1b       	sub	r27, r27
    1936:	51 e1       	ldi	r21, 0x11	; 17
    1938:	07 c0       	rjmp	.+14     	; 0x1948 <__udivmodhi4_ep>

0000193a <__udivmodhi4_loop>:
    193a:	aa 1f       	adc	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	a6 17       	cp	r26, r22
    1940:	b7 07       	cpc	r27, r23
    1942:	10 f0       	brcs	.+4      	; 0x1948 <__udivmodhi4_ep>
    1944:	a6 1b       	sub	r26, r22
    1946:	b7 0b       	sbc	r27, r23

00001948 <__udivmodhi4_ep>:
    1948:	88 1f       	adc	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	5a 95       	dec	r21
    194e:	a9 f7       	brne	.-22     	; 0x193a <__udivmodhi4_loop>
    1950:	80 95       	com	r24
    1952:	90 95       	com	r25
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	08 95       	ret

0000195a <__divmodhi4>:
    195a:	97 fb       	bst	r25, 7
    195c:	07 2e       	mov	r0, r23
    195e:	16 f4       	brtc	.+4      	; 0x1964 <__divmodhi4+0xa>
    1960:	00 94       	com	r0
    1962:	07 d0       	rcall	.+14     	; 0x1972 <__divmodhi4_neg1>
    1964:	77 fd       	sbrc	r23, 7
    1966:	09 d0       	rcall	.+18     	; 0x197a <__divmodhi4_neg2>
    1968:	0e 94 99 0c 	call	0x1932	; 0x1932 <__udivmodhi4>
    196c:	07 fc       	sbrc	r0, 7
    196e:	05 d0       	rcall	.+10     	; 0x197a <__divmodhi4_neg2>
    1970:	3e f4       	brtc	.+14     	; 0x1980 <__divmodhi4_exit>

00001972 <__divmodhi4_neg1>:
    1972:	90 95       	com	r25
    1974:	81 95       	neg	r24
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	08 95       	ret

0000197a <__divmodhi4_neg2>:
    197a:	70 95       	com	r23
    197c:	61 95       	neg	r22
    197e:	7f 4f       	sbci	r23, 0xFF	; 255

00001980 <__divmodhi4_exit>:
    1980:	08 95       	ret

00001982 <__umulhisi3>:
    1982:	a2 9f       	mul	r26, r18
    1984:	b0 01       	movw	r22, r0
    1986:	b3 9f       	mul	r27, r19
    1988:	c0 01       	movw	r24, r0
    198a:	a3 9f       	mul	r26, r19
    198c:	70 0d       	add	r23, r0
    198e:	81 1d       	adc	r24, r1
    1990:	11 24       	eor	r1, r1
    1992:	91 1d       	adc	r25, r1
    1994:	b2 9f       	mul	r27, r18
    1996:	70 0d       	add	r23, r0
    1998:	81 1d       	adc	r24, r1
    199a:	11 24       	eor	r1, r1
    199c:	91 1d       	adc	r25, r1
    199e:	08 95       	ret

000019a0 <_exit>:
    19a0:	f8 94       	cli

000019a2 <__stop_program>:
    19a2:	ff cf       	rjmp	.-2      	; 0x19a2 <__stop_program>
