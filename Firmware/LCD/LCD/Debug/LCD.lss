
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001b12  00001ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  0080016e  0080016e  00001c14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f87  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db3  00000000  00000000  00003d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001136  00000000  00000000  00004b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00005c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064d  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ba  00000000  00000000  0000678d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007e47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 39       	cpi	r26, 0x9A	; 154
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <main>
      9e:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	d8 2e       	mov	r13, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     104:	06 2f       	mov	r16, r22
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	10 16       	cp	r1, r16
     10a:	11 06       	cpc	r1, r17
     10c:	34 f5       	brge	.+76     	; 0x15a <avg_read_adc_channel+0x6e>
     10e:	c1 e0       	ldi	r28, 0x01	; 1
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	81 2c       	mov	r8, r1
     114:	91 2c       	mov	r9, r1
     116:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
     118:	e8 2e       	mov	r14, r24
     11a:	f1 2c       	mov	r15, r1
     11c:	c7 01       	movw	r24, r14
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	9c 01       	movw	r18, r24
     124:	2c 56       	subi	r18, 0x6C	; 108
     126:	3e 4f       	sbci	r19, 0xFE	; 254
     128:	79 01       	movw	r14, r18
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	8d 2d       	mov	r24, r13
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel];
     130:	f7 01       	movw	r30, r14
     132:	40 81       	ld	r20, Z
     134:	51 81       	ldd	r21, Z+1	; 0x01
     136:	ba 01       	movw	r22, r20
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatunsisf>
     140:	9b 01       	movw	r18, r22
     142:	ac 01       	movw	r20, r24
     144:	c5 01       	movw	r24, r10
     146:	b4 01       	movw	r22, r8
     148:	0e 94 13 0b 	call	0x1626	; 0x1626 <__addsf3>
     14c:	4b 01       	movw	r8, r22
     14e:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     150:	21 96       	adiw	r28, 0x01	; 1
     152:	0c 17       	cp	r16, r28
     154:	1d 07       	cpc	r17, r29
     156:	4c f7       	brge	.-46     	; 0x12a <avg_read_adc_channel+0x3e>
     158:	03 c0       	rjmp	.+6      	; 0x160 <avg_read_adc_channel+0x74>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     15a:	81 2c       	mov	r8, r1
     15c:	91 2c       	mov	r9, r1
     15e:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
	}
	
	adc_val[channel] = val/i;
     160:	cd 2d       	mov	r28, r13
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	b8 01       	movw	r22, r16
     166:	11 0f       	add	r17, r17
     168:	88 0b       	sbc	r24, r24
     16a:	99 0b       	sbc	r25, r25
     16c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	c5 01       	movw	r24, r10
     176:	b4 01       	movw	r22, r8
     178:	0e 94 84 0b 	call	0x1708	; 0x1708 <__divsf3>
     17c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fixunssfsi>
     180:	cc 0f       	add	r28, r28
     182:	dd 1f       	adc	r29, r29
     184:	cc 56       	subi	r28, 0x6C	; 108
     186:	de 4f       	sbci	r29, 0xFE	; 254
     188:	79 83       	std	Y+1, r23	; 0x01
     18a:	68 83       	st	Y, r22
	
	return adc_val[channel];
     18c:	88 81       	ld	r24, Y
     18e:	99 81       	ldd	r25, Y+1	; 0x01
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	bf 90       	pop	r11
     1a0:	af 90       	pop	r10
     1a2:	9f 90       	pop	r9
     1a4:	8f 90       	pop	r8
     1a6:	08 95       	ret

000001a8 <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	3f 93       	push	r19
     1b6:	4f 93       	push	r20
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
     1bc:	ef 93       	push	r30
     1be:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1c0:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1c4:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1cc:	ef 70       	andi	r30, 0x0F	; 15
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
	unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	21 e0       	ldi	r18, 0x01	; 1
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	81 11       	cpse	r24, r1
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_21+0x34>
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	ec 56       	subi	r30, 0x6C	; 108
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1e8:	20 81       	ld	r18, Z
     1ea:	31 81       	ldd	r19, Z+1	; 0x01
     1ec:	32 2f       	mov	r19, r18
     1ee:	22 27       	eor	r18, r18
     1f0:	31 83       	std	Z+1, r19	; 0x01
     1f2:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	98 2f       	mov	r25, r24
     1f8:	88 27       	eor	r24, r24
     1fa:	84 0f       	add	r24, r20
     1fc:	91 1d       	adc	r25, r1
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	9f 91       	pop	r25
     208:	8f 91       	pop	r24
     20a:	4f 91       	pop	r20
     20c:	3f 91       	pop	r19
     20e:	2f 91       	pop	r18
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <update_current>:
}

void print_gate_voltage(char row, char col)
{
	lcd_print4(row, col, gate_voltage, "mV", "V");
}
     21a:	65 e0       	ldi	r22, 0x05	; 5
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     222:	bc 01       	movw	r22, r24
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatunsisf>
     22c:	27 ee       	ldi	r18, 0xE7	; 231
     22e:	3b ef       	ldi	r19, 0xFB	; 251
     230:	49 ef       	ldi	r20, 0xF9	; 249
     232:	5f e3       	ldi	r21, 0x3F	; 63
     234:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__mulsf3>
     238:	2a e9       	ldi	r18, 0x9A	; 154
     23a:	39 e9       	ldi	r19, 0x99	; 153
     23c:	49 e9       	ldi	r20, 0x99	; 153
     23e:	5e e3       	ldi	r21, 0x3E	; 62
     240:	0e 94 13 0b 	call	0x1626	; 0x1626 <__addsf3>
     244:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <offset>
     248:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <offset+0x1>
     24c:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <offset+0x2>
     250:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <offset+0x3>
     254:	0e 94 13 0b 	call	0x1626	; 0x1626 <__addsf3>
     258:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <current>
     25c:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <current+0x1>
     260:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <current+0x2>
     264:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <current+0x3>
     268:	08 95       	ret

0000026a <update_voltage>:
     26a:	cf 92       	push	r12
     26c:	df 92       	push	r13
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	65 e0       	ldi	r22, 0x05	; 5
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     27a:	bc 01       	movw	r22, r24
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatunsisf>
     284:	2c ee       	ldi	r18, 0xEC	; 236
     286:	31 e5       	ldi	r19, 0x51	; 81
     288:	4a ee       	ldi	r20, 0xEA	; 234
     28a:	51 e4       	ldi	r21, 0x41	; 65
     28c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__mulsf3>
     290:	6b 01       	movw	r12, r22
     292:	7c 01       	movw	r14, r24
     294:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__fixsfsi>
     298:	cb 01       	movw	r24, r22
     29a:	6a e0       	ldi	r22, 0x0A	; 10
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
     2a2:	bc 01       	movw	r22, r24
     2a4:	99 0f       	add	r25, r25
     2a6:	88 0b       	sbc	r24, r24
     2a8:	99 0b       	sbc	r25, r25
     2aa:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     2ae:	9b 01       	movw	r18, r22
     2b0:	ac 01       	movw	r20, r24
     2b2:	c7 01       	movw	r24, r14
     2b4:	b6 01       	movw	r22, r12
     2b6:	0e 94 12 0b 	call	0x1624	; 0x1624 <__subsf3>
     2ba:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <voltage>
     2be:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <voltage+0x1>
     2c2:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <voltage+0x2>
     2c6:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <voltage+0x3>
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	cf 90       	pop	r12
     2d2:	08 95       	ret

000002d4 <update_power>:
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	c0 90 7f 01 	lds	r12, 0x017F	; 0x80017f <current>
     2ec:	d0 90 80 01 	lds	r13, 0x0180	; 0x800180 <current+0x1>
     2f0:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <current+0x2>
     2f4:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <current+0x3>
     2f8:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     2fc:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     300:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     304:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__mulsf3>
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	4a e7       	ldi	r20, 0x7A	; 122
     316:	54 e4       	ldi	r21, 0x44	; 68
     318:	0e 94 84 0b 	call	0x1708	; 0x1708 <__divsf3>
     31c:	4b 01       	movw	r8, r22
     31e:	5c 01       	movw	r10, r24
     320:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__fixsfsi>
     324:	ca e0       	ldi	r28, 0x0A	; 10
     326:	d0 e0       	ldi	r29, 0x00	; 0
     328:	cb 01       	movw	r24, r22
     32a:	be 01       	movw	r22, r28
     32c:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
     330:	bc 01       	movw	r22, r24
     332:	99 0f       	add	r25, r25
     334:	88 0b       	sbc	r24, r24
     336:	99 0b       	sbc	r25, r25
     338:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     33c:	9b 01       	movw	r18, r22
     33e:	ac 01       	movw	r20, r24
     340:	c5 01       	movw	r24, r10
     342:	b4 01       	movw	r22, r8
     344:	0e 94 12 0b 	call	0x1624	; 0x1624 <__subsf3>
     348:	4b 01       	movw	r8, r22
     34a:	5c 01       	movw	r10, r24
     34c:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <power>
     350:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <power+0x1>
     354:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <power+0x2>
     358:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <power+0x3>
     35c:	a7 01       	movw	r20, r14
     35e:	96 01       	movw	r18, r12
     360:	c7 01       	movw	r24, r14
     362:	b6 01       	movw	r22, r12
     364:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__mulsf3>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	4a e7       	ldi	r20, 0x7A	; 122
     36e:	54 e4       	ldi	r21, 0x44	; 68
     370:	0e 94 84 0b 	call	0x1708	; 0x1708 <__divsf3>
     374:	9b 01       	movw	r18, r22
     376:	ac 01       	movw	r20, r24
     378:	c5 01       	movw	r24, r10
     37a:	b4 01       	movw	r22, r8
     37c:	0e 94 12 0b 	call	0x1624	; 0x1624 <__subsf3>
     380:	6b 01       	movw	r12, r22
     382:	7c 01       	movw	r14, r24
     384:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__fixsfsi>
     388:	cb 01       	movw	r24, r22
     38a:	be 01       	movw	r22, r28
     38c:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
     390:	bc 01       	movw	r22, r24
     392:	99 0f       	add	r25, r25
     394:	88 0b       	sbc	r24, r24
     396:	99 0b       	sbc	r25, r25
     398:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     39c:	9b 01       	movw	r18, r22
     39e:	ac 01       	movw	r20, r24
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	0e 94 12 0b 	call	0x1624	; 0x1624 <__subsf3>
     3a8:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <power_mos>
     3ac:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <power_mos+0x1>
     3b0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <power_mos+0x2>
     3b4:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <power_mos+0x3>
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	cf 90       	pop	r12
     3c4:	bf 90       	pop	r11
     3c6:	af 90       	pop	r10
     3c8:	9f 90       	pop	r9
     3ca:	8f 90       	pop	r8
     3cc:	08 95       	ret

000003ce <update_gate_voltage>:
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	6a e0       	ldi	r22, 0x0A	; 10
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     3de:	bc 01       	movw	r22, r24
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatunsisf>
     3e8:	2a e0       	ldi	r18, 0x0A	; 10
     3ea:	37 ed       	ldi	r19, 0xD7	; 215
     3ec:	4b e2       	ldi	r20, 0x2B	; 43
     3ee:	51 e4       	ldi	r21, 0x41	; 65
     3f0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__mulsf3>
     3f4:	6b 01       	movw	r12, r22
     3f6:	7c 01       	movw	r14, r24
     3f8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__fixsfsi>
     3fc:	cb 01       	movw	r24, r22
     3fe:	6a e0       	ldi	r22, 0x0A	; 10
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
     406:	bc 01       	movw	r22, r24
     408:	99 0f       	add	r25, r25
     40a:	88 0b       	sbc	r24, r24
     40c:	99 0b       	sbc	r25, r25
     40e:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     412:	9b 01       	movw	r18, r22
     414:	ac 01       	movw	r20, r24
     416:	c7 01       	movw	r24, r14
     418:	b6 01       	movw	r22, r12
     41a:	0e 94 12 0b 	call	0x1624	; 0x1624 <__subsf3>
     41e:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <gate_voltage>
     422:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <gate_voltage+0x1>
     426:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <gate_voltage+0x2>
     42a:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <gate_voltage+0x3>
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	08 95       	ret

00000438 <print_current>:
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <current>
     444:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <current+0x1>
     448:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <current+0x2>
     44c:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <current+0x3>
     450:	0f 2e       	mov	r0, r31
     452:	f7 e0       	ldi	r31, 0x07	; 7
     454:	ef 2e       	mov	r14, r31
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	ff 2e       	mov	r15, r31
     45a:	f0 2d       	mov	r31, r0
     45c:	06 e0       	ldi	r16, 0x06	; 6
     45e:	11 e0       	ldi	r17, 0x01	; 1
     460:	0e 94 ac 09 	call	0x1358	; 0x1358 <lcd_print4>
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	08 95       	ret

0000046e <print_voltage>:
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     47a:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     47e:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     482:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     486:	0f 2e       	mov	r0, r31
     488:	fa e0       	ldi	r31, 0x0A	; 10
     48a:	ef 2e       	mov	r14, r31
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	ff 2e       	mov	r15, r31
     490:	f0 2d       	mov	r31, r0
     492:	09 e0       	ldi	r16, 0x09	; 9
     494:	11 e0       	ldi	r17, 0x01	; 1
     496:	0e 94 ac 09 	call	0x1358	; 0x1358 <lcd_print4>
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	08 95       	ret

000004a4 <print_power>:
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <power>
     4b0:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <power+0x1>
     4b4:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <power+0x2>
     4b8:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <power+0x3>
     4bc:	0f 2e       	mov	r0, r31
     4be:	fd e0       	ldi	r31, 0x0D	; 13
     4c0:	ef 2e       	mov	r14, r31
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	ff 2e       	mov	r15, r31
     4c6:	f0 2d       	mov	r31, r0
     4c8:	0c e0       	ldi	r16, 0x0C	; 12
     4ca:	11 e0       	ldi	r17, 0x01	; 1
     4cc:	0e 94 ac 09 	call	0x1358	; 0x1358 <lcd_print4>
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <print_mos_power>:

void print_mos_power(char row, char col)
{
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
	lcd_print4(row, col, power_mos, "mW", "W");
     4e2:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <power_mos>
     4e6:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <power_mos+0x1>
     4ea:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <power_mos+0x2>
     4ee:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <power_mos+0x3>
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fd e0       	ldi	r31, 0x0D	; 13
     4f6:	ef 2e       	mov	r14, r31
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	ff 2e       	mov	r15, r31
     4fc:	f0 2d       	mov	r31, r0
     4fe:	0c e0       	ldi	r16, 0x0C	; 12
     500:	11 e0       	ldi	r17, 0x01	; 1
     502:	0e 94 ac 09 	call	0x1358	; 0x1358 <lcd_print4>
}
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	08 95       	ret

00000510 <check_thresholds>:

char check_thresholds()
{
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
	static char val = 0;
	
	if (current<current_thresh && voltage<v_thresh && power_mos<power_thresh)
     524:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <current_thresh>
     528:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <current_thresh+0x1>
     52c:	c0 90 7f 01 	lds	r12, 0x017F	; 0x80017f <current>
     530:	d0 90 80 01 	lds	r13, 0x0180	; 0x800180 <current+0x1>
     534:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <current+0x2>
     538:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <current+0x3>
     53c:	be 01       	movw	r22, r28
     53e:	0d 2e       	mov	r0, r29
     540:	00 0c       	add	r0, r0
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     54a:	a7 01       	movw	r20, r14
     54c:	96 01       	movw	r18, r12
     54e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <check_thresholds+0x48>
     556:	4b c0       	rjmp	.+150    	; 0x5ee <check_thresholds+0xde>
     558:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <v_thresh>
     55c:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <v_thresh+0x1>
     560:	b8 01       	movw	r22, r16
     562:	01 2e       	mov	r0, r17
     564:	00 0c       	add	r0, r0
     566:	88 0b       	sbc	r24, r24
     568:	99 0b       	sbc	r25, r25
     56a:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     56e:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     572:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     576:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     57a:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     57e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__gesf2>
     582:	18 16       	cp	r1, r24
     584:	a4 f5       	brge	.+104    	; 0x5ee <check_thresholds+0xde>
     586:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_start>
     58a:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_start+0x1>
     58e:	b5 01       	movw	r22, r10
     590:	0b 2c       	mov	r0, r11
     592:	00 0c       	add	r0, r0
     594:	88 0b       	sbc	r24, r24
     596:	99 0b       	sbc	r25, r25
     598:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     59c:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <power_mos>
     5a0:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <power_mos+0x1>
     5a4:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <power_mos+0x2>
     5a8:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <power_mos+0x3>
     5ac:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__gesf2>
     5b0:	18 16       	cp	r1, r24
     5b2:	ec f4       	brge	.+58     	; 0x5ee <check_thresholds+0xde>
	{
		if (val == 1)
     5b4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	09 f0       	breq	.+2      	; 0x5be <check_thresholds+0xae>
     5bc:	79 c0       	rjmp	.+242    	; 0x6b0 <check_thresholds+0x1a0>
		{
			power_thresh += 500;
     5be:	8c e0       	ldi	r24, 0x0C	; 12
     5c0:	a8 1a       	sub	r10, r24
     5c2:	8e ef       	ldi	r24, 0xFE	; 254
     5c4:	b8 0a       	sbc	r11, r24
     5c6:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
     5ca:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
			v_thresh += 2000;
     5ce:	00 53       	subi	r16, 0x30	; 48
     5d0:	18 4f       	sbci	r17, 0xF8	; 248
     5d2:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <v_thresh+0x1>
     5d6:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <v_thresh>
			current_thresh += 100;
     5da:	cc 59       	subi	r28, 0x9C	; 156
     5dc:	df 4f       	sbci	r29, 0xFF	; 255
     5de:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     5e2:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 0;
     5e6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
		}
		
		return 0;	//All okay
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	68 c0       	rjmp	.+208    	; 0x6be <check_thresholds+0x1ae>
	}
	
	else
	{	
		if (val == 0)
     5ee:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     5f2:	81 11       	cpse	r24, r1
     5f4:	1d c0       	rjmp	.+58     	; 0x630 <check_thresholds+0x120>
		{
			power_thresh -= 500;
     5f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     5fe:	84 5f       	subi	r24, 0xF4	; 244
     600:	91 40       	sbci	r25, 0x01	; 1
     602:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     606:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			v_thresh -= 2000;
     60a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <v_thresh>
     60e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <v_thresh+0x1>
     612:	80 5d       	subi	r24, 0xD0	; 208
     614:	97 40       	sbci	r25, 0x07	; 7
     616:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <v_thresh+0x1>
     61a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <v_thresh>
			current_thresh -= 100;
     61e:	c4 56       	subi	r28, 0x64	; 100
     620:	d1 09       	sbc	r29, r1
     622:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     626:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
		}
		
		if (power_mos>power_thresh)
     630:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     634:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     638:	07 2e       	mov	r0, r23
     63a:	00 0c       	add	r0, r0
     63c:	88 0b       	sbc	r24, r24
     63e:	99 0b       	sbc	r25, r25
     640:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     644:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <power_mos>
     648:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <power_mos+0x1>
     64c:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <power_mos+0x2>
     650:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <power_mos+0x3>
     654:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__cmpsf2>
     658:	88 23       	and	r24, r24
     65a:	64 f1       	brlt	.+88     	; 0x6b4 <check_thresholds+0x1a4>
			return 1;
	
		else if (voltage>v_thresh)
     65c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <v_thresh>
     660:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <v_thresh+0x1>
     664:	07 2e       	mov	r0, r23
     666:	00 0c       	add	r0, r0
     668:	88 0b       	sbc	r24, r24
     66a:	99 0b       	sbc	r25, r25
     66c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     670:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     674:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     678:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     67c:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     680:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__cmpsf2>
     684:	88 23       	and	r24, r24
     686:	c4 f0       	brlt	.+48     	; 0x6b8 <check_thresholds+0x1a8>
			return 2;

		else if (current>current_thresh)	
     688:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <current_thresh>
     68c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <current_thresh+0x1>
     690:	07 2e       	mov	r0, r23
     692:	00 0c       	add	r0, r0
     694:	88 0b       	sbc	r24, r24
     696:	99 0b       	sbc	r25, r25
     698:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatsisf>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	c7 01       	movw	r24, r14
     6a2:	b6 01       	movw	r22, r12
     6a4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__gesf2>
     6a8:	18 16       	cp	r1, r24
     6aa:	44 f0       	brlt	.+16     	; 0x6bc <check_thresholds+0x1ac>
			return 3;
	
		else
			return 4;	//Error
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	07 c0       	rjmp	.+14     	; 0x6be <check_thresholds+0x1ae>
			v_thresh += 2000;
			current_thresh += 100;
			val = 0;
		}
		
		return 0;	//All okay
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <check_thresholds+0x1ae>
			current_thresh -= 100;
			val = 1;
		}
		
		if (power_mos>power_thresh)
			return 1;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <check_thresholds+0x1ae>
	
		else if (voltage>v_thresh)
			return 2;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <check_thresholds+0x1ae>

		else if (current>current_thresh)	
			return 3;
     6bc:	83 e0       	ldi	r24, 0x03	; 3
	
		else
			return 4;	//Error
	}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	08 95       	ret

000006d4 <Bit_Reverse>:
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     6d4:	98 2f       	mov	r25, r24
     6d6:	88 1f       	adc	r24, r24
     6d8:	88 27       	eor	r24, r24
     6da:	88 1f       	adc	r24, r24
     6dc:	96 fd       	sbrc	r25, 6
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <Bit_Reverse+0x10>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <Bit_Reverse+0x12>
     6e4:	22 e0       	ldi	r18, 0x02	; 2
     6e6:	82 2b       	or	r24, r18
     6e8:	95 fd       	sbrc	r25, 5
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <Bit_Reverse+0x1c>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <Bit_Reverse+0x1e>
     6f0:	24 e0       	ldi	r18, 0x04	; 4
     6f2:	82 2b       	or	r24, r18
     6f4:	94 fd       	sbrc	r25, 4
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <Bit_Reverse+0x28>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <Bit_Reverse+0x2a>
     6fc:	28 e0       	ldi	r18, 0x08	; 8
     6fe:	82 2b       	or	r24, r18
     700:	93 fd       	sbrc	r25, 3
     702:	02 c0       	rjmp	.+4      	; 0x708 <Bit_Reverse+0x34>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	01 c0       	rjmp	.+2      	; 0x70a <Bit_Reverse+0x36>
     708:	20 e1       	ldi	r18, 0x10	; 16
     70a:	82 2b       	or	r24, r18
     70c:	92 fd       	sbrc	r25, 2
     70e:	02 c0       	rjmp	.+4      	; 0x714 <Bit_Reverse+0x40>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	01 c0       	rjmp	.+2      	; 0x716 <Bit_Reverse+0x42>
     714:	20 e2       	ldi	r18, 0x20	; 32
     716:	82 2b       	or	r24, r18
     718:	91 fd       	sbrc	r25, 1
     71a:	02 c0       	rjmp	.+4      	; 0x720 <Bit_Reverse+0x4c>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	01 c0       	rjmp	.+2      	; 0x722 <Bit_Reverse+0x4e>
     720:	20 e4       	ldi	r18, 0x40	; 64
     722:	82 2b       	or	r24, r18
     724:	90 fd       	sbrc	r25, 0
     726:	02 c0       	rjmp	.+4      	; 0x72c <Bit_Reverse+0x58>
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	01 c0       	rjmp	.+2      	; 0x72e <Bit_Reverse+0x5a>
     72c:	90 e8       	ldi	r25, 0x80	; 128
     72e:	89 2b       	or	r24, r25
     730:	08 95       	ret

00000732 <lcd_wr_command>:
     732:	cf 93       	push	r28
     734:	c8 2f       	mov	r28, r24
     736:	80 7f       	andi	r24, 0xF0	; 240
     738:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Bit_Reverse>
     73c:	88 0f       	add	r24, r24
     73e:	88 0f       	add	r24, r24
     740:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <temp.1654>
     744:	9b b1       	in	r25, 0x0b	; 11
     746:	93 7c       	andi	r25, 0xC3	; 195
     748:	9b b9       	out	0x0b, r25	; 11
     74a:	8b b1       	in	r24, 0x0b	; 11
     74c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <temp.1654>
     750:	98 2b       	or	r25, r24
     752:	9b b9       	out	0x0b, r25	; 11
     754:	5f 98       	cbi	0x0b, 7	; 11
     756:	5e 9a       	sbi	0x0b, 6	; 11
     758:	8f e1       	ldi	r24, 0x1F	; 31
     75a:	9e e4       	ldi	r25, 0x4E	; 78
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd_wr_command+0x2a>
     760:	00 c0       	rjmp	.+0      	; 0x762 <lcd_wr_command+0x30>
     762:	00 00       	nop
     764:	5e 98       	cbi	0x0b, 6	; 11
     766:	8c 2f       	mov	r24, r28
     768:	82 95       	swap	r24
     76a:	80 7f       	andi	r24, 0xF0	; 240
     76c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Bit_Reverse>
     770:	9b b1       	in	r25, 0x0b	; 11
     772:	93 7c       	andi	r25, 0xC3	; 195
     774:	9b b9       	out	0x0b, r25	; 11
     776:	9b b1       	in	r25, 0x0b	; 11
     778:	88 0f       	add	r24, r24
     77a:	88 0f       	add	r24, r24
     77c:	98 2b       	or	r25, r24
     77e:	9b b9       	out	0x0b, r25	; 11
     780:	5f 98       	cbi	0x0b, 7	; 11
     782:	5e 9a       	sbi	0x0b, 6	; 11
     784:	8f e1       	ldi	r24, 0x1F	; 31
     786:	9e e4       	ldi	r25, 0x4E	; 78
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <lcd_wr_command+0x56>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <lcd_wr_command+0x5c>
     78e:	00 00       	nop
     790:	5e 98       	cbi	0x0b, 6	; 11
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <lcd_port_config>:
     796:	8a b1       	in	r24, 0x0a	; 10
     798:	8c 6f       	ori	r24, 0xFC	; 252
     79a:	8a b9       	out	0x0a, r24	; 10
     79c:	8b b1       	in	r24, 0x0b	; 11
     79e:	84 70       	andi	r24, 0x04	; 4
     7a0:	8b b9       	out	0x0b, r24	; 11
     7a2:	08 95       	ret

000007a4 <lcd_wr_char>:
     7a4:	cf 93       	push	r28
     7a6:	c8 2f       	mov	r28, r24
     7a8:	80 7f       	andi	r24, 0xF0	; 240
     7aa:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Bit_Reverse>
     7ae:	9b b1       	in	r25, 0x0b	; 11
     7b0:	93 7c       	andi	r25, 0xC3	; 195
     7b2:	9b b9       	out	0x0b, r25	; 11
     7b4:	9b b1       	in	r25, 0x0b	; 11
     7b6:	88 0f       	add	r24, r24
     7b8:	88 0f       	add	r24, r24
     7ba:	98 2b       	or	r25, r24
     7bc:	9b b9       	out	0x0b, r25	; 11
     7be:	5f 9a       	sbi	0x0b, 7	; 11
     7c0:	5e 9a       	sbi	0x0b, 6	; 11
     7c2:	8f e1       	ldi	r24, 0x1F	; 31
     7c4:	9e e4       	ldi	r25, 0x4E	; 78
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <lcd_wr_char+0x22>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <lcd_wr_char+0x28>
     7cc:	00 00       	nop
     7ce:	5e 98       	cbi	0x0b, 6	; 11
     7d0:	8c 2f       	mov	r24, r28
     7d2:	82 95       	swap	r24
     7d4:	80 7f       	andi	r24, 0xF0	; 240
     7d6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Bit_Reverse>
     7da:	9b b1       	in	r25, 0x0b	; 11
     7dc:	93 7c       	andi	r25, 0xC3	; 195
     7de:	9b b9       	out	0x0b, r25	; 11
     7e0:	9b b1       	in	r25, 0x0b	; 11
     7e2:	88 0f       	add	r24, r24
     7e4:	88 0f       	add	r24, r24
     7e6:	98 2b       	or	r25, r24
     7e8:	9b b9       	out	0x0b, r25	; 11
     7ea:	5f 9a       	sbi	0x0b, 7	; 11
     7ec:	5e 9a       	sbi	0x0b, 6	; 11
     7ee:	8f e1       	ldi	r24, 0x1F	; 31
     7f0:	9e e4       	ldi	r25, 0x4E	; 78
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <lcd_wr_char+0x4e>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <lcd_wr_char+0x54>
     7f8:	00 00       	nop
     7fa:	5e 98       	cbi	0x0b, 6	; 11
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <lcd_home>:
     800:	80 e8       	ldi	r24, 0x80	; 128
     802:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
     806:	08 95       	ret

00000808 <lcd_string>:
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ec 01       	movw	r28, r24
     80e:	88 81       	ld	r24, Y
     810:	88 23       	and	r24, r24
     812:	31 f0       	breq	.+12     	; 0x820 <lcd_string+0x18>
     814:	21 96       	adiw	r28, 0x01	; 1
     816:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
     81a:	89 91       	ld	r24, Y+
     81c:	81 11       	cpse	r24, r1
     81e:	fb cf       	rjmp	.-10     	; 0x816 <lcd_string+0xe>
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <lcd_cursor>:
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	19 f0       	breq	.+6      	; 0x830 <lcd_cursor+0xa>
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	31 f0       	breq	.+12     	; 0x83a <lcd_cursor+0x14>
     82e:	08 95       	ret
     830:	8f e7       	ldi	r24, 0x7F	; 127
     832:	86 0f       	add	r24, r22
     834:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
     838:	08 95       	ret
     83a:	8f eb       	ldi	r24, 0xBF	; 191
     83c:	86 0f       	add	r24, r22
     83e:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
     842:	08 95       	ret

00000844 <lcd_string2>:
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ea 01       	movw	r28, r20
     84a:	0e 94 13 04 	call	0x826	; 0x826 <lcd_cursor>
     84e:	88 81       	ld	r24, Y
     850:	88 23       	and	r24, r24
     852:	31 f0       	breq	.+12     	; 0x860 <lcd_string2+0x1c>
     854:	21 96       	adiw	r28, 0x01	; 1
     856:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
     85a:	89 91       	ld	r24, Y+
     85c:	81 11       	cpse	r24, r1
     85e:	fb cf       	rjmp	.-10     	; 0x856 <lcd_string2+0x12>
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <lcd_start>:
     866:	8f e9       	ldi	r24, 0x9F	; 159
     868:	9f e0       	ldi	r25, 0x0F	; 15
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <lcd_start+0x4>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <lcd_start+0xa>
     870:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     872:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
     874:	80 e3       	ldi	r24, 0x30	; 48
     876:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     878:	5e 9a       	sbi	0x0b, 6	; 11
     87a:	ef e1       	ldi	r30, 0x1F	; 31
     87c:	fe e4       	ldi	r31, 0x4E	; 78
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <lcd_start+0x18>
     882:	00 c0       	rjmp	.+0      	; 0x884 <lcd_start+0x1e>
     884:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     886:	5e 98       	cbi	0x0b, 6	; 11
     888:	ef e9       	ldi	r30, 0x9F	; 159
     88a:	ff e0       	ldi	r31, 0x0F	; 15
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <lcd_start+0x26>
     890:	00 c0       	rjmp	.+0      	; 0x892 <lcd_start+0x2c>
     892:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     894:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     896:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     898:	5e 9a       	sbi	0x0b, 6	; 11
     89a:	ef e1       	ldi	r30, 0x1F	; 31
     89c:	fe e4       	ldi	r31, 0x4E	; 78
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <lcd_start+0x38>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <lcd_start+0x3e>
     8a4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8a6:	5e 98       	cbi	0x0b, 6	; 11
     8a8:	ef e9       	ldi	r30, 0x9F	; 159
     8aa:	ff e0       	ldi	r31, 0x0F	; 15
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <lcd_start+0x46>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <lcd_start+0x4c>
     8b2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8b4:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     8b6:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     8b8:	5e 9a       	sbi	0x0b, 6	; 11
     8ba:	8f e1       	ldi	r24, 0x1F	; 31
     8bc:	9e e4       	ldi	r25, 0x4E	; 78
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <lcd_start+0x58>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <lcd_start+0x5e>
     8c4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8c6:	5e 98       	cbi	0x0b, 6	; 11
     8c8:	ef e9       	ldi	r30, 0x9F	; 159
     8ca:	ff e0       	ldi	r31, 0x0F	; 15
     8cc:	31 97       	sbiw	r30, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <lcd_start+0x66>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <lcd_start+0x6c>
     8d2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8d4:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
     8d6:	80 e1       	ldi	r24, 0x10	; 16
     8d8:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     8da:	5e 9a       	sbi	0x0b, 6	; 11
     8dc:	8f e9       	ldi	r24, 0x9F	; 159
     8de:	9f e0       	ldi	r25, 0x0F	; 15
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd_start+0x7a>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <lcd_start+0x80>
     8e6:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8e8:	5e 98       	cbi	0x0b, 6	; 11
     8ea:	ef e9       	ldi	r30, 0x9F	; 159
     8ec:	ff e0       	ldi	r31, 0x0F	; 15
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <lcd_start+0x88>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <lcd_start+0x8e>
     8f4:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     8f6:	88 e2       	ldi	r24, 0x28	; 40
     8f8:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
     902:	8c e0       	ldi	r24, 0x0C	; 12
     904:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
     90e:	08 95       	ret

00000910 <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 99 03 	call	0x732	; 0x732 <lcd_wr_command>
     916:	08 95       	ret

00000918 <lcd_print5>:
* Logic:
* Example Call: lcd_print(1,1,val,3)
*/
//002 and not 0020
static void lcd_print5(char row, char coloumn, unsigned int value, int digits, char* str)
{
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	7a 01       	movw	r14, r20
     92e:	69 01       	movw	r12, r18
	if(value)
     930:	41 15       	cp	r20, r1
     932:	51 05       	cpc	r21, r1
     934:	09 f4       	brne	.+2      	; 0x938 <lcd_print5+0x20>
     936:	f9 c0       	rjmp	.+498    	; 0xb2a <lcd_print5+0x212>
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
		{
			if ((num & 1) == 1)
     938:	40 fd       	sbrc	r20, 0
     93a:	0b c0       	rjmp	.+22     	; 0x952 <lcd_print5+0x3a>
     93c:	fa 01       	movw	r30, r20
     93e:	c0 e0       	ldi	r28, 0x00	; 0
     940:	02 c0       	rjmp	.+4      	; 0x946 <lcd_print5+0x2e>
     942:	e0 fd       	sbrc	r30, 0
     944:	07 c0       	rjmp	.+14     	; 0x954 <lcd_print5+0x3c>
			{
				break;
			}
			else
			{
				count++;
     946:	cf 5f       	subi	r28, 0xFF	; 255
				num = num >> 1;
     948:	f6 95       	lsr	r31
     94a:	e7 95       	ror	r30
	if(value)
	{
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
     94c:	30 97       	sbiw	r30, 0x00	; 0
     94e:	c9 f7       	brne	.-14     	; 0x942 <lcd_print5+0x2a>
     950:	01 c0       	rjmp	.+2      	; 0x954 <lcd_print5+0x3c>
		{
			if ((num & 1) == 1)
     952:	c0 e0       	ldi	r28, 0x00	; 0
				num = num >> 1;
			}
		}
		
		unsigned char flag=0;
		if(row==0||coloumn==0)
     954:	88 23       	and	r24, r24
     956:	11 f0       	breq	.+4      	; 0x95c <lcd_print5+0x44>
     958:	61 11       	cpse	r22, r1
     95a:	03 c0       	rjmp	.+6      	; 0x962 <lcd_print5+0x4a>
			lcd_home();
     95c:	0e 94 00 04 	call	0x800	; 0x800 <lcd_home>
     960:	02 c0       	rjmp	.+4      	; 0x966 <lcd_print5+0x4e>
		else
			lcd_cursor(row,coloumn);
     962:	0e 94 13 04 	call	0x826	; 0x826 <lcd_cursor>
	
		if(digits==5 || flag==1)
     966:	25 e0       	ldi	r18, 0x05	; 5
     968:	c2 16       	cp	r12, r18
     96a:	d1 04       	cpc	r13, r1
     96c:	c9 f4       	brne	.+50     	; 0x9a0 <lcd_print5+0x88>
		{	
			million=value/10000+48;
     96e:	97 01       	movw	r18, r14
     970:	32 95       	swap	r19
     972:	22 95       	swap	r18
     974:	2f 70       	andi	r18, 0x0F	; 15
     976:	23 27       	eor	r18, r19
     978:	3f 70       	andi	r19, 0x0F	; 15
     97a:	23 27       	eor	r18, r19
     97c:	a7 e4       	ldi	r26, 0x47	; 71
     97e:	b3 e0       	ldi	r27, 0x03	; 3
     980:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     984:	96 95       	lsr	r25
     986:	87 95       	ror	r24
     988:	96 95       	lsr	r25
     98a:	87 95       	ror	r24
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	c0 96       	adiw	r24, 0x30	; 48
     992:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <million+0x1>
     996:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <million>
			//if(count < 5)
			lcd_wr_char(million);
     99a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <lcd_print5+0x92>
			
			flag=1;
		}
		if(digits==4 || flag==1)
     9a0:	34 e0       	ldi	r19, 0x04	; 4
     9a2:	c3 16       	cp	r12, r19
     9a4:	d1 04       	cpc	r13, r1
     9a6:	09 f0       	breq	.+2      	; 0x9aa <lcd_print5+0x92>
     9a8:	cf c0       	rjmp	.+414    	; 0xb48 <lcd_print5+0x230>
		{
			temp = value/1000;
     9aa:	97 01       	movw	r18, r14
     9ac:	36 95       	lsr	r19
     9ae:	27 95       	ror	r18
     9b0:	36 95       	lsr	r19
     9b2:	27 95       	ror	r18
     9b4:	36 95       	lsr	r19
     9b6:	27 95       	ror	r18
     9b8:	a5 ec       	ldi	r26, 0xC5	; 197
     9ba:	b0 e2       	ldi	r27, 0x20	; 32
     9bc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     9c0:	ac 01       	movw	r20, r24
     9c2:	52 95       	swap	r21
     9c4:	42 95       	swap	r20
     9c6:	4f 70       	andi	r20, 0x0F	; 15
     9c8:	45 27       	eor	r20, r21
     9ca:	5f 70       	andi	r21, 0x0F	; 15
     9cc:	45 27       	eor	r20, r21
     9ce:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     9d2:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
			thousand = temp%10 + 48;
     9d6:	9a 01       	movw	r18, r20
     9d8:	ad ec       	ldi	r26, 0xCD	; 205
     9da:	bc ec       	ldi	r27, 0xCC	; 204
     9dc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     9e0:	96 95       	lsr	r25
     9e2:	87 95       	ror	r24
     9e4:	96 95       	lsr	r25
     9e6:	87 95       	ror	r24
     9e8:	96 95       	lsr	r25
     9ea:	87 95       	ror	r24
     9ec:	9c 01       	movw	r18, r24
     9ee:	22 0f       	add	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	82 0f       	add	r24, r18
     a00:	93 1f       	adc	r25, r19
     a02:	fa 01       	movw	r30, r20
     a04:	e8 1b       	sub	r30, r24
     a06:	f9 0b       	sbc	r31, r25
     a08:	cf 01       	movw	r24, r30
     a0a:	c0 96       	adiw	r24, 0x30	; 48
     a0c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <thousand+0x1>
     a10:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <thousand>
			//if(count < 4)
			lcd_wr_char(thousand);
     a14:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			
			flag=1;
		}
		if(digits==3 || flag==1)
		{
			temp = value/100;
     a18:	97 01       	movw	r18, r14
     a1a:	36 95       	lsr	r19
     a1c:	27 95       	ror	r18
     a1e:	36 95       	lsr	r19
     a20:	27 95       	ror	r18
     a22:	ab e7       	ldi	r26, 0x7B	; 123
     a24:	b4 e1       	ldi	r27, 0x14	; 20
     a26:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     a2a:	ac 01       	movw	r20, r24
     a2c:	56 95       	lsr	r21
     a2e:	47 95       	ror	r20
     a30:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     a34:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
			hundred = temp%10 + 48;
     a38:	9a 01       	movw	r18, r20
     a3a:	ad ec       	ldi	r26, 0xCD	; 205
     a3c:	bc ec       	ldi	r27, 0xCC	; 204
     a3e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     a42:	96 95       	lsr	r25
     a44:	87 95       	ror	r24
     a46:	96 95       	lsr	r25
     a48:	87 95       	ror	r24
     a4a:	96 95       	lsr	r25
     a4c:	87 95       	ror	r24
     a4e:	9c 01       	movw	r18, r24
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	82 0f       	add	r24, r18
     a62:	93 1f       	adc	r25, r19
     a64:	9a 01       	movw	r18, r20
     a66:	28 1b       	sub	r18, r24
     a68:	39 0b       	sbc	r19, r25
     a6a:	c9 01       	movw	r24, r18
     a6c:	c0 96       	adiw	r24, 0x30	; 48
     a6e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <hundred+0x1>
     a72:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <hundred>
			//if(count < 3)
			lcd_wr_char(hundred);
     a76:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <lcd_print5+0x16e>
			flag=1;
		}
		if(digits==2 || flag==1)
     a7c:	32 e0       	ldi	r19, 0x02	; 2
     a7e:	c3 16       	cp	r12, r19
     a80:	d1 04       	cpc	r13, r1
     a82:	09 f0       	breq	.+2      	; 0xa86 <lcd_print5+0x16e>
     a84:	67 c0       	rjmp	.+206    	; 0xb54 <lcd_print5+0x23c>
		{
			temp = value/10;
     a86:	97 01       	movw	r18, r14
     a88:	ad ec       	ldi	r26, 0xCD	; 205
     a8a:	bc ec       	ldi	r27, 0xCC	; 204
     a8c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     a90:	5c 01       	movw	r10, r24
     a92:	b6 94       	lsr	r11
     a94:	a7 94       	ror	r10
     a96:	b6 94       	lsr	r11
     a98:	a7 94       	ror	r10
     a9a:	b6 94       	lsr	r11
     a9c:	a7 94       	ror	r10
     a9e:	b0 92 93 01 	sts	0x0193, r11	; 0x800193 <temp+0x1>
     aa2:	a0 92 92 01 	sts	0x0192, r10	; 0x800192 <temp>
			tens = temp%10 + 48;
     aa6:	95 01       	movw	r18, r10
     aa8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	96 95       	lsr	r25
     ab2:	87 95       	ror	r24
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	9c 01       	movw	r18, r24
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	82 0f       	add	r24, r18
     acc:	93 1f       	adc	r25, r19
     ace:	f5 01       	movw	r30, r10
     ad0:	e8 1b       	sub	r30, r24
     ad2:	f9 0b       	sbc	r31, r25
     ad4:	cf 01       	movw	r24, r30
     ad6:	c0 96       	adiw	r24, 0x30	; 48
     ad8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <tens+0x1>
     adc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tens>
			//if(count < 2)
			lcd_wr_char(tens);
     ae0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			flag=1;
		}
		if(digits==1 || flag==1)
		{
			unit = value%10 + 48;
     ae4:	c5 01       	movw	r24, r10
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	aa 0c       	add	r10, r10
     aec:	bb 1c       	adc	r11, r11
     aee:	aa 0c       	add	r10, r10
     af0:	bb 1c       	adc	r11, r11
     af2:	aa 0c       	add	r10, r10
     af4:	bb 1c       	adc	r11, r11
     af6:	a8 0e       	add	r10, r24
     af8:	b9 1e       	adc	r11, r25
     afa:	ea 18       	sub	r14, r10
     afc:	fb 08       	sbc	r15, r11
     afe:	c7 01       	movw	r24, r14
     b00:	c0 96       	adiw	r24, 0x30	; 48
     b02:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <unit+0x1>
     b06:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <unit>
			if(count < 1)
     b0a:	c1 11       	cpse	r28, r1
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <lcd_print5+0x1fa>
				lcd_wr_char(unit);
     b0e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
		}
		if(digits>5)
     b12:	f6 e0       	ldi	r31, 0x06	; 6
     b14:	cf 16       	cp	r12, r31
     b16:	d1 04       	cpc	r13, r1
     b18:	1c f0       	brlt	.+6      	; 0xb20 <lcd_print5+0x208>
		{
			lcd_wr_char('E');
     b1a:	85 e4       	ldi	r24, 0x45	; 69
     b1c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     b20:	f8 01       	movw	r30, r16
     b22:	80 81       	ld	r24, Z
     b24:	81 11       	cpse	r24, r1
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <lcd_print5+0x220>
     b28:	3a c0       	rjmp	.+116    	; 0xb9e <lcd_print5+0x286>
		}
	}
	
	else	//if(value==0)
	{
		lcd_wr_char('0'); //print one 0
     b2a:	80 e3       	ldi	r24, 0x30	; 48
     b2c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
		lcd_wr_char('0'); //print one 0
     b30:	80 e3       	ldi	r24, 0x30	; 48
     b32:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
     b36:	f4 cf       	rjmp	.-24     	; 0xb20 <lcd_print5+0x208>
     b38:	e8 01       	movw	r28, r16
     b3a:	21 96       	adiw	r28, 0x01	; 1
	}
	
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     b3c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     b40:	89 91       	ld	r24, Y+
     b42:	81 11       	cpse	r24, r1
     b44:	fb cf       	rjmp	.-10     	; 0xb3c <lcd_print5+0x224>
     b46:	2b c0       	rjmp	.+86     	; 0xb9e <lcd_print5+0x286>
			//if(count < 4)
			lcd_wr_char(thousand);
			
			flag=1;
		}
		if(digits==3 || flag==1)
     b48:	f3 e0       	ldi	r31, 0x03	; 3
     b4a:	cf 16       	cp	r12, r31
     b4c:	d1 04       	cpc	r13, r1
     b4e:	09 f0       	breq	.+2      	; 0xb52 <lcd_print5+0x23a>
     b50:	95 cf       	rjmp	.-214    	; 0xa7c <lcd_print5+0x164>
     b52:	62 cf       	rjmp	.-316    	; 0xa18 <lcd_print5+0x100>
			tens = temp%10 + 48;
			//if(count < 2)
			lcd_wr_char(tens);
			flag=1;
		}
		if(digits==1 || flag==1)
     b54:	21 e0       	ldi	r18, 0x01	; 1
     b56:	c2 16       	cp	r12, r18
     b58:	d1 04       	cpc	r13, r1
     b5a:	d9 f6       	brne	.-74     	; 0xb12 <lcd_print5+0x1fa>
		{
			unit = value%10 + 48;
     b5c:	97 01       	movw	r18, r14
     b5e:	ad ec       	ldi	r26, 0xCD	; 205
     b60:	bc ec       	ldi	r27, 0xCC	; 204
     b62:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     b66:	96 95       	lsr	r25
     b68:	87 95       	ror	r24
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	9c 01       	movw	r18, r24
     b74:	22 0f       	add	r18, r18
     b76:	33 1f       	adc	r19, r19
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	e8 1a       	sub	r14, r24
     b8a:	f9 0a       	sbc	r15, r25
     b8c:	c7 01       	movw	r24, r14
     b8e:	c0 96       	adiw	r24, 0x30	; 48
     b90:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <unit+0x1>
     b94:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <unit>
			if(count < 1)
     b98:	c1 11       	cpse	r28, r1
     b9a:	c2 cf       	rjmp	.-124    	; 0xb20 <lcd_print5+0x208>
     b9c:	b8 cf       	rjmp	.-144    	; 0xb0e <lcd_print5+0x1f6>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	bf 90       	pop	r11
     bb0:	af 90       	pop	r10
     bb2:	08 95       	ret

00000bb4 <lcd_print2>:

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	6a 01       	movw	r12, r20
     bc4:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     bc6:	88 23       	and	r24, r24
     bc8:	11 f0       	breq	.+4      	; 0xbce <lcd_print2+0x1a>
     bca:	61 11       	cpse	r22, r1
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <lcd_print2+0x20>
	{
		lcd_home();
     bce:	0e 94 00 04 	call	0x800	; 0x800 <lcd_home>
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     bd4:	0e 94 13 04 	call	0x826	; 0x826 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     bd8:	25 e0       	ldi	r18, 0x05	; 5
     bda:	e2 16       	cp	r14, r18
     bdc:	f1 04       	cpc	r15, r1
     bde:	f1 f4       	brne	.+60     	; 0xc1c <lcd_print2+0x68>
	{
		million=value/10000+48;
     be0:	96 01       	movw	r18, r12
     be2:	32 95       	swap	r19
     be4:	22 95       	swap	r18
     be6:	2f 70       	andi	r18, 0x0F	; 15
     be8:	23 27       	eor	r18, r19
     bea:	3f 70       	andi	r19, 0x0F	; 15
     bec:	23 27       	eor	r18, r19
     bee:	a7 e4       	ldi	r26, 0x47	; 71
     bf0:	b3 e0       	ldi	r27, 0x03	; 3
     bf2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     bf6:	96 95       	lsr	r25
     bf8:	87 95       	ror	r24
     bfa:	96 95       	lsr	r25
     bfc:	87 95       	ror	r24
     bfe:	96 95       	lsr	r25
     c00:	87 95       	ror	r24
     c02:	c0 96       	adiw	r24, 0x30	; 48
     c04:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <million+0x1>
     c08:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <million>
		if(million != '0')
     c0c:	80 33       	cpi	r24, 0x30	; 48
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <lcd_print2+0x60>
     c12:	76 c0       	rjmp	.+236    	; 0xd00 <lcd_print2+0x14c>
		{
			lcd_wr_char(million);
     c14:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;	
     c18:	c1 e0       	ldi	r28, 0x01	; 1
     c1a:	73 c0       	rjmp	.+230    	; 0xd02 <lcd_print2+0x14e>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     c1c:	34 e0       	ldi	r19, 0x04	; 4
     c1e:	e3 16       	cp	r14, r19
     c20:	f1 04       	cpc	r15, r1
     c22:	09 f0       	breq	.+2      	; 0xc26 <lcd_print2+0x72>
     c24:	dc c0       	rjmp	.+440    	; 0xdde <lcd_print2+0x22a>
     c26:	21 c1       	rjmp	.+578    	; 0xe6a <lcd_print2+0x2b6>
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     c28:	cc 23       	and	r28, r28
     c2a:	09 f4       	brne	.+2      	; 0xc2e <lcd_print2+0x7a>
     c2c:	a4 c0       	rjmp	.+328    	; 0xd76 <lcd_print2+0x1c2>
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <lcd_print2+0x7e>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c30:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     c32:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;
     c36:	cf 5f       	subi	r28, 0xFF	; 255
     c38:	9e c0       	rjmp	.+316    	; 0xd76 <lcd_print2+0x1c2>
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     c3a:	cc 23       	and	r28, r28
     c3c:	09 f4       	brne	.+2      	; 0xc40 <lcd_print2+0x8c>
     c3e:	d5 c0       	rjmp	.+426    	; 0xdea <lcd_print2+0x236>
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <lcd_print2+0x90>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c42:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     c44:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;
     c48:	cf 5f       	subi	r28, 0xFF	; 255
     c4a:	cf c0       	rjmp	.+414    	; 0xdea <lcd_print2+0x236>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	e8 16       	cp	r14, r24
     c50:	f1 04       	cpc	r15, r1
     c52:	09 f0       	breq	.+2      	; 0xc56 <lcd_print2+0xa2>
     c54:	fc c0       	rjmp	.+504    	; 0xe4e <lcd_print2+0x29a>
     c56:	79 c1       	rjmp	.+754    	; 0xf4a <lcd_print2+0x396>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     c58:	cc 23       	and	r28, r28
     c5a:	39 f0       	breq	.+14     	; 0xc6a <lcd_print2+0xb6>
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <lcd_print2+0xac>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c5e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     c60:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;
     c64:	cf 5f       	subi	r28, 0xFF	; 255
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <lcd_print2+0xb6>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c68:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     c6a:	96 01       	movw	r18, r12
     c6c:	ad ec       	ldi	r26, 0xCD	; 205
     c6e:	bc ec       	ldi	r27, 0xCC	; 204
     c70:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
     c80:	9c 01       	movw	r18, r24
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	f6 01       	movw	r30, r12
     c98:	e8 1b       	sub	r30, r24
     c9a:	f9 0b       	sbc	r31, r25
     c9c:	cf 01       	movw	r24, r30
     c9e:	c0 96       	adiw	r24, 0x30	; 48
     ca0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <unit+0x1>
     ca4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <unit>
		lcd_wr_char(unit);
     ca8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
		count++;
     cac:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     cae:	f6 e0       	ldi	r31, 0x06	; 6
     cb0:	ef 16       	cp	r14, r31
     cb2:	f1 04       	cpc	r15, r1
     cb4:	1c f0       	brlt	.+6      	; 0xcbc <lcd_print2+0x108>
	{
		lcd_wr_char('E');
     cb6:	85 e4       	ldi	r24, 0x45	; 69
     cb8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
	}
	
	while(*str != '\0')
     cbc:	f8 01       	movw	r30, r16
     cbe:	80 81       	ld	r24, Z
     cc0:	88 23       	and	r24, r24
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <lcd_print2+0x112>
     cc4:	cb c0       	rjmp	.+406    	; 0xe5c <lcd_print2+0x2a8>
     cc6:	0f 5f       	subi	r16, 0xFF	; 255
     cc8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     cca:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
		count++;
     cce:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     cd0:	ff ef       	ldi	r31, 0xFF	; 255
     cd2:	ef 1a       	sub	r14, r31
     cd4:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     cd6:	f8 01       	movw	r30, r16
     cd8:	81 91       	ld	r24, Z+
     cda:	8f 01       	movw	r16, r30
     cdc:	81 11       	cpse	r24, r1
     cde:	f5 cf       	rjmp	.-22     	; 0xcca <lcd_print2+0x116>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     ce0:	8c 2f       	mov	r24, r28
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	8e 15       	cp	r24, r14
     ce6:	9f 05       	cpc	r25, r15
     ce8:	0c f0       	brlt	.+2      	; 0xcec <lcd_print2+0x138>
     cea:	62 c1       	rjmp	.+708    	; 0xfb0 <lcd_print2+0x3fc>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     cec:	80 e2       	ldi	r24, 0x20	; 32
     cee:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;
     cf2:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
	{
		while(count != digits)
     cf4:	8c 2f       	mov	r24, r28
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 15       	cp	r24, r14
     cfa:	9f 05       	cpc	r25, r15
     cfc:	b9 f7       	brne	.-18     	; 0xcec <lcd_print2+0x138>
     cfe:	58 c1       	rjmp	.+688    	; 0xfb0 <lcd_print2+0x3fc>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     d00:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     d02:	96 01       	movw	r18, r12
     d04:	36 95       	lsr	r19
     d06:	27 95       	ror	r18
     d08:	36 95       	lsr	r19
     d0a:	27 95       	ror	r18
     d0c:	36 95       	lsr	r19
     d0e:	27 95       	ror	r18
     d10:	a5 ec       	ldi	r26, 0xC5	; 197
     d12:	b0 e2       	ldi	r27, 0x20	; 32
     d14:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     d18:	ac 01       	movw	r20, r24
     d1a:	52 95       	swap	r21
     d1c:	42 95       	swap	r20
     d1e:	4f 70       	andi	r20, 0x0F	; 15
     d20:	45 27       	eor	r20, r21
     d22:	5f 70       	andi	r21, 0x0F	; 15
     d24:	45 27       	eor	r20, r21
     d26:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     d2a:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		thousand = temp%10 + 48;
     d2e:	9a 01       	movw	r18, r20
     d30:	ad ec       	ldi	r26, 0xCD	; 205
     d32:	bc ec       	ldi	r27, 0xCC	; 204
     d34:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     d38:	96 95       	lsr	r25
     d3a:	87 95       	ror	r24
     d3c:	96 95       	lsr	r25
     d3e:	87 95       	ror	r24
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	9c 01       	movw	r18, r24
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	82 0f       	add	r24, r18
     d58:	93 1f       	adc	r25, r19
     d5a:	9a 01       	movw	r18, r20
     d5c:	28 1b       	sub	r18, r24
     d5e:	39 0b       	sbc	r19, r25
     d60:	c9 01       	movw	r24, r18
     d62:	c0 96       	adiw	r24, 0x30	; 48
     d64:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <thousand+0x1>
     d68:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     d6c:	80 33       	cpi	r24, 0x30	; 48
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <lcd_print2+0x1c0>
     d72:	5f cf       	rjmp	.-322    	; 0xc32 <lcd_print2+0x7e>
     d74:	59 cf       	rjmp	.-334    	; 0xc28 <lcd_print2+0x74>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     d76:	96 01       	movw	r18, r12
     d78:	36 95       	lsr	r19
     d7a:	27 95       	ror	r18
     d7c:	36 95       	lsr	r19
     d7e:	27 95       	ror	r18
     d80:	ab e7       	ldi	r26, 0x7B	; 123
     d82:	b4 e1       	ldi	r27, 0x14	; 20
     d84:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     d88:	ac 01       	movw	r20, r24
     d8a:	56 95       	lsr	r21
     d8c:	47 95       	ror	r20
     d8e:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     d92:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		hundred = temp%10 + 48;
     d96:	9a 01       	movw	r18, r20
     d98:	ad ec       	ldi	r26, 0xCD	; 205
     d9a:	bc ec       	ldi	r27, 0xCC	; 204
     d9c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	96 95       	lsr	r25
     daa:	87 95       	ror	r24
     dac:	9c 01       	movw	r18, r24
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	fa 01       	movw	r30, r20
     dc4:	e8 1b       	sub	r30, r24
     dc6:	f9 0b       	sbc	r31, r25
     dc8:	cf 01       	movw	r24, r30
     dca:	c0 96       	adiw	r24, 0x30	; 48
     dcc:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <hundred+0x1>
     dd0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <hundred>
		if(hundred != '0' || count != 0)
     dd4:	80 33       	cpi	r24, 0x30	; 48
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f0       	breq	.+2      	; 0xddc <lcd_print2+0x228>
     dda:	34 cf       	rjmp	.-408    	; 0xc44 <lcd_print2+0x90>
     ddc:	2e cf       	rjmp	.-420    	; 0xc3a <lcd_print2+0x86>
			lcd_wr_char(thousand);
			count++;
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     dde:	f3 e0       	ldi	r31, 0x03	; 3
     de0:	ef 16       	cp	r14, r31
     de2:	f1 04       	cpc	r15, r1
     de4:	09 f0       	breq	.+2      	; 0xde8 <lcd_print2+0x234>
     de6:	32 cf       	rjmp	.-412    	; 0xc4c <lcd_print2+0x98>
     de8:	7b c0       	rjmp	.+246    	; 0xee0 <lcd_print2+0x32c>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     dea:	96 01       	movw	r18, r12
     dec:	ad ec       	ldi	r26, 0xCD	; 205
     dee:	bc ec       	ldi	r27, 0xCC	; 204
     df0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     df4:	ac 01       	movw	r20, r24
     df6:	56 95       	lsr	r21
     df8:	47 95       	ror	r20
     dfa:	56 95       	lsr	r21
     dfc:	47 95       	ror	r20
     dfe:	56 95       	lsr	r21
     e00:	47 95       	ror	r20
     e02:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     e06:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		tens = temp%10 + 48;
     e0a:	9a 01       	movw	r18, r20
     e0c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	9c 01       	movw	r18, r24
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	9a 01       	movw	r18, r20
     e34:	28 1b       	sub	r18, r24
     e36:	39 0b       	sbc	r19, r25
     e38:	c9 01       	movw	r24, r18
     e3a:	c0 96       	adiw	r24, 0x30	; 48
     e3c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <tens+0x1>
     e40:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tens>
		if(tens != '0' || count != 0)
     e44:	80 33       	cpi	r24, 0x30	; 48
     e46:	91 05       	cpc	r25, r1
     e48:	09 f0       	breq	.+2      	; 0xe4c <lcd_print2+0x298>
     e4a:	0a cf       	rjmp	.-492    	; 0xc60 <lcd_print2+0xac>
     e4c:	05 cf       	rjmp	.-502    	; 0xc58 <lcd_print2+0xa4>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     e4e:	31 e0       	ldi	r19, 0x01	; 1
     e50:	e3 16       	cp	r14, r19
     e52:	f1 04       	cpc	r15, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <lcd_print2+0x2a4>
     e56:	08 cf       	rjmp	.-496    	; 0xc68 <lcd_print2+0xb4>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     e58:	c0 e0       	ldi	r28, 0x00	; 0
     e5a:	29 cf       	rjmp	.-430    	; 0xcae <lcd_print2+0xfa>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     e5c:	8c 2f       	mov	r24, r28
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	8e 15       	cp	r24, r14
     e62:	9f 05       	cpc	r25, r15
     e64:	0c f4       	brge	.+2      	; 0xe68 <lcd_print2+0x2b4>
     e66:	42 cf       	rjmp	.-380    	; 0xcec <lcd_print2+0x138>
     e68:	a3 c0       	rjmp	.+326    	; 0xfb0 <lcd_print2+0x3fc>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     e6a:	96 01       	movw	r18, r12
     e6c:	36 95       	lsr	r19
     e6e:	27 95       	ror	r18
     e70:	36 95       	lsr	r19
     e72:	27 95       	ror	r18
     e74:	36 95       	lsr	r19
     e76:	27 95       	ror	r18
     e78:	a5 ec       	ldi	r26, 0xC5	; 197
     e7a:	b0 e2       	ldi	r27, 0x20	; 32
     e7c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     e80:	ac 01       	movw	r20, r24
     e82:	52 95       	swap	r21
     e84:	42 95       	swap	r20
     e86:	4f 70       	andi	r20, 0x0F	; 15
     e88:	45 27       	eor	r20, r21
     e8a:	5f 70       	andi	r21, 0x0F	; 15
     e8c:	45 27       	eor	r20, r21
     e8e:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     e92:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		thousand = temp%10 + 48;
     e96:	9a 01       	movw	r18, r20
     e98:	ad ec       	ldi	r26, 0xCD	; 205
     e9a:	bc ec       	ldi	r27, 0xCC	; 204
     e9c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     ea0:	96 95       	lsr	r25
     ea2:	87 95       	ror	r24
     ea4:	96 95       	lsr	r25
     ea6:	87 95       	ror	r24
     ea8:	96 95       	lsr	r25
     eaa:	87 95       	ror	r24
     eac:	9c 01       	movw	r18, r24
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	fa 01       	movw	r30, r20
     ec4:	e8 1b       	sub	r30, r24
     ec6:	f9 0b       	sbc	r31, r25
     ec8:	cf 01       	movw	r24, r30
     eca:	c0 96       	adiw	r24, 0x30	; 48
     ecc:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <thousand+0x1>
     ed0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     ed4:	80 33       	cpi	r24, 0x30	; 48
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f0       	breq	.+2      	; 0xedc <lcd_print2+0x328>
     eda:	aa ce       	rjmp	.-684    	; 0xc30 <lcd_print2+0x7c>
     edc:	c0 e0       	ldi	r28, 0x00	; 0
     ede:	4b cf       	rjmp	.-362    	; 0xd76 <lcd_print2+0x1c2>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     ee0:	96 01       	movw	r18, r12
     ee2:	36 95       	lsr	r19
     ee4:	27 95       	ror	r18
     ee6:	36 95       	lsr	r19
     ee8:	27 95       	ror	r18
     eea:	ab e7       	ldi	r26, 0x7B	; 123
     eec:	b4 e1       	ldi	r27, 0x14	; 20
     eee:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     ef2:	ac 01       	movw	r20, r24
     ef4:	56 95       	lsr	r21
     ef6:	47 95       	ror	r20
     ef8:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     efc:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		hundred = temp%10 + 48;
     f00:	9a 01       	movw	r18, r20
     f02:	ad ec       	ldi	r26, 0xCD	; 205
     f04:	bc ec       	ldi	r27, 0xCC	; 204
     f06:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	9c 01       	movw	r18, r24
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	9a 01       	movw	r18, r20
     f2e:	28 1b       	sub	r18, r24
     f30:	39 0b       	sbc	r19, r25
     f32:	c9 01       	movw	r24, r18
     f34:	c0 96       	adiw	r24, 0x30	; 48
     f36:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <hundred+0x1>
     f3a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <hundred>
		if(hundred != '0' || count != 0)
     f3e:	80 33       	cpi	r24, 0x30	; 48
     f40:	91 05       	cpc	r25, r1
     f42:	09 f0       	breq	.+2      	; 0xf46 <lcd_print2+0x392>
     f44:	7e ce       	rjmp	.-772    	; 0xc42 <lcd_print2+0x8e>
     f46:	c0 e0       	ldi	r28, 0x00	; 0
     f48:	50 cf       	rjmp	.-352    	; 0xdea <lcd_print2+0x236>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     f4a:	96 01       	movw	r18, r12
     f4c:	ad ec       	ldi	r26, 0xCD	; 205
     f4e:	bc ec       	ldi	r27, 0xCC	; 204
     f50:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     f54:	ac 01       	movw	r20, r24
     f56:	56 95       	lsr	r21
     f58:	47 95       	ror	r20
     f5a:	56 95       	lsr	r21
     f5c:	47 95       	ror	r20
     f5e:	56 95       	lsr	r21
     f60:	47 95       	ror	r20
     f62:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
     f66:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		tens = temp%10 + 48;
     f6a:	9a 01       	movw	r18, r20
     f6c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	96 95       	lsr	r25
     f76:	87 95       	ror	r24
     f78:	96 95       	lsr	r25
     f7a:	87 95       	ror	r24
     f7c:	9c 01       	movw	r18, r24
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	fa 01       	movw	r30, r20
     f94:	e8 1b       	sub	r30, r24
     f96:	f9 0b       	sbc	r31, r25
     f98:	cf 01       	movw	r24, r30
     f9a:	c0 96       	adiw	r24, 0x30	; 48
     f9c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <tens+0x1>
     fa0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tens>
		if(tens != '0' || count != 0)
     fa4:	80 33       	cpi	r24, 0x30	; 48
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f0       	breq	.+2      	; 0xfac <lcd_print2+0x3f8>
     faa:	59 ce       	rjmp	.-846    	; 0xc5e <lcd_print2+0xaa>
     fac:	c0 e0       	ldi	r28, 0x00	; 0
     fae:	5d ce       	rjmp	.-838    	; 0xc6a <lcd_print2+0xb6>
		{
			lcd_wr_char(32);
			count++;
		}	
	}
}
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	08 95       	ret

00000fc0 <lcd_print3>:

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	8a 01       	movw	r16, r20
     fcc:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     fce:	88 23       	and	r24, r24
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <lcd_print3+0x16>
     fd2:	61 11       	cpse	r22, r1
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <lcd_print3+0x1c>
	{
		lcd_home();
     fd6:	0e 94 00 04 	call	0x800	; 0x800 <lcd_home>
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <lcd_print3+0x20>
	}
	else
	{
		lcd_cursor(row,coloumn);
     fdc:	0e 94 13 04 	call	0x826	; 0x826 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     fe0:	c5 30       	cpi	r28, 0x05	; 5
     fe2:	d1 05       	cpc	r29, r1
     fe4:	f9 f4       	brne	.+62     	; 0x1024 <lcd_print3+0x64>
	{
		million=value/10000+48;
     fe6:	98 01       	movw	r18, r16
     fe8:	32 95       	swap	r19
     fea:	22 95       	swap	r18
     fec:	2f 70       	andi	r18, 0x0F	; 15
     fee:	23 27       	eor	r18, r19
     ff0:	3f 70       	andi	r19, 0x0F	; 15
     ff2:	23 27       	eor	r18, r19
     ff4:	a7 e4       	ldi	r26, 0x47	; 71
     ff6:	b3 e0       	ldi	r27, 0x03	; 3
     ff8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
     ffc:	96 95       	lsr	r25
     ffe:	87 95       	ror	r24
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	c0 96       	adiw	r24, 0x30	; 48
    100a:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <million+0x1>
    100e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <million>
		if(million != '0')
    1012:	80 33       	cpi	r24, 0x30	; 48
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <lcd_print3+0x5a>
    1018:	4c c0       	rjmp	.+152    	; 0x10b2 <lcd_print3+0xf2>
		{
			lcd_wr_char(million);
    101a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;
    101e:	ff 24       	eor	r15, r15
    1020:	f3 94       	inc	r15
    1022:	48 c0       	rjmp	.+144    	; 0x10b4 <lcd_print3+0xf4>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
    1024:	c4 30       	cpi	r28, 0x04	; 4
    1026:	d1 05       	cpc	r29, r1
    1028:	09 f0       	breq	.+2      	; 0x102c <lcd_print3+0x6c>
    102a:	b2 c0       	rjmp	.+356    	; 0x1190 <lcd_print3+0x1d0>
    102c:	ed c0       	rjmp	.+474    	; 0x1208 <lcd_print3+0x248>
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    102e:	ff 20       	and	r15, r15
    1030:	09 f4       	brne	.+2      	; 0x1034 <lcd_print3+0x74>
    1032:	7a c0       	rjmp	.+244    	; 0x1128 <lcd_print3+0x168>
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <lcd_print3+0x78>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
    1036:	f1 2c       	mov	r15, r1
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
    1038:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;
    103c:	f3 94       	inc	r15
    103e:	74 c0       	rjmp	.+232    	; 0x1128 <lcd_print3+0x168>
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
    1040:	ff 20       	and	r15, r15
    1042:	09 f4       	brne	.+2      	; 0x1046 <lcd_print3+0x86>
    1044:	aa c0       	rjmp	.+340    	; 0x119a <lcd_print3+0x1da>
    1046:	01 c0       	rjmp	.+2      	; 0x104a <lcd_print3+0x8a>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
    1048:	f1 2c       	mov	r15, r1
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
    104a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
			count++;
    104e:	f3 94       	inc	r15
    1050:	a4 c0       	rjmp	.+328    	; 0x119a <lcd_print3+0x1da>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
    1052:	c2 30       	cpi	r28, 0x02	; 2
    1054:	d1 05       	cpc	r29, r1
    1056:	09 f0       	breq	.+2      	; 0x105a <lcd_print3+0x9a>
    1058:	d2 c0       	rjmp	.+420    	; 0x11fe <lcd_print3+0x23e>
    105a:	46 c1       	rjmp	.+652    	; 0x12e8 <lcd_print3+0x328>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
    105c:	f1 10       	cpse	r15, r1
		{
			lcd_wr_char(tens);
    105e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
		}
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
    1062:	98 01       	movw	r18, r16
    1064:	ad ec       	ldi	r26, 0xCD	; 205
    1066:	bc ec       	ldi	r27, 0xCC	; 204
    1068:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	96 95       	lsr	r25
    1076:	87 95       	ror	r24
    1078:	9c 01       	movw	r18, r24
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	98 01       	movw	r18, r16
    1090:	28 1b       	sub	r18, r24
    1092:	39 0b       	sbc	r19, r25
    1094:	c9 01       	movw	r24, r18
    1096:	c0 96       	adiw	r24, 0x30	; 48
    1098:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <unit+0x1>
    109c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <unit>
		lcd_wr_char(unit);
    10a0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
		count++;
	}
	if(digits>5)
    10a4:	26 97       	sbiw	r28, 0x06	; 6
    10a6:	0c f4       	brge	.+2      	; 0x10aa <lcd_print3+0xea>
    10a8:	51 c1       	rjmp	.+674    	; 0x134c <lcd_print3+0x38c>
	{
		lcd_wr_char('E');
    10aa:	85 e4       	ldi	r24, 0x45	; 69
    10ac:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <lcd_wr_char>
    10b0:	4d c1       	rjmp	.+666    	; 0x134c <lcd_print3+0x38c>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
    10b2:	f1 2c       	mov	r15, r1
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
    10b4:	98 01       	movw	r18, r16
    10b6:	36 95       	lsr	r19
    10b8:	27 95       	ror	r18
    10ba:	36 95       	lsr	r19
    10bc:	27 95       	ror	r18
    10be:	36 95       	lsr	r19
    10c0:	27 95       	ror	r18
    10c2:	a5 ec       	ldi	r26, 0xC5	; 197
    10c4:	b0 e2       	ldi	r27, 0x20	; 32
    10c6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    10ca:	ac 01       	movw	r20, r24
    10cc:	52 95       	swap	r21
    10ce:	42 95       	swap	r20
    10d0:	4f 70       	andi	r20, 0x0F	; 15
    10d2:	45 27       	eor	r20, r21
    10d4:	5f 70       	andi	r21, 0x0F	; 15
    10d6:	45 27       	eor	r20, r21
    10d8:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
    10dc:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		thousand = temp%10 + 48;
    10e0:	9a 01       	movw	r18, r20
    10e2:	ad ec       	ldi	r26, 0xCD	; 205
    10e4:	bc ec       	ldi	r27, 0xCC	; 204
    10e6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	9c 01       	movw	r18, r24
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	9a 01       	movw	r18, r20
    110e:	28 1b       	sub	r18, r24
    1110:	39 0b       	sbc	r19, r25
    1112:	c9 01       	movw	r24, r18
    1114:	c0 96       	adiw	r24, 0x30	; 48
    1116:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <thousand+0x1>
    111a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    111e:	80 33       	cpi	r24, 0x30	; 48
    1120:	91 05       	cpc	r25, r1
    1122:	09 f0       	breq	.+2      	; 0x1126 <lcd_print3+0x166>
    1124:	89 cf       	rjmp	.-238    	; 0x1038 <lcd_print3+0x78>
    1126:	83 cf       	rjmp	.-250    	; 0x102e <lcd_print3+0x6e>
		flag=1;
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
    1128:	98 01       	movw	r18, r16
    112a:	36 95       	lsr	r19
    112c:	27 95       	ror	r18
    112e:	36 95       	lsr	r19
    1130:	27 95       	ror	r18
    1132:	ab e7       	ldi	r26, 0x7B	; 123
    1134:	b4 e1       	ldi	r27, 0x14	; 20
    1136:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    113a:	ac 01       	movw	r20, r24
    113c:	56 95       	lsr	r21
    113e:	47 95       	ror	r20
    1140:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
    1144:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		hundred = temp%10 + 48;
    1148:	9a 01       	movw	r18, r20
    114a:	ad ec       	ldi	r26, 0xCD	; 205
    114c:	bc ec       	ldi	r27, 0xCC	; 204
    114e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    1152:	96 95       	lsr	r25
    1154:	87 95       	ror	r24
    1156:	96 95       	lsr	r25
    1158:	87 95       	ror	r24
    115a:	96 95       	lsr	r25
    115c:	87 95       	ror	r24
    115e:	9c 01       	movw	r18, r24
    1160:	22 0f       	add	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	9a 01       	movw	r18, r20
    1176:	28 1b       	sub	r18, r24
    1178:	39 0b       	sbc	r19, r25
    117a:	c9 01       	movw	r24, r18
    117c:	c0 96       	adiw	r24, 0x30	; 48
    117e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <hundred+0x1>
    1182:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <hundred>
		if(hundred != '0' || count != 0)
    1186:	80 33       	cpi	r24, 0x30	; 48
    1188:	91 05       	cpc	r25, r1
    118a:	09 f0       	breq	.+2      	; 0x118e <lcd_print3+0x1ce>
    118c:	5e cf       	rjmp	.-324    	; 0x104a <lcd_print3+0x8a>
    118e:	58 cf       	rjmp	.-336    	; 0x1040 <lcd_print3+0x80>
			count++;
		}
		flag=1;
	}
	
	if(digits==3 || flag==1)
    1190:	c3 30       	cpi	r28, 0x03	; 3
    1192:	d1 05       	cpc	r29, r1
    1194:	09 f0       	breq	.+2      	; 0x1198 <lcd_print3+0x1d8>
    1196:	5d cf       	rjmp	.-326    	; 0x1052 <lcd_print3+0x92>
    1198:	72 c0       	rjmp	.+228    	; 0x127e <lcd_print3+0x2be>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
    119a:	98 01       	movw	r18, r16
    119c:	ad ec       	ldi	r26, 0xCD	; 205
    119e:	bc ec       	ldi	r27, 0xCC	; 204
    11a0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    11a4:	fc 01       	movw	r30, r24
    11a6:	f6 95       	lsr	r31
    11a8:	e7 95       	ror	r30
    11aa:	f6 95       	lsr	r31
    11ac:	e7 95       	ror	r30
    11ae:	f6 95       	lsr	r31
    11b0:	e7 95       	ror	r30
    11b2:	f0 93 93 01 	sts	0x0193, r31	; 0x800193 <temp+0x1>
    11b6:	e0 93 92 01 	sts	0x0192, r30	; 0x800192 <temp>
		tens = temp%10 + 48;
    11ba:	9f 01       	movw	r18, r30
    11bc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    11c0:	96 95       	lsr	r25
    11c2:	87 95       	ror	r24
    11c4:	96 95       	lsr	r25
    11c6:	87 95       	ror	r24
    11c8:	96 95       	lsr	r25
    11ca:	87 95       	ror	r24
    11cc:	9c 01       	movw	r18, r24
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	82 0f       	add	r24, r18
    11e0:	93 1f       	adc	r25, r19
    11e2:	9f 01       	movw	r18, r30
    11e4:	28 1b       	sub	r18, r24
    11e6:	39 0b       	sbc	r19, r25
    11e8:	c9 01       	movw	r24, r18
    11ea:	c0 96       	adiw	r24, 0x30	; 48
    11ec:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <tens+0x1>
    11f0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tens>
		if(tens != '0' || count != 0)
    11f4:	80 33       	cpi	r24, 0x30	; 48
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <lcd_print3+0x23c>
    11fa:	31 cf       	rjmp	.-414    	; 0x105e <lcd_print3+0x9e>
    11fc:	2f cf       	rjmp	.-418    	; 0x105c <lcd_print3+0x9c>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
    11fe:	c1 30       	cpi	r28, 0x01	; 1
    1200:	d1 05       	cpc	r29, r1
    1202:	09 f0       	breq	.+2      	; 0x1206 <lcd_print3+0x246>
    1204:	4f cf       	rjmp	.-354    	; 0x10a4 <lcd_print3+0xe4>
    1206:	2d cf       	rjmp	.-422    	; 0x1062 <lcd_print3+0xa2>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
    1208:	98 01       	movw	r18, r16
    120a:	36 95       	lsr	r19
    120c:	27 95       	ror	r18
    120e:	36 95       	lsr	r19
    1210:	27 95       	ror	r18
    1212:	36 95       	lsr	r19
    1214:	27 95       	ror	r18
    1216:	a5 ec       	ldi	r26, 0xC5	; 197
    1218:	b0 e2       	ldi	r27, 0x20	; 32
    121a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    121e:	ac 01       	movw	r20, r24
    1220:	52 95       	swap	r21
    1222:	42 95       	swap	r20
    1224:	4f 70       	andi	r20, 0x0F	; 15
    1226:	45 27       	eor	r20, r21
    1228:	5f 70       	andi	r21, 0x0F	; 15
    122a:	45 27       	eor	r20, r21
    122c:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
    1230:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		thousand = temp%10 + 48;
    1234:	9a 01       	movw	r18, r20
    1236:	ad ec       	ldi	r26, 0xCD	; 205
    1238:	bc ec       	ldi	r27, 0xCC	; 204
    123a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	96 95       	lsr	r25
    1248:	87 95       	ror	r24
    124a:	9c 01       	movw	r18, r24
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	9a 01       	movw	r18, r20
    1262:	28 1b       	sub	r18, r24
    1264:	39 0b       	sbc	r19, r25
    1266:	c9 01       	movw	r24, r18
    1268:	c0 96       	adiw	r24, 0x30	; 48
    126a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <thousand+0x1>
    126e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    1272:	80 33       	cpi	r24, 0x30	; 48
    1274:	91 05       	cpc	r25, r1
    1276:	09 f0       	breq	.+2      	; 0x127a <lcd_print3+0x2ba>
    1278:	de ce       	rjmp	.-580    	; 0x1036 <lcd_print3+0x76>
    127a:	f1 2c       	mov	r15, r1
    127c:	55 cf       	rjmp	.-342    	; 0x1128 <lcd_print3+0x168>
		flag=1;
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
    127e:	98 01       	movw	r18, r16
    1280:	36 95       	lsr	r19
    1282:	27 95       	ror	r18
    1284:	36 95       	lsr	r19
    1286:	27 95       	ror	r18
    1288:	ab e7       	ldi	r26, 0x7B	; 123
    128a:	b4 e1       	ldi	r27, 0x14	; 20
    128c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    1290:	ac 01       	movw	r20, r24
    1292:	56 95       	lsr	r21
    1294:	47 95       	ror	r20
    1296:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <temp+0x1>
    129a:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <temp>
		hundred = temp%10 + 48;
    129e:	9a 01       	movw	r18, r20
    12a0:	ad ec       	ldi	r26, 0xCD	; 205
    12a2:	bc ec       	ldi	r27, 0xCC	; 204
    12a4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	96 95       	lsr	r25
    12ae:	87 95       	ror	r24
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	9c 01       	movw	r18, r24
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	9a 01       	movw	r18, r20
    12cc:	28 1b       	sub	r18, r24
    12ce:	39 0b       	sbc	r19, r25
    12d0:	c9 01       	movw	r24, r18
    12d2:	c0 96       	adiw	r24, 0x30	; 48
    12d4:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <hundred+0x1>
    12d8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <hundred>
		if(hundred != '0' || count != 0)
    12dc:	80 33       	cpi	r24, 0x30	; 48
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <lcd_print3+0x324>
    12e2:	b2 ce       	rjmp	.-668    	; 0x1048 <lcd_print3+0x88>
    12e4:	f1 2c       	mov	r15, r1
    12e6:	59 cf       	rjmp	.-334    	; 0x119a <lcd_print3+0x1da>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
    12e8:	98 01       	movw	r18, r16
    12ea:	ad ec       	ldi	r26, 0xCD	; 205
    12ec:	bc ec       	ldi	r27, 0xCC	; 204
    12ee:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    12f2:	fc 01       	movw	r30, r24
    12f4:	f6 95       	lsr	r31
    12f6:	e7 95       	ror	r30
    12f8:	f6 95       	lsr	r31
    12fa:	e7 95       	ror	r30
    12fc:	f6 95       	lsr	r31
    12fe:	e7 95       	ror	r30
    1300:	f0 93 93 01 	sts	0x0193, r31	; 0x800193 <temp+0x1>
    1304:	e0 93 92 01 	sts	0x0192, r30	; 0x800192 <temp>
		tens = temp%10 + 48;
    1308:	9f 01       	movw	r18, r30
    130a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__umulhisi3>
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	96 95       	lsr	r25
    1314:	87 95       	ror	r24
    1316:	96 95       	lsr	r25
    1318:	87 95       	ror	r24
    131a:	9c 01       	movw	r18, r24
    131c:	22 0f       	add	r18, r18
    131e:	33 1f       	adc	r19, r19
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	9f 01       	movw	r18, r30
    1332:	28 1b       	sub	r18, r24
    1334:	39 0b       	sbc	r19, r25
    1336:	c9 01       	movw	r24, r18
    1338:	c0 96       	adiw	r24, 0x30	; 48
    133a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <tens+0x1>
    133e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tens>
		if(tens != '0' || count != 0)
    1342:	80 33       	cpi	r24, 0x30	; 48
    1344:	91 05       	cpc	r25, r1
    1346:	09 f0       	breq	.+2      	; 0x134a <lcd_print3+0x38a>
    1348:	8a ce       	rjmp	.-748    	; 0x105e <lcd_print3+0x9e>
    134a:	8b ce       	rjmp	.-746    	; 0x1062 <lcd_print3+0xa2>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	08 95       	ret

00001358 <lcd_print4>:

//27.345A //27mA ...
void lcd_print4(char row, char col, float value, char* str1, char* str2)
{
    1358:	8f 92       	push	r8
    135a:	9f 92       	push	r9
    135c:	af 92       	push	r10
    135e:	bf 92       	push	r11
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	d8 2f       	mov	r29, r24
    136e:	c6 2f       	mov	r28, r22
    1370:	49 01       	movw	r8, r18
    1372:	5a 01       	movw	r10, r20
	//Print in mA, mW, mW etc
	if (value<1000)
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a e7       	ldi	r20, 0x7A	; 122
    137a:	54 e4       	ldi	r21, 0x44	; 68
    137c:	c5 01       	movw	r24, r10
    137e:	b4 01       	movw	r22, r8
    1380:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__cmpsf2>
    1384:	88 23       	and	r24, r24
    1386:	64 f4       	brge	.+24     	; 0x13a0 <lcd_print4+0x48>
	{
		lcd_print2(row,col,value,4, str1);
    1388:	c5 01       	movw	r24, r10
    138a:	b4 01       	movw	r22, r8
    138c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fixunssfsi>
    1390:	24 e0       	ldi	r18, 0x04	; 4
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	ab 01       	movw	r20, r22
    1396:	6c 2f       	mov	r22, r28
    1398:	8d 2f       	mov	r24, r29
    139a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <lcd_print2>
    139e:	7b c0       	rjmp	.+246    	; 0x1496 <lcd_print4+0x13e>
		}	
		*/
	}
	
	//Print in A, V, W etc and clear the space after(incase previous was >=10000)
	else if (value>=1000 && value < 10000)
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	4a e7       	ldi	r20, 0x7A	; 122
    13a6:	54 e4       	ldi	r21, 0x44	; 68
    13a8:	c5 01       	movw	r24, r10
    13aa:	b4 01       	movw	r22, r8
    13ac:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__gesf2>
    13b0:	88 23       	and	r24, r24
    13b2:	cc f1       	brlt	.+114    	; 0x1426 <lcd_print4+0xce>
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e4       	ldi	r19, 0x40	; 64
    13b8:	4c e1       	ldi	r20, 0x1C	; 28
    13ba:	56 e4       	ldi	r21, 0x46	; 70
    13bc:	c5 01       	movw	r24, r10
    13be:	b4 01       	movw	r22, r8
    13c0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__cmpsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	7c f5       	brge	.+94     	; 0x1426 <lcd_print4+0xce>
	{
		lcd_print3(row, col, value/1000, 1);
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a e7       	ldi	r20, 0x7A	; 122
    13ce:	54 e4       	ldi	r21, 0x44	; 68
    13d0:	c5 01       	movw	r24, r10
    13d2:	b4 01       	movw	r22, r8
    13d4:	0e 94 84 0b 	call	0x1708	; 0x1708 <__divsf3>
    13d8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fixunssfsi>
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	ab 01       	movw	r20, r22
    13e2:	6c 2f       	mov	r22, r28
    13e4:	8d 2f       	mov	r24, r29
    13e6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_print3>
		lcd_string2(row, col+1, ".");				//Print the decimal point
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	6c 0f       	add	r22, r28
    13ee:	4f e0       	ldi	r20, 0x0F	; 15
    13f0:	51 e0       	ldi	r21, 0x01	; 1
    13f2:	8d 2f       	mov	r24, r29
    13f4:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
		
		lcd_print5(row, col+2, (int)value%1000, 3, str2);		
    13f8:	c5 01       	movw	r24, r10
    13fa:	b4 01       	movw	r22, r8
    13fc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__fixsfsi>
    1400:	cb 01       	movw	r24, r22
    1402:	68 ee       	ldi	r22, 0xE8	; 232
    1404:	73 e0       	ldi	r23, 0x03	; 3
    1406:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	6c 0f       	add	r22, r28
    140e:	87 01       	movw	r16, r14
    1410:	23 e0       	ldi	r18, 0x03	; 3
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	ac 01       	movw	r20, r24
    1416:	8d 2f       	mov	r24, r29
    1418:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_print5>
		/*							//Print A, V etc
		lcd_print(row, col+2, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		
		lcd_string("  ");
    141c:	81 e1       	ldi	r24, 0x11	; 17
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	0e 94 04 04 	call	0x808	; 0x808 <lcd_string>
    1424:	38 c0       	rjmp	.+112    	; 0x1496 <lcd_print4+0x13e>
	}
	
	//Print in A, V, W etc
	else if (value>=10000)
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e4       	ldi	r19, 0x40	; 64
    142a:	4c e1       	ldi	r20, 0x1C	; 28
    142c:	56 e4       	ldi	r21, 0x46	; 70
    142e:	c5 01       	movw	r24, r10
    1430:	b4 01       	movw	r22, r8
    1432:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__gesf2>
    1436:	88 23       	and	r24, r24
    1438:	74 f1       	brlt	.+92     	; 0x1496 <lcd_print4+0x13e>
	{
		lcd_print3(row, col, value/1000, 2);
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a e7       	ldi	r20, 0x7A	; 122
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	c5 01       	movw	r24, r10
    1444:	b4 01       	movw	r22, r8
    1446:	0e 94 84 0b 	call	0x1708	; 0x1708 <__divsf3>
    144a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fixunssfsi>
    144e:	22 e0       	ldi	r18, 0x02	; 2
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	ab 01       	movw	r20, r22
    1454:	6c 2f       	mov	r22, r28
    1456:	8d 2f       	mov	r24, r29
    1458:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_print3>
		lcd_string2(row, col+2, ".");				//Print the decimal point
    145c:	62 e0       	ldi	r22, 0x02	; 2
    145e:	6c 0f       	add	r22, r28
    1460:	4f e0       	ldi	r20, 0x0F	; 15
    1462:	51 e0       	ldi	r21, 0x01	; 1
    1464:	8d 2f       	mov	r24, r29
    1466:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
		
		lcd_print5(row, col+3, (int)value%1000, 3, str2);
    146a:	c5 01       	movw	r24, r10
    146c:	b4 01       	movw	r22, r8
    146e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__fixsfsi>
    1472:	cb 01       	movw	r24, r22
    1474:	68 ee       	ldi	r22, 0xE8	; 232
    1476:	73 e0       	ldi	r23, 0x03	; 3
    1478:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
    147c:	63 e0       	ldi	r22, 0x03	; 3
    147e:	6c 0f       	add	r22, r28
    1480:	87 01       	movw	r16, r14
    1482:	23 e0       	ldi	r18, 0x03	; 3
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	ac 01       	movw	r20, r24
    1488:	8d 2f       	mov	r24, r29
    148a:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_print5>
		
		/*					
		lcd_print(row, col+3, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		lcd_string(" ");
    148e:	82 e1       	ldi	r24, 0x12	; 18
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	0e 94 04 04 	call	0x808	; 0x808 <lcd_string>
	}	
} 
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	bf 90       	pop	r11
    14a4:	af 90       	pop	r10
    14a6:	9f 90       	pop	r9
    14a8:	8f 90       	pop	r8
    14aa:	08 95       	ret

000014ac <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
    14ac:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_port_config>
	adc_pin_config();
    14b0:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
    14b4:	08 95       	ret

000014b6 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
    14b6:	f8 94       	cli
	lcd_start();
    14b8:	0e 94 33 04 	call	0x866	; 0x866 <lcd_start>
	adc_config();
    14bc:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
    14c0:	78 94       	sei
    14c2:	08 95       	ret

000014c4 <main>:
}

int main(void)
{
	port_config();
    14c4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <port_config>
	init_devices();
    14c8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <init_devices>
		
	lcd_string2(1, 7, "CCL");
    14cc:	44 e1       	ldi	r20, 0x14	; 20
    14ce:	51 e0       	ldi	r21, 0x01	; 1
    14d0:	67 e0       	ldi	r22, 0x07	; 7
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
    14d8:	2f ef       	ldi	r18, 0xFF	; 255
    14da:	85 ea       	ldi	r24, 0xA5	; 165
    14dc:	9e e0       	ldi	r25, 0x0E	; 14
    14de:	21 50       	subi	r18, 0x01	; 1
    14e0:	80 40       	sbci	r24, 0x00	; 0
    14e2:	90 40       	sbci	r25, 0x00	; 0
    14e4:	e1 f7       	brne	.-8      	; 0x14de <main+0x1a>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <main+0x24>
    14e8:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)	//Check if external 12v is connected
    14ea:	1d 9b       	sbis	0x03, 5	; 3
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <main+0x50>
	{
		extern float offset;
		lcd_string2(2,1,"Supply Connected");
    14ee:	48 e1       	ldi	r20, 0x18	; 24
    14f0:	51 e0       	ldi	r21, 0x01	; 1
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
		offset = 4;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	a0 e8       	ldi	r26, 0x80	; 128
    1500:	b0 e4       	ldi	r27, 0x40	; 64
    1502:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <offset>
    1506:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <offset+0x1>
    150a:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <offset+0x2>
    150e:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <offset+0x3>
    1512:	12 c0       	rjmp	.+36     	; 0x1538 <main+0x74>
	}
	
	else				//Check if external 12v is NOT connected
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
    1514:	49 e2       	ldi	r20, 0x29	; 41
    1516:	51 e0       	ldi	r21, 0x01	; 1
    1518:	62 e0       	ldi	r22, 0x02	; 2
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
		offset = 31.2;
    1520:	8a e9       	ldi	r24, 0x9A	; 154
    1522:	99 e9       	ldi	r25, 0x99	; 153
    1524:	a9 ef       	ldi	r26, 0xF9	; 249
    1526:	b1 e4       	ldi	r27, 0x41	; 65
    1528:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <offset>
    152c:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <offset+0x1>
    1530:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <offset+0x2>
    1534:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <offset+0x3>
    1538:	2f ef       	ldi	r18, 0xFF	; 255
    153a:	8b e4       	ldi	r24, 0x4B	; 75
    153c:	9d e1       	ldi	r25, 0x1D	; 29
    153e:	21 50       	subi	r18, 0x01	; 1
    1540:	80 40       	sbci	r24, 0x00	; 0
    1542:	90 40       	sbci	r25, 0x00	; 0
    1544:	e1 f7       	brne	.-8      	; 0x153e <main+0x7a>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <main+0x84>
    1548:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
    154a:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clear>
		print_mos_power(2,10);
	}
	else							//If over safe limits print what is exceeded and show its value
	{
		lcd_clear();
		char flag = 0;				//To print what is exceeded only once
    154e:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(600);
	lcd_clear();
	
	while (1)
	{
		update_current();
    1550:	0e 94 0d 01 	call	0x21a	; 0x21a <update_current>
		update_voltage();
    1554:	0e 94 35 01 	call	0x26a	; 0x26a <update_voltage>
		update_power();
    1558:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <update_power>
		update_gate_voltage();
    155c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <update_gate_voltage>
	
	if(check_thresholds()==0)		//If under safe limits print everything
    1560:	0e 94 88 02 	call	0x510	; 0x510 <check_thresholds>
    1564:	81 11       	cpse	r24, r1
    1566:	11 c0       	rjmp	.+34     	; 0x158a <main+0xc6>
	//if(1)	
	{	
		print_current(1,1);
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	0e 94 1c 02 	call	0x438	; 0x438 <print_current>
		print_voltage(1,10);
    1570:	6a e0       	ldi	r22, 0x0A	; 10
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 37 02 	call	0x46e	; 0x46e <print_voltage>
		print_power(2,1);
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <print_power>
		//print_gate_voltage(2,10);
		print_mos_power(2,10);
    1580:	6a e0       	ldi	r22, 0x0A	; 10
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	0e 94 6d 02 	call	0x4da	; 0x4da <print_mos_power>
    1588:	e3 cf       	rjmp	.-58     	; 0x1550 <main+0x8c>
	}
	else							//If over safe limits print what is exceeded and show its value
	{
		lcd_clear();
    158a:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clear>
		char flag = 0;				//To print what is exceeded only once
    158e:	cd 2f       	mov	r28, r29
		while(check_thresholds())	//Stay here until over safe limits 
    1590:	42 c0       	rjmp	.+132    	; 0x1616 <main+0x152>
		{	
			update_current();
    1592:	0e 94 0d 01 	call	0x21a	; 0x21a <update_current>
			update_voltage();
    1596:	0e 94 35 01 	call	0x26a	; 0x26a <update_voltage>
			update_power();
    159a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <update_power>
			update_gate_voltage();
    159e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <update_gate_voltage>
			
			switch (check_thresholds())	//Switch according to what limit is exceeded
    15a2:	0e 94 88 02 	call	0x510	; 0x510 <check_thresholds>
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	89 f0       	breq	.+34     	; 0x15cc <main+0x108>
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	e9 f0       	breq	.+58     	; 0x15e8 <main+0x124>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	49 f5       	brne	.+82     	; 0x1604 <main+0x140>
			{
				case 1:				//Power exceeds threshold
					print_power(1,1);					
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <print_power>
					if(flag)		//To print what is exceeded only once
    15b8:	c1 11       	cpse	r28, r1
    15ba:	2d c0       	rjmp	.+90     	; 0x1616 <main+0x152>
					break;
						
					lcd_string2(2, 1, "Power Exceeded");
    15bc:	47 e3       	ldi	r20, 0x37	; 55
    15be:	51 e0       	ldi	r21, 0x01	; 1
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
					flag = 1;		//What is exceeded is printed once
    15c8:	c1 e0       	ldi	r28, 0x01	; 1
					break;
    15ca:	25 c0       	rjmp	.+74     	; 0x1616 <main+0x152>
			
				case 2:	//Voltage exceeds threshold
					print_voltage(1,1);
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0e 94 37 02 	call	0x46e	; 0x46e <print_voltage>
					if(flag)
    15d4:	c1 11       	cpse	r28, r1
    15d6:	1f c0       	rjmp	.+62     	; 0x1616 <main+0x152>
					break;
					
					lcd_string2(2, 1, "Voltage Exceeded");
    15d8:	46 e4       	ldi	r20, 0x46	; 70
    15da:	51 e0       	ldi	r21, 0x01	; 1
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
					flag = 1;
    15e4:	c1 e0       	ldi	r28, 0x01	; 1
					break;
    15e6:	17 c0       	rjmp	.+46     	; 0x1616 <main+0x152>
			 
				case 3:	//Current exceeds threshold
					print_current(1,1);
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	0e 94 1c 02 	call	0x438	; 0x438 <print_current>
					if(flag)
    15f0:	c1 11       	cpse	r28, r1
    15f2:	11 c0       	rjmp	.+34     	; 0x1616 <main+0x152>
					break;
					
					lcd_string2(2, 1, "Current Exceeded");
    15f4:	47 e5       	ldi	r20, 0x57	; 87
    15f6:	51 e0       	ldi	r21, 0x01	; 1
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
					flag = 1;
    1600:	c1 e0       	ldi	r28, 0x01	; 1
					break;
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <main+0x152>
			
				default:
					if(flag)
    1604:	c1 11       	cpse	r28, r1
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <main+0x152>
					break;
				
					lcd_string2(1, 6, "Error");
    1608:	48 e6       	ldi	r20, 0x68	; 104
    160a:	51 e0       	ldi	r21, 0x01	; 1
    160c:	66 e0       	ldi	r22, 0x06	; 6
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 22 04 	call	0x844	; 0x844 <lcd_string2>
					flag = 1;
    1614:	c1 e0       	ldi	r28, 0x01	; 1
	}
	else							//If over safe limits print what is exceeded and show its value
	{
		lcd_clear();
		char flag = 0;				//To print what is exceeded only once
		while(check_thresholds())	//Stay here until over safe limits 
    1616:	0e 94 88 02 	call	0x510	; 0x510 <check_thresholds>
    161a:	81 11       	cpse	r24, r1
    161c:	ba cf       	rjmp	.-140    	; 0x1592 <main+0xce>
					lcd_string2(1, 6, "Error");
					flag = 1;
					break;
			}
		}
		lcd_clear();
    161e:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clear>
    1622:	96 cf       	rjmp	.-212    	; 0x1550 <main+0x8c>

00001624 <__subsf3>:
    1624:	50 58       	subi	r21, 0x80	; 128

00001626 <__addsf3>:
    1626:	bb 27       	eor	r27, r27
    1628:	aa 27       	eor	r26, r26
    162a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__addsf3x>
    162e:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    1632:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    1636:	38 f0       	brcs	.+14     	; 0x1646 <__addsf3+0x20>
    1638:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    163c:	20 f0       	brcs	.+8      	; 0x1646 <__addsf3+0x20>
    163e:	39 f4       	brne	.+14     	; 0x164e <__addsf3+0x28>
    1640:	9f 3f       	cpi	r25, 0xFF	; 255
    1642:	19 f4       	brne	.+6      	; 0x164a <__addsf3+0x24>
    1644:	26 f4       	brtc	.+8      	; 0x164e <__addsf3+0x28>
    1646:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>
    164a:	0e f4       	brtc	.+2      	; 0x164e <__addsf3+0x28>
    164c:	e0 95       	com	r30
    164e:	e7 fb       	bst	r30, 7
    1650:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>

00001654 <__addsf3x>:
    1654:	e9 2f       	mov	r30, r25
    1656:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    165a:	58 f3       	brcs	.-42     	; 0x1632 <__addsf3+0xc>
    165c:	ba 17       	cp	r27, r26
    165e:	62 07       	cpc	r22, r18
    1660:	73 07       	cpc	r23, r19
    1662:	84 07       	cpc	r24, r20
    1664:	95 07       	cpc	r25, r21
    1666:	20 f0       	brcs	.+8      	; 0x1670 <__addsf3x+0x1c>
    1668:	79 f4       	brne	.+30     	; 0x1688 <__addsf3x+0x34>
    166a:	a6 f5       	brtc	.+104    	; 0x16d4 <__addsf3x+0x80>
    166c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_zero>
    1670:	0e f4       	brtc	.+2      	; 0x1674 <__addsf3x+0x20>
    1672:	e0 95       	com	r30
    1674:	0b 2e       	mov	r0, r27
    1676:	ba 2f       	mov	r27, r26
    1678:	a0 2d       	mov	r26, r0
    167a:	0b 01       	movw	r0, r22
    167c:	b9 01       	movw	r22, r18
    167e:	90 01       	movw	r18, r0
    1680:	0c 01       	movw	r0, r24
    1682:	ca 01       	movw	r24, r20
    1684:	a0 01       	movw	r20, r0
    1686:	11 24       	eor	r1, r1
    1688:	ff 27       	eor	r31, r31
    168a:	59 1b       	sub	r21, r25
    168c:	99 f0       	breq	.+38     	; 0x16b4 <__addsf3x+0x60>
    168e:	59 3f       	cpi	r21, 0xF9	; 249
    1690:	50 f4       	brcc	.+20     	; 0x16a6 <__addsf3x+0x52>
    1692:	50 3e       	cpi	r21, 0xE0	; 224
    1694:	68 f1       	brcs	.+90     	; 0x16f0 <__addsf3x+0x9c>
    1696:	1a 16       	cp	r1, r26
    1698:	f0 40       	sbci	r31, 0x00	; 0
    169a:	a2 2f       	mov	r26, r18
    169c:	23 2f       	mov	r18, r19
    169e:	34 2f       	mov	r19, r20
    16a0:	44 27       	eor	r20, r20
    16a2:	58 5f       	subi	r21, 0xF8	; 248
    16a4:	f3 cf       	rjmp	.-26     	; 0x168c <__addsf3x+0x38>
    16a6:	46 95       	lsr	r20
    16a8:	37 95       	ror	r19
    16aa:	27 95       	ror	r18
    16ac:	a7 95       	ror	r26
    16ae:	f0 40       	sbci	r31, 0x00	; 0
    16b0:	53 95       	inc	r21
    16b2:	c9 f7       	brne	.-14     	; 0x16a6 <__addsf3x+0x52>
    16b4:	7e f4       	brtc	.+30     	; 0x16d4 <__addsf3x+0x80>
    16b6:	1f 16       	cp	r1, r31
    16b8:	ba 0b       	sbc	r27, r26
    16ba:	62 0b       	sbc	r22, r18
    16bc:	73 0b       	sbc	r23, r19
    16be:	84 0b       	sbc	r24, r20
    16c0:	ba f0       	brmi	.+46     	; 0x16f0 <__addsf3x+0x9c>
    16c2:	91 50       	subi	r25, 0x01	; 1
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <__addsf3x+0x9a>
    16c6:	ff 0f       	add	r31, r31
    16c8:	bb 1f       	adc	r27, r27
    16ca:	66 1f       	adc	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	c2 f7       	brpl	.-16     	; 0x16c2 <__addsf3x+0x6e>
    16d2:	0e c0       	rjmp	.+28     	; 0x16f0 <__addsf3x+0x9c>
    16d4:	ba 0f       	add	r27, r26
    16d6:	62 1f       	adc	r22, r18
    16d8:	73 1f       	adc	r23, r19
    16da:	84 1f       	adc	r24, r20
    16dc:	48 f4       	brcc	.+18     	; 0x16f0 <__addsf3x+0x9c>
    16de:	87 95       	ror	r24
    16e0:	77 95       	ror	r23
    16e2:	67 95       	ror	r22
    16e4:	b7 95       	ror	r27
    16e6:	f7 95       	ror	r31
    16e8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <__addsf3x+0x9a>
    16ec:	b0 cf       	rjmp	.-160    	; 0x164e <__addsf3+0x28>
    16ee:	93 95       	inc	r25
    16f0:	88 0f       	add	r24, r24
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <__addsf3x+0xa2>
    16f4:	99 27       	eor	r25, r25
    16f6:	ee 0f       	add	r30, r30
    16f8:	97 95       	ror	r25
    16fa:	87 95       	ror	r24
    16fc:	08 95       	ret

000016fe <__cmpsf2>:
    16fe:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fp_cmp>
    1702:	08 f4       	brcc	.+2      	; 0x1706 <__cmpsf2+0x8>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	08 95       	ret

00001708 <__divsf3>:
    1708:	0e 94 98 0b 	call	0x1730	; 0x1730 <__divsf3x>
    170c:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    1710:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    1714:	58 f0       	brcs	.+22     	; 0x172c <__divsf3+0x24>
    1716:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    171a:	40 f0       	brcs	.+16     	; 0x172c <__divsf3+0x24>
    171c:	29 f4       	brne	.+10     	; 0x1728 <__divsf3+0x20>
    171e:	5f 3f       	cpi	r21, 0xFF	; 255
    1720:	29 f0       	breq	.+10     	; 0x172c <__divsf3+0x24>
    1722:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    1726:	51 11       	cpse	r21, r1
    1728:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    172c:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>

00001730 <__divsf3x>:
    1730:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    1734:	68 f3       	brcs	.-38     	; 0x1710 <__divsf3+0x8>

00001736 <__divsf3_pse>:
    1736:	99 23       	and	r25, r25
    1738:	b1 f3       	breq	.-20     	; 0x1726 <__divsf3+0x1e>
    173a:	55 23       	and	r21, r21
    173c:	91 f3       	breq	.-28     	; 0x1722 <__divsf3+0x1a>
    173e:	95 1b       	sub	r25, r21
    1740:	55 0b       	sbc	r21, r21
    1742:	bb 27       	eor	r27, r27
    1744:	aa 27       	eor	r26, r26
    1746:	62 17       	cp	r22, r18
    1748:	73 07       	cpc	r23, r19
    174a:	84 07       	cpc	r24, r20
    174c:	38 f0       	brcs	.+14     	; 0x175c <__divsf3_pse+0x26>
    174e:	9f 5f       	subi	r25, 0xFF	; 255
    1750:	5f 4f       	sbci	r21, 0xFF	; 255
    1752:	22 0f       	add	r18, r18
    1754:	33 1f       	adc	r19, r19
    1756:	44 1f       	adc	r20, r20
    1758:	aa 1f       	adc	r26, r26
    175a:	a9 f3       	breq	.-22     	; 0x1746 <__divsf3_pse+0x10>
    175c:	35 d0       	rcall	.+106    	; 0x17c8 <__divsf3_pse+0x92>
    175e:	0e 2e       	mov	r0, r30
    1760:	3a f0       	brmi	.+14     	; 0x1770 <__divsf3_pse+0x3a>
    1762:	e0 e8       	ldi	r30, 0x80	; 128
    1764:	32 d0       	rcall	.+100    	; 0x17ca <__divsf3_pse+0x94>
    1766:	91 50       	subi	r25, 0x01	; 1
    1768:	50 40       	sbci	r21, 0x00	; 0
    176a:	e6 95       	lsr	r30
    176c:	00 1c       	adc	r0, r0
    176e:	ca f7       	brpl	.-14     	; 0x1762 <__divsf3_pse+0x2c>
    1770:	2b d0       	rcall	.+86     	; 0x17c8 <__divsf3_pse+0x92>
    1772:	fe 2f       	mov	r31, r30
    1774:	29 d0       	rcall	.+82     	; 0x17c8 <__divsf3_pse+0x92>
    1776:	66 0f       	add	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	88 1f       	adc	r24, r24
    177c:	bb 1f       	adc	r27, r27
    177e:	26 17       	cp	r18, r22
    1780:	37 07       	cpc	r19, r23
    1782:	48 07       	cpc	r20, r24
    1784:	ab 07       	cpc	r26, r27
    1786:	b0 e8       	ldi	r27, 0x80	; 128
    1788:	09 f0       	breq	.+2      	; 0x178c <__divsf3_pse+0x56>
    178a:	bb 0b       	sbc	r27, r27
    178c:	80 2d       	mov	r24, r0
    178e:	bf 01       	movw	r22, r30
    1790:	ff 27       	eor	r31, r31
    1792:	93 58       	subi	r25, 0x83	; 131
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
    1796:	3a f0       	brmi	.+14     	; 0x17a6 <__divsf3_pse+0x70>
    1798:	9e 3f       	cpi	r25, 0xFE	; 254
    179a:	51 05       	cpc	r21, r1
    179c:	78 f0       	brcs	.+30     	; 0x17bc <__divsf3_pse+0x86>
    179e:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    17a2:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    17a6:	5f 3f       	cpi	r21, 0xFF	; 255
    17a8:	e4 f3       	brlt	.-8      	; 0x17a2 <__divsf3_pse+0x6c>
    17aa:	98 3e       	cpi	r25, 0xE8	; 232
    17ac:	d4 f3       	brlt	.-12     	; 0x17a2 <__divsf3_pse+0x6c>
    17ae:	86 95       	lsr	r24
    17b0:	77 95       	ror	r23
    17b2:	67 95       	ror	r22
    17b4:	b7 95       	ror	r27
    17b6:	f7 95       	ror	r31
    17b8:	9f 5f       	subi	r25, 0xFF	; 255
    17ba:	c9 f7       	brne	.-14     	; 0x17ae <__divsf3_pse+0x78>
    17bc:	88 0f       	add	r24, r24
    17be:	91 1d       	adc	r25, r1
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	97 f9       	bld	r25, 7
    17c6:	08 95       	ret
    17c8:	e1 e0       	ldi	r30, 0x01	; 1
    17ca:	66 0f       	add	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	bb 1f       	adc	r27, r27
    17d2:	62 17       	cp	r22, r18
    17d4:	73 07       	cpc	r23, r19
    17d6:	84 07       	cpc	r24, r20
    17d8:	ba 07       	cpc	r27, r26
    17da:	20 f0       	brcs	.+8      	; 0x17e4 <__divsf3_pse+0xae>
    17dc:	62 1b       	sub	r22, r18
    17de:	73 0b       	sbc	r23, r19
    17e0:	84 0b       	sbc	r24, r20
    17e2:	ba 0b       	sbc	r27, r26
    17e4:	ee 1f       	adc	r30, r30
    17e6:	88 f7       	brcc	.-30     	; 0x17ca <__divsf3_pse+0x94>
    17e8:	e0 95       	com	r30
    17ea:	08 95       	ret

000017ec <__fixsfsi>:
    17ec:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fixunssfsi>
    17f0:	68 94       	set
    17f2:	b1 11       	cpse	r27, r1
    17f4:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    17f8:	08 95       	ret

000017fa <__fixunssfsi>:
    17fa:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fp_splitA>
    17fe:	88 f0       	brcs	.+34     	; 0x1822 <__fixunssfsi+0x28>
    1800:	9f 57       	subi	r25, 0x7F	; 127
    1802:	98 f0       	brcs	.+38     	; 0x182a <__fixunssfsi+0x30>
    1804:	b9 2f       	mov	r27, r25
    1806:	99 27       	eor	r25, r25
    1808:	b7 51       	subi	r27, 0x17	; 23
    180a:	b0 f0       	brcs	.+44     	; 0x1838 <__fixunssfsi+0x3e>
    180c:	e1 f0       	breq	.+56     	; 0x1846 <__fixunssfsi+0x4c>
    180e:	66 0f       	add	r22, r22
    1810:	77 1f       	adc	r23, r23
    1812:	88 1f       	adc	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	1a f0       	brmi	.+6      	; 0x181e <__fixunssfsi+0x24>
    1818:	ba 95       	dec	r27
    181a:	c9 f7       	brne	.-14     	; 0x180e <__fixunssfsi+0x14>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <__fixunssfsi+0x4c>
    181e:	b1 30       	cpi	r27, 0x01	; 1
    1820:	91 f0       	breq	.+36     	; 0x1846 <__fixunssfsi+0x4c>
    1822:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_zero>
    1826:	b1 e0       	ldi	r27, 0x01	; 1
    1828:	08 95       	ret
    182a:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_zero>
    182e:	67 2f       	mov	r22, r23
    1830:	78 2f       	mov	r23, r24
    1832:	88 27       	eor	r24, r24
    1834:	b8 5f       	subi	r27, 0xF8	; 248
    1836:	39 f0       	breq	.+14     	; 0x1846 <__fixunssfsi+0x4c>
    1838:	b9 3f       	cpi	r27, 0xF9	; 249
    183a:	cc f3       	brlt	.-14     	; 0x182e <__fixunssfsi+0x34>
    183c:	86 95       	lsr	r24
    183e:	77 95       	ror	r23
    1840:	67 95       	ror	r22
    1842:	b3 95       	inc	r27
    1844:	d9 f7       	brne	.-10     	; 0x183c <__fixunssfsi+0x42>
    1846:	3e f4       	brtc	.+14     	; 0x1856 <__fixunssfsi+0x5c>
    1848:	90 95       	com	r25
    184a:	80 95       	com	r24
    184c:	70 95       	com	r23
    184e:	61 95       	neg	r22
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	8f 4f       	sbci	r24, 0xFF	; 255
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	08 95       	ret

00001858 <__floatunsisf>:
    1858:	e8 94       	clt
    185a:	09 c0       	rjmp	.+18     	; 0x186e <__floatsisf+0x12>

0000185c <__floatsisf>:
    185c:	97 fb       	bst	r25, 7
    185e:	3e f4       	brtc	.+14     	; 0x186e <__floatsisf+0x12>
    1860:	90 95       	com	r25
    1862:	80 95       	com	r24
    1864:	70 95       	com	r23
    1866:	61 95       	neg	r22
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	8f 4f       	sbci	r24, 0xFF	; 255
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	99 23       	and	r25, r25
    1870:	a9 f0       	breq	.+42     	; 0x189c <__floatsisf+0x40>
    1872:	f9 2f       	mov	r31, r25
    1874:	96 e9       	ldi	r25, 0x96	; 150
    1876:	bb 27       	eor	r27, r27
    1878:	93 95       	inc	r25
    187a:	f6 95       	lsr	r31
    187c:	87 95       	ror	r24
    187e:	77 95       	ror	r23
    1880:	67 95       	ror	r22
    1882:	b7 95       	ror	r27
    1884:	f1 11       	cpse	r31, r1
    1886:	f8 cf       	rjmp	.-16     	; 0x1878 <__floatsisf+0x1c>
    1888:	fa f4       	brpl	.+62     	; 0x18c8 <__floatsisf+0x6c>
    188a:	bb 0f       	add	r27, r27
    188c:	11 f4       	brne	.+4      	; 0x1892 <__floatsisf+0x36>
    188e:	60 ff       	sbrs	r22, 0
    1890:	1b c0       	rjmp	.+54     	; 0x18c8 <__floatsisf+0x6c>
    1892:	6f 5f       	subi	r22, 0xFF	; 255
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	8f 4f       	sbci	r24, 0xFF	; 255
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	16 c0       	rjmp	.+44     	; 0x18c8 <__floatsisf+0x6c>
    189c:	88 23       	and	r24, r24
    189e:	11 f0       	breq	.+4      	; 0x18a4 <__floatsisf+0x48>
    18a0:	96 e9       	ldi	r25, 0x96	; 150
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <__floatsisf+0x6a>
    18a4:	77 23       	and	r23, r23
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <__floatsisf+0x54>
    18a8:	9e e8       	ldi	r25, 0x8E	; 142
    18aa:	87 2f       	mov	r24, r23
    18ac:	76 2f       	mov	r23, r22
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <__floatsisf+0x5e>
    18b0:	66 23       	and	r22, r22
    18b2:	71 f0       	breq	.+28     	; 0x18d0 <__floatsisf+0x74>
    18b4:	96 e8       	ldi	r25, 0x86	; 134
    18b6:	86 2f       	mov	r24, r22
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	2a f0       	brmi	.+10     	; 0x18c8 <__floatsisf+0x6c>
    18be:	9a 95       	dec	r25
    18c0:	66 0f       	add	r22, r22
    18c2:	77 1f       	adc	r23, r23
    18c4:	88 1f       	adc	r24, r24
    18c6:	da f7       	brpl	.-10     	; 0x18be <__floatsisf+0x62>
    18c8:	88 0f       	add	r24, r24
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	97 f9       	bld	r25, 7
    18d0:	08 95       	ret

000018d2 <__fp_cmp>:
    18d2:	99 0f       	add	r25, r25
    18d4:	00 08       	sbc	r0, r0
    18d6:	55 0f       	add	r21, r21
    18d8:	aa 0b       	sbc	r26, r26
    18da:	e0 e8       	ldi	r30, 0x80	; 128
    18dc:	fe ef       	ldi	r31, 0xFE	; 254
    18de:	16 16       	cp	r1, r22
    18e0:	17 06       	cpc	r1, r23
    18e2:	e8 07       	cpc	r30, r24
    18e4:	f9 07       	cpc	r31, r25
    18e6:	c0 f0       	brcs	.+48     	; 0x1918 <__fp_cmp+0x46>
    18e8:	12 16       	cp	r1, r18
    18ea:	13 06       	cpc	r1, r19
    18ec:	e4 07       	cpc	r30, r20
    18ee:	f5 07       	cpc	r31, r21
    18f0:	98 f0       	brcs	.+38     	; 0x1918 <__fp_cmp+0x46>
    18f2:	62 1b       	sub	r22, r18
    18f4:	73 0b       	sbc	r23, r19
    18f6:	84 0b       	sbc	r24, r20
    18f8:	95 0b       	sbc	r25, r21
    18fa:	39 f4       	brne	.+14     	; 0x190a <__fp_cmp+0x38>
    18fc:	0a 26       	eor	r0, r26
    18fe:	61 f0       	breq	.+24     	; 0x1918 <__fp_cmp+0x46>
    1900:	23 2b       	or	r18, r19
    1902:	24 2b       	or	r18, r20
    1904:	25 2b       	or	r18, r21
    1906:	21 f4       	brne	.+8      	; 0x1910 <__fp_cmp+0x3e>
    1908:	08 95       	ret
    190a:	0a 26       	eor	r0, r26
    190c:	09 f4       	brne	.+2      	; 0x1910 <__fp_cmp+0x3e>
    190e:	a1 40       	sbci	r26, 0x01	; 1
    1910:	a6 95       	lsr	r26
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	81 1d       	adc	r24, r1
    1916:	81 1d       	adc	r24, r1
    1918:	08 95       	ret

0000191a <__fp_inf>:
    191a:	97 f9       	bld	r25, 7
    191c:	9f 67       	ori	r25, 0x7F	; 127
    191e:	80 e8       	ldi	r24, 0x80	; 128
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	08 95       	ret

00001926 <__fp_nan>:
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	80 ec       	ldi	r24, 0xC0	; 192
    192a:	08 95       	ret

0000192c <__fp_pscA>:
    192c:	00 24       	eor	r0, r0
    192e:	0a 94       	dec	r0
    1930:	16 16       	cp	r1, r22
    1932:	17 06       	cpc	r1, r23
    1934:	18 06       	cpc	r1, r24
    1936:	09 06       	cpc	r0, r25
    1938:	08 95       	ret

0000193a <__fp_pscB>:
    193a:	00 24       	eor	r0, r0
    193c:	0a 94       	dec	r0
    193e:	12 16       	cp	r1, r18
    1940:	13 06       	cpc	r1, r19
    1942:	14 06       	cpc	r1, r20
    1944:	05 06       	cpc	r0, r21
    1946:	08 95       	ret

00001948 <__fp_round>:
    1948:	09 2e       	mov	r0, r25
    194a:	03 94       	inc	r0
    194c:	00 0c       	add	r0, r0
    194e:	11 f4       	brne	.+4      	; 0x1954 <__fp_round+0xc>
    1950:	88 23       	and	r24, r24
    1952:	52 f0       	brmi	.+20     	; 0x1968 <__fp_round+0x20>
    1954:	bb 0f       	add	r27, r27
    1956:	40 f4       	brcc	.+16     	; 0x1968 <__fp_round+0x20>
    1958:	bf 2b       	or	r27, r31
    195a:	11 f4       	brne	.+4      	; 0x1960 <__fp_round+0x18>
    195c:	60 ff       	sbrs	r22, 0
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <__fp_round+0x20>
    1960:	6f 5f       	subi	r22, 0xFF	; 255
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	08 95       	ret

0000196a <__fp_split3>:
    196a:	57 fd       	sbrc	r21, 7
    196c:	90 58       	subi	r25, 0x80	; 128
    196e:	44 0f       	add	r20, r20
    1970:	55 1f       	adc	r21, r21
    1972:	59 f0       	breq	.+22     	; 0x198a <__fp_splitA+0x10>
    1974:	5f 3f       	cpi	r21, 0xFF	; 255
    1976:	71 f0       	breq	.+28     	; 0x1994 <__fp_splitA+0x1a>
    1978:	47 95       	ror	r20

0000197a <__fp_splitA>:
    197a:	88 0f       	add	r24, r24
    197c:	97 fb       	bst	r25, 7
    197e:	99 1f       	adc	r25, r25
    1980:	61 f0       	breq	.+24     	; 0x199a <__fp_splitA+0x20>
    1982:	9f 3f       	cpi	r25, 0xFF	; 255
    1984:	79 f0       	breq	.+30     	; 0x19a4 <__fp_splitA+0x2a>
    1986:	87 95       	ror	r24
    1988:	08 95       	ret
    198a:	12 16       	cp	r1, r18
    198c:	13 06       	cpc	r1, r19
    198e:	14 06       	cpc	r1, r20
    1990:	55 1f       	adc	r21, r21
    1992:	f2 cf       	rjmp	.-28     	; 0x1978 <__fp_split3+0xe>
    1994:	46 95       	lsr	r20
    1996:	f1 df       	rcall	.-30     	; 0x197a <__fp_splitA>
    1998:	08 c0       	rjmp	.+16     	; 0x19aa <__fp_splitA+0x30>
    199a:	16 16       	cp	r1, r22
    199c:	17 06       	cpc	r1, r23
    199e:	18 06       	cpc	r1, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	f1 cf       	rjmp	.-30     	; 0x1986 <__fp_splitA+0xc>
    19a4:	86 95       	lsr	r24
    19a6:	71 05       	cpc	r23, r1
    19a8:	61 05       	cpc	r22, r1
    19aa:	08 94       	sec
    19ac:	08 95       	ret

000019ae <__fp_zero>:
    19ae:	e8 94       	clt

000019b0 <__fp_szero>:
    19b0:	bb 27       	eor	r27, r27
    19b2:	66 27       	eor	r22, r22
    19b4:	77 27       	eor	r23, r23
    19b6:	cb 01       	movw	r24, r22
    19b8:	97 f9       	bld	r25, 7
    19ba:	08 95       	ret

000019bc <__gesf2>:
    19bc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fp_cmp>
    19c0:	08 f4       	brcc	.+2      	; 0x19c4 <__gesf2+0x8>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	08 95       	ret

000019c6 <__mulsf3>:
    19c6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulsf3x>
    19ca:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    19ce:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    19d2:	38 f0       	brcs	.+14     	; 0x19e2 <__mulsf3+0x1c>
    19d4:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <__mulsf3+0x1c>
    19da:	95 23       	and	r25, r21
    19dc:	11 f0       	breq	.+4      	; 0x19e2 <__mulsf3+0x1c>
    19de:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    19e2:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>
    19e6:	11 24       	eor	r1, r1
    19e8:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>

000019ec <__mulsf3x>:
    19ec:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    19f0:	70 f3       	brcs	.-36     	; 0x19ce <__mulsf3+0x8>

000019f2 <__mulsf3_pse>:
    19f2:	95 9f       	mul	r25, r21
    19f4:	c1 f3       	breq	.-16     	; 0x19e6 <__mulsf3+0x20>
    19f6:	95 0f       	add	r25, r21
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	55 1f       	adc	r21, r21
    19fc:	62 9f       	mul	r22, r18
    19fe:	f0 01       	movw	r30, r0
    1a00:	72 9f       	mul	r23, r18
    1a02:	bb 27       	eor	r27, r27
    1a04:	f0 0d       	add	r31, r0
    1a06:	b1 1d       	adc	r27, r1
    1a08:	63 9f       	mul	r22, r19
    1a0a:	aa 27       	eor	r26, r26
    1a0c:	f0 0d       	add	r31, r0
    1a0e:	b1 1d       	adc	r27, r1
    1a10:	aa 1f       	adc	r26, r26
    1a12:	64 9f       	mul	r22, r20
    1a14:	66 27       	eor	r22, r22
    1a16:	b0 0d       	add	r27, r0
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	66 1f       	adc	r22, r22
    1a1c:	82 9f       	mul	r24, r18
    1a1e:	22 27       	eor	r18, r18
    1a20:	b0 0d       	add	r27, r0
    1a22:	a1 1d       	adc	r26, r1
    1a24:	62 1f       	adc	r22, r18
    1a26:	73 9f       	mul	r23, r19
    1a28:	b0 0d       	add	r27, r0
    1a2a:	a1 1d       	adc	r26, r1
    1a2c:	62 1f       	adc	r22, r18
    1a2e:	83 9f       	mul	r24, r19
    1a30:	a0 0d       	add	r26, r0
    1a32:	61 1d       	adc	r22, r1
    1a34:	22 1f       	adc	r18, r18
    1a36:	74 9f       	mul	r23, r20
    1a38:	33 27       	eor	r19, r19
    1a3a:	a0 0d       	add	r26, r0
    1a3c:	61 1d       	adc	r22, r1
    1a3e:	23 1f       	adc	r18, r19
    1a40:	84 9f       	mul	r24, r20
    1a42:	60 0d       	add	r22, r0
    1a44:	21 1d       	adc	r18, r1
    1a46:	82 2f       	mov	r24, r18
    1a48:	76 2f       	mov	r23, r22
    1a4a:	6a 2f       	mov	r22, r26
    1a4c:	11 24       	eor	r1, r1
    1a4e:	9f 57       	subi	r25, 0x7F	; 127
    1a50:	50 40       	sbci	r21, 0x00	; 0
    1a52:	9a f0       	brmi	.+38     	; 0x1a7a <__mulsf3_pse+0x88>
    1a54:	f1 f0       	breq	.+60     	; 0x1a92 <__mulsf3_pse+0xa0>
    1a56:	88 23       	and	r24, r24
    1a58:	4a f0       	brmi	.+18     	; 0x1a6c <__mulsf3_pse+0x7a>
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	bb 1f       	adc	r27, r27
    1a60:	66 1f       	adc	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	91 50       	subi	r25, 0x01	; 1
    1a68:	50 40       	sbci	r21, 0x00	; 0
    1a6a:	a9 f7       	brne	.-22     	; 0x1a56 <__mulsf3_pse+0x64>
    1a6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a6e:	51 05       	cpc	r21, r1
    1a70:	80 f0       	brcs	.+32     	; 0x1a92 <__mulsf3_pse+0xa0>
    1a72:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    1a76:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    1a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7c:	e4 f3       	brlt	.-8      	; 0x1a76 <__mulsf3_pse+0x84>
    1a7e:	98 3e       	cpi	r25, 0xE8	; 232
    1a80:	d4 f3       	brlt	.-12     	; 0x1a76 <__mulsf3_pse+0x84>
    1a82:	86 95       	lsr	r24
    1a84:	77 95       	ror	r23
    1a86:	67 95       	ror	r22
    1a88:	b7 95       	ror	r27
    1a8a:	f7 95       	ror	r31
    1a8c:	e7 95       	ror	r30
    1a8e:	9f 5f       	subi	r25, 0xFF	; 255
    1a90:	c1 f7       	brne	.-16     	; 0x1a82 <__mulsf3_pse+0x90>
    1a92:	fe 2b       	or	r31, r30
    1a94:	88 0f       	add	r24, r24
    1a96:	91 1d       	adc	r25, r1
    1a98:	96 95       	lsr	r25
    1a9a:	87 95       	ror	r24
    1a9c:	97 f9       	bld	r25, 7
    1a9e:	08 95       	ret

00001aa0 <__divmodhi4>:
    1aa0:	97 fb       	bst	r25, 7
    1aa2:	07 2e       	mov	r0, r23
    1aa4:	16 f4       	brtc	.+4      	; 0x1aaa <__divmodhi4+0xa>
    1aa6:	00 94       	com	r0
    1aa8:	07 d0       	rcall	.+14     	; 0x1ab8 <__divmodhi4_neg1>
    1aaa:	77 fd       	sbrc	r23, 7
    1aac:	09 d0       	rcall	.+18     	; 0x1ac0 <__divmodhi4_neg2>
    1aae:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__udivmodhi4>
    1ab2:	07 fc       	sbrc	r0, 7
    1ab4:	05 d0       	rcall	.+10     	; 0x1ac0 <__divmodhi4_neg2>
    1ab6:	3e f4       	brtc	.+14     	; 0x1ac6 <__divmodhi4_exit>

00001ab8 <__divmodhi4_neg1>:
    1ab8:	90 95       	com	r25
    1aba:	81 95       	neg	r24
    1abc:	9f 4f       	sbci	r25, 0xFF	; 255
    1abe:	08 95       	ret

00001ac0 <__divmodhi4_neg2>:
    1ac0:	70 95       	com	r23
    1ac2:	61 95       	neg	r22
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ac6 <__divmodhi4_exit>:
    1ac6:	08 95       	ret

00001ac8 <__umulhisi3>:
    1ac8:	a2 9f       	mul	r26, r18
    1aca:	b0 01       	movw	r22, r0
    1acc:	b3 9f       	mul	r27, r19
    1ace:	c0 01       	movw	r24, r0
    1ad0:	a3 9f       	mul	r26, r19
    1ad2:	70 0d       	add	r23, r0
    1ad4:	81 1d       	adc	r24, r1
    1ad6:	11 24       	eor	r1, r1
    1ad8:	91 1d       	adc	r25, r1
    1ada:	b2 9f       	mul	r27, r18
    1adc:	70 0d       	add	r23, r0
    1ade:	81 1d       	adc	r24, r1
    1ae0:	11 24       	eor	r1, r1
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	08 95       	ret

00001ae6 <__udivmodhi4>:
    1ae6:	aa 1b       	sub	r26, r26
    1ae8:	bb 1b       	sub	r27, r27
    1aea:	51 e1       	ldi	r21, 0x11	; 17
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <__udivmodhi4_ep>

00001aee <__udivmodhi4_loop>:
    1aee:	aa 1f       	adc	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	a6 17       	cp	r26, r22
    1af4:	b7 07       	cpc	r27, r23
    1af6:	10 f0       	brcs	.+4      	; 0x1afc <__udivmodhi4_ep>
    1af8:	a6 1b       	sub	r26, r22
    1afa:	b7 0b       	sbc	r27, r23

00001afc <__udivmodhi4_ep>:
    1afc:	88 1f       	adc	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	5a 95       	dec	r21
    1b02:	a9 f7       	brne	.-22     	; 0x1aee <__udivmodhi4_loop>
    1b04:	80 95       	com	r24
    1b06:	90 95       	com	r25
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	08 95       	ret

00001b0e <_exit>:
    1b0e:	f8 94       	cli

00001b10 <__stop_program>:
    1b10:	ff cf       	rjmp	.-2      	; 0x1b10 <__stop_program>
