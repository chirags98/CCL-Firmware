
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000016e2  00001776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800130  00800130  000017a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b6e  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c25  00000000  00000000  000034e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f09  00000000  00000000  0000410b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00005014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000606  00000000  00000000  00005400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001183  00000000  00000000  00005a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ee       	ldi	r30, 0xE2	; 226
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 33       	cpi	r26, 0x30	; 48
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e3       	ldi	r26, 0x30	; 48
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 35       	cpi	r26, 0x57	; 87
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9c 08 	call	0x1138	; 0x1138 <main>
      9e:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	d8 2e       	mov	r13, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     104:	06 2f       	mov	r16, r22
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	10 16       	cp	r1, r16
     10a:	11 06       	cpc	r1, r17
     10c:	34 f5       	brge	.+76     	; 0x15a <avg_read_adc_channel+0x6e>
     10e:	c1 e0       	ldi	r28, 0x01	; 1
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	81 2c       	mov	r8, r1
     114:	91 2c       	mov	r9, r1
     116:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
     118:	e8 2e       	mov	r14, r24
     11a:	f1 2c       	mov	r15, r1
     11c:	c7 01       	movw	r24, r14
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	9c 01       	movw	r18, r24
     124:	2f 5a       	subi	r18, 0xAF	; 175
     126:	3e 4f       	sbci	r19, 0xFE	; 254
     128:	79 01       	movw	r14, r18
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	8d 2d       	mov	r24, r13
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel];
     130:	f7 01       	movw	r30, r14
     132:	40 81       	ld	r20, Z
     134:	51 81       	ldd	r21, Z+1	; 0x01
     136:	ba 01       	movw	r22, r20
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 14 0a 	call	0x1428	; 0x1428 <__floatunsisf>
     140:	9b 01       	movw	r18, r22
     142:	ac 01       	movw	r20, r24
     144:	c5 01       	movw	r24, r10
     146:	b4 01       	movw	r22, r8
     148:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__addsf3>
     14c:	4b 01       	movw	r8, r22
     14e:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     150:	21 96       	adiw	r28, 0x01	; 1
     152:	0c 17       	cp	r16, r28
     154:	1d 07       	cpc	r17, r29
     156:	4c f7       	brge	.-46     	; 0x12a <avg_read_adc_channel+0x3e>
     158:	03 c0       	rjmp	.+6      	; 0x160 <avg_read_adc_channel+0x74>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     15a:	81 2c       	mov	r8, r1
     15c:	91 2c       	mov	r9, r1
     15e:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
	}
	
	adc_val[channel] = val/i;
     160:	cd 2d       	mov	r28, r13
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	b8 01       	movw	r22, r16
     166:	11 0f       	add	r17, r17
     168:	88 0b       	sbc	r24, r24
     16a:	99 0b       	sbc	r25, r25
     16c:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatsisf>
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	c5 01       	movw	r24, r10
     176:	b4 01       	movw	r22, r8
     178:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divsf3>
     17c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fixunssfsi>
     180:	cc 0f       	add	r28, r28
     182:	dd 1f       	adc	r29, r29
     184:	cf 5a       	subi	r28, 0xAF	; 175
     186:	de 4f       	sbci	r29, 0xFE	; 254
     188:	79 83       	std	Y+1, r23	; 0x01
     18a:	68 83       	st	Y, r22
	
	return adc_val[channel];
     18c:	88 81       	ld	r24, Y
     18e:	99 81       	ldd	r25, Y+1	; 0x01
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	bf 90       	pop	r11
     1a0:	af 90       	pop	r10
     1a2:	9f 90       	pop	r9
     1a4:	8f 90       	pop	r8
     1a6:	08 95       	ret

000001a8 <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	3f 93       	push	r19
     1b6:	4f 93       	push	r20
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
     1bc:	ef 93       	push	r30
     1be:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1c0:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1c4:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1cc:	ef 70       	andi	r30, 0x0F	; 15
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
	unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	21 e0       	ldi	r18, 0x01	; 1
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	81 11       	cpse	r24, r1
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_21+0x34>
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	ef 5a       	subi	r30, 0xAF	; 175
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1e8:	20 81       	ld	r18, Z
     1ea:	31 81       	ldd	r19, Z+1	; 0x01
     1ec:	32 2f       	mov	r19, r18
     1ee:	22 27       	eor	r18, r18
     1f0:	31 83       	std	Z+1, r19	; 0x01
     1f2:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	98 2f       	mov	r25, r24
     1f8:	88 27       	eor	r24, r24
     1fa:	84 0f       	add	r24, r20
     1fc:	91 1d       	adc	r25, r1
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	9f 91       	pop	r25
     208:	8f 91       	pop	r24
     20a:	4f 91       	pop	r20
     20c:	3f 91       	pop	r19
     20e:	2f 91       	pop	r18
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <update_current>:
int v_thresh = 25000;
int power_thresh = 10000;

void update_current()
{
	current = avg_read_adc_channel(0, 10);		//0-2A	Least count = 1.95mv
     21a:	6a e0       	ldi	r22, 0x0A	; 10
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     222:	bc 01       	movw	r22, r24
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 14 0a 	call	0x1428	; 0x1428 <__floatunsisf>
	current = current*1.953 + 0.3 + offset;		//1.953*(1.0228, 9.57, 1.1054, 1.016,1.0570)
     22c:	27 ee       	ldi	r18, 0xE7	; 231
     22e:	3b ef       	ldi	r19, 0xFB	; 251
     230:	49 ef       	ldi	r20, 0xF9	; 249
     232:	5f e3       	ldi	r21, 0x3F	; 63
     234:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     238:	2a e9       	ldi	r18, 0x9A	; 154
     23a:	39 e9       	ldi	r19, 0x99	; 153
     23c:	49 e9       	ldi	r20, 0x99	; 153
     23e:	5e e3       	ldi	r21, 0x3E	; 62
     240:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__addsf3>
     244:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
     248:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
     24c:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <__data_end+0x2>
     250:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <__data_end+0x3>
     254:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__addsf3>
     258:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <current>
     25c:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <current+0x1>
     260:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <current+0x2>
     264:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <current+0x3>
     268:	08 95       	ret

0000026a <update_voltage>:
}

void update_voltage()
{
	voltage = avg_read_adc_channel(1, 10);		//0-30V	Least count = 29.29mv
     26a:	6a e0       	ldi	r22, 0x0A	; 10
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     272:	bc 01       	movw	r22, r24
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 14 0a 	call	0x1428	; 0x1428 <__floatunsisf>
	voltage = voltage*29.29;	
     27c:	2c ee       	ldi	r18, 0xEC	; 236
     27e:	31 e5       	ldi	r19, 0x51	; 81
     280:	4a ee       	ldi	r20, 0xEA	; 234
     282:	51 e4       	ldi	r21, 0x41	; 65
     284:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     288:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <voltage>
     28c:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <voltage+0x1>
     290:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <voltage+0x2>
     294:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <voltage+0x3>
     298:	08 95       	ret

0000029a <update_power>:
}

void update_power()
{
	power = voltage*current/1000;
     29a:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <current>
     29e:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <current+0x1>
     2a2:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <current+0x2>
     2a6:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <current+0x3>
     2aa:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <voltage>
     2ae:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <voltage+0x1>
     2b2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <voltage+0x2>
     2b6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <voltage+0x3>
     2ba:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	4a e7       	ldi	r20, 0x7A	; 122
     2c4:	54 e4       	ldi	r21, 0x44	; 68
     2c6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divsf3>
     2ca:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <power>
     2ce:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <power+0x1>
     2d2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <power+0x2>
     2d6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <power+0x3>
     2da:	08 95       	ret

000002dc <update_gate_voltage>:
}

void update_gate_voltage()
{
	gate_voltage = avg_read_adc_channel(2, 10)*10.74;		//0-11V	
     2dc:	6a e0       	ldi	r22, 0x0A	; 10
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     2e4:	bc 01       	movw	r22, r24
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 14 0a 	call	0x1428	; 0x1428 <__floatunsisf>
     2ee:	2a e0       	ldi	r18, 0x0A	; 10
     2f0:	37 ed       	ldi	r19, 0xD7	; 215
     2f2:	4b e2       	ldi	r20, 0x2B	; 43
     2f4:	51 e4       	ldi	r21, 0x41	; 65
     2f6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     2fa:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <gate_voltage>
     2fe:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <gate_voltage+0x1>
     302:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <gate_voltage+0x2>
     306:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <gate_voltage+0x3>
     30a:	08 95       	ret

0000030c <print_current>:
}

void print_current(char row, char col)
{
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
	lcd_print4(row, col, current, "mA", "A");
     314:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <current>
     318:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <current+0x1>
     31c:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <current+0x2>
     320:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <current+0x3>
     324:	0f 2e       	mov	r0, r31
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	ef 2e       	mov	r14, r31
     32a:	f1 e0       	ldi	r31, 0x01	; 1
     32c:	ff 2e       	mov	r15, r31
     32e:	f0 2d       	mov	r31, r0
     330:	00 e0       	ldi	r16, 0x00	; 0
     332:	11 e0       	ldi	r17, 0x01	; 1
     334:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_print4>
		lcd_string("A");
	}
	*/
	
	//lcd_print2(row,col,current,4, "mA");					//Least count = 1.95mA
}
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	08 95       	ret

00000342 <print_voltage>:

void print_voltage(char row, char col)
{
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
	lcd_print4(row, col, voltage, "mV", "V");
     34a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <voltage>
     34e:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <voltage+0x1>
     352:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <voltage+0x2>
     356:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <voltage+0x3>
     35a:	0f 2e       	mov	r0, r31
     35c:	f4 e0       	ldi	r31, 0x04	; 4
     35e:	ef 2e       	mov	r14, r31
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	03 e0       	ldi	r16, 0x03	; 3
     368:	11 e0       	ldi	r17, 0x01	; 1
     36a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_print4>
		lcd_string("V");
	}
	*/
	
	//lcd_print2(row,col,voltage,5, "mV");					//Least count = 29.29mv
}
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	08 95       	ret

00000378 <print_power>:

void print_power(char row, char col)
{
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
	lcd_print4(row, col, power, "mW", "W");
     380:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <power>
     384:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <power+0x1>
     388:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <power+0x2>
     38c:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <power+0x3>
     390:	0f 2e       	mov	r0, r31
     392:	f7 e0       	ldi	r31, 0x07	; 7
     394:	ef 2e       	mov	r14, r31
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	ff 2e       	mov	r15, r31
     39a:	f0 2d       	mov	r31, r0
     39c:	06 e0       	ldi	r16, 0x06	; 6
     39e:	11 e0       	ldi	r17, 0x01	; 1
     3a0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_print4>
	//lcd_print2(row,col,power,5, "mW");
}
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <print_gate_voltage>:

void print_gate_voltage(char row, char col)
{
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
	lcd_print4(row, col, gate_voltage, "mV", "V");
     3b6:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <gate_voltage>
     3ba:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <gate_voltage+0x1>
     3be:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <gate_voltage+0x2>
     3c2:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <gate_voltage+0x3>
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f4 e0       	ldi	r31, 0x04	; 4
     3ca:	ef 2e       	mov	r14, r31
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	ff 2e       	mov	r15, r31
     3d0:	f0 2d       	mov	r31, r0
     3d2:	03 e0       	ldi	r16, 0x03	; 3
     3d4:	11 e0       	ldi	r17, 0x01	; 1
     3d6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_print4>
	//lcd_print2(row,col,gate_voltage,4, "mV");				//Least count = 7.5mv
}
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	08 95       	ret

000003e4 <Bit_Reverse>:
	return x;
}
*/

static unsigned char Bit_Reverse(unsigned char aByte)
{
     3e4:	98 2f       	mov	r25, r24
return (aByte & 0x80 ? 0x01 : 0) |
     3e6:	88 1f       	adc	r24, r24
     3e8:	88 27       	eor	r24, r24
     3ea:	88 1f       	adc	r24, r24
     3ec:	96 fd       	sbrc	r25, 6
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <Bit_Reverse+0x10>
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <Bit_Reverse+0x12>
     3f4:	22 e0       	ldi	r18, 0x02	; 2
     3f6:	82 2b       	or	r24, r18
     3f8:	95 fd       	sbrc	r25, 5
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	24 e0       	ldi	r18, 0x04	; 4
     402:	82 2b       	or	r24, r18
     404:	94 fd       	sbrc	r25, 4
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	01 c0       	rjmp	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	28 e0       	ldi	r18, 0x08	; 8
     40e:	82 2b       	or	r24, r18
     410:	93 fd       	sbrc	r25, 3
     412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	01 c0       	rjmp	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	20 e1       	ldi	r18, 0x10	; 16
     41a:	82 2b       	or	r24, r18
     41c:	92 fd       	sbrc	r25, 2
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	01 c0       	rjmp	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	20 e2       	ldi	r18, 0x20	; 32
     426:	82 2b       	or	r24, r18
     428:	91 fd       	sbrc	r25, 1
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	01 c0       	rjmp	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	20 e4       	ldi	r18, 0x40	; 64
     432:	82 2b       	or	r24, r18
     434:	90 fd       	sbrc	r25, 0
     436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	01 c0       	rjmp	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	90 e8       	ldi	r25, 0x80	; 128
(aByte & 0x10 ? 0x08 : 0) |
(aByte & 0x08 ? 0x10 : 0) |
(aByte & 0x04 ? 0x20 : 0) |
(aByte & 0x02 ? 0x40 : 0) |
(aByte & 0x01 ? 0x80 : 0);
}
     43e:	89 2b       	or	r24, r25
     440:	08 95       	ret

00000442 <lcd_wr_command>:
* Logic: Outputs the command values to the lcd via PORTC
		 This function is used to give various commands to the LCD to perform various functions 
* Example Call: lcd_wr_command(0x80) To bring cursor at home position
*/
static void lcd_wr_command(unsigned char cmd)
{
     442:	cf 93       	push	r28
     444:	c8 2f       	mov	r28, r24
	static unsigned char temp;
	temp = cmd;
	
	temp = temp & 0xF0;		//Mask lower nibble
	
	temp = Bit_Reverse(temp);
     446:	80 7f       	andi	r24, 0xF0	; 240
     448:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Bit_Reverse>
	temp = temp<<2;
     44c:	88 0f       	add	r24, r24
     44e:	88 0f       	add	r24, r24
     450:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <temp.1671>
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     454:	9b b1       	in	r25, 0x0b	; 11
     456:	93 7c       	andi	r25, 0xC3	; 195
     458:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= temp;		//Output upper nibble
     45a:	8b b1       	in	r24, 0x0b	; 11
     45c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <temp.1671>
     460:	98 2b       	or	r25, r24
     462:	9b b9       	out	0x0b, r25	; 11
	
	cbit(lcd_port,RS);
     464:	5f 98       	cbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     466:	5e 9a       	sbi	0x0b, 6	; 11
     468:	8f e1       	ldi	r24, 0x1F	; 31
     46a:	9e e4       	ldi	r25, 0x4E	; 78
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_wr_command+0x2a>
     470:	00 c0       	rjmp	.+0      	; 0x472 <lcd_wr_command+0x30>
     472:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     474:	5e 98       	cbi	0x0b, 6	; 11
	
	cmd = cmd & 0x0F;		//Mask upper nibble
	cmd = cmd<<4;			//Move data into position for o/p
	
	cmd = Bit_Reverse(cmd);
     476:	8c 2f       	mov	r24, r28
     478:	82 95       	swap	r24
     47a:	80 7f       	andi	r24, 0xF0	; 240
     47c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Bit_Reverse>
	cmd = cmd<<2;
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     480:	9b b1       	in	r25, 0x0b	; 11
     482:	93 7c       	andi	r25, 0xC3	; 195
     484:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= cmd;		//Output lower nibble
     486:	9b b1       	in	r25, 0x0b	; 11
	
	cmd = cmd & 0x0F;		//Mask upper nibble
	cmd = cmd<<4;			//Move data into position for o/p
	
	cmd = Bit_Reverse(cmd);
	cmd = cmd<<2;
     488:	88 0f       	add	r24, r24
     48a:	88 0f       	add	r24, r24
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
	
	lcd_port |= cmd;		//Output lower nibble
     48c:	98 2b       	or	r25, r24
     48e:	9b b9       	out	0x0b, r25	; 11
	
	cbit(lcd_port,RS);
     490:	5f 98       	cbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     492:	5e 9a       	sbi	0x0b, 6	; 11
     494:	8f e1       	ldi	r24, 0x1F	; 31
     496:	9e e4       	ldi	r25, 0x4E	; 78
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_wr_command+0x56>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <lcd_wr_command+0x5c>
     49e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     4a0:	5e 98       	cbi	0x0b, 6	; 11
}
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <lcd_wr_char>:
* Output: Function to write character on LCD
* Logic: Outputs the appropriate values to the lcd via PORTC
* Example Call: lcd_wr_char(0x41) -to write a to the lcd
*/
static void lcd_wr_char(char letter)
{
     4a6:	cf 93       	push	r28
     4a8:	c8 2f       	mov	r28, r24
	char temp;
	temp = letter;
	temp = temp & 0xF0;
	
	temp = Bit_Reverse(temp);
     4aa:	80 7f       	andi	r24, 0xF0	; 240
     4ac:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Bit_Reverse>
	temp = temp << 2;
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     4b0:	9b b1       	in	r25, 0x0b	; 11
     4b2:	93 7c       	andi	r25, 0xC3	; 195
     4b4:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= temp;
     4b6:	9b b1       	in	r25, 0x0b	; 11
	char temp;
	temp = letter;
	temp = temp & 0xF0;
	
	temp = Bit_Reverse(temp);
	temp = temp << 2;
     4b8:	88 0f       	add	r24, r24
     4ba:	88 0f       	add	r24, r24
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
	
	lcd_port |= temp;
     4bc:	98 2b       	or	r25, r24
     4be:	9b b9       	out	0x0b, r25	; 11
	
	sbit(lcd_port,RS);
     4c0:	5f 9a       	sbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     4c2:	5e 9a       	sbi	0x0b, 6	; 11
     4c4:	8f e1       	ldi	r24, 0x1F	; 31
     4c6:	9e e4       	ldi	r25, 0x4E	; 78
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <lcd_wr_char+0x22>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <lcd_wr_char+0x28>
     4ce:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     4d0:	5e 98       	cbi	0x0b, 6	; 11

	letter = letter & 0x0F;
	letter = letter<<4;
	
	letter = Bit_Reverse(letter);
     4d2:	8c 2f       	mov	r24, r28
     4d4:	82 95       	swap	r24
     4d6:	80 7f       	andi	r24, 0xF0	; 240
     4d8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Bit_Reverse>
	letter = letter << 2;
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     4dc:	9b b1       	in	r25, 0x0b	; 11
     4de:	93 7c       	andi	r25, 0xC3	; 195
     4e0:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= letter;
     4e2:	9b b1       	in	r25, 0x0b	; 11

	letter = letter & 0x0F;
	letter = letter<<4;
	
	letter = Bit_Reverse(letter);
	letter = letter << 2;
     4e4:	88 0f       	add	r24, r24
     4e6:	88 0f       	add	r24, r24
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
	
	lcd_port |= letter;
     4e8:	98 2b       	or	r25, r24
     4ea:	9b b9       	out	0x0b, r25	; 11
	
	sbit(lcd_port,RS);
     4ec:	5f 9a       	sbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     4ee:	5e 9a       	sbi	0x0b, 6	; 11
     4f0:	8f e1       	ldi	r24, 0x1F	; 31
     4f2:	9e e4       	ldi	r25, 0x4E	; 78
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <lcd_wr_char+0x4e>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <lcd_wr_char+0x54>
     4fa:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     4fc:	5e 98       	cbi	0x0b, 6	; 11
}
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <lcd_port_config>:
* Example Call: lcd_port_config()
*/
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRD = DDRD | 0xFC; //all the LCD pin's direction set as output (1111 1100)
     502:	8a b1       	in	r24, 0x0a	; 10
     504:	8c 6f       	ori	r24, 0xFC	; 252
     506:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD & 0x04; // all the LCD pins are set to logic 0 except LCD D7
     508:	8b b1       	in	r24, 0x0b	; 11
     50a:	84 70       	andi	r24, 0x04	; 4
     50c:	8b b9       	out	0x0b, r24	; 11
     50e:	08 95       	ret

00000510 <lcd_home>:
* Logic: Passes 0x80 to lcd_wr_command
* Example Call: lcd_home()
*/
void lcd_home(void)
{
	lcd_wr_command(0x80);
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
     516:	08 95       	ret

00000518 <lcd_string>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string(char *str)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
	while(*str != '\0')
     51e:	88 81       	ld	r24, Y
     520:	88 23       	and	r24, r24
     522:	31 f0       	breq	.+12     	; 0x530 <lcd_string+0x18>
     524:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
     526:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string(char *str)
{
	while(*str != '\0')
     52a:	89 91       	ld	r24, Y+
     52c:	81 11       	cpse	r24, r1
     52e:	fb cf       	rjmp	.-10     	; 0x526 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <lcd_cursor>:
	row
* Example Call: lcd_string(2,3)
*/
void lcd_cursor (char row, char column)
{
	switch (row) {
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	19 f0       	breq	.+6      	; 0x540 <lcd_cursor+0xa>
     53a:	82 30       	cpi	r24, 0x02	; 2
     53c:	31 f0       	breq	.+12     	; 0x54a <lcd_cursor+0x14>
     53e:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
     540:	8f e7       	ldi	r24, 0x7F	; 127
     542:	86 0f       	add	r24, r22
     544:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
     548:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     54a:	8f eb       	ldi	r24, 0xBF	; 191
     54c:	86 0f       	add	r24, r22
     54e:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
     552:	08 95       	ret

00000554 <lcd_string2>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ea 01       	movw	r28, r20
	lcd_cursor(row,column);	
     55a:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_cursor>
	while(*str != '\0')
     55e:	88 81       	ld	r24, Y
     560:	88 23       	and	r24, r24
     562:	31 f0       	breq	.+12     	; 0x570 <lcd_string2+0x1c>
     564:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
     566:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
	lcd_cursor(row,column);	
	while(*str != '\0')
     56a:	89 91       	ld	r24, Y+
     56c:	81 11       	cpse	r24, r1
     56e:	fb cf       	rjmp	.-10     	; 0x566 <lcd_string2+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <lcd_print>:
* Logic: 
* Example Call: lcd_string("hello")
*/
//0020
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	8a 01       	movw	r16, r20
     580:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     582:	88 23       	and	r24, r24
     584:	11 f0       	breq	.+4      	; 0x58a <lcd_print+0x14>
     586:	61 11       	cpse	r22, r1
     588:	03 c0       	rjmp	.+6      	; 0x590 <lcd_print+0x1a>
	{
		lcd_home();
     58a:	0e 94 88 02 	call	0x510	; 0x510 <lcd_home>
     58e:	02 c0       	rjmp	.+4      	; 0x594 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     590:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     594:	c5 30       	cpi	r28, 0x05	; 5
     596:	d1 05       	cpc	r29, r1
     598:	c9 f4       	brne	.+50     	; 0x5cc <lcd_print+0x56>
	{
		million=value/10000+48;
     59a:	98 01       	movw	r18, r16
     59c:	32 95       	swap	r19
     59e:	22 95       	swap	r18
     5a0:	2f 70       	andi	r18, 0x0F	; 15
     5a2:	23 27       	eor	r18, r19
     5a4:	3f 70       	andi	r19, 0x0F	; 15
     5a6:	23 27       	eor	r18, r19
     5a8:	a7 e4       	ldi	r26, 0x47	; 71
     5aa:	b3 e0       	ldi	r27, 0x03	; 3
     5ac:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     5b0:	96 95       	lsr	r25
     5b2:	87 95       	ror	r24
     5b4:	96 95       	lsr	r25
     5b6:	87 95       	ror	r24
     5b8:	96 95       	lsr	r25
     5ba:	87 95       	ror	r24
     5bc:	c0 96       	adiw	r24, 0x30	; 48
     5be:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <million+0x1>
     5c2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <million>
		lcd_wr_char(million);
     5c6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <lcd_print+0x5e>
		flag=1;
	}
	if(digits==4 || flag==1)
     5cc:	c4 30       	cpi	r28, 0x04	; 4
     5ce:	d1 05       	cpc	r29, r1
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <lcd_print+0x5e>
     5d2:	c3 c0       	rjmp	.+390    	; 0x75a <lcd_print+0x1e4>
	{
		temp = value/1000;
     5d4:	98 01       	movw	r18, r16
     5d6:	36 95       	lsr	r19
     5d8:	27 95       	ror	r18
     5da:	36 95       	lsr	r19
     5dc:	27 95       	ror	r18
     5de:	36 95       	lsr	r19
     5e0:	27 95       	ror	r18
     5e2:	a5 ec       	ldi	r26, 0xC5	; 197
     5e4:	b0 e2       	ldi	r27, 0x20	; 32
     5e6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     5ea:	ac 01       	movw	r20, r24
     5ec:	52 95       	swap	r21
     5ee:	42 95       	swap	r20
     5f0:	4f 70       	andi	r20, 0x0F	; 15
     5f2:	45 27       	eor	r20, r21
     5f4:	5f 70       	andi	r21, 0x0F	; 15
     5f6:	45 27       	eor	r20, r21
     5f8:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     5fc:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		thousand = temp%10 + 48;
     600:	9a 01       	movw	r18, r20
     602:	ad ec       	ldi	r26, 0xCD	; 205
     604:	bc ec       	ldi	r27, 0xCC	; 204
     606:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	96 95       	lsr	r25
     610:	87 95       	ror	r24
     612:	96 95       	lsr	r25
     614:	87 95       	ror	r24
     616:	9c 01       	movw	r18, r24
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	82 0f       	add	r24, r18
     62a:	93 1f       	adc	r25, r19
     62c:	9a 01       	movw	r18, r20
     62e:	28 1b       	sub	r18, r24
     630:	39 0b       	sbc	r19, r25
     632:	c9 01       	movw	r24, r18
     634:	c0 96       	adiw	r24, 0x30	; 48
     636:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <thousand+0x1>
     63a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <thousand>
		lcd_wr_char(thousand);
     63e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     642:	98 01       	movw	r18, r16
     644:	36 95       	lsr	r19
     646:	27 95       	ror	r18
     648:	36 95       	lsr	r19
     64a:	27 95       	ror	r18
     64c:	ab e7       	ldi	r26, 0x7B	; 123
     64e:	b4 e1       	ldi	r27, 0x14	; 20
     650:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     654:	ac 01       	movw	r20, r24
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     65e:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		hundred = temp%10 + 48;
     662:	9a 01       	movw	r18, r20
     664:	ad ec       	ldi	r26, 0xCD	; 205
     666:	bc ec       	ldi	r27, 0xCC	; 204
     668:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     66c:	96 95       	lsr	r25
     66e:	87 95       	ror	r24
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	9c 01       	movw	r18, r24
     67a:	22 0f       	add	r18, r18
     67c:	33 1f       	adc	r19, r19
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	82 0f       	add	r24, r18
     68c:	93 1f       	adc	r25, r19
     68e:	9a 01       	movw	r18, r20
     690:	28 1b       	sub	r18, r24
     692:	39 0b       	sbc	r19, r25
     694:	c9 01       	movw	r24, r18
     696:	c0 96       	adiw	r24, 0x30	; 48
     698:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <hundred+0x1>
     69c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <hundred>
		lcd_wr_char(hundred);
     6a0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <lcd_print+0x138>
		flag=1;
	}
	if(digits==2 || flag==1)
     6a6:	c2 30       	cpi	r28, 0x02	; 2
     6a8:	d1 05       	cpc	r29, r1
     6aa:	09 f0       	breq	.+2      	; 0x6ae <lcd_print+0x138>
     6ac:	5b c0       	rjmp	.+182    	; 0x764 <lcd_print+0x1ee>
	{
		temp = value/10;
     6ae:	98 01       	movw	r18, r16
     6b0:	ad ec       	ldi	r26, 0xCD	; 205
     6b2:	bc ec       	ldi	r27, 0xCC	; 204
     6b4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     6b8:	ac 01       	movw	r20, r24
     6ba:	56 95       	lsr	r21
     6bc:	47 95       	ror	r20
     6be:	56 95       	lsr	r21
     6c0:	47 95       	ror	r20
     6c2:	56 95       	lsr	r21
     6c4:	47 95       	ror	r20
     6c6:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     6ca:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		tens = temp%10 + 48;
     6ce:	9a 01       	movw	r18, r20
     6d0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	96 95       	lsr	r25
     6de:	87 95       	ror	r24
     6e0:	9c 01       	movw	r18, r24
     6e2:	22 0f       	add	r18, r18
     6e4:	33 1f       	adc	r19, r19
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	82 0f       	add	r24, r18
     6f4:	93 1f       	adc	r25, r19
     6f6:	9a 01       	movw	r18, r20
     6f8:	28 1b       	sub	r18, r24
     6fa:	39 0b       	sbc	r19, r25
     6fc:	c9 01       	movw	r24, r18
     6fe:	c0 96       	adiw	r24, 0x30	; 48
     700:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tens+0x1>
     704:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tens>
		lcd_wr_char(tens);
     708:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     70c:	98 01       	movw	r18, r16
     70e:	ad ec       	ldi	r26, 0xCD	; 205
     710:	bc ec       	ldi	r27, 0xCC	; 204
     712:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     716:	96 95       	lsr	r25
     718:	87 95       	ror	r24
     71a:	96 95       	lsr	r25
     71c:	87 95       	ror	r24
     71e:	96 95       	lsr	r25
     720:	87 95       	ror	r24
     722:	9c 01       	movw	r18, r24
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	82 0f       	add	r24, r18
     736:	93 1f       	adc	r25, r19
     738:	98 01       	movw	r18, r16
     73a:	28 1b       	sub	r18, r24
     73c:	39 0b       	sbc	r19, r25
     73e:	c9 01       	movw	r24, r18
     740:	c0 96       	adiw	r24, 0x30	; 48
     742:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <unit+0x1>
     746:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <unit>
		lcd_wr_char(unit);
     74a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
	}
	if(digits>5)
     74e:	26 97       	sbiw	r28, 0x06	; 6
     750:	6c f0       	brlt	.+26     	; 0x76c <lcd_print+0x1f6>
	{
		lcd_wr_char('E');
     752:	85 e4       	ldi	r24, 0x45	; 69
     754:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
     758:	09 c0       	rjmp	.+18     	; 0x76c <lcd_print+0x1f6>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     75a:	c3 30       	cpi	r28, 0x03	; 3
     75c:	d1 05       	cpc	r29, r1
     75e:	09 f0       	breq	.+2      	; 0x762 <lcd_print+0x1ec>
     760:	a2 cf       	rjmp	.-188    	; 0x6a6 <lcd_print+0x130>
     762:	6f cf       	rjmp	.-290    	; 0x642 <lcd_print+0xcc>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
     764:	c1 30       	cpi	r28, 0x01	; 1
     766:	d1 05       	cpc	r29, r1
     768:	91 f7       	brne	.-28     	; 0x74e <lcd_print+0x1d8>
     76a:	d0 cf       	rjmp	.-96     	; 0x70c <lcd_print+0x196>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <lcd_print2>:

//20mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	6a 01       	movw	r12, r20
     786:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     788:	88 23       	and	r24, r24
     78a:	11 f0       	breq	.+4      	; 0x790 <lcd_print2+0x1a>
     78c:	61 11       	cpse	r22, r1
     78e:	03 c0       	rjmp	.+6      	; 0x796 <lcd_print2+0x20>
	{
		lcd_home();
     790:	0e 94 88 02 	call	0x510	; 0x510 <lcd_home>
     794:	02 c0       	rjmp	.+4      	; 0x79a <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     796:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     79a:	25 e0       	ldi	r18, 0x05	; 5
     79c:	e2 16       	cp	r14, r18
     79e:	f1 04       	cpc	r15, r1
     7a0:	f1 f4       	brne	.+60     	; 0x7de <lcd_print2+0x68>
	{
		million=value/10000+48;
     7a2:	96 01       	movw	r18, r12
     7a4:	32 95       	swap	r19
     7a6:	22 95       	swap	r18
     7a8:	2f 70       	andi	r18, 0x0F	; 15
     7aa:	23 27       	eor	r18, r19
     7ac:	3f 70       	andi	r19, 0x0F	; 15
     7ae:	23 27       	eor	r18, r19
     7b0:	a7 e4       	ldi	r26, 0x47	; 71
     7b2:	b3 e0       	ldi	r27, 0x03	; 3
     7b4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     7b8:	96 95       	lsr	r25
     7ba:	87 95       	ror	r24
     7bc:	96 95       	lsr	r25
     7be:	87 95       	ror	r24
     7c0:	96 95       	lsr	r25
     7c2:	87 95       	ror	r24
     7c4:	c0 96       	adiw	r24, 0x30	; 48
     7c6:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <million+0x1>
     7ca:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <million>
		if(million != '0')
     7ce:	80 33       	cpi	r24, 0x30	; 48
     7d0:	91 05       	cpc	r25, r1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <lcd_print2+0x60>
     7d4:	76 c0       	rjmp	.+236    	; 0x8c2 <lcd_print2+0x14c>
		{
			lcd_wr_char(million);
     7d6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;	
     7da:	c1 e0       	ldi	r28, 0x01	; 1
     7dc:	73 c0       	rjmp	.+230    	; 0x8c4 <lcd_print2+0x14e>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     7de:	34 e0       	ldi	r19, 0x04	; 4
     7e0:	e3 16       	cp	r14, r19
     7e2:	f1 04       	cpc	r15, r1
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <lcd_print2+0x72>
     7e6:	dc c0       	rjmp	.+440    	; 0x9a0 <__stack+0xa1>
     7e8:	21 c1       	rjmp	.+578    	; 0xa2c <__stack+0x12d>
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     7ea:	cc 23       	and	r28, r28
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <lcd_print2+0x7a>
     7ee:	a4 c0       	rjmp	.+328    	; 0x938 <__stack+0x39>
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <lcd_print2+0x7e>

//20mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     7f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;
     7f8:	cf 5f       	subi	r28, 0xFF	; 255
     7fa:	9e c0       	rjmp	.+316    	; 0x938 <__stack+0x39>
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     7fc:	cc 23       	and	r28, r28
     7fe:	09 f4       	brne	.+2      	; 0x802 <lcd_print2+0x8c>
     800:	d5 c0       	rjmp	.+426    	; 0x9ac <__stack+0xad>
     802:	01 c0       	rjmp	.+2      	; 0x806 <lcd_print2+0x90>

//20mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     804:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     806:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;
     80a:	cf 5f       	subi	r28, 0xFF	; 255
     80c:	cf c0       	rjmp	.+414    	; 0x9ac <__stack+0xad>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	e8 16       	cp	r14, r24
     812:	f1 04       	cpc	r15, r1
     814:	09 f0       	breq	.+2      	; 0x818 <lcd_print2+0xa2>
     816:	fc c0       	rjmp	.+504    	; 0xa10 <__stack+0x111>
     818:	79 c1       	rjmp	.+754    	; 0xb0c <__stack+0x20d>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     81a:	cc 23       	and	r28, r28
     81c:	39 f0       	breq	.+14     	; 0x82c <lcd_print2+0xb6>
     81e:	01 c0       	rjmp	.+2      	; 0x822 <lcd_print2+0xac>

//20mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     820:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     822:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;
     826:	cf 5f       	subi	r28, 0xFF	; 255
     828:	01 c0       	rjmp	.+2      	; 0x82c <lcd_print2+0xb6>

//20mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     82a:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     82c:	96 01       	movw	r18, r12
     82e:	ad ec       	ldi	r26, 0xCD	; 205
     830:	bc ec       	ldi	r27, 0xCC	; 204
     832:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     836:	96 95       	lsr	r25
     838:	87 95       	ror	r24
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
     83e:	96 95       	lsr	r25
     840:	87 95       	ror	r24
     842:	9c 01       	movw	r18, r24
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	82 0f       	add	r24, r18
     856:	93 1f       	adc	r25, r19
     858:	f6 01       	movw	r30, r12
     85a:	e8 1b       	sub	r30, r24
     85c:	f9 0b       	sbc	r31, r25
     85e:	cf 01       	movw	r24, r30
     860:	c0 96       	adiw	r24, 0x30	; 48
     862:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <unit+0x1>
     866:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <unit>
		lcd_wr_char(unit);
     86a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
		count++;
     86e:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     870:	f6 e0       	ldi	r31, 0x06	; 6
     872:	ef 16       	cp	r14, r31
     874:	f1 04       	cpc	r15, r1
     876:	1c f0       	brlt	.+6      	; 0x87e <lcd_print2+0x108>
	{
		lcd_wr_char('E');
     878:	85 e4       	ldi	r24, 0x45	; 69
     87a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
	}
	
	while(*str != '\0')
     87e:	f8 01       	movw	r30, r16
     880:	80 81       	ld	r24, Z
     882:	88 23       	and	r24, r24
     884:	09 f4       	brne	.+2      	; 0x888 <lcd_print2+0x112>
     886:	cb c0       	rjmp	.+406    	; 0xa1e <__stack+0x11f>
     888:	0f 5f       	subi	r16, 0xFF	; 255
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     88c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
		count++;
     890:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     892:	ff ef       	ldi	r31, 0xFF	; 255
     894:	ef 1a       	sub	r14, r31
     896:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     898:	f8 01       	movw	r30, r16
     89a:	81 91       	ld	r24, Z+
     89c:	8f 01       	movw	r16, r30
     89e:	81 11       	cpse	r24, r1
     8a0:	f5 cf       	rjmp	.-22     	; 0x88c <lcd_print2+0x116>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     8a2:	8c 2f       	mov	r24, r28
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	8e 15       	cp	r24, r14
     8a8:	9f 05       	cpc	r25, r15
     8aa:	0c f0       	brlt	.+2      	; 0x8ae <lcd_print2+0x138>
     8ac:	62 c1       	rjmp	.+708    	; 0xb72 <__stack+0x273>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;
     8b4:	cf 5f       	subi	r28, 0xFF	; 255
		str++;		
	}
	
	if(count<digits)
	{
		while(count != digits)
     8b6:	8c 2f       	mov	r24, r28
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	8e 15       	cp	r24, r14
     8bc:	9f 05       	cpc	r25, r15
     8be:	b9 f7       	brne	.-18     	; 0x8ae <lcd_print2+0x138>
     8c0:	58 c1       	rjmp	.+688    	; 0xb72 <__stack+0x273>

//20mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     8c2:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     8c4:	96 01       	movw	r18, r12
     8c6:	36 95       	lsr	r19
     8c8:	27 95       	ror	r18
     8ca:	36 95       	lsr	r19
     8cc:	27 95       	ror	r18
     8ce:	36 95       	lsr	r19
     8d0:	27 95       	ror	r18
     8d2:	a5 ec       	ldi	r26, 0xC5	; 197
     8d4:	b0 e2       	ldi	r27, 0x20	; 32
     8d6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     8da:	ac 01       	movw	r20, r24
     8dc:	52 95       	swap	r21
     8de:	42 95       	swap	r20
     8e0:	4f 70       	andi	r20, 0x0F	; 15
     8e2:	45 27       	eor	r20, r21
     8e4:	5f 70       	andi	r21, 0x0F	; 15
     8e6:	45 27       	eor	r20, r21
     8e8:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     8ec:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		thousand = temp%10 + 48;
     8f0:	9a 01       	movw	r18, r20
     8f2:	ad ec       	ldi	r26, 0xCD	; 205
     8f4:	bc ec       	ldi	r27, 0xCC	; 204
     8f6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     8fa:	96 95       	lsr	r25
     8fc:	87 95       	ror	r24
     8fe:	96 95       	lsr	r25
     900:	87 95       	ror	r24
     902:	96 95       	lsr	r25
     904:	87 95       	ror	r24
     906:	9c 01       	movw	r18, r24
     908:	22 0f       	add	r18, r18
     90a:	33 1f       	adc	r19, r19
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	9a 01       	movw	r18, r20
     91e:	28 1b       	sub	r18, r24
     920:	39 0b       	sbc	r19, r25
     922:	c9 01       	movw	r24, r18
     924:	c0 96       	adiw	r24, 0x30	; 48
     926:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <thousand+0x1>
     92a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     92e:	80 33       	cpi	r24, 0x30	; 48
     930:	91 05       	cpc	r25, r1
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	5f cf       	rjmp	.-322    	; 0x7f4 <lcd_print2+0x7e>
     936:	59 cf       	rjmp	.-334    	; 0x7ea <lcd_print2+0x74>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     938:	96 01       	movw	r18, r12
     93a:	36 95       	lsr	r19
     93c:	27 95       	ror	r18
     93e:	36 95       	lsr	r19
     940:	27 95       	ror	r18
     942:	ab e7       	ldi	r26, 0x7B	; 123
     944:	b4 e1       	ldi	r27, 0x14	; 20
     946:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     94a:	ac 01       	movw	r20, r24
     94c:	56 95       	lsr	r21
     94e:	47 95       	ror	r20
     950:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     954:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		hundred = temp%10 + 48;
     958:	9a 01       	movw	r18, r20
     95a:	ad ec       	ldi	r26, 0xCD	; 205
     95c:	bc ec       	ldi	r27, 0xCC	; 204
     95e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	96 95       	lsr	r25
     96c:	87 95       	ror	r24
     96e:	9c 01       	movw	r18, r24
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	82 0f       	add	r24, r18
     982:	93 1f       	adc	r25, r19
     984:	fa 01       	movw	r30, r20
     986:	e8 1b       	sub	r30, r24
     988:	f9 0b       	sbc	r31, r25
     98a:	cf 01       	movw	r24, r30
     98c:	c0 96       	adiw	r24, 0x30	; 48
     98e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <hundred+0x1>
     992:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <hundred>
		if(hundred != '0' || count != 0)
     996:	80 33       	cpi	r24, 0x30	; 48
     998:	91 05       	cpc	r25, r1
     99a:	09 f0       	breq	.+2      	; 0x99e <__stack+0x9f>
     99c:	34 cf       	rjmp	.-408    	; 0x806 <lcd_print2+0x90>
     99e:	2e cf       	rjmp	.-420    	; 0x7fc <lcd_print2+0x86>
			lcd_wr_char(thousand);
			count++;
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     9a0:	f3 e0       	ldi	r31, 0x03	; 3
     9a2:	ef 16       	cp	r14, r31
     9a4:	f1 04       	cpc	r15, r1
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__stack+0xab>
     9a8:	32 cf       	rjmp	.-412    	; 0x80e <lcd_print2+0x98>
     9aa:	7b c0       	rjmp	.+246    	; 0xaa2 <__stack+0x1a3>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     9ac:	96 01       	movw	r18, r12
     9ae:	ad ec       	ldi	r26, 0xCD	; 205
     9b0:	bc ec       	ldi	r27, 0xCC	; 204
     9b2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     9b6:	ac 01       	movw	r20, r24
     9b8:	56 95       	lsr	r21
     9ba:	47 95       	ror	r20
     9bc:	56 95       	lsr	r21
     9be:	47 95       	ror	r20
     9c0:	56 95       	lsr	r21
     9c2:	47 95       	ror	r20
     9c4:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     9c8:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		tens = temp%10 + 48;
     9cc:	9a 01       	movw	r18, r20
     9ce:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     9d2:	96 95       	lsr	r25
     9d4:	87 95       	ror	r24
     9d6:	96 95       	lsr	r25
     9d8:	87 95       	ror	r24
     9da:	96 95       	lsr	r25
     9dc:	87 95       	ror	r24
     9de:	9c 01       	movw	r18, r24
     9e0:	22 0f       	add	r18, r18
     9e2:	33 1f       	adc	r19, r19
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	82 0f       	add	r24, r18
     9f2:	93 1f       	adc	r25, r19
     9f4:	9a 01       	movw	r18, r20
     9f6:	28 1b       	sub	r18, r24
     9f8:	39 0b       	sbc	r19, r25
     9fa:	c9 01       	movw	r24, r18
     9fc:	c0 96       	adiw	r24, 0x30	; 48
     9fe:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tens+0x1>
     a02:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tens>
		if(tens != '0' || count != 0)
     a06:	80 33       	cpi	r24, 0x30	; 48
     a08:	91 05       	cpc	r25, r1
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	0a cf       	rjmp	.-492    	; 0x822 <lcd_print2+0xac>
     a0e:	05 cf       	rjmp	.-502    	; 0x81a <lcd_print2+0xa4>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     a10:	31 e0       	ldi	r19, 0x01	; 1
     a12:	e3 16       	cp	r14, r19
     a14:	f1 04       	cpc	r15, r1
     a16:	09 f4       	brne	.+2      	; 0xa1a <__stack+0x11b>
     a18:	08 cf       	rjmp	.-496    	; 0x82a <lcd_print2+0xb4>

//20mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     a1a:	c0 e0       	ldi	r28, 0x00	; 0
     a1c:	29 cf       	rjmp	.-430    	; 0x870 <lcd_print2+0xfa>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     a1e:	8c 2f       	mov	r24, r28
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	8e 15       	cp	r24, r14
     a24:	9f 05       	cpc	r25, r15
     a26:	0c f4       	brge	.+2      	; 0xa2a <__stack+0x12b>
     a28:	42 cf       	rjmp	.-380    	; 0x8ae <lcd_print2+0x138>
     a2a:	a3 c0       	rjmp	.+326    	; 0xb72 <__stack+0x273>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     a2c:	96 01       	movw	r18, r12
     a2e:	36 95       	lsr	r19
     a30:	27 95       	ror	r18
     a32:	36 95       	lsr	r19
     a34:	27 95       	ror	r18
     a36:	36 95       	lsr	r19
     a38:	27 95       	ror	r18
     a3a:	a5 ec       	ldi	r26, 0xC5	; 197
     a3c:	b0 e2       	ldi	r27, 0x20	; 32
     a3e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     a42:	ac 01       	movw	r20, r24
     a44:	52 95       	swap	r21
     a46:	42 95       	swap	r20
     a48:	4f 70       	andi	r20, 0x0F	; 15
     a4a:	45 27       	eor	r20, r21
     a4c:	5f 70       	andi	r21, 0x0F	; 15
     a4e:	45 27       	eor	r20, r21
     a50:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     a54:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		thousand = temp%10 + 48;
     a58:	9a 01       	movw	r18, r20
     a5a:	ad ec       	ldi	r26, 0xCD	; 205
     a5c:	bc ec       	ldi	r27, 0xCC	; 204
     a5e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     a62:	96 95       	lsr	r25
     a64:	87 95       	ror	r24
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	9c 01       	movw	r18, r24
     a70:	22 0f       	add	r18, r18
     a72:	33 1f       	adc	r19, r19
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	fa 01       	movw	r30, r20
     a86:	e8 1b       	sub	r30, r24
     a88:	f9 0b       	sbc	r31, r25
     a8a:	cf 01       	movw	r24, r30
     a8c:	c0 96       	adiw	r24, 0x30	; 48
     a8e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <thousand+0x1>
     a92:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     a96:	80 33       	cpi	r24, 0x30	; 48
     a98:	91 05       	cpc	r25, r1
     a9a:	09 f0       	breq	.+2      	; 0xa9e <__stack+0x19f>
     a9c:	aa ce       	rjmp	.-684    	; 0x7f2 <lcd_print2+0x7c>
     a9e:	c0 e0       	ldi	r28, 0x00	; 0
     aa0:	4b cf       	rjmp	.-362    	; 0x938 <__stack+0x39>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     aa2:	96 01       	movw	r18, r12
     aa4:	36 95       	lsr	r19
     aa6:	27 95       	ror	r18
     aa8:	36 95       	lsr	r19
     aaa:	27 95       	ror	r18
     aac:	ab e7       	ldi	r26, 0x7B	; 123
     aae:	b4 e1       	ldi	r27, 0x14	; 20
     ab0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     ab4:	ac 01       	movw	r20, r24
     ab6:	56 95       	lsr	r21
     ab8:	47 95       	ror	r20
     aba:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     abe:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		hundred = temp%10 + 48;
     ac2:	9a 01       	movw	r18, r20
     ac4:	ad ec       	ldi	r26, 0xCD	; 205
     ac6:	bc ec       	ldi	r27, 0xCC	; 204
     ac8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     acc:	96 95       	lsr	r25
     ace:	87 95       	ror	r24
     ad0:	96 95       	lsr	r25
     ad2:	87 95       	ror	r24
     ad4:	96 95       	lsr	r25
     ad6:	87 95       	ror	r24
     ad8:	9c 01       	movw	r18, r24
     ada:	22 0f       	add	r18, r18
     adc:	33 1f       	adc	r19, r19
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	9a 01       	movw	r18, r20
     af0:	28 1b       	sub	r18, r24
     af2:	39 0b       	sbc	r19, r25
     af4:	c9 01       	movw	r24, r18
     af6:	c0 96       	adiw	r24, 0x30	; 48
     af8:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <hundred+0x1>
     afc:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <hundred>
		if(hundred != '0' || count != 0)
     b00:	80 33       	cpi	r24, 0x30	; 48
     b02:	91 05       	cpc	r25, r1
     b04:	09 f0       	breq	.+2      	; 0xb08 <__stack+0x209>
     b06:	7e ce       	rjmp	.-772    	; 0x804 <lcd_print2+0x8e>
     b08:	c0 e0       	ldi	r28, 0x00	; 0
     b0a:	50 cf       	rjmp	.-352    	; 0x9ac <__stack+0xad>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     b0c:	96 01       	movw	r18, r12
     b0e:	ad ec       	ldi	r26, 0xCD	; 205
     b10:	bc ec       	ldi	r27, 0xCC	; 204
     b12:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     b16:	ac 01       	movw	r20, r24
     b18:	56 95       	lsr	r21
     b1a:	47 95       	ror	r20
     b1c:	56 95       	lsr	r21
     b1e:	47 95       	ror	r20
     b20:	56 95       	lsr	r21
     b22:	47 95       	ror	r20
     b24:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     b28:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		tens = temp%10 + 48;
     b2c:	9a 01       	movw	r18, r20
     b2e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
     b36:	96 95       	lsr	r25
     b38:	87 95       	ror	r24
     b3a:	96 95       	lsr	r25
     b3c:	87 95       	ror	r24
     b3e:	9c 01       	movw	r18, r24
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	82 0f       	add	r24, r18
     b52:	93 1f       	adc	r25, r19
     b54:	fa 01       	movw	r30, r20
     b56:	e8 1b       	sub	r30, r24
     b58:	f9 0b       	sbc	r31, r25
     b5a:	cf 01       	movw	r24, r30
     b5c:	c0 96       	adiw	r24, 0x30	; 48
     b5e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tens+0x1>
     b62:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tens>
		if(tens != '0' || count != 0)
     b66:	80 33       	cpi	r24, 0x30	; 48
     b68:	91 05       	cpc	r25, r1
     b6a:	09 f0       	breq	.+2      	; 0xb6e <__stack+0x26f>
     b6c:	59 ce       	rjmp	.-846    	; 0x820 <lcd_print2+0xaa>
     b6e:	c0 e0       	ldi	r28, 0x00	; 0
     b70:	5d ce       	rjmp	.-838    	; 0x82c <lcd_print2+0xb6>
		{
			lcd_wr_char(32);
			count++;
		}	
	}	
}
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	08 95       	ret

00000b82 <lcd_print3>:

//20
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	8a 01       	movw	r16, r20
     b8e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     b90:	88 23       	and	r24, r24
     b92:	11 f0       	breq	.+4      	; 0xb98 <lcd_print3+0x16>
     b94:	61 11       	cpse	r22, r1
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <lcd_print3+0x1c>
	{
		lcd_home();
     b98:	0e 94 88 02 	call	0x510	; 0x510 <lcd_home>
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <lcd_print3+0x20>
	}
	else
	{
		lcd_cursor(row,coloumn);
     b9e:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     ba2:	c5 30       	cpi	r28, 0x05	; 5
     ba4:	d1 05       	cpc	r29, r1
     ba6:	f9 f4       	brne	.+62     	; 0xbe6 <lcd_print3+0x64>
	{
		million=value/10000+48;
     ba8:	98 01       	movw	r18, r16
     baa:	32 95       	swap	r19
     bac:	22 95       	swap	r18
     bae:	2f 70       	andi	r18, 0x0F	; 15
     bb0:	23 27       	eor	r18, r19
     bb2:	3f 70       	andi	r19, 0x0F	; 15
     bb4:	23 27       	eor	r18, r19
     bb6:	a7 e4       	ldi	r26, 0x47	; 71
     bb8:	b3 e0       	ldi	r27, 0x03	; 3
     bba:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     bbe:	96 95       	lsr	r25
     bc0:	87 95       	ror	r24
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	c0 96       	adiw	r24, 0x30	; 48
     bcc:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <million+0x1>
     bd0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <million>
		if(million != '0')
     bd4:	80 33       	cpi	r24, 0x30	; 48
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <lcd_print3+0x5a>
     bda:	4c c0       	rjmp	.+152    	; 0xc74 <lcd_print3+0xf2>
		{
			lcd_wr_char(million);
     bdc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;
     be0:	ff 24       	eor	r15, r15
     be2:	f3 94       	inc	r15
     be4:	48 c0       	rjmp	.+144    	; 0xc76 <lcd_print3+0xf4>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     be6:	c4 30       	cpi	r28, 0x04	; 4
     be8:	d1 05       	cpc	r29, r1
     bea:	09 f0       	breq	.+2      	; 0xbee <lcd_print3+0x6c>
     bec:	b2 c0       	rjmp	.+356    	; 0xd52 <lcd_print3+0x1d0>
     bee:	ed c0       	rjmp	.+474    	; 0xdca <lcd_print3+0x248>
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     bf0:	ff 20       	and	r15, r15
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <lcd_print3+0x74>
     bf4:	7a c0       	rjmp	.+244    	; 0xcea <lcd_print3+0x168>
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <lcd_print3+0x78>

//20
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     bf8:	f1 2c       	mov	r15, r1
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     bfa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;
     bfe:	f3 94       	inc	r15
     c00:	74 c0       	rjmp	.+232    	; 0xcea <lcd_print3+0x168>
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     c02:	ff 20       	and	r15, r15
     c04:	09 f4       	brne	.+2      	; 0xc08 <lcd_print3+0x86>
     c06:	aa c0       	rjmp	.+340    	; 0xd5c <lcd_print3+0x1da>
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <lcd_print3+0x8a>

//20
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     c0a:	f1 2c       	mov	r15, r1
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     c0c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
			count++;
     c10:	f3 94       	inc	r15
     c12:	a4 c0       	rjmp	.+328    	; 0xd5c <lcd_print3+0x1da>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     c14:	c2 30       	cpi	r28, 0x02	; 2
     c16:	d1 05       	cpc	r29, r1
     c18:	09 f0       	breq	.+2      	; 0xc1c <lcd_print3+0x9a>
     c1a:	d2 c0       	rjmp	.+420    	; 0xdc0 <lcd_print3+0x23e>
     c1c:	46 c1       	rjmp	.+652    	; 0xeaa <lcd_print3+0x328>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     c1e:	f1 10       	cpse	r15, r1
		{
			lcd_wr_char(tens);
     c20:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
		}
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     c24:	98 01       	movw	r18, r16
     c26:	ad ec       	ldi	r26, 0xCD	; 205
     c28:	bc ec       	ldi	r27, 0xCC	; 204
     c2a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     c2e:	96 95       	lsr	r25
     c30:	87 95       	ror	r24
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	96 95       	lsr	r25
     c38:	87 95       	ror	r24
     c3a:	9c 01       	movw	r18, r24
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	82 0f       	add	r24, r18
     c4e:	93 1f       	adc	r25, r19
     c50:	98 01       	movw	r18, r16
     c52:	28 1b       	sub	r18, r24
     c54:	39 0b       	sbc	r19, r25
     c56:	c9 01       	movw	r24, r18
     c58:	c0 96       	adiw	r24, 0x30	; 48
     c5a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <unit+0x1>
     c5e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <unit>
		lcd_wr_char(unit);
     c62:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
		count++;
	}
	if(digits>5)
     c66:	26 97       	sbiw	r28, 0x06	; 6
     c68:	0c f4       	brge	.+2      	; 0xc6c <lcd_print3+0xea>
     c6a:	51 c1       	rjmp	.+674    	; 0xf0e <lcd_print3+0x38c>
	{
		lcd_wr_char('E');
     c6c:	85 e4       	ldi	r24, 0x45	; 69
     c6e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_wr_char>
     c72:	4d c1       	rjmp	.+666    	; 0xf0e <lcd_print3+0x38c>

//20
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     c74:	f1 2c       	mov	r15, r1
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     c76:	98 01       	movw	r18, r16
     c78:	36 95       	lsr	r19
     c7a:	27 95       	ror	r18
     c7c:	36 95       	lsr	r19
     c7e:	27 95       	ror	r18
     c80:	36 95       	lsr	r19
     c82:	27 95       	ror	r18
     c84:	a5 ec       	ldi	r26, 0xC5	; 197
     c86:	b0 e2       	ldi	r27, 0x20	; 32
     c88:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     c8c:	ac 01       	movw	r20, r24
     c8e:	52 95       	swap	r21
     c90:	42 95       	swap	r20
     c92:	4f 70       	andi	r20, 0x0F	; 15
     c94:	45 27       	eor	r20, r21
     c96:	5f 70       	andi	r21, 0x0F	; 15
     c98:	45 27       	eor	r20, r21
     c9a:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     c9e:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		thousand = temp%10 + 48;
     ca2:	9a 01       	movw	r18, r20
     ca4:	ad ec       	ldi	r26, 0xCD	; 205
     ca6:	bc ec       	ldi	r27, 0xCC	; 204
     ca8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	96 95       	lsr	r25
     cb6:	87 95       	ror	r24
     cb8:	9c 01       	movw	r18, r24
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	82 0f       	add	r24, r18
     ccc:	93 1f       	adc	r25, r19
     cce:	9a 01       	movw	r18, r20
     cd0:	28 1b       	sub	r18, r24
     cd2:	39 0b       	sbc	r19, r25
     cd4:	c9 01       	movw	r24, r18
     cd6:	c0 96       	adiw	r24, 0x30	; 48
     cd8:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <thousand+0x1>
     cdc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     ce0:	80 33       	cpi	r24, 0x30	; 48
     ce2:	91 05       	cpc	r25, r1
     ce4:	09 f0       	breq	.+2      	; 0xce8 <lcd_print3+0x166>
     ce6:	89 cf       	rjmp	.-238    	; 0xbfa <lcd_print3+0x78>
     ce8:	83 cf       	rjmp	.-250    	; 0xbf0 <lcd_print3+0x6e>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     cea:	98 01       	movw	r18, r16
     cec:	36 95       	lsr	r19
     cee:	27 95       	ror	r18
     cf0:	36 95       	lsr	r19
     cf2:	27 95       	ror	r18
     cf4:	ab e7       	ldi	r26, 0x7B	; 123
     cf6:	b4 e1       	ldi	r27, 0x14	; 20
     cf8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     cfc:	ac 01       	movw	r20, r24
     cfe:	56 95       	lsr	r21
     d00:	47 95       	ror	r20
     d02:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     d06:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		hundred = temp%10 + 48;
     d0a:	9a 01       	movw	r18, r20
     d0c:	ad ec       	ldi	r26, 0xCD	; 205
     d0e:	bc ec       	ldi	r27, 0xCC	; 204
     d10:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     d14:	96 95       	lsr	r25
     d16:	87 95       	ror	r24
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	96 95       	lsr	r25
     d1e:	87 95       	ror	r24
     d20:	9c 01       	movw	r18, r24
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	82 0f       	add	r24, r18
     d34:	93 1f       	adc	r25, r19
     d36:	9a 01       	movw	r18, r20
     d38:	28 1b       	sub	r18, r24
     d3a:	39 0b       	sbc	r19, r25
     d3c:	c9 01       	movw	r24, r18
     d3e:	c0 96       	adiw	r24, 0x30	; 48
     d40:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <hundred+0x1>
     d44:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <hundred>
		if(hundred != '0' || count != 0)
     d48:	80 33       	cpi	r24, 0x30	; 48
     d4a:	91 05       	cpc	r25, r1
     d4c:	09 f0       	breq	.+2      	; 0xd50 <lcd_print3+0x1ce>
     d4e:	5e cf       	rjmp	.-324    	; 0xc0c <lcd_print3+0x8a>
     d50:	58 cf       	rjmp	.-336    	; 0xc02 <lcd_print3+0x80>
			lcd_wr_char(thousand);
			count++;
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     d52:	c3 30       	cpi	r28, 0x03	; 3
     d54:	d1 05       	cpc	r29, r1
     d56:	09 f0       	breq	.+2      	; 0xd5a <lcd_print3+0x1d8>
     d58:	5d cf       	rjmp	.-326    	; 0xc14 <lcd_print3+0x92>
     d5a:	72 c0       	rjmp	.+228    	; 0xe40 <lcd_print3+0x2be>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     d5c:	98 01       	movw	r18, r16
     d5e:	ad ec       	ldi	r26, 0xCD	; 205
     d60:	bc ec       	ldi	r27, 0xCC	; 204
     d62:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     d66:	fc 01       	movw	r30, r24
     d68:	f6 95       	lsr	r31
     d6a:	e7 95       	ror	r30
     d6c:	f6 95       	lsr	r31
     d6e:	e7 95       	ror	r30
     d70:	f6 95       	lsr	r31
     d72:	e7 95       	ror	r30
     d74:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <temp+0x1>
     d78:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <temp>
		tens = temp%10 + 48;
     d7c:	9f 01       	movw	r18, r30
     d7e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     d82:	96 95       	lsr	r25
     d84:	87 95       	ror	r24
     d86:	96 95       	lsr	r25
     d88:	87 95       	ror	r24
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
     d8e:	9c 01       	movw	r18, r24
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	9f 01       	movw	r18, r30
     da6:	28 1b       	sub	r18, r24
     da8:	39 0b       	sbc	r19, r25
     daa:	c9 01       	movw	r24, r18
     dac:	c0 96       	adiw	r24, 0x30	; 48
     dae:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tens+0x1>
     db2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tens>
		if(tens != '0' || count != 0)
     db6:	80 33       	cpi	r24, 0x30	; 48
     db8:	91 05       	cpc	r25, r1
     dba:	09 f0       	breq	.+2      	; 0xdbe <lcd_print3+0x23c>
     dbc:	31 cf       	rjmp	.-414    	; 0xc20 <lcd_print3+0x9e>
     dbe:	2f cf       	rjmp	.-418    	; 0xc1e <lcd_print3+0x9c>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     dc0:	c1 30       	cpi	r28, 0x01	; 1
     dc2:	d1 05       	cpc	r29, r1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <lcd_print3+0x246>
     dc6:	4f cf       	rjmp	.-354    	; 0xc66 <lcd_print3+0xe4>
     dc8:	2d cf       	rjmp	.-422    	; 0xc24 <lcd_print3+0xa2>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     dca:	98 01       	movw	r18, r16
     dcc:	36 95       	lsr	r19
     dce:	27 95       	ror	r18
     dd0:	36 95       	lsr	r19
     dd2:	27 95       	ror	r18
     dd4:	36 95       	lsr	r19
     dd6:	27 95       	ror	r18
     dd8:	a5 ec       	ldi	r26, 0xC5	; 197
     dda:	b0 e2       	ldi	r27, 0x20	; 32
     ddc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     de0:	ac 01       	movw	r20, r24
     de2:	52 95       	swap	r21
     de4:	42 95       	swap	r20
     de6:	4f 70       	andi	r20, 0x0F	; 15
     de8:	45 27       	eor	r20, r21
     dea:	5f 70       	andi	r21, 0x0F	; 15
     dec:	45 27       	eor	r20, r21
     dee:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     df2:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		thousand = temp%10 + 48;
     df6:	9a 01       	movw	r18, r20
     df8:	ad ec       	ldi	r26, 0xCD	; 205
     dfa:	bc ec       	ldi	r27, 0xCC	; 204
     dfc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	96 95       	lsr	r25
     e06:	87 95       	ror	r24
     e08:	96 95       	lsr	r25
     e0a:	87 95       	ror	r24
     e0c:	9c 01       	movw	r18, r24
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	82 0f       	add	r24, r18
     e20:	93 1f       	adc	r25, r19
     e22:	9a 01       	movw	r18, r20
     e24:	28 1b       	sub	r18, r24
     e26:	39 0b       	sbc	r19, r25
     e28:	c9 01       	movw	r24, r18
     e2a:	c0 96       	adiw	r24, 0x30	; 48
     e2c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <thousand+0x1>
     e30:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <thousand>
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     e34:	80 33       	cpi	r24, 0x30	; 48
     e36:	91 05       	cpc	r25, r1
     e38:	09 f0       	breq	.+2      	; 0xe3c <lcd_print3+0x2ba>
     e3a:	de ce       	rjmp	.-580    	; 0xbf8 <lcd_print3+0x76>
     e3c:	f1 2c       	mov	r15, r1
     e3e:	55 cf       	rjmp	.-342    	; 0xcea <lcd_print3+0x168>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     e40:	98 01       	movw	r18, r16
     e42:	36 95       	lsr	r19
     e44:	27 95       	ror	r18
     e46:	36 95       	lsr	r19
     e48:	27 95       	ror	r18
     e4a:	ab e7       	ldi	r26, 0x7B	; 123
     e4c:	b4 e1       	ldi	r27, 0x14	; 20
     e4e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     e52:	ac 01       	movw	r20, r24
     e54:	56 95       	lsr	r21
     e56:	47 95       	ror	r20
     e58:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp+0x1>
     e5c:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp>
		hundred = temp%10 + 48;
     e60:	9a 01       	movw	r18, r20
     e62:	ad ec       	ldi	r26, 0xCD	; 205
     e64:	bc ec       	ldi	r27, 0xCC	; 204
     e66:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	9c 01       	movw	r18, r24
     e78:	22 0f       	add	r18, r18
     e7a:	33 1f       	adc	r19, r19
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	9a 01       	movw	r18, r20
     e8e:	28 1b       	sub	r18, r24
     e90:	39 0b       	sbc	r19, r25
     e92:	c9 01       	movw	r24, r18
     e94:	c0 96       	adiw	r24, 0x30	; 48
     e96:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <hundred+0x1>
     e9a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <hundred>
		if(hundred != '0' || count != 0)
     e9e:	80 33       	cpi	r24, 0x30	; 48
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f0       	breq	.+2      	; 0xea6 <lcd_print3+0x324>
     ea4:	b2 ce       	rjmp	.-668    	; 0xc0a <lcd_print3+0x88>
     ea6:	f1 2c       	mov	r15, r1
     ea8:	59 cf       	rjmp	.-334    	; 0xd5c <lcd_print3+0x1da>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     eaa:	98 01       	movw	r18, r16
     eac:	ad ec       	ldi	r26, 0xCD	; 205
     eae:	bc ec       	ldi	r27, 0xCC	; 204
     eb0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     eb4:	fc 01       	movw	r30, r24
     eb6:	f6 95       	lsr	r31
     eb8:	e7 95       	ror	r30
     eba:	f6 95       	lsr	r31
     ebc:	e7 95       	ror	r30
     ebe:	f6 95       	lsr	r31
     ec0:	e7 95       	ror	r30
     ec2:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <temp+0x1>
     ec6:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <temp>
		tens = temp%10 + 48;
     eca:	9f 01       	movw	r18, r30
     ecc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__umulhisi3>
     ed0:	96 95       	lsr	r25
     ed2:	87 95       	ror	r24
     ed4:	96 95       	lsr	r25
     ed6:	87 95       	ror	r24
     ed8:	96 95       	lsr	r25
     eda:	87 95       	ror	r24
     edc:	9c 01       	movw	r18, r24
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	82 0f       	add	r24, r18
     ef0:	93 1f       	adc	r25, r19
     ef2:	9f 01       	movw	r18, r30
     ef4:	28 1b       	sub	r18, r24
     ef6:	39 0b       	sbc	r19, r25
     ef8:	c9 01       	movw	r24, r18
     efa:	c0 96       	adiw	r24, 0x30	; 48
     efc:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tens+0x1>
     f00:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tens>
		if(tens != '0' || count != 0)
     f04:	80 33       	cpi	r24, 0x30	; 48
     f06:	91 05       	cpc	r25, r1
     f08:	09 f0       	breq	.+2      	; 0xf0c <lcd_print3+0x38a>
     f0a:	8a ce       	rjmp	.-748    	; 0xc20 <lcd_print3+0x9e>
     f0c:	8b ce       	rjmp	.-746    	; 0xc24 <lcd_print3+0xa2>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	08 95       	ret

00000f1a <lcd_print4>:

//27.345A //27mA ...
void lcd_print4(char row, char col, float value, char* str1, char* str2)
{
     f1a:	8f 92       	push	r8
     f1c:	9f 92       	push	r9
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	d8 2f       	mov	r29, r24
     f30:	c6 2f       	mov	r28, r22
     f32:	49 01       	movw	r8, r18
     f34:	5a 01       	movw	r10, r20
	if (value<1000)
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	4a e7       	ldi	r20, 0x7A	; 122
     f3c:	54 e4       	ldi	r21, 0x44	; 68
     f3e:	c5 01       	movw	r24, r10
     f40:	b4 01       	movw	r22, r8
     f42:	0e 94 67 09 	call	0x12ce	; 0x12ce <__cmpsf2>
     f46:	88 23       	and	r24, r24
     f48:	64 f4       	brge	.+24     	; 0xf62 <lcd_print4+0x48>
	{
		lcd_print2(row,col,value,4, str1);
     f4a:	c5 01       	movw	r24, r10
     f4c:	b4 01       	movw	r22, r8
     f4e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fixunssfsi>
     f52:	24 e0       	ldi	r18, 0x04	; 4
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	ab 01       	movw	r20, r22
     f58:	6c 2f       	mov	r22, r28
     f5a:	8d 2f       	mov	r24, r29
     f5c:	0e 94 bb 03 	call	0x776	; 0x776 <lcd_print2>
     f60:	7b c0       	rjmp	.+246    	; 0x1058 <lcd_print4+0x13e>
	}
	
	else if (value>=1000 && value < 10000)
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a e7       	ldi	r20, 0x7A	; 122
     f68:	54 e4       	ldi	r21, 0x44	; 68
     f6a:	c5 01       	movw	r24, r10
     f6c:	b4 01       	movw	r22, r8
     f6e:	0e 94 c6 0a 	call	0x158c	; 0x158c <__gesf2>
     f72:	88 23       	and	r24, r24
     f74:	dc f1       	brlt	.+118    	; 0xfec <lcd_print4+0xd2>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e4       	ldi	r19, 0x40	; 64
     f7a:	4c e1       	ldi	r20, 0x1C	; 28
     f7c:	56 e4       	ldi	r21, 0x46	; 70
     f7e:	c5 01       	movw	r24, r10
     f80:	b4 01       	movw	r22, r8
     f82:	0e 94 67 09 	call	0x12ce	; 0x12ce <__cmpsf2>
     f86:	88 23       	and	r24, r24
     f88:	8c f5       	brge	.+98     	; 0xfec <lcd_print4+0xd2>
	{
		lcd_print3(row, col, value/1000, 1);
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	4a e7       	ldi	r20, 0x7A	; 122
     f90:	54 e4       	ldi	r21, 0x44	; 68
     f92:	c5 01       	movw	r24, r10
     f94:	b4 01       	movw	r22, r8
     f96:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divsf3>
     f9a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fixunssfsi>
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	ab 01       	movw	r20, r22
     fa4:	6c 2f       	mov	r22, r28
     fa6:	8d 2f       	mov	r24, r29
     fa8:	0e 94 c1 05 	call	0xb82	; 0xb82 <lcd_print3>
		lcd_string2(row, col+1, ".");
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	6c 0f       	add	r22, r28
     fb0:	49 e0       	ldi	r20, 0x09	; 9
     fb2:	51 e0       	ldi	r21, 0x01	; 1
     fb4:	8d 2f       	mov	r24, r29
     fb6:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_string2>
		lcd_print(row, col+2, (int)value%1000, 3);		//Least count = 1.95mA
     fba:	c5 01       	movw	r24, r10
     fbc:	b4 01       	movw	r22, r8
     fbe:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fixsfsi>
     fc2:	cb 01       	movw	r24, r22
     fc4:	68 ee       	ldi	r22, 0xE8	; 232
     fc6:	73 e0       	ldi	r23, 0x03	; 3
     fc8:	0e 94 38 0b 	call	0x1670	; 0x1670 <__divmodhi4>
     fcc:	62 e0       	ldi	r22, 0x02	; 2
     fce:	6c 0f       	add	r22, r28
     fd0:	23 e0       	ldi	r18, 0x03	; 3
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	ac 01       	movw	r20, r24
     fd6:	8d 2f       	mov	r24, r29
     fd8:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_print>
		lcd_string(str2);
     fdc:	c7 01       	movw	r24, r14
     fde:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_string>
		lcd_string(" ");
     fe2:	8b e0       	ldi	r24, 0x0B	; 11
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_string>
     fea:	36 c0       	rjmp	.+108    	; 0x1058 <lcd_print4+0x13e>
	}
	
	else if (value>=10000)
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e4       	ldi	r19, 0x40	; 64
     ff0:	4c e1       	ldi	r20, 0x1C	; 28
     ff2:	56 e4       	ldi	r21, 0x46	; 70
     ff4:	c5 01       	movw	r24, r10
     ff6:	b4 01       	movw	r22, r8
     ff8:	0e 94 c6 0a 	call	0x158c	; 0x158c <__gesf2>
     ffc:	88 23       	and	r24, r24
     ffe:	64 f1       	brlt	.+88     	; 0x1058 <lcd_print4+0x13e>
	{
		lcd_print3(row, col, value/1000, 2);
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a e7       	ldi	r20, 0x7A	; 122
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	c5 01       	movw	r24, r10
    100a:	b4 01       	movw	r22, r8
    100c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divsf3>
    1010:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fixunssfsi>
    1014:	22 e0       	ldi	r18, 0x02	; 2
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	ab 01       	movw	r20, r22
    101a:	6c 2f       	mov	r22, r28
    101c:	8d 2f       	mov	r24, r29
    101e:	0e 94 c1 05 	call	0xb82	; 0xb82 <lcd_print3>
		lcd_string2(row, col+2, ".");
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	6c 0f       	add	r22, r28
    1026:	49 e0       	ldi	r20, 0x09	; 9
    1028:	51 e0       	ldi	r21, 0x01	; 1
    102a:	8d 2f       	mov	r24, r29
    102c:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_string2>
		lcd_print(row, col+3, (int)value%1000, 3);		//Least count = 1.95mA
    1030:	c5 01       	movw	r24, r10
    1032:	b4 01       	movw	r22, r8
    1034:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fixsfsi>
    1038:	cb 01       	movw	r24, r22
    103a:	68 ee       	ldi	r22, 0xE8	; 232
    103c:	73 e0       	ldi	r23, 0x03	; 3
    103e:	0e 94 38 0b 	call	0x1670	; 0x1670 <__divmodhi4>
    1042:	63 e0       	ldi	r22, 0x03	; 3
    1044:	6c 0f       	add	r22, r28
    1046:	23 e0       	ldi	r18, 0x03	; 3
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	ac 01       	movw	r20, r24
    104c:	8d 2f       	mov	r24, r29
    104e:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_print>
		lcd_string(str2);
    1052:	c7 01       	movw	r24, r14
    1054:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_string>
	}	
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	bf 90       	pop	r11
    1066:	af 90       	pop	r10
    1068:	9f 90       	pop	r9
    106a:	8f 90       	pop	r8
    106c:	08 95       	ret

0000106e <lcd_start>:
    106e:	8f e9       	ldi	r24, 0x9F	; 159
    1070:	9f e0       	ldi	r25, 0x0F	; 15
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <lcd_start+0x4>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <lcd_start+0xa>
    1078:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    107a:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
    107c:	80 e3       	ldi	r24, 0x30	; 48
    107e:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
    1080:	5e 9a       	sbi	0x0b, 6	; 11
    1082:	ef e1       	ldi	r30, 0x1F	; 31
    1084:	fe e4       	ldi	r31, 0x4E	; 78
    1086:	31 97       	sbiw	r30, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <lcd_start+0x18>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <lcd_start+0x1e>
    108c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    108e:	5e 98       	cbi	0x0b, 6	; 11
    1090:	ef e9       	ldi	r30, 0x9F	; 159
    1092:	ff e0       	ldi	r31, 0x0F	; 15
    1094:	31 97       	sbiw	r30, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <lcd_start+0x26>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <lcd_start+0x2c>
    109a:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    109c:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
    109e:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
    10a0:	5e 9a       	sbi	0x0b, 6	; 11
    10a2:	ef e1       	ldi	r30, 0x1F	; 31
    10a4:	fe e4       	ldi	r31, 0x4E	; 78
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <lcd_start+0x38>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <lcd_start+0x3e>
    10ac:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    10ae:	5e 98       	cbi	0x0b, 6	; 11
    10b0:	ef e9       	ldi	r30, 0x9F	; 159
    10b2:	ff e0       	ldi	r31, 0x0F	; 15
    10b4:	31 97       	sbiw	r30, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <lcd_start+0x46>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <lcd_start+0x4c>
    10ba:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    10bc:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
    10be:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
    10c0:	5e 9a       	sbi	0x0b, 6	; 11
    10c2:	8f e1       	ldi	r24, 0x1F	; 31
    10c4:	9e e4       	ldi	r25, 0x4E	; 78
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <lcd_start+0x58>
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <lcd_start+0x5e>
    10cc:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    10ce:	5e 98       	cbi	0x0b, 6	; 11
    10d0:	ef e9       	ldi	r30, 0x9F	; 159
    10d2:	ff e0       	ldi	r31, 0x0F	; 15
    10d4:	31 97       	sbiw	r30, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <lcd_start+0x66>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <lcd_start+0x6c>
    10da:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    10dc:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
    10de:	80 e1       	ldi	r24, 0x10	; 16
    10e0:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
    10e2:	5e 9a       	sbi	0x0b, 6	; 11
    10e4:	8f e9       	ldi	r24, 0x9F	; 159
    10e6:	9f e0       	ldi	r25, 0x0F	; 15
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <lcd_start+0x7a>
    10ec:	00 c0       	rjmp	.+0      	; 0x10ee <lcd_start+0x80>
    10ee:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    10f0:	5e 98       	cbi	0x0b, 6	; 11
    10f2:	ef e9       	ldi	r30, 0x9F	; 159
    10f4:	ff e0       	ldi	r31, 0x0F	; 15
    10f6:	31 97       	sbiw	r30, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <lcd_start+0x88>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <lcd_start+0x8e>
    10fc:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    10fe:	88 e2       	ldi	r24, 0x28	; 40
    1100:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
    110a:	8c e0       	ldi	r24, 0x0C	; 12
    110c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
    1110:	80 e8       	ldi	r24, 0x80	; 128
    1112:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
    1116:	08 95       	ret

00001118 <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	0e 94 21 02 	call	0x442	; 0x442 <lcd_wr_command>
    111e:	08 95       	ret

00001120 <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
    1120:	0e 94 81 02 	call	0x502	; 0x502 <lcd_port_config>
	adc_pin_config();
    1124:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
    1128:	08 95       	ret

0000112a <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
    112a:	f8 94       	cli
	lcd_start();
    112c:	0e 94 37 08 	call	0x106e	; 0x106e <lcd_start>
	adc_config();
    1130:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
    1134:	78 94       	sei
    1136:	08 95       	ret

00001138 <main>:
}

int main(void)
{
	port_config();
    1138:	0e 94 90 08 	call	0x1120	; 0x1120 <port_config>
	init_devices();
    113c:	0e 94 95 08 	call	0x112a	; 0x112a <init_devices>
		
	lcd_string2(1, 7, "CCL");
    1140:	4d e0       	ldi	r20, 0x0D	; 13
    1142:	51 e0       	ldi	r21, 0x01	; 1
    1144:	67 e0       	ldi	r22, 0x07	; 7
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_string2>
    114c:	2f ef       	ldi	r18, 0xFF	; 255
    114e:	85 ea       	ldi	r24, 0xA5	; 165
    1150:	9e e0       	ldi	r25, 0x0E	; 14
    1152:	21 50       	subi	r18, 0x01	; 1
    1154:	80 40       	sbci	r24, 0x00	; 0
    1156:	90 40       	sbci	r25, 0x00	; 0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <main+0x1a>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <main+0x24>
    115c:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
    115e:	1d 9b       	sbis	0x03, 5	; 3
    1160:	13 c0       	rjmp	.+38     	; 0x1188 <main+0x50>
	{
		extern float offset;
		lcd_string2(2,1,"Supply Connected");
    1162:	41 e1       	ldi	r20, 0x11	; 17
    1164:	51 e0       	ldi	r21, 0x01	; 1
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_string2>
		offset = 4;
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a0 e8       	ldi	r26, 0x80	; 128
    1174:	b0 e4       	ldi	r27, 0x40	; 64
    1176:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
    117a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
    117e:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <__data_end+0x2>
    1182:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <__data_end+0x3>
    1186:	12 c0       	rjmp	.+36     	; 0x11ac <main+0x74>
	}
	
	else
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
    1188:	42 e2       	ldi	r20, 0x22	; 34
    118a:	51 e0       	ldi	r21, 0x01	; 1
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_string2>
		offset = 31.2;
    1194:	8a e9       	ldi	r24, 0x9A	; 154
    1196:	99 e9       	ldi	r25, 0x99	; 153
    1198:	a9 ef       	ldi	r26, 0xF9	; 249
    119a:	b1 e4       	ldi	r27, 0x41	; 65
    119c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
    11a0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
    11a4:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <__data_end+0x2>
    11a8:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <__data_end+0x3>
    11ac:	2f ef       	ldi	r18, 0xFF	; 255
    11ae:	8b e4       	ldi	r24, 0x4B	; 75
    11b0:	9d e1       	ldi	r25, 0x1D	; 29
    11b2:	21 50       	subi	r18, 0x01	; 1
    11b4:	80 40       	sbci	r24, 0x00	; 0
    11b6:	90 40       	sbci	r25, 0x00	; 0
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <main+0x7a>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <main+0x84>
    11bc:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
    11be:	0e 94 8c 08 	call	0x1118	; 0x1118 <lcd_clear>
	
	while (1)
	{
		update_current();
    11c2:	0e 94 0d 01 	call	0x21a	; 0x21a <update_current>
		update_voltage();
    11c6:	0e 94 35 01 	call	0x26a	; 0x26a <update_voltage>
		update_power();
    11ca:	0e 94 4d 01 	call	0x29a	; 0x29a <update_power>
		update_gate_voltage();
    11ce:	0e 94 6e 01 	call	0x2dc	; 0x2dc <update_gate_voltage>
	
	//if(check_thresholds()==0)	
	if(1)	
	{	
		print_current(1,1);
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	0e 94 86 01 	call	0x30c	; 0x30c <print_current>
		print_voltage(1,10);
    11da:	6a e0       	ldi	r22, 0x0A	; 10
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	0e 94 a1 01 	call	0x342	; 0x342 <print_voltage>
		print_power(2,1);
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	0e 94 bc 01 	call	0x378	; 0x378 <print_power>
		print_gate_voltage(2,10);
    11ea:	6a e0       	ldi	r22, 0x0A	; 10
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	0e 94 d7 01 	call	0x3ae	; 0x3ae <print_gate_voltage>
    11f2:	e7 cf       	rjmp	.-50     	; 0x11c2 <main+0x8a>

000011f4 <__subsf3>:
    11f4:	50 58       	subi	r21, 0x80	; 128

000011f6 <__addsf3>:
    11f6:	bb 27       	eor	r27, r27
    11f8:	aa 27       	eor	r26, r26
    11fa:	0e 94 12 09 	call	0x1224	; 0x1224 <__addsf3x>
    11fe:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_round>
    1202:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_pscA>
    1206:	38 f0       	brcs	.+14     	; 0x1216 <__addsf3+0x20>
    1208:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_pscB>
    120c:	20 f0       	brcs	.+8      	; 0x1216 <__addsf3+0x20>
    120e:	39 f4       	brne	.+14     	; 0x121e <__addsf3+0x28>
    1210:	9f 3f       	cpi	r25, 0xFF	; 255
    1212:	19 f4       	brne	.+6      	; 0x121a <__addsf3+0x24>
    1214:	26 f4       	brtc	.+8      	; 0x121e <__addsf3+0x28>
    1216:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_nan>
    121a:	0e f4       	brtc	.+2      	; 0x121e <__addsf3+0x28>
    121c:	e0 95       	com	r30
    121e:	e7 fb       	bst	r30, 7
    1220:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_inf>

00001224 <__addsf3x>:
    1224:	e9 2f       	mov	r30, r25
    1226:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fp_split3>
    122a:	58 f3       	brcs	.-42     	; 0x1202 <__addsf3+0xc>
    122c:	ba 17       	cp	r27, r26
    122e:	62 07       	cpc	r22, r18
    1230:	73 07       	cpc	r23, r19
    1232:	84 07       	cpc	r24, r20
    1234:	95 07       	cpc	r25, r21
    1236:	20 f0       	brcs	.+8      	; 0x1240 <__addsf3x+0x1c>
    1238:	79 f4       	brne	.+30     	; 0x1258 <__addsf3x+0x34>
    123a:	a6 f5       	brtc	.+104    	; 0x12a4 <__addsf3x+0x80>
    123c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_zero>
    1240:	0e f4       	brtc	.+2      	; 0x1244 <__addsf3x+0x20>
    1242:	e0 95       	com	r30
    1244:	0b 2e       	mov	r0, r27
    1246:	ba 2f       	mov	r27, r26
    1248:	a0 2d       	mov	r26, r0
    124a:	0b 01       	movw	r0, r22
    124c:	b9 01       	movw	r22, r18
    124e:	90 01       	movw	r18, r0
    1250:	0c 01       	movw	r0, r24
    1252:	ca 01       	movw	r24, r20
    1254:	a0 01       	movw	r20, r0
    1256:	11 24       	eor	r1, r1
    1258:	ff 27       	eor	r31, r31
    125a:	59 1b       	sub	r21, r25
    125c:	99 f0       	breq	.+38     	; 0x1284 <__addsf3x+0x60>
    125e:	59 3f       	cpi	r21, 0xF9	; 249
    1260:	50 f4       	brcc	.+20     	; 0x1276 <__addsf3x+0x52>
    1262:	50 3e       	cpi	r21, 0xE0	; 224
    1264:	68 f1       	brcs	.+90     	; 0x12c0 <__addsf3x+0x9c>
    1266:	1a 16       	cp	r1, r26
    1268:	f0 40       	sbci	r31, 0x00	; 0
    126a:	a2 2f       	mov	r26, r18
    126c:	23 2f       	mov	r18, r19
    126e:	34 2f       	mov	r19, r20
    1270:	44 27       	eor	r20, r20
    1272:	58 5f       	subi	r21, 0xF8	; 248
    1274:	f3 cf       	rjmp	.-26     	; 0x125c <__addsf3x+0x38>
    1276:	46 95       	lsr	r20
    1278:	37 95       	ror	r19
    127a:	27 95       	ror	r18
    127c:	a7 95       	ror	r26
    127e:	f0 40       	sbci	r31, 0x00	; 0
    1280:	53 95       	inc	r21
    1282:	c9 f7       	brne	.-14     	; 0x1276 <__addsf3x+0x52>
    1284:	7e f4       	brtc	.+30     	; 0x12a4 <__addsf3x+0x80>
    1286:	1f 16       	cp	r1, r31
    1288:	ba 0b       	sbc	r27, r26
    128a:	62 0b       	sbc	r22, r18
    128c:	73 0b       	sbc	r23, r19
    128e:	84 0b       	sbc	r24, r20
    1290:	ba f0       	brmi	.+46     	; 0x12c0 <__addsf3x+0x9c>
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	a1 f0       	breq	.+40     	; 0x12be <__addsf3x+0x9a>
    1296:	ff 0f       	add	r31, r31
    1298:	bb 1f       	adc	r27, r27
    129a:	66 1f       	adc	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	c2 f7       	brpl	.-16     	; 0x1292 <__addsf3x+0x6e>
    12a2:	0e c0       	rjmp	.+28     	; 0x12c0 <__addsf3x+0x9c>
    12a4:	ba 0f       	add	r27, r26
    12a6:	62 1f       	adc	r22, r18
    12a8:	73 1f       	adc	r23, r19
    12aa:	84 1f       	adc	r24, r20
    12ac:	48 f4       	brcc	.+18     	; 0x12c0 <__addsf3x+0x9c>
    12ae:	87 95       	ror	r24
    12b0:	77 95       	ror	r23
    12b2:	67 95       	ror	r22
    12b4:	b7 95       	ror	r27
    12b6:	f7 95       	ror	r31
    12b8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ba:	08 f0       	brcs	.+2      	; 0x12be <__addsf3x+0x9a>
    12bc:	b0 cf       	rjmp	.-160    	; 0x121e <__addsf3+0x28>
    12be:	93 95       	inc	r25
    12c0:	88 0f       	add	r24, r24
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__addsf3x+0xa2>
    12c4:	99 27       	eor	r25, r25
    12c6:	ee 0f       	add	r30, r30
    12c8:	97 95       	ror	r25
    12ca:	87 95       	ror	r24
    12cc:	08 95       	ret

000012ce <__cmpsf2>:
    12ce:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_cmp>
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <__cmpsf2+0x8>
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret

000012d8 <__divsf3>:
    12d8:	0e 94 80 09 	call	0x1300	; 0x1300 <__divsf3x>
    12dc:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_round>
    12e0:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_pscB>
    12e4:	58 f0       	brcs	.+22     	; 0x12fc <__divsf3+0x24>
    12e6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_pscA>
    12ea:	40 f0       	brcs	.+16     	; 0x12fc <__divsf3+0x24>
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <__divsf3+0x20>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	29 f0       	breq	.+10     	; 0x12fc <__divsf3+0x24>
    12f2:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_inf>
    12f6:	51 11       	cpse	r21, r1
    12f8:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_szero>
    12fc:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_nan>

00001300 <__divsf3x>:
    1300:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fp_split3>
    1304:	68 f3       	brcs	.-38     	; 0x12e0 <__divsf3+0x8>

00001306 <__divsf3_pse>:
    1306:	99 23       	and	r25, r25
    1308:	b1 f3       	breq	.-20     	; 0x12f6 <__divsf3+0x1e>
    130a:	55 23       	and	r21, r21
    130c:	91 f3       	breq	.-28     	; 0x12f2 <__divsf3+0x1a>
    130e:	95 1b       	sub	r25, r21
    1310:	55 0b       	sbc	r21, r21
    1312:	bb 27       	eor	r27, r27
    1314:	aa 27       	eor	r26, r26
    1316:	62 17       	cp	r22, r18
    1318:	73 07       	cpc	r23, r19
    131a:	84 07       	cpc	r24, r20
    131c:	38 f0       	brcs	.+14     	; 0x132c <__divsf3_pse+0x26>
    131e:	9f 5f       	subi	r25, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	44 1f       	adc	r20, r20
    1328:	aa 1f       	adc	r26, r26
    132a:	a9 f3       	breq	.-22     	; 0x1316 <__divsf3_pse+0x10>
    132c:	35 d0       	rcall	.+106    	; 0x1398 <__divsf3_pse+0x92>
    132e:	0e 2e       	mov	r0, r30
    1330:	3a f0       	brmi	.+14     	; 0x1340 <__divsf3_pse+0x3a>
    1332:	e0 e8       	ldi	r30, 0x80	; 128
    1334:	32 d0       	rcall	.+100    	; 0x139a <__divsf3_pse+0x94>
    1336:	91 50       	subi	r25, 0x01	; 1
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	e6 95       	lsr	r30
    133c:	00 1c       	adc	r0, r0
    133e:	ca f7       	brpl	.-14     	; 0x1332 <__divsf3_pse+0x2c>
    1340:	2b d0       	rcall	.+86     	; 0x1398 <__divsf3_pse+0x92>
    1342:	fe 2f       	mov	r31, r30
    1344:	29 d0       	rcall	.+82     	; 0x1398 <__divsf3_pse+0x92>
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	bb 1f       	adc	r27, r27
    134e:	26 17       	cp	r18, r22
    1350:	37 07       	cpc	r19, r23
    1352:	48 07       	cpc	r20, r24
    1354:	ab 07       	cpc	r26, r27
    1356:	b0 e8       	ldi	r27, 0x80	; 128
    1358:	09 f0       	breq	.+2      	; 0x135c <__divsf3_pse+0x56>
    135a:	bb 0b       	sbc	r27, r27
    135c:	80 2d       	mov	r24, r0
    135e:	bf 01       	movw	r22, r30
    1360:	ff 27       	eor	r31, r31
    1362:	93 58       	subi	r25, 0x83	; 131
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	3a f0       	brmi	.+14     	; 0x1376 <__divsf3_pse+0x70>
    1368:	9e 3f       	cpi	r25, 0xFE	; 254
    136a:	51 05       	cpc	r21, r1
    136c:	78 f0       	brcs	.+30     	; 0x138c <__divsf3_pse+0x86>
    136e:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_inf>
    1372:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_szero>
    1376:	5f 3f       	cpi	r21, 0xFF	; 255
    1378:	e4 f3       	brlt	.-8      	; 0x1372 <__divsf3_pse+0x6c>
    137a:	98 3e       	cpi	r25, 0xE8	; 232
    137c:	d4 f3       	brlt	.-12     	; 0x1372 <__divsf3_pse+0x6c>
    137e:	86 95       	lsr	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	b7 95       	ror	r27
    1386:	f7 95       	ror	r31
    1388:	9f 5f       	subi	r25, 0xFF	; 255
    138a:	c9 f7       	brne	.-14     	; 0x137e <__divsf3_pse+0x78>
    138c:	88 0f       	add	r24, r24
    138e:	91 1d       	adc	r25, r1
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret
    1398:	e1 e0       	ldi	r30, 0x01	; 1
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	bb 1f       	adc	r27, r27
    13a2:	62 17       	cp	r22, r18
    13a4:	73 07       	cpc	r23, r19
    13a6:	84 07       	cpc	r24, r20
    13a8:	ba 07       	cpc	r27, r26
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <__divsf3_pse+0xae>
    13ac:	62 1b       	sub	r22, r18
    13ae:	73 0b       	sbc	r23, r19
    13b0:	84 0b       	sbc	r24, r20
    13b2:	ba 0b       	sbc	r27, r26
    13b4:	ee 1f       	adc	r30, r30
    13b6:	88 f7       	brcc	.-30     	; 0x139a <__divsf3_pse+0x94>
    13b8:	e0 95       	com	r30
    13ba:	08 95       	ret

000013bc <__fixsfsi>:
    13bc:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fixunssfsi>
    13c0:	68 94       	set
    13c2:	b1 11       	cpse	r27, r1
    13c4:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_szero>
    13c8:	08 95       	ret

000013ca <__fixunssfsi>:
    13ca:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_splitA>
    13ce:	88 f0       	brcs	.+34     	; 0x13f2 <__fixunssfsi+0x28>
    13d0:	9f 57       	subi	r25, 0x7F	; 127
    13d2:	98 f0       	brcs	.+38     	; 0x13fa <__fixunssfsi+0x30>
    13d4:	b9 2f       	mov	r27, r25
    13d6:	99 27       	eor	r25, r25
    13d8:	b7 51       	subi	r27, 0x17	; 23
    13da:	b0 f0       	brcs	.+44     	; 0x1408 <__fixunssfsi+0x3e>
    13dc:	e1 f0       	breq	.+56     	; 0x1416 <__fixunssfsi+0x4c>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	1a f0       	brmi	.+6      	; 0x13ee <__fixunssfsi+0x24>
    13e8:	ba 95       	dec	r27
    13ea:	c9 f7       	brne	.-14     	; 0x13de <__fixunssfsi+0x14>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <__fixunssfsi+0x4c>
    13ee:	b1 30       	cpi	r27, 0x01	; 1
    13f0:	91 f0       	breq	.+36     	; 0x1416 <__fixunssfsi+0x4c>
    13f2:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fp_zero>
    13f6:	b1 e0       	ldi	r27, 0x01	; 1
    13f8:	08 95       	ret
    13fa:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_zero>
    13fe:	67 2f       	mov	r22, r23
    1400:	78 2f       	mov	r23, r24
    1402:	88 27       	eor	r24, r24
    1404:	b8 5f       	subi	r27, 0xF8	; 248
    1406:	39 f0       	breq	.+14     	; 0x1416 <__fixunssfsi+0x4c>
    1408:	b9 3f       	cpi	r27, 0xF9	; 249
    140a:	cc f3       	brlt	.-14     	; 0x13fe <__fixunssfsi+0x34>
    140c:	86 95       	lsr	r24
    140e:	77 95       	ror	r23
    1410:	67 95       	ror	r22
    1412:	b3 95       	inc	r27
    1414:	d9 f7       	brne	.-10     	; 0x140c <__fixunssfsi+0x42>
    1416:	3e f4       	brtc	.+14     	; 0x1426 <__fixunssfsi+0x5c>
    1418:	90 95       	com	r25
    141a:	80 95       	com	r24
    141c:	70 95       	com	r23
    141e:	61 95       	neg	r22
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	8f 4f       	sbci	r24, 0xFF	; 255
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	08 95       	ret

00001428 <__floatunsisf>:
    1428:	e8 94       	clt
    142a:	09 c0       	rjmp	.+18     	; 0x143e <__floatsisf+0x12>

0000142c <__floatsisf>:
    142c:	97 fb       	bst	r25, 7
    142e:	3e f4       	brtc	.+14     	; 0x143e <__floatsisf+0x12>
    1430:	90 95       	com	r25
    1432:	80 95       	com	r24
    1434:	70 95       	com	r23
    1436:	61 95       	neg	r22
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	99 23       	and	r25, r25
    1440:	a9 f0       	breq	.+42     	; 0x146c <__floatsisf+0x40>
    1442:	f9 2f       	mov	r31, r25
    1444:	96 e9       	ldi	r25, 0x96	; 150
    1446:	bb 27       	eor	r27, r27
    1448:	93 95       	inc	r25
    144a:	f6 95       	lsr	r31
    144c:	87 95       	ror	r24
    144e:	77 95       	ror	r23
    1450:	67 95       	ror	r22
    1452:	b7 95       	ror	r27
    1454:	f1 11       	cpse	r31, r1
    1456:	f8 cf       	rjmp	.-16     	; 0x1448 <__floatsisf+0x1c>
    1458:	fa f4       	brpl	.+62     	; 0x1498 <__floatsisf+0x6c>
    145a:	bb 0f       	add	r27, r27
    145c:	11 f4       	brne	.+4      	; 0x1462 <__floatsisf+0x36>
    145e:	60 ff       	sbrs	r22, 0
    1460:	1b c0       	rjmp	.+54     	; 0x1498 <__floatsisf+0x6c>
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <__floatsisf+0x6c>
    146c:	88 23       	and	r24, r24
    146e:	11 f0       	breq	.+4      	; 0x1474 <__floatsisf+0x48>
    1470:	96 e9       	ldi	r25, 0x96	; 150
    1472:	11 c0       	rjmp	.+34     	; 0x1496 <__floatsisf+0x6a>
    1474:	77 23       	and	r23, r23
    1476:	21 f0       	breq	.+8      	; 0x1480 <__floatsisf+0x54>
    1478:	9e e8       	ldi	r25, 0x8E	; 142
    147a:	87 2f       	mov	r24, r23
    147c:	76 2f       	mov	r23, r22
    147e:	05 c0       	rjmp	.+10     	; 0x148a <__floatsisf+0x5e>
    1480:	66 23       	and	r22, r22
    1482:	71 f0       	breq	.+28     	; 0x14a0 <__floatsisf+0x74>
    1484:	96 e8       	ldi	r25, 0x86	; 134
    1486:	86 2f       	mov	r24, r22
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	2a f0       	brmi	.+10     	; 0x1498 <__floatsisf+0x6c>
    148e:	9a 95       	dec	r25
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	da f7       	brpl	.-10     	; 0x148e <__floatsisf+0x62>
    1498:	88 0f       	add	r24, r24
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	97 f9       	bld	r25, 7
    14a0:	08 95       	ret

000014a2 <__fp_cmp>:
    14a2:	99 0f       	add	r25, r25
    14a4:	00 08       	sbc	r0, r0
    14a6:	55 0f       	add	r21, r21
    14a8:	aa 0b       	sbc	r26, r26
    14aa:	e0 e8       	ldi	r30, 0x80	; 128
    14ac:	fe ef       	ldi	r31, 0xFE	; 254
    14ae:	16 16       	cp	r1, r22
    14b0:	17 06       	cpc	r1, r23
    14b2:	e8 07       	cpc	r30, r24
    14b4:	f9 07       	cpc	r31, r25
    14b6:	c0 f0       	brcs	.+48     	; 0x14e8 <__fp_cmp+0x46>
    14b8:	12 16       	cp	r1, r18
    14ba:	13 06       	cpc	r1, r19
    14bc:	e4 07       	cpc	r30, r20
    14be:	f5 07       	cpc	r31, r21
    14c0:	98 f0       	brcs	.+38     	; 0x14e8 <__fp_cmp+0x46>
    14c2:	62 1b       	sub	r22, r18
    14c4:	73 0b       	sbc	r23, r19
    14c6:	84 0b       	sbc	r24, r20
    14c8:	95 0b       	sbc	r25, r21
    14ca:	39 f4       	brne	.+14     	; 0x14da <__fp_cmp+0x38>
    14cc:	0a 26       	eor	r0, r26
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <__fp_cmp+0x46>
    14d0:	23 2b       	or	r18, r19
    14d2:	24 2b       	or	r18, r20
    14d4:	25 2b       	or	r18, r21
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <__fp_cmp+0x3e>
    14d8:	08 95       	ret
    14da:	0a 26       	eor	r0, r26
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <__fp_cmp+0x3e>
    14de:	a1 40       	sbci	r26, 0x01	; 1
    14e0:	a6 95       	lsr	r26
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	81 1d       	adc	r24, r1
    14e6:	81 1d       	adc	r24, r1
    14e8:	08 95       	ret

000014ea <__fp_inf>:
    14ea:	97 f9       	bld	r25, 7
    14ec:	9f 67       	ori	r25, 0x7F	; 127
    14ee:	80 e8       	ldi	r24, 0x80	; 128
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	08 95       	ret

000014f6 <__fp_nan>:
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	80 ec       	ldi	r24, 0xC0	; 192
    14fa:	08 95       	ret

000014fc <__fp_pscA>:
    14fc:	00 24       	eor	r0, r0
    14fe:	0a 94       	dec	r0
    1500:	16 16       	cp	r1, r22
    1502:	17 06       	cpc	r1, r23
    1504:	18 06       	cpc	r1, r24
    1506:	09 06       	cpc	r0, r25
    1508:	08 95       	ret

0000150a <__fp_pscB>:
    150a:	00 24       	eor	r0, r0
    150c:	0a 94       	dec	r0
    150e:	12 16       	cp	r1, r18
    1510:	13 06       	cpc	r1, r19
    1512:	14 06       	cpc	r1, r20
    1514:	05 06       	cpc	r0, r21
    1516:	08 95       	ret

00001518 <__fp_round>:
    1518:	09 2e       	mov	r0, r25
    151a:	03 94       	inc	r0
    151c:	00 0c       	add	r0, r0
    151e:	11 f4       	brne	.+4      	; 0x1524 <__fp_round+0xc>
    1520:	88 23       	and	r24, r24
    1522:	52 f0       	brmi	.+20     	; 0x1538 <__fp_round+0x20>
    1524:	bb 0f       	add	r27, r27
    1526:	40 f4       	brcc	.+16     	; 0x1538 <__fp_round+0x20>
    1528:	bf 2b       	or	r27, r31
    152a:	11 f4       	brne	.+4      	; 0x1530 <__fp_round+0x18>
    152c:	60 ff       	sbrs	r22, 0
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <__fp_round+0x20>
    1530:	6f 5f       	subi	r22, 0xFF	; 255
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	8f 4f       	sbci	r24, 0xFF	; 255
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	08 95       	ret

0000153a <__fp_split3>:
    153a:	57 fd       	sbrc	r21, 7
    153c:	90 58       	subi	r25, 0x80	; 128
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	59 f0       	breq	.+22     	; 0x155a <__fp_splitA+0x10>
    1544:	5f 3f       	cpi	r21, 0xFF	; 255
    1546:	71 f0       	breq	.+28     	; 0x1564 <__fp_splitA+0x1a>
    1548:	47 95       	ror	r20

0000154a <__fp_splitA>:
    154a:	88 0f       	add	r24, r24
    154c:	97 fb       	bst	r25, 7
    154e:	99 1f       	adc	r25, r25
    1550:	61 f0       	breq	.+24     	; 0x156a <__fp_splitA+0x20>
    1552:	9f 3f       	cpi	r25, 0xFF	; 255
    1554:	79 f0       	breq	.+30     	; 0x1574 <__fp_splitA+0x2a>
    1556:	87 95       	ror	r24
    1558:	08 95       	ret
    155a:	12 16       	cp	r1, r18
    155c:	13 06       	cpc	r1, r19
    155e:	14 06       	cpc	r1, r20
    1560:	55 1f       	adc	r21, r21
    1562:	f2 cf       	rjmp	.-28     	; 0x1548 <__fp_split3+0xe>
    1564:	46 95       	lsr	r20
    1566:	f1 df       	rcall	.-30     	; 0x154a <__fp_splitA>
    1568:	08 c0       	rjmp	.+16     	; 0x157a <__fp_splitA+0x30>
    156a:	16 16       	cp	r1, r22
    156c:	17 06       	cpc	r1, r23
    156e:	18 06       	cpc	r1, r24
    1570:	99 1f       	adc	r25, r25
    1572:	f1 cf       	rjmp	.-30     	; 0x1556 <__fp_splitA+0xc>
    1574:	86 95       	lsr	r24
    1576:	71 05       	cpc	r23, r1
    1578:	61 05       	cpc	r22, r1
    157a:	08 94       	sec
    157c:	08 95       	ret

0000157e <__fp_zero>:
    157e:	e8 94       	clt

00001580 <__fp_szero>:
    1580:	bb 27       	eor	r27, r27
    1582:	66 27       	eor	r22, r22
    1584:	77 27       	eor	r23, r23
    1586:	cb 01       	movw	r24, r22
    1588:	97 f9       	bld	r25, 7
    158a:	08 95       	ret

0000158c <__gesf2>:
    158c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_cmp>
    1590:	08 f4       	brcc	.+2      	; 0x1594 <__gesf2+0x8>
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	08 95       	ret

00001596 <__mulsf3>:
    1596:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__mulsf3x>
    159a:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_round>
    159e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_pscA>
    15a2:	38 f0       	brcs	.+14     	; 0x15b2 <__mulsf3+0x1c>
    15a4:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_pscB>
    15a8:	20 f0       	brcs	.+8      	; 0x15b2 <__mulsf3+0x1c>
    15aa:	95 23       	and	r25, r21
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <__mulsf3+0x1c>
    15ae:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_inf>
    15b2:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_nan>
    15b6:	11 24       	eor	r1, r1
    15b8:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_szero>

000015bc <__mulsf3x>:
    15bc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fp_split3>
    15c0:	70 f3       	brcs	.-36     	; 0x159e <__mulsf3+0x8>

000015c2 <__mulsf3_pse>:
    15c2:	95 9f       	mul	r25, r21
    15c4:	c1 f3       	breq	.-16     	; 0x15b6 <__mulsf3+0x20>
    15c6:	95 0f       	add	r25, r21
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	55 1f       	adc	r21, r21
    15cc:	62 9f       	mul	r22, r18
    15ce:	f0 01       	movw	r30, r0
    15d0:	72 9f       	mul	r23, r18
    15d2:	bb 27       	eor	r27, r27
    15d4:	f0 0d       	add	r31, r0
    15d6:	b1 1d       	adc	r27, r1
    15d8:	63 9f       	mul	r22, r19
    15da:	aa 27       	eor	r26, r26
    15dc:	f0 0d       	add	r31, r0
    15de:	b1 1d       	adc	r27, r1
    15e0:	aa 1f       	adc	r26, r26
    15e2:	64 9f       	mul	r22, r20
    15e4:	66 27       	eor	r22, r22
    15e6:	b0 0d       	add	r27, r0
    15e8:	a1 1d       	adc	r26, r1
    15ea:	66 1f       	adc	r22, r22
    15ec:	82 9f       	mul	r24, r18
    15ee:	22 27       	eor	r18, r18
    15f0:	b0 0d       	add	r27, r0
    15f2:	a1 1d       	adc	r26, r1
    15f4:	62 1f       	adc	r22, r18
    15f6:	73 9f       	mul	r23, r19
    15f8:	b0 0d       	add	r27, r0
    15fa:	a1 1d       	adc	r26, r1
    15fc:	62 1f       	adc	r22, r18
    15fe:	83 9f       	mul	r24, r19
    1600:	a0 0d       	add	r26, r0
    1602:	61 1d       	adc	r22, r1
    1604:	22 1f       	adc	r18, r18
    1606:	74 9f       	mul	r23, r20
    1608:	33 27       	eor	r19, r19
    160a:	a0 0d       	add	r26, r0
    160c:	61 1d       	adc	r22, r1
    160e:	23 1f       	adc	r18, r19
    1610:	84 9f       	mul	r24, r20
    1612:	60 0d       	add	r22, r0
    1614:	21 1d       	adc	r18, r1
    1616:	82 2f       	mov	r24, r18
    1618:	76 2f       	mov	r23, r22
    161a:	6a 2f       	mov	r22, r26
    161c:	11 24       	eor	r1, r1
    161e:	9f 57       	subi	r25, 0x7F	; 127
    1620:	50 40       	sbci	r21, 0x00	; 0
    1622:	9a f0       	brmi	.+38     	; 0x164a <__mulsf3_pse+0x88>
    1624:	f1 f0       	breq	.+60     	; 0x1662 <__mulsf3_pse+0xa0>
    1626:	88 23       	and	r24, r24
    1628:	4a f0       	brmi	.+18     	; 0x163c <__mulsf3_pse+0x7a>
    162a:	ee 0f       	add	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	bb 1f       	adc	r27, r27
    1630:	66 1f       	adc	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	91 50       	subi	r25, 0x01	; 1
    1638:	50 40       	sbci	r21, 0x00	; 0
    163a:	a9 f7       	brne	.-22     	; 0x1626 <__mulsf3_pse+0x64>
    163c:	9e 3f       	cpi	r25, 0xFE	; 254
    163e:	51 05       	cpc	r21, r1
    1640:	80 f0       	brcs	.+32     	; 0x1662 <__mulsf3_pse+0xa0>
    1642:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_inf>
    1646:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_szero>
    164a:	5f 3f       	cpi	r21, 0xFF	; 255
    164c:	e4 f3       	brlt	.-8      	; 0x1646 <__mulsf3_pse+0x84>
    164e:	98 3e       	cpi	r25, 0xE8	; 232
    1650:	d4 f3       	brlt	.-12     	; 0x1646 <__mulsf3_pse+0x84>
    1652:	86 95       	lsr	r24
    1654:	77 95       	ror	r23
    1656:	67 95       	ror	r22
    1658:	b7 95       	ror	r27
    165a:	f7 95       	ror	r31
    165c:	e7 95       	ror	r30
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	c1 f7       	brne	.-16     	; 0x1652 <__mulsf3_pse+0x90>
    1662:	fe 2b       	or	r31, r30
    1664:	88 0f       	add	r24, r24
    1666:	91 1d       	adc	r25, r1
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret

00001670 <__divmodhi4>:
    1670:	97 fb       	bst	r25, 7
    1672:	07 2e       	mov	r0, r23
    1674:	16 f4       	brtc	.+4      	; 0x167a <__divmodhi4+0xa>
    1676:	00 94       	com	r0
    1678:	07 d0       	rcall	.+14     	; 0x1688 <__divmodhi4_neg1>
    167a:	77 fd       	sbrc	r23, 7
    167c:	09 d0       	rcall	.+18     	; 0x1690 <__divmodhi4_neg2>
    167e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__udivmodhi4>
    1682:	07 fc       	sbrc	r0, 7
    1684:	05 d0       	rcall	.+10     	; 0x1690 <__divmodhi4_neg2>
    1686:	3e f4       	brtc	.+14     	; 0x1696 <__divmodhi4_exit>

00001688 <__divmodhi4_neg1>:
    1688:	90 95       	com	r25
    168a:	81 95       	neg	r24
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	08 95       	ret

00001690 <__divmodhi4_neg2>:
    1690:	70 95       	com	r23
    1692:	61 95       	neg	r22
    1694:	7f 4f       	sbci	r23, 0xFF	; 255

00001696 <__divmodhi4_exit>:
    1696:	08 95       	ret

00001698 <__umulhisi3>:
    1698:	a2 9f       	mul	r26, r18
    169a:	b0 01       	movw	r22, r0
    169c:	b3 9f       	mul	r27, r19
    169e:	c0 01       	movw	r24, r0
    16a0:	a3 9f       	mul	r26, r19
    16a2:	70 0d       	add	r23, r0
    16a4:	81 1d       	adc	r24, r1
    16a6:	11 24       	eor	r1, r1
    16a8:	91 1d       	adc	r25, r1
    16aa:	b2 9f       	mul	r27, r18
    16ac:	70 0d       	add	r23, r0
    16ae:	81 1d       	adc	r24, r1
    16b0:	11 24       	eor	r1, r1
    16b2:	91 1d       	adc	r25, r1
    16b4:	08 95       	ret

000016b6 <__udivmodhi4>:
    16b6:	aa 1b       	sub	r26, r26
    16b8:	bb 1b       	sub	r27, r27
    16ba:	51 e1       	ldi	r21, 0x11	; 17
    16bc:	07 c0       	rjmp	.+14     	; 0x16cc <__udivmodhi4_ep>

000016be <__udivmodhi4_loop>:
    16be:	aa 1f       	adc	r26, r26
    16c0:	bb 1f       	adc	r27, r27
    16c2:	a6 17       	cp	r26, r22
    16c4:	b7 07       	cpc	r27, r23
    16c6:	10 f0       	brcs	.+4      	; 0x16cc <__udivmodhi4_ep>
    16c8:	a6 1b       	sub	r26, r22
    16ca:	b7 0b       	sbc	r27, r23

000016cc <__udivmodhi4_ep>:
    16cc:	88 1f       	adc	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	5a 95       	dec	r21
    16d2:	a9 f7       	brne	.-22     	; 0x16be <__udivmodhi4_loop>
    16d4:	80 95       	com	r24
    16d6:	90 95       	com	r25
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	08 95       	ret

000016de <_exit>:
    16de:	f8 94       	cli

000016e0 <__stop_program>:
    16e0:	ff cf       	rjmp	.-2      	; 0x16e0 <__stop_program>
