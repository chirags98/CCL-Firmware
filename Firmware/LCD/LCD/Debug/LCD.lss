
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000c2e  00000cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080012e  0080012e  00000cf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000150a  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2c  00000000  00000000  00002352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6f  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000038f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  00003b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c0  00000000  00000000  00004051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004911  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2d 03 	call	0x65a	; 0x65a <main>
  9e:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:

extern volatile unsigned int i;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
  a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
  a8:	18 b8       	out	0x08, r1	; 8
  aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
  ac:	8f e8       	ldi	r24, 0x8F	; 143
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	83 bf       	out	0x33, r24	; 51
  b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	81 7f       	andi	r24, 0xF1	; 241
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
  c8:	88 95       	sleep
	sleep_disable();
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	83 bf       	out	0x33, r24	; 51
  d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
  e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
  e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
  ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
  ec:	7f 92       	push	r7
  ee:	8f 92       	push	r8
  f0:	9f 92       	push	r9
  f2:	af 92       	push	r10
  f4:	bf 92       	push	r11
  f6:	cf 92       	push	r12
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	78 2e       	mov	r7, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
 108:	c6 2e       	mov	r12, r22
 10a:	d1 2c       	mov	r13, r1
 10c:	1c 14       	cp	r1, r12
 10e:	1d 04       	cpc	r1, r13
 110:	34 f5       	brge	.+76     	; 0x15e <avg_read_adc_channel+0x72>
 112:	c1 e0       	ldi	r28, 0x01	; 1
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	81 2c       	mov	r8, r1
 118:	91 2c       	mov	r9, r1
 11a:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
 11c:	08 2f       	mov	r16, r24
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	00 0f       	add	r16, r16
 122:	11 1f       	adc	r17, r17
 124:	03 5c       	subi	r16, 0xC3	; 195
 126:	1e 4f       	sbci	r17, 0xFE	; 254
 128:	76 01       	movw	r14, r12
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
 12a:	87 2d       	mov	r24, r7
 12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel]/i;
 130:	f8 01       	movw	r30, r16
 132:	80 81       	ld	r24, Z
 134:	91 81       	ldd	r25, Z+1	; 0x01
 136:	b7 01       	movw	r22, r14
 138:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__udivmodhi4>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatunsisf>
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
 148:	c5 01       	movw	r24, r10
 14a:	b4 01       	movw	r22, r8
 14c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3>
 150:	4b 01       	movw	r8, r22
 152:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	cc 16       	cp	r12, r28
 158:	dd 06       	cpc	r13, r29
 15a:	3c f7       	brge	.-50     	; 0x12a <avg_read_adc_channel+0x3e>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <avg_read_adc_channel+0x78>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
 15e:	81 2c       	mov	r8, r1
 160:	91 2c       	mov	r9, r1
 162:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
	}
	
	adc_val[channel] = val;
 164:	c7 2d       	mov	r28, r7
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	c5 01       	movw	r24, r10
 16a:	b4 01       	movw	r22, r8
 16c:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 170:	fe 01       	movw	r30, r28
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	e3 5c       	subi	r30, 0xC3	; 195
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	71 83       	std	Z+1, r23	; 0x01
 17c:	60 83       	st	Z, r22
	
	return adc_val[channel];
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	df 90       	pop	r13
 190:	cf 90       	pop	r12
 192:	bf 90       	pop	r11
 194:	af 90       	pop	r10
 196:	9f 90       	pop	r9
 198:	8f 90       	pop	r8
 19a:	7f 90       	pop	r7
 19c:	08 95       	ret

0000019e <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
 1b6:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
 1ba:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
 1be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
 1c2:	ef 70       	andi	r30, 0x0F	; 15
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
	unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 11       	cpse	r24, r1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__vector_21+0x34>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e3 5c       	subi	r30, 0xC3	; 195
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	31 83       	std	Z+1, r19	; 0x01
 1dc:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
 1de:	20 81       	ld	r18, Z
 1e0:	31 81       	ldd	r19, Z+1	; 0x01
 1e2:	32 2f       	mov	r19, r18
 1e4:	22 27       	eor	r18, r18
 1e6:	31 83       	std	Z+1, r19	; 0x01
 1e8:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	98 2f       	mov	r25, r24
 1ee:	88 27       	eor	r24, r24
 1f0:	84 0f       	add	r24, r20
 1f2:	91 1d       	adc	r25, r1
 1f4:	91 83       	std	Z+1, r25	; 0x01
 1f6:	80 83       	st	Z, r24
	
	i = adc_val[channel];
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <i+0x1>
 200:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <i>
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
 21c:	98 2f       	mov	r25, r24
 21e:	88 1f       	adc	r24, r24
 220:	88 27       	eor	r24, r24
 222:	88 1f       	adc	r24, r24
 224:	96 fd       	sbrc	r25, 6
 226:	02 c0       	rjmp	.+4      	; 0x22c <Bit_Reverse+0x10>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	01 c0       	rjmp	.+2      	; 0x22e <Bit_Reverse+0x12>
 22c:	22 e0       	ldi	r18, 0x02	; 2
 22e:	82 2b       	or	r24, r18
 230:	95 fd       	sbrc	r25, 5
 232:	02 c0       	rjmp	.+4      	; 0x238 <Bit_Reverse+0x1c>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	01 c0       	rjmp	.+2      	; 0x23a <Bit_Reverse+0x1e>
 238:	24 e0       	ldi	r18, 0x04	; 4
 23a:	82 2b       	or	r24, r18
 23c:	94 fd       	sbrc	r25, 4
 23e:	02 c0       	rjmp	.+4      	; 0x244 <Bit_Reverse+0x28>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	01 c0       	rjmp	.+2      	; 0x246 <Bit_Reverse+0x2a>
 244:	28 e0       	ldi	r18, 0x08	; 8
 246:	82 2b       	or	r24, r18
 248:	93 fd       	sbrc	r25, 3
 24a:	02 c0       	rjmp	.+4      	; 0x250 <Bit_Reverse+0x34>
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	01 c0       	rjmp	.+2      	; 0x252 <Bit_Reverse+0x36>
 250:	20 e1       	ldi	r18, 0x10	; 16
 252:	82 2b       	or	r24, r18
 254:	92 fd       	sbrc	r25, 2
 256:	02 c0       	rjmp	.+4      	; 0x25c <Bit_Reverse+0x40>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	01 c0       	rjmp	.+2      	; 0x25e <Bit_Reverse+0x42>
 25c:	20 e2       	ldi	r18, 0x20	; 32
 25e:	82 2b       	or	r24, r18
 260:	91 fd       	sbrc	r25, 1
 262:	02 c0       	rjmp	.+4      	; 0x268 <Bit_Reverse+0x4c>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	01 c0       	rjmp	.+2      	; 0x26a <Bit_Reverse+0x4e>
 268:	20 e4       	ldi	r18, 0x40	; 64
 26a:	82 2b       	or	r24, r18
 26c:	90 fd       	sbrc	r25, 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Bit_Reverse+0x58>
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 c0       	rjmp	.+2      	; 0x276 <Bit_Reverse+0x5a>
 274:	90 e8       	ldi	r25, 0x80	; 128
 276:	89 2b       	or	r24, r25
 278:	08 95       	ret

0000027a <lcd_wr_command>:
 27a:	cf 93       	push	r28
 27c:	c8 2f       	mov	r28, r24
 27e:	80 7f       	andi	r24, 0xF0	; 240
 280:	0e 94 0e 01 	call	0x21c	; 0x21c <Bit_Reverse>
 284:	88 0f       	add	r24, r24
 286:	88 0f       	add	r24, r24
 288:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 28c:	9b b1       	in	r25, 0x0b	; 11
 28e:	93 7c       	andi	r25, 0xC3	; 195
 290:	9b b9       	out	0x0b, r25	; 11
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
 298:	98 2b       	or	r25, r24
 29a:	9b b9       	out	0x0b, r25	; 11
 29c:	5f 98       	cbi	0x0b, 7	; 11
 29e:	5e 9a       	sbi	0x0b, 6	; 11
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_wr_command+0x2a>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_wr_command+0x30>
 2aa:	00 00       	nop
 2ac:	5e 98       	cbi	0x0b, 6	; 11
 2ae:	8c 2f       	mov	r24, r28
 2b0:	82 95       	swap	r24
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	0e 94 0e 01 	call	0x21c	; 0x21c <Bit_Reverse>
 2b8:	9b b1       	in	r25, 0x0b	; 11
 2ba:	93 7c       	andi	r25, 0xC3	; 195
 2bc:	9b b9       	out	0x0b, r25	; 11
 2be:	9b b1       	in	r25, 0x0b	; 11
 2c0:	88 0f       	add	r24, r24
 2c2:	88 0f       	add	r24, r24
 2c4:	98 2b       	or	r25, r24
 2c6:	9b b9       	out	0x0b, r25	; 11
 2c8:	5f 98       	cbi	0x0b, 7	; 11
 2ca:	5e 9a       	sbi	0x0b, 6	; 11
 2cc:	8f e1       	ldi	r24, 0x1F	; 31
 2ce:	9e e4       	ldi	r25, 0x4E	; 78
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_wr_command+0x56>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_wr_command+0x5c>
 2d6:	00 00       	nop
 2d8:	5e 98       	cbi	0x0b, 6	; 11
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <lcd_wr_char>:
 2de:	cf 93       	push	r28
 2e0:	c8 2f       	mov	r28, r24
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	0e 94 0e 01 	call	0x21c	; 0x21c <Bit_Reverse>
 2e8:	9b b1       	in	r25, 0x0b	; 11
 2ea:	93 7c       	andi	r25, 0xC3	; 195
 2ec:	9b b9       	out	0x0b, r25	; 11
 2ee:	9b b1       	in	r25, 0x0b	; 11
 2f0:	88 0f       	add	r24, r24
 2f2:	88 0f       	add	r24, r24
 2f4:	98 2b       	or	r25, r24
 2f6:	9b b9       	out	0x0b, r25	; 11
 2f8:	5f 9a       	sbi	0x0b, 7	; 11
 2fa:	5e 9a       	sbi	0x0b, 6	; 11
 2fc:	8f e1       	ldi	r24, 0x1F	; 31
 2fe:	9e e4       	ldi	r25, 0x4E	; 78
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_wr_char+0x22>
 304:	00 c0       	rjmp	.+0      	; 0x306 <lcd_wr_char+0x28>
 306:	00 00       	nop
 308:	5e 98       	cbi	0x0b, 6	; 11
 30a:	8c 2f       	mov	r24, r28
 30c:	82 95       	swap	r24
 30e:	80 7f       	andi	r24, 0xF0	; 240
 310:	0e 94 0e 01 	call	0x21c	; 0x21c <Bit_Reverse>
 314:	9b b1       	in	r25, 0x0b	; 11
 316:	93 7c       	andi	r25, 0xC3	; 195
 318:	9b b9       	out	0x0b, r25	; 11
 31a:	9b b1       	in	r25, 0x0b	; 11
 31c:	88 0f       	add	r24, r24
 31e:	88 0f       	add	r24, r24
 320:	98 2b       	or	r25, r24
 322:	9b b9       	out	0x0b, r25	; 11
 324:	5f 9a       	sbi	0x0b, 7	; 11
 326:	5e 9a       	sbi	0x0b, 6	; 11
 328:	8f e1       	ldi	r24, 0x1F	; 31
 32a:	9e e4       	ldi	r25, 0x4E	; 78
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_wr_char+0x4e>
 330:	00 c0       	rjmp	.+0      	; 0x332 <lcd_wr_char+0x54>
 332:	00 00       	nop
 334:	5e 98       	cbi	0x0b, 6	; 11
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <lcd_port_config>:
 33a:	8a b1       	in	r24, 0x0a	; 10
 33c:	8c 6f       	ori	r24, 0xFC	; 252
 33e:	8a b9       	out	0x0a, r24	; 10
 340:	8b b1       	in	r24, 0x0b	; 11
 342:	84 70       	andi	r24, 0x04	; 4
 344:	8b b9       	out	0x0b, r24	; 11
 346:	08 95       	ret

00000348 <lcd_home>:
 348:	80 e8       	ldi	r24, 0x80	; 128
 34a:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
 34e:	08 95       	ret

00000350 <lcd_cursor>:
	row
* Example Call: lcd_string(2,3)
*/
void lcd_cursor (char row, char column)
{
	switch (row) {
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	19 f0       	breq	.+6      	; 0x35a <lcd_cursor+0xa>
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	31 f0       	breq	.+12     	; 0x364 <lcd_cursor+0x14>
 358:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 35a:	8f e7       	ldi	r24, 0x7F	; 127
 35c:	86 0f       	add	r24, r22
 35e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
 362:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 364:	8f eb       	ldi	r24, 0xBF	; 191
 366:	86 0f       	add	r24, r22
 368:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
 36c:	08 95       	ret

0000036e <lcd_string2>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ea 01       	movw	r28, r20
	lcd_cursor(row,column);	
 374:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_cursor>
	while(*str != '\0')
 378:	88 81       	ld	r24, Y
 37a:	88 23       	and	r24, r24
 37c:	31 f0       	breq	.+12     	; 0x38a <lcd_string2+0x1c>
 37e:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
 380:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_wr_char>
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
	lcd_cursor(row,column);	
	while(*str != '\0')
 384:	89 91       	ld	r24, Y+
 386:	81 11       	cpse	r24, r1
 388:	fb cf       	rjmp	.-10     	; 0x380 <lcd_string2+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <lcd_print>:
* Output: Integer is printed to the desired location and upto the desired number of digits
* Logic: 
* Example Call: lcd_string("hello")
*/
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	8a 01       	movw	r16, r20
 39a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 39c:	88 23       	and	r24, r24
 39e:	11 f0       	breq	.+4      	; 0x3a4 <lcd_print+0x14>
 3a0:	61 11       	cpse	r22, r1
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <lcd_print+0x1a>
	{
		lcd_home();
 3a4:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_home>
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 3aa:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 3ae:	c5 30       	cpi	r28, 0x05	; 5
 3b0:	d1 05       	cpc	r29, r1
 3b2:	c9 f4       	brne	.+50     	; 0x3e6 <lcd_print+0x56>
	{
		million=value/10000+48;
 3b4:	98 01       	movw	r18, r16
 3b6:	32 95       	swap	r19
 3b8:	22 95       	swap	r18
 3ba:	2f 70       	andi	r18, 0x0F	; 15
 3bc:	23 27       	eor	r18, r19
 3be:	3f 70       	andi	r19, 0x0F	; 15
 3c0:	23 27       	eor	r18, r19
 3c2:	a7 e4       	ldi	r26, 0x47	; 71
 3c4:	b3 e0       	ldi	r27, 0x03	; 3
 3c6:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	c0 96       	adiw	r24, 0x30	; 48
 3d8:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <million+0x1>
 3dc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <million>
		lcd_wr_char(million);
 3e0:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_wr_char>
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <lcd_print+0x5e>
		flag=1;
	}
	if(digits==4 || flag==1)
 3e6:	c4 30       	cpi	r28, 0x04	; 4
 3e8:	d1 05       	cpc	r29, r1
 3ea:	09 f0       	breq	.+2      	; 0x3ee <lcd_print+0x5e>
 3ec:	c3 c0       	rjmp	.+390    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
	{
		temp = value/1000;
 3ee:	98 01       	movw	r18, r16
 3f0:	36 95       	lsr	r19
 3f2:	27 95       	ror	r18
 3f4:	36 95       	lsr	r19
 3f6:	27 95       	ror	r18
 3f8:	36 95       	lsr	r19
 3fa:	27 95       	ror	r18
 3fc:	a5 ec       	ldi	r26, 0xC5	; 197
 3fe:	b0 e2       	ldi	r27, 0x20	; 32
 400:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 404:	ac 01       	movw	r20, r24
 406:	52 95       	swap	r21
 408:	42 95       	swap	r20
 40a:	4f 70       	andi	r20, 0x0F	; 15
 40c:	45 27       	eor	r20, r21
 40e:	5f 70       	andi	r21, 0x0F	; 15
 410:	45 27       	eor	r20, r21
 412:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <temp+0x1>
 416:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <temp>
		thousand = temp%10 + 48;
 41a:	9a 01       	movw	r18, r20
 41c:	ad ec       	ldi	r26, 0xCD	; 205
 41e:	bc ec       	ldi	r27, 0xCC	; 204
 420:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	9c 01       	movw	r18, r24
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	82 0f       	add	r24, r18
 444:	93 1f       	adc	r25, r19
 446:	9a 01       	movw	r18, r20
 448:	28 1b       	sub	r18, r24
 44a:	39 0b       	sbc	r19, r25
 44c:	c9 01       	movw	r24, r18
 44e:	c0 96       	adiw	r24, 0x30	; 48
 450:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <thousand+0x1>
 454:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <thousand>
		lcd_wr_char(thousand);
 458:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 45c:	98 01       	movw	r18, r16
 45e:	36 95       	lsr	r19
 460:	27 95       	ror	r18
 462:	36 95       	lsr	r19
 464:	27 95       	ror	r18
 466:	ab e7       	ldi	r26, 0x7B	; 123
 468:	b4 e1       	ldi	r27, 0x14	; 20
 46a:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 46e:	ac 01       	movw	r20, r24
 470:	56 95       	lsr	r21
 472:	47 95       	ror	r20
 474:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <temp+0x1>
 478:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <temp>
		hundred = temp%10 + 48;
 47c:	9a 01       	movw	r18, r20
 47e:	ad ec       	ldi	r26, 0xCD	; 205
 480:	bc ec       	ldi	r27, 0xCC	; 204
 482:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 486:	96 95       	lsr	r25
 488:	87 95       	ror	r24
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	9c 01       	movw	r18, r24
 494:	22 0f       	add	r18, r18
 496:	33 1f       	adc	r19, r19
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	82 0f       	add	r24, r18
 4a6:	93 1f       	adc	r25, r19
 4a8:	9a 01       	movw	r18, r20
 4aa:	28 1b       	sub	r18, r24
 4ac:	39 0b       	sbc	r19, r25
 4ae:	c9 01       	movw	r24, r18
 4b0:	c0 96       	adiw	r24, 0x30	; 48
 4b2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <hundred+0x1>
 4b6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <hundred>
		lcd_wr_char(hundred);
 4ba:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_wr_char>
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		flag=1;
	}
	if(digits==2 || flag==1)
 4c0:	c2 30       	cpi	r28, 0x02	; 2
 4c2:	d1 05       	cpc	r29, r1
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c6:	5b c0       	rjmp	.+182    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
	{
		temp = value/10;
 4c8:	98 01       	movw	r18, r16
 4ca:	ad ec       	ldi	r26, 0xCD	; 205
 4cc:	bc ec       	ldi	r27, 0xCC	; 204
 4ce:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 4d2:	ac 01       	movw	r20, r24
 4d4:	56 95       	lsr	r21
 4d6:	47 95       	ror	r20
 4d8:	56 95       	lsr	r21
 4da:	47 95       	ror	r20
 4dc:	56 95       	lsr	r21
 4de:	47 95       	ror	r20
 4e0:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <temp+0x1>
 4e4:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <temp>
		tens = temp%10 + 48;
 4e8:	9a 01       	movw	r18, r20
 4ea:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 4ee:	96 95       	lsr	r25
 4f0:	87 95       	ror	r24
 4f2:	96 95       	lsr	r25
 4f4:	87 95       	ror	r24
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	9c 01       	movw	r18, r24
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	82 0f       	add	r24, r18
 50e:	93 1f       	adc	r25, r19
 510:	9a 01       	movw	r18, r20
 512:	28 1b       	sub	r18, r24
 514:	39 0b       	sbc	r19, r25
 516:	c9 01       	movw	r24, r18
 518:	c0 96       	adiw	r24, 0x30	; 48
 51a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <tens+0x1>
 51e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <tens>
		lcd_wr_char(tens);
 522:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 526:	98 01       	movw	r18, r16
 528:	ad ec       	ldi	r26, 0xCD	; 205
 52a:	bc ec       	ldi	r27, 0xCC	; 204
 52c:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	9c 01       	movw	r18, r24
 53e:	22 0f       	add	r18, r18
 540:	33 1f       	adc	r19, r19
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	82 0f       	add	r24, r18
 550:	93 1f       	adc	r25, r19
 552:	98 01       	movw	r18, r16
 554:	28 1b       	sub	r18, r24
 556:	39 0b       	sbc	r19, r25
 558:	c9 01       	movw	r24, r18
 55a:	c0 96       	adiw	r24, 0x30	; 48
 55c:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <unit+0x1>
 560:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <unit>
		lcd_wr_char(unit);
 564:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_wr_char>
	}
	if(digits>5)
 568:	26 97       	sbiw	r28, 0x06	; 6
 56a:	6c f0       	brlt	.+26     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
	{
		lcd_wr_char('E');
 56c:	85 e4       	ldi	r24, 0x45	; 69
 56e:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_wr_char>
 572:	09 c0       	rjmp	.+18     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 574:	c3 30       	cpi	r28, 0x03	; 3
 576:	d1 05       	cpc	r29, r1
 578:	09 f0       	breq	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57a:	a2 cf       	rjmp	.-188    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 57c:	6f cf       	rjmp	.-290    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 57e:	c1 30       	cpi	r28, 0x01	; 1
 580:	d1 05       	cpc	r29, r1
 582:	91 f7       	brne	.-28     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 584:	d0 cf       	rjmp	.-96     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	08 95       	ret

00000590 <lcd_start>:
 590:	8f e9       	ldi	r24, 0x9F	; 159
 592:	9f e0       	ldi	r25, 0x0F	; 15
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <lcd_start+0x4>
 598:	00 c0       	rjmp	.+0      	; 0x59a <lcd_start+0xa>
 59a:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 59c:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 59e:	80 e3       	ldi	r24, 0x30	; 48
 5a0:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 5a2:	5e 9a       	sbi	0x0b, 6	; 11
 5a4:	ef e1       	ldi	r30, 0x1F	; 31
 5a6:	fe e4       	ldi	r31, 0x4E	; 78
 5a8:	31 97       	sbiw	r30, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_start+0x18>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <lcd_start+0x1e>
 5ae:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5b0:	5e 98       	cbi	0x0b, 6	; 11
 5b2:	ef e9       	ldi	r30, 0x9F	; 159
 5b4:	ff e0       	ldi	r31, 0x0F	; 15
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <lcd_start+0x26>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <lcd_start+0x2c>
 5bc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5be:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 5c0:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 5c2:	5e 9a       	sbi	0x0b, 6	; 11
 5c4:	ef e1       	ldi	r30, 0x1F	; 31
 5c6:	fe e4       	ldi	r31, 0x4E	; 78
 5c8:	31 97       	sbiw	r30, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <lcd_start+0x38>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <lcd_start+0x3e>
 5ce:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5d0:	5e 98       	cbi	0x0b, 6	; 11
 5d2:	ef e9       	ldi	r30, 0x9F	; 159
 5d4:	ff e0       	ldi	r31, 0x0F	; 15
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_start+0x46>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <lcd_start+0x4c>
 5dc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5de:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 5e0:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 5e2:	5e 9a       	sbi	0x0b, 6	; 11
 5e4:	8f e1       	ldi	r24, 0x1F	; 31
 5e6:	9e e4       	ldi	r25, 0x4E	; 78
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <lcd_start+0x58>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <lcd_start+0x5e>
 5ee:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5f0:	5e 98       	cbi	0x0b, 6	; 11
 5f2:	ef e9       	ldi	r30, 0x9F	; 159
 5f4:	ff e0       	ldi	r31, 0x0F	; 15
 5f6:	31 97       	sbiw	r30, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <lcd_start+0x66>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <lcd_start+0x6c>
 5fc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5fe:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 600:	80 e1       	ldi	r24, 0x10	; 16
 602:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 604:	5e 9a       	sbi	0x0b, 6	; 11
 606:	8f e9       	ldi	r24, 0x9F	; 159
 608:	9f e0       	ldi	r25, 0x0F	; 15
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <lcd_start+0x7a>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <lcd_start+0x80>
 610:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 612:	5e 98       	cbi	0x0b, 6	; 11
 614:	ef e9       	ldi	r30, 0x9F	; 159
 616:	ff e0       	ldi	r31, 0x0F	; 15
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <lcd_start+0x88>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <lcd_start+0x8e>
 61e:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 620:	88 e2       	ldi	r24, 0x28	; 40
 622:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 62c:	8c e0       	ldi	r24, 0x0C	; 12
 62e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 632:	80 e8       	ldi	r24, 0x80	; 128
 634:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
 638:	08 95       	ret

0000063a <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_command>
 640:	08 95       	ret

00000642 <port_config>:

volatile unsigned int i =0;

void port_config (void)
{
	lcd_port_config();
 642:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_port_config>
	adc_pin_config();
 646:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
 64a:	08 95       	ret

0000064c <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 64c:	f8 94       	cli
	lcd_start();
 64e:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_start>
	adc_config();
 652:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
 656:	78 94       	sei
 658:	08 95       	ret

0000065a <main>:
}

int main(void)
{
	port_config();
 65a:	0e 94 21 03 	call	0x642	; 0x642 <port_config>
	init_devices();
 65e:	0e 94 26 03 	call	0x64c	; 0x64c <init_devices>
	float current = 0;
	float power = 0;
	float gate_voltage = 0;
	float offset = 0;
	
	lcd_string2(1, 7, "CCL");
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	51 e0       	ldi	r21, 0x01	; 1
 666:	67 e0       	ldi	r22, 0x07	; 7
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string2>
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	85 ea       	ldi	r24, 0xA5	; 165
 672:	9e e0       	ldi	r25, 0x0E	; 14
 674:	21 50       	subi	r18, 0x01	; 1
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	e1 f7       	brne	.-8      	; 0x674 <main+0x1a>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0x24>
 67e:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
 680:	1d 9b       	sbis	0x03, 5	; 3
 682:	0a c0       	rjmp	.+20     	; 0x698 <main+0x3e>
	{
		lcd_string2(2,1,"Supply Connected");
 684:	44 e0       	ldi	r20, 0x04	; 4
 686:	51 e0       	ldi	r21, 0x01	; 1
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string2>
	
	float voltage = 0;
	float current = 0;
	float power = 0;
	float gate_voltage = 0;
	float offset = 0;
 690:	c1 2c       	mov	r12, r1
 692:	d1 2c       	mov	r13, r1
 694:	76 01       	movw	r14, r12
 696:	10 c0       	rjmp	.+32     	; 0x6b8 <main+0x5e>
		lcd_string2(2,1,"Supply Connected");
	}
	
	else
	{
		lcd_string2(2,2,"12v Supply NC");
 698:	45 e1       	ldi	r20, 0x15	; 21
 69a:	51 e0       	ldi	r21, 0x01	; 1
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string2>
		offset = 26.2;
 6a4:	0f 2e       	mov	r0, r31
 6a6:	fa e9       	ldi	r31, 0x9A	; 154
 6a8:	cf 2e       	mov	r12, r31
 6aa:	f9 e9       	ldi	r31, 0x99	; 153
 6ac:	df 2e       	mov	r13, r31
 6ae:	f1 ed       	ldi	r31, 0xD1	; 209
 6b0:	ef 2e       	mov	r14, r31
 6b2:	f1 e4       	ldi	r31, 0x41	; 65
 6b4:	ff 2e       	mov	r15, r31
 6b6:	f0 2d       	mov	r31, r0
 6b8:	2f ef       	ldi	r18, 0xFF	; 255
 6ba:	8b e4       	ldi	r24, 0x4B	; 75
 6bc:	9d e1       	ldi	r25, 0x1D	; 29
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0x64>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x6e>
 6c8:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
 6ca:	0e 94 1d 03 	call	0x63a	; 0x63a <lcd_clear>
	
	while (1)
	{
		current = avg_read_adc_channel(0, 10);		//0-2A
 6ce:	6a e0       	ldi	r22, 0x0A	; 10
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
 6d6:	bc 01       	movw	r22, r24
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatunsisf>
		current = current*2 + .3 + offset;		//1.953*(1.0228, 9.57, 1.1054, 1.016,1.0570)
 6e0:	9b 01       	movw	r18, r22
 6e2:	ac 01       	movw	r20, r24
 6e4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3>
 6e8:	2a e9       	ldi	r18, 0x9A	; 154
 6ea:	39 e9       	ldi	r19, 0x99	; 153
 6ec:	49 e9       	ldi	r20, 0x99	; 153
 6ee:	5e e3       	ldi	r21, 0x3E	; 62
 6f0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3>
 6f4:	a7 01       	movw	r20, r14
 6f6:	96 01       	movw	r18, r12
 6f8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3>
 6fc:	4b 01       	movw	r8, r22
 6fe:	5c 01       	movw	r10, r24
		lcd_print(1,1,current,4);					//Least count = 1.95mv
 700:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 704:	24 e0       	ldi	r18, 0x04	; 4
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	ab 01       	movw	r20, r22
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_print>
		lcd_string2(1,5,"mA  ");
 712:	43 e2       	ldi	r20, 0x23	; 35
 714:	51 e0       	ldi	r21, 0x01	; 1
 716:	65 e0       	ldi	r22, 0x05	; 5
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string2>
				
		voltage = avg_read_adc_channel(1, 10);		//0-30V
 71e:	6a e0       	ldi	r22, 0x0A	; 10
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
 726:	bc 01       	movw	r22, r24
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatunsisf>
		voltage = voltage*29.3;
 730:	26 e6       	ldi	r18, 0x66	; 102
 732:	36 e6       	ldi	r19, 0x66	; 102
 734:	4a ee       	ldi	r20, 0xEA	; 234
 736:	51 e4       	ldi	r21, 0x41	; 65
 738:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 73c:	2b 01       	movw	r4, r22
 73e:	3c 01       	movw	r6, r24
		lcd_print(1,10,voltage,5);					//Least count = 29.23mv
 740:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 744:	25 e0       	ldi	r18, 0x05	; 5
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	ab 01       	movw	r20, r22
 74a:	6a e0       	ldi	r22, 0x0A	; 10
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_print>
		lcd_string2(1,15,"mV");
 752:	48 e2       	ldi	r20, 0x28	; 40
 754:	51 e0       	ldi	r21, 0x01	; 1
 756:	6f e0       	ldi	r22, 0x0F	; 15
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string2>
		
		power = voltage*current/1000;
 75e:	a5 01       	movw	r20, r10
 760:	94 01       	movw	r18, r8
 762:	c3 01       	movw	r24, r6
 764:	b2 01       	movw	r22, r4
 766:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 76a:	20 e0       	ldi	r18, 0x00	; 0
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	4a e7       	ldi	r20, 0x7A	; 122
 770:	54 e4       	ldi	r21, 0x44	; 68
 772:	0e 94 56 04 	call	0x8ac	; 0x8ac <__divsf3>
		lcd_print(2,1,power,5);
 776:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 77a:	25 e0       	ldi	r18, 0x05	; 5
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	ab 01       	movw	r20, r22
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_print>
		lcd_string2(2,6,"mW");
 788:	4b e2       	ldi	r20, 0x2B	; 43
 78a:	51 e0       	ldi	r21, 0x01	; 1
 78c:	66 e0       	ldi	r22, 0x06	; 6
 78e:	82 e0       	ldi	r24, 0x02	; 2
 790:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string2>
		
		gate_voltage = avg_read_adc_channel(2, 10)*7.5;		//0-7.68V
 794:	6a e0       	ldi	r22, 0x0A	; 10
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
 79c:	bc 01       	movw	r22, r24
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatunsisf>
 7a6:	20 e0       	ldi	r18, 0x00	; 0
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	40 ef       	ldi	r20, 0xF0	; 240
 7ac:	50 e4       	ldi	r21, 0x40	; 64
 7ae:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
		lcd_print(2,11,gate_voltage,4);				//Least count = 7.5mv
 7b2:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 7b6:	24 e0       	ldi	r18, 0x04	; 4
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	ab 01       	movw	r20, r22
 7bc:	6b e0       	ldi	r22, 0x0B	; 11
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_print>
		lcd_string2(2,15,"mV");	
 7c4:	48 e2       	ldi	r20, 0x28	; 40
 7c6:	51 e0       	ldi	r21, 0x01	; 1
 7c8:	6f e0       	ldi	r22, 0x0F	; 15
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string2>
		
		//_delay_ms(100);
	}
 7d0:	7e cf       	rjmp	.-260    	; 0x6ce <main+0x74>

000007d2 <__subsf3>:
 7d2:	50 58       	subi	r21, 0x80	; 128

000007d4 <__addsf3>:
 7d4:	bb 27       	eor	r27, r27
 7d6:	aa 27       	eor	r26, r26
 7d8:	0e 94 01 04 	call	0x802	; 0x802 <__addsf3x>
 7dc:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_round>
 7e0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_pscA>
 7e4:	38 f0       	brcs	.+14     	; 0x7f4 <__addsf3+0x20>
 7e6:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscB>
 7ea:	20 f0       	brcs	.+8      	; 0x7f4 <__addsf3+0x20>
 7ec:	39 f4       	brne	.+14     	; 0x7fc <__addsf3+0x28>
 7ee:	9f 3f       	cpi	r25, 0xFF	; 255
 7f0:	19 f4       	brne	.+6      	; 0x7f8 <__addsf3+0x24>
 7f2:	26 f4       	brtc	.+8      	; 0x7fc <__addsf3+0x28>
 7f4:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_nan>
 7f8:	0e f4       	brtc	.+2      	; 0x7fc <__addsf3+0x28>
 7fa:	e0 95       	com	r30
 7fc:	e7 fb       	bst	r30, 7
 7fe:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>

00000802 <__addsf3x>:
 802:	e9 2f       	mov	r30, r25
 804:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_split3>
 808:	58 f3       	brcs	.-42     	; 0x7e0 <__addsf3+0xc>
 80a:	ba 17       	cp	r27, r26
 80c:	62 07       	cpc	r22, r18
 80e:	73 07       	cpc	r23, r19
 810:	84 07       	cpc	r24, r20
 812:	95 07       	cpc	r25, r21
 814:	20 f0       	brcs	.+8      	; 0x81e <__addsf3x+0x1c>
 816:	79 f4       	brne	.+30     	; 0x836 <__addsf3x+0x34>
 818:	a6 f5       	brtc	.+104    	; 0x882 <__addsf3x+0x80>
 81a:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_zero>
 81e:	0e f4       	brtc	.+2      	; 0x822 <__addsf3x+0x20>
 820:	e0 95       	com	r30
 822:	0b 2e       	mov	r0, r27
 824:	ba 2f       	mov	r27, r26
 826:	a0 2d       	mov	r26, r0
 828:	0b 01       	movw	r0, r22
 82a:	b9 01       	movw	r22, r18
 82c:	90 01       	movw	r18, r0
 82e:	0c 01       	movw	r0, r24
 830:	ca 01       	movw	r24, r20
 832:	a0 01       	movw	r20, r0
 834:	11 24       	eor	r1, r1
 836:	ff 27       	eor	r31, r31
 838:	59 1b       	sub	r21, r25
 83a:	99 f0       	breq	.+38     	; 0x862 <__addsf3x+0x60>
 83c:	59 3f       	cpi	r21, 0xF9	; 249
 83e:	50 f4       	brcc	.+20     	; 0x854 <__addsf3x+0x52>
 840:	50 3e       	cpi	r21, 0xE0	; 224
 842:	68 f1       	brcs	.+90     	; 0x89e <__addsf3x+0x9c>
 844:	1a 16       	cp	r1, r26
 846:	f0 40       	sbci	r31, 0x00	; 0
 848:	a2 2f       	mov	r26, r18
 84a:	23 2f       	mov	r18, r19
 84c:	34 2f       	mov	r19, r20
 84e:	44 27       	eor	r20, r20
 850:	58 5f       	subi	r21, 0xF8	; 248
 852:	f3 cf       	rjmp	.-26     	; 0x83a <__addsf3x+0x38>
 854:	46 95       	lsr	r20
 856:	37 95       	ror	r19
 858:	27 95       	ror	r18
 85a:	a7 95       	ror	r26
 85c:	f0 40       	sbci	r31, 0x00	; 0
 85e:	53 95       	inc	r21
 860:	c9 f7       	brne	.-14     	; 0x854 <__addsf3x+0x52>
 862:	7e f4       	brtc	.+30     	; 0x882 <__addsf3x+0x80>
 864:	1f 16       	cp	r1, r31
 866:	ba 0b       	sbc	r27, r26
 868:	62 0b       	sbc	r22, r18
 86a:	73 0b       	sbc	r23, r19
 86c:	84 0b       	sbc	r24, r20
 86e:	ba f0       	brmi	.+46     	; 0x89e <__addsf3x+0x9c>
 870:	91 50       	subi	r25, 0x01	; 1
 872:	a1 f0       	breq	.+40     	; 0x89c <__addsf3x+0x9a>
 874:	ff 0f       	add	r31, r31
 876:	bb 1f       	adc	r27, r27
 878:	66 1f       	adc	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	c2 f7       	brpl	.-16     	; 0x870 <__addsf3x+0x6e>
 880:	0e c0       	rjmp	.+28     	; 0x89e <__addsf3x+0x9c>
 882:	ba 0f       	add	r27, r26
 884:	62 1f       	adc	r22, r18
 886:	73 1f       	adc	r23, r19
 888:	84 1f       	adc	r24, r20
 88a:	48 f4       	brcc	.+18     	; 0x89e <__addsf3x+0x9c>
 88c:	87 95       	ror	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b7 95       	ror	r27
 894:	f7 95       	ror	r31
 896:	9e 3f       	cpi	r25, 0xFE	; 254
 898:	08 f0       	brcs	.+2      	; 0x89c <__addsf3x+0x9a>
 89a:	b0 cf       	rjmp	.-160    	; 0x7fc <__addsf3+0x28>
 89c:	93 95       	inc	r25
 89e:	88 0f       	add	r24, r24
 8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__addsf3x+0xa2>
 8a2:	99 27       	eor	r25, r25
 8a4:	ee 0f       	add	r30, r30
 8a6:	97 95       	ror	r25
 8a8:	87 95       	ror	r24
 8aa:	08 95       	ret

000008ac <__divsf3>:
 8ac:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3x>
 8b0:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_round>
 8b4:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscB>
 8b8:	58 f0       	brcs	.+22     	; 0x8d0 <__divsf3+0x24>
 8ba:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_pscA>
 8be:	40 f0       	brcs	.+16     	; 0x8d0 <__divsf3+0x24>
 8c0:	29 f4       	brne	.+10     	; 0x8cc <__divsf3+0x20>
 8c2:	5f 3f       	cpi	r21, 0xFF	; 255
 8c4:	29 f0       	breq	.+10     	; 0x8d0 <__divsf3+0x24>
 8c6:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 8ca:	51 11       	cpse	r21, r1
 8cc:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>
 8d0:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_nan>

000008d4 <__divsf3x>:
 8d4:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_split3>
 8d8:	68 f3       	brcs	.-38     	; 0x8b4 <__divsf3+0x8>

000008da <__divsf3_pse>:
 8da:	99 23       	and	r25, r25
 8dc:	b1 f3       	breq	.-20     	; 0x8ca <__divsf3+0x1e>
 8de:	55 23       	and	r21, r21
 8e0:	91 f3       	breq	.-28     	; 0x8c6 <__divsf3+0x1a>
 8e2:	95 1b       	sub	r25, r21
 8e4:	55 0b       	sbc	r21, r21
 8e6:	bb 27       	eor	r27, r27
 8e8:	aa 27       	eor	r26, r26
 8ea:	62 17       	cp	r22, r18
 8ec:	73 07       	cpc	r23, r19
 8ee:	84 07       	cpc	r24, r20
 8f0:	38 f0       	brcs	.+14     	; 0x900 <__stack+0x1>
 8f2:	9f 5f       	subi	r25, 0xFF	; 255
 8f4:	5f 4f       	sbci	r21, 0xFF	; 255
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	44 1f       	adc	r20, r20
 8fc:	aa 1f       	adc	r26, r26
 8fe:	a9 f3       	breq	.-22     	; 0x8ea <__divsf3_pse+0x10>
 900:	35 d0       	rcall	.+106    	; 0x96c <__stack+0x6d>
 902:	0e 2e       	mov	r0, r30
 904:	3a f0       	brmi	.+14     	; 0x914 <__stack+0x15>
 906:	e0 e8       	ldi	r30, 0x80	; 128
 908:	32 d0       	rcall	.+100    	; 0x96e <__stack+0x6f>
 90a:	91 50       	subi	r25, 0x01	; 1
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	e6 95       	lsr	r30
 910:	00 1c       	adc	r0, r0
 912:	ca f7       	brpl	.-14     	; 0x906 <__stack+0x7>
 914:	2b d0       	rcall	.+86     	; 0x96c <__stack+0x6d>
 916:	fe 2f       	mov	r31, r30
 918:	29 d0       	rcall	.+82     	; 0x96c <__stack+0x6d>
 91a:	66 0f       	add	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	bb 1f       	adc	r27, r27
 922:	26 17       	cp	r18, r22
 924:	37 07       	cpc	r19, r23
 926:	48 07       	cpc	r20, r24
 928:	ab 07       	cpc	r26, r27
 92a:	b0 e8       	ldi	r27, 0x80	; 128
 92c:	09 f0       	breq	.+2      	; 0x930 <__stack+0x31>
 92e:	bb 0b       	sbc	r27, r27
 930:	80 2d       	mov	r24, r0
 932:	bf 01       	movw	r22, r30
 934:	ff 27       	eor	r31, r31
 936:	93 58       	subi	r25, 0x83	; 131
 938:	5f 4f       	sbci	r21, 0xFF	; 255
 93a:	3a f0       	brmi	.+14     	; 0x94a <__stack+0x4b>
 93c:	9e 3f       	cpi	r25, 0xFE	; 254
 93e:	51 05       	cpc	r21, r1
 940:	78 f0       	brcs	.+30     	; 0x960 <__stack+0x61>
 942:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 946:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>
 94a:	5f 3f       	cpi	r21, 0xFF	; 255
 94c:	e4 f3       	brlt	.-8      	; 0x946 <__stack+0x47>
 94e:	98 3e       	cpi	r25, 0xE8	; 232
 950:	d4 f3       	brlt	.-12     	; 0x946 <__stack+0x47>
 952:	86 95       	lsr	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b7 95       	ror	r27
 95a:	f7 95       	ror	r31
 95c:	9f 5f       	subi	r25, 0xFF	; 255
 95e:	c9 f7       	brne	.-14     	; 0x952 <__stack+0x53>
 960:	88 0f       	add	r24, r24
 962:	91 1d       	adc	r25, r1
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret
 96c:	e1 e0       	ldi	r30, 0x01	; 1
 96e:	66 0f       	add	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	bb 1f       	adc	r27, r27
 976:	62 17       	cp	r22, r18
 978:	73 07       	cpc	r23, r19
 97a:	84 07       	cpc	r24, r20
 97c:	ba 07       	cpc	r27, r26
 97e:	20 f0       	brcs	.+8      	; 0x988 <__stack+0x89>
 980:	62 1b       	sub	r22, r18
 982:	73 0b       	sbc	r23, r19
 984:	84 0b       	sbc	r24, r20
 986:	ba 0b       	sbc	r27, r26
 988:	ee 1f       	adc	r30, r30
 98a:	88 f7       	brcc	.-30     	; 0x96e <__stack+0x6f>
 98c:	e0 95       	com	r30
 98e:	08 95       	ret

00000990 <__fixunssfsi>:
 990:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_splitA>
 994:	88 f0       	brcs	.+34     	; 0x9b8 <__fixunssfsi+0x28>
 996:	9f 57       	subi	r25, 0x7F	; 127
 998:	98 f0       	brcs	.+38     	; 0x9c0 <__fixunssfsi+0x30>
 99a:	b9 2f       	mov	r27, r25
 99c:	99 27       	eor	r25, r25
 99e:	b7 51       	subi	r27, 0x17	; 23
 9a0:	b0 f0       	brcs	.+44     	; 0x9ce <__fixunssfsi+0x3e>
 9a2:	e1 f0       	breq	.+56     	; 0x9dc <__fixunssfsi+0x4c>
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	1a f0       	brmi	.+6      	; 0x9b4 <__fixunssfsi+0x24>
 9ae:	ba 95       	dec	r27
 9b0:	c9 f7       	brne	.-14     	; 0x9a4 <__fixunssfsi+0x14>
 9b2:	14 c0       	rjmp	.+40     	; 0x9dc <__fixunssfsi+0x4c>
 9b4:	b1 30       	cpi	r27, 0x01	; 1
 9b6:	91 f0       	breq	.+36     	; 0x9dc <__fixunssfsi+0x4c>
 9b8:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_zero>
 9bc:	b1 e0       	ldi	r27, 0x01	; 1
 9be:	08 95       	ret
 9c0:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_zero>
 9c4:	67 2f       	mov	r22, r23
 9c6:	78 2f       	mov	r23, r24
 9c8:	88 27       	eor	r24, r24
 9ca:	b8 5f       	subi	r27, 0xF8	; 248
 9cc:	39 f0       	breq	.+14     	; 0x9dc <__fixunssfsi+0x4c>
 9ce:	b9 3f       	cpi	r27, 0xF9	; 249
 9d0:	cc f3       	brlt	.-14     	; 0x9c4 <__fixunssfsi+0x34>
 9d2:	86 95       	lsr	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	b3 95       	inc	r27
 9da:	d9 f7       	brne	.-10     	; 0x9d2 <__fixunssfsi+0x42>
 9dc:	3e f4       	brtc	.+14     	; 0x9ec <__fixunssfsi+0x5c>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	08 95       	ret

000009ee <__floatunsisf>:
 9ee:	e8 94       	clt
 9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__floatsisf+0x12>

000009f2 <__floatsisf>:
 9f2:	97 fb       	bst	r25, 7
 9f4:	3e f4       	brtc	.+14     	; 0xa04 <__floatsisf+0x12>
 9f6:	90 95       	com	r25
 9f8:	80 95       	com	r24
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	99 23       	and	r25, r25
 a06:	a9 f0       	breq	.+42     	; 0xa32 <__floatsisf+0x40>
 a08:	f9 2f       	mov	r31, r25
 a0a:	96 e9       	ldi	r25, 0x96	; 150
 a0c:	bb 27       	eor	r27, r27
 a0e:	93 95       	inc	r25
 a10:	f6 95       	lsr	r31
 a12:	87 95       	ror	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	b7 95       	ror	r27
 a1a:	f1 11       	cpse	r31, r1
 a1c:	f8 cf       	rjmp	.-16     	; 0xa0e <__floatsisf+0x1c>
 a1e:	fa f4       	brpl	.+62     	; 0xa5e <__floatsisf+0x6c>
 a20:	bb 0f       	add	r27, r27
 a22:	11 f4       	brne	.+4      	; 0xa28 <__floatsisf+0x36>
 a24:	60 ff       	sbrs	r22, 0
 a26:	1b c0       	rjmp	.+54     	; 0xa5e <__floatsisf+0x6c>
 a28:	6f 5f       	subi	r22, 0xFF	; 255
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	16 c0       	rjmp	.+44     	; 0xa5e <__floatsisf+0x6c>
 a32:	88 23       	and	r24, r24
 a34:	11 f0       	breq	.+4      	; 0xa3a <__floatsisf+0x48>
 a36:	96 e9       	ldi	r25, 0x96	; 150
 a38:	11 c0       	rjmp	.+34     	; 0xa5c <__floatsisf+0x6a>
 a3a:	77 23       	and	r23, r23
 a3c:	21 f0       	breq	.+8      	; 0xa46 <__floatsisf+0x54>
 a3e:	9e e8       	ldi	r25, 0x8E	; 142
 a40:	87 2f       	mov	r24, r23
 a42:	76 2f       	mov	r23, r22
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <__floatsisf+0x5e>
 a46:	66 23       	and	r22, r22
 a48:	71 f0       	breq	.+28     	; 0xa66 <__floatsisf+0x74>
 a4a:	96 e8       	ldi	r25, 0x86	; 134
 a4c:	86 2f       	mov	r24, r22
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	2a f0       	brmi	.+10     	; 0xa5e <__floatsisf+0x6c>
 a54:	9a 95       	dec	r25
 a56:	66 0f       	add	r22, r22
 a58:	77 1f       	adc	r23, r23
 a5a:	88 1f       	adc	r24, r24
 a5c:	da f7       	brpl	.-10     	; 0xa54 <__floatsisf+0x62>
 a5e:	88 0f       	add	r24, r24
 a60:	96 95       	lsr	r25
 a62:	87 95       	ror	r24
 a64:	97 f9       	bld	r25, 7
 a66:	08 95       	ret

00000a68 <__fp_inf>:
 a68:	97 f9       	bld	r25, 7
 a6a:	9f 67       	ori	r25, 0x7F	; 127
 a6c:	80 e8       	ldi	r24, 0x80	; 128
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	08 95       	ret

00000a74 <__fp_nan>:
 a74:	9f ef       	ldi	r25, 0xFF	; 255
 a76:	80 ec       	ldi	r24, 0xC0	; 192
 a78:	08 95       	ret

00000a7a <__fp_pscA>:
 a7a:	00 24       	eor	r0, r0
 a7c:	0a 94       	dec	r0
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	09 06       	cpc	r0, r25
 a86:	08 95       	ret

00000a88 <__fp_pscB>:
 a88:	00 24       	eor	r0, r0
 a8a:	0a 94       	dec	r0
 a8c:	12 16       	cp	r1, r18
 a8e:	13 06       	cpc	r1, r19
 a90:	14 06       	cpc	r1, r20
 a92:	05 06       	cpc	r0, r21
 a94:	08 95       	ret

00000a96 <__fp_round>:
 a96:	09 2e       	mov	r0, r25
 a98:	03 94       	inc	r0
 a9a:	00 0c       	add	r0, r0
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__fp_round+0xc>
 a9e:	88 23       	and	r24, r24
 aa0:	52 f0       	brmi	.+20     	; 0xab6 <__fp_round+0x20>
 aa2:	bb 0f       	add	r27, r27
 aa4:	40 f4       	brcc	.+16     	; 0xab6 <__fp_round+0x20>
 aa6:	bf 2b       	or	r27, r31
 aa8:	11 f4       	brne	.+4      	; 0xaae <__fp_round+0x18>
 aaa:	60 ff       	sbrs	r22, 0
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <__fp_round+0x20>
 aae:	6f 5f       	subi	r22, 0xFF	; 255
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	8f 4f       	sbci	r24, 0xFF	; 255
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	08 95       	ret

00000ab8 <__fp_split3>:
 ab8:	57 fd       	sbrc	r21, 7
 aba:	90 58       	subi	r25, 0x80	; 128
 abc:	44 0f       	add	r20, r20
 abe:	55 1f       	adc	r21, r21
 ac0:	59 f0       	breq	.+22     	; 0xad8 <__fp_splitA+0x10>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	71 f0       	breq	.+28     	; 0xae2 <__fp_splitA+0x1a>
 ac6:	47 95       	ror	r20

00000ac8 <__fp_splitA>:
 ac8:	88 0f       	add	r24, r24
 aca:	97 fb       	bst	r25, 7
 acc:	99 1f       	adc	r25, r25
 ace:	61 f0       	breq	.+24     	; 0xae8 <__fp_splitA+0x20>
 ad0:	9f 3f       	cpi	r25, 0xFF	; 255
 ad2:	79 f0       	breq	.+30     	; 0xaf2 <__fp_splitA+0x2a>
 ad4:	87 95       	ror	r24
 ad6:	08 95       	ret
 ad8:	12 16       	cp	r1, r18
 ada:	13 06       	cpc	r1, r19
 adc:	14 06       	cpc	r1, r20
 ade:	55 1f       	adc	r21, r21
 ae0:	f2 cf       	rjmp	.-28     	; 0xac6 <__fp_split3+0xe>
 ae2:	46 95       	lsr	r20
 ae4:	f1 df       	rcall	.-30     	; 0xac8 <__fp_splitA>
 ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <__fp_splitA+0x30>
 ae8:	16 16       	cp	r1, r22
 aea:	17 06       	cpc	r1, r23
 aec:	18 06       	cpc	r1, r24
 aee:	99 1f       	adc	r25, r25
 af0:	f1 cf       	rjmp	.-30     	; 0xad4 <__fp_splitA+0xc>
 af2:	86 95       	lsr	r24
 af4:	71 05       	cpc	r23, r1
 af6:	61 05       	cpc	r22, r1
 af8:	08 94       	sec
 afa:	08 95       	ret

00000afc <__fp_zero>:
 afc:	e8 94       	clt

00000afe <__fp_szero>:
 afe:	bb 27       	eor	r27, r27
 b00:	66 27       	eor	r22, r22
 b02:	77 27       	eor	r23, r23
 b04:	cb 01       	movw	r24, r22
 b06:	97 f9       	bld	r25, 7
 b08:	08 95       	ret

00000b0a <__mulsf3>:
 b0a:	0e 94 98 05 	call	0xb30	; 0xb30 <__mulsf3x>
 b0e:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_round>
 b12:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_pscA>
 b16:	38 f0       	brcs	.+14     	; 0xb26 <__mulsf3+0x1c>
 b18:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscB>
 b1c:	20 f0       	brcs	.+8      	; 0xb26 <__mulsf3+0x1c>
 b1e:	95 23       	and	r25, r21
 b20:	11 f0       	breq	.+4      	; 0xb26 <__mulsf3+0x1c>
 b22:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 b26:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_nan>
 b2a:	11 24       	eor	r1, r1
 b2c:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>

00000b30 <__mulsf3x>:
 b30:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_split3>
 b34:	70 f3       	brcs	.-36     	; 0xb12 <__mulsf3+0x8>

00000b36 <__mulsf3_pse>:
 b36:	95 9f       	mul	r25, r21
 b38:	c1 f3       	breq	.-16     	; 0xb2a <__mulsf3+0x20>
 b3a:	95 0f       	add	r25, r21
 b3c:	50 e0       	ldi	r21, 0x00	; 0
 b3e:	55 1f       	adc	r21, r21
 b40:	62 9f       	mul	r22, r18
 b42:	f0 01       	movw	r30, r0
 b44:	72 9f       	mul	r23, r18
 b46:	bb 27       	eor	r27, r27
 b48:	f0 0d       	add	r31, r0
 b4a:	b1 1d       	adc	r27, r1
 b4c:	63 9f       	mul	r22, r19
 b4e:	aa 27       	eor	r26, r26
 b50:	f0 0d       	add	r31, r0
 b52:	b1 1d       	adc	r27, r1
 b54:	aa 1f       	adc	r26, r26
 b56:	64 9f       	mul	r22, r20
 b58:	66 27       	eor	r22, r22
 b5a:	b0 0d       	add	r27, r0
 b5c:	a1 1d       	adc	r26, r1
 b5e:	66 1f       	adc	r22, r22
 b60:	82 9f       	mul	r24, r18
 b62:	22 27       	eor	r18, r18
 b64:	b0 0d       	add	r27, r0
 b66:	a1 1d       	adc	r26, r1
 b68:	62 1f       	adc	r22, r18
 b6a:	73 9f       	mul	r23, r19
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	62 1f       	adc	r22, r18
 b72:	83 9f       	mul	r24, r19
 b74:	a0 0d       	add	r26, r0
 b76:	61 1d       	adc	r22, r1
 b78:	22 1f       	adc	r18, r18
 b7a:	74 9f       	mul	r23, r20
 b7c:	33 27       	eor	r19, r19
 b7e:	a0 0d       	add	r26, r0
 b80:	61 1d       	adc	r22, r1
 b82:	23 1f       	adc	r18, r19
 b84:	84 9f       	mul	r24, r20
 b86:	60 0d       	add	r22, r0
 b88:	21 1d       	adc	r18, r1
 b8a:	82 2f       	mov	r24, r18
 b8c:	76 2f       	mov	r23, r22
 b8e:	6a 2f       	mov	r22, r26
 b90:	11 24       	eor	r1, r1
 b92:	9f 57       	subi	r25, 0x7F	; 127
 b94:	50 40       	sbci	r21, 0x00	; 0
 b96:	9a f0       	brmi	.+38     	; 0xbbe <__mulsf3_pse+0x88>
 b98:	f1 f0       	breq	.+60     	; 0xbd6 <__mulsf3_pse+0xa0>
 b9a:	88 23       	and	r24, r24
 b9c:	4a f0       	brmi	.+18     	; 0xbb0 <__mulsf3_pse+0x7a>
 b9e:	ee 0f       	add	r30, r30
 ba0:	ff 1f       	adc	r31, r31
 ba2:	bb 1f       	adc	r27, r27
 ba4:	66 1f       	adc	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	91 50       	subi	r25, 0x01	; 1
 bac:	50 40       	sbci	r21, 0x00	; 0
 bae:	a9 f7       	brne	.-22     	; 0xb9a <__mulsf3_pse+0x64>
 bb0:	9e 3f       	cpi	r25, 0xFE	; 254
 bb2:	51 05       	cpc	r21, r1
 bb4:	80 f0       	brcs	.+32     	; 0xbd6 <__mulsf3_pse+0xa0>
 bb6:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 bba:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>
 bbe:	5f 3f       	cpi	r21, 0xFF	; 255
 bc0:	e4 f3       	brlt	.-8      	; 0xbba <__mulsf3_pse+0x84>
 bc2:	98 3e       	cpi	r25, 0xE8	; 232
 bc4:	d4 f3       	brlt	.-12     	; 0xbba <__mulsf3_pse+0x84>
 bc6:	86 95       	lsr	r24
 bc8:	77 95       	ror	r23
 bca:	67 95       	ror	r22
 bcc:	b7 95       	ror	r27
 bce:	f7 95       	ror	r31
 bd0:	e7 95       	ror	r30
 bd2:	9f 5f       	subi	r25, 0xFF	; 255
 bd4:	c1 f7       	brne	.-16     	; 0xbc6 <__mulsf3_pse+0x90>
 bd6:	fe 2b       	or	r31, r30
 bd8:	88 0f       	add	r24, r24
 bda:	91 1d       	adc	r25, r1
 bdc:	96 95       	lsr	r25
 bde:	87 95       	ror	r24
 be0:	97 f9       	bld	r25, 7
 be2:	08 95       	ret

00000be4 <__udivmodhi4>:
 be4:	aa 1b       	sub	r26, r26
 be6:	bb 1b       	sub	r27, r27
 be8:	51 e1       	ldi	r21, 0x11	; 17
 bea:	07 c0       	rjmp	.+14     	; 0xbfa <__udivmodhi4_ep>

00000bec <__udivmodhi4_loop>:
 bec:	aa 1f       	adc	r26, r26
 bee:	bb 1f       	adc	r27, r27
 bf0:	a6 17       	cp	r26, r22
 bf2:	b7 07       	cpc	r27, r23
 bf4:	10 f0       	brcs	.+4      	; 0xbfa <__udivmodhi4_ep>
 bf6:	a6 1b       	sub	r26, r22
 bf8:	b7 0b       	sbc	r27, r23

00000bfa <__udivmodhi4_ep>:
 bfa:	88 1f       	adc	r24, r24
 bfc:	99 1f       	adc	r25, r25
 bfe:	5a 95       	dec	r21
 c00:	a9 f7       	brne	.-22     	; 0xbec <__udivmodhi4_loop>
 c02:	80 95       	com	r24
 c04:	90 95       	com	r25
 c06:	bc 01       	movw	r22, r24
 c08:	cd 01       	movw	r24, r26
 c0a:	08 95       	ret

00000c0c <__umulhisi3>:
 c0c:	a2 9f       	mul	r26, r18
 c0e:	b0 01       	movw	r22, r0
 c10:	b3 9f       	mul	r27, r19
 c12:	c0 01       	movw	r24, r0
 c14:	a3 9f       	mul	r26, r19
 c16:	70 0d       	add	r23, r0
 c18:	81 1d       	adc	r24, r1
 c1a:	11 24       	eor	r1, r1
 c1c:	91 1d       	adc	r25, r1
 c1e:	b2 9f       	mul	r27, r18
 c20:	70 0d       	add	r23, r0
 c22:	81 1d       	adc	r24, r1
 c24:	11 24       	eor	r1, r1
 c26:	91 1d       	adc	r25, r1
 c28:	08 95       	ret

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>
