
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00001200  00001294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080016a  0080016a  000012fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a0c  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3b  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e31  00000000  00000000  00003b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00004938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e6  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e88  00000000  00000000  000052a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e0       	ldi	r30, 0x00	; 0
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 36       	cpi	r26, 0x6A	; 106
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e6       	ldi	r26, 0x6A	; 106
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 39       	cpi	r26, 0x92	; 146
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 00 06 	call	0xc00	; 0xc00 <main>
      9e:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	7f 92       	push	r7
      ee:	8f 92       	push	r8
      f0:	9f 92       	push	r9
      f2:	af 92       	push	r10
      f4:	bf 92       	push	r11
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	78 2e       	mov	r7, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     108:	c6 2e       	mov	r12, r22
     10a:	d1 2c       	mov	r13, r1
     10c:	1c 14       	cp	r1, r12
     10e:	1d 04       	cpc	r1, r13
     110:	34 f5       	brge	.+76     	; 0x15e <avg_read_adc_channel+0x72>
     112:	c1 e0       	ldi	r28, 0x01	; 1
     114:	d0 e0       	ldi	r29, 0x00	; 0
     116:	81 2c       	mov	r8, r1
     118:	91 2c       	mov	r9, r1
     11a:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
     11c:	08 2f       	mov	r16, r24
     11e:	10 e0       	ldi	r17, 0x00	; 0
     120:	00 0f       	add	r16, r16
     122:	11 1f       	adc	r17, r17
     124:	04 57       	subi	r16, 0x74	; 116
     126:	1e 4f       	sbci	r17, 0xFE	; 254
     128:	76 01       	movw	r14, r12
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	87 2d       	mov	r24, r7
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel]/i;
     130:	f8 01       	movw	r30, r16
     132:	80 81       	ld	r24, Z
     134:	91 81       	ldd	r25, Z+1	; 0x01
     136:	b7 01       	movw	r22, r14
     138:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__udivmodhi4>
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatunsisf>
     144:	9b 01       	movw	r18, r22
     146:	ac 01       	movw	r20, r24
     148:	c5 01       	movw	r24, r10
     14a:	b4 01       	movw	r22, r8
     14c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__addsf3>
     150:	4b 01       	movw	r8, r22
     152:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     154:	21 96       	adiw	r28, 0x01	; 1
     156:	cc 16       	cp	r12, r28
     158:	dd 06       	cpc	r13, r29
     15a:	3c f7       	brge	.-50     	; 0x12a <avg_read_adc_channel+0x3e>
     15c:	03 c0       	rjmp	.+6      	; 0x164 <avg_read_adc_channel+0x78>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     15e:	81 2c       	mov	r8, r1
     160:	91 2c       	mov	r9, r1
     162:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
	}
	
	adc_val[channel] = val;
     164:	c7 2d       	mov	r28, r7
     166:	d0 e0       	ldi	r29, 0x00	; 0
     168:	c5 01       	movw	r24, r10
     16a:	b4 01       	movw	r22, r8
     16c:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     170:	fe 01       	movw	r30, r28
     172:	ee 0f       	add	r30, r30
     174:	ff 1f       	adc	r31, r31
     176:	e4 57       	subi	r30, 0x74	; 116
     178:	fe 4f       	sbci	r31, 0xFE	; 254
     17a:	71 83       	std	Z+1, r23	; 0x01
     17c:	60 83       	st	Z, r22
	
	return adc_val[channel];
     17e:	80 81       	ld	r24, Z
     180:	91 81       	ldd	r25, Z+1	; 0x01
}
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	1f 91       	pop	r17
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	df 90       	pop	r13
     190:	cf 90       	pop	r12
     192:	bf 90       	pop	r11
     194:	af 90       	pop	r10
     196:	9f 90       	pop	r9
     198:	8f 90       	pop	r8
     19a:	7f 90       	pop	r7
     19c:	08 95       	ret

0000019e <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	2f 93       	push	r18
     1aa:	3f 93       	push	r19
     1ac:	4f 93       	push	r20
     1ae:	8f 93       	push	r24
     1b0:	9f 93       	push	r25
     1b2:	ef 93       	push	r30
     1b4:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1b6:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1ba:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1c2:	ef 70       	andi	r30, 0x0F	; 15
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
	unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	21 e0       	ldi	r18, 0x01	; 1
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	81 11       	cpse	r24, r1
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__vector_21+0x34>
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	ee 0f       	add	r30, r30
     1d4:	ff 1f       	adc	r31, r31
     1d6:	e4 57       	subi	r30, 0x74	; 116
     1d8:	fe 4f       	sbci	r31, 0xFE	; 254
     1da:	31 83       	std	Z+1, r19	; 0x01
     1dc:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1de:	20 81       	ld	r18, Z
     1e0:	31 81       	ldd	r19, Z+1	; 0x01
     1e2:	32 2f       	mov	r19, r18
     1e4:	22 27       	eor	r18, r18
     1e6:	31 83       	std	Z+1, r19	; 0x01
     1e8:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	98 2f       	mov	r25, r24
     1ee:	88 27       	eor	r24, r24
     1f0:	84 0f       	add	r24, r20
     1f2:	91 1d       	adc	r25, r1
     1f4:	91 83       	std	Z+1, r25	; 0x01
     1f6:	80 83       	st	Z, r24
     1f8:	ff 91       	pop	r31
     1fa:	ef 91       	pop	r30
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	4f 91       	pop	r20
     202:	3f 91       	pop	r19
     204:	2f 91       	pop	r18
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <update_current>:
int v_thresh = 25000;
int power_thresh = 10000;

void update_current()
{
	current = avg_read_adc_channel(0, 10);		//0-2A	Least count = 1.95mv
     210:	6a e0       	ldi	r22, 0x0A	; 10
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     218:	bc 01       	movw	r22, r24
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatunsisf>
	current = current*1.953 + 0.3 + offset;		//1.953*(1.0228, 9.57, 1.1054, 1.016,1.0570)
     222:	27 ee       	ldi	r18, 0xE7	; 231
     224:	3b ef       	ldi	r19, 0xFB	; 251
     226:	49 ef       	ldi	r20, 0xF9	; 249
     228:	5f e3       	ldi	r21, 0x3F	; 63
     22a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__mulsf3>
     22e:	2a e9       	ldi	r18, 0x9A	; 154
     230:	39 e9       	ldi	r19, 0x99	; 153
     232:	49 e9       	ldi	r20, 0x99	; 153
     234:	5e e3       	ldi	r21, 0x3E	; 62
     236:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__addsf3>
     23a:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <offset>
     23e:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <offset+0x1>
     242:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <offset+0x2>
     246:	50 91 6e 01 	lds	r21, 0x016E	; 0x80016e <offset+0x3>
     24a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__addsf3>
     24e:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <current>
     252:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <current+0x1>
     256:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <current+0x2>
     25a:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <current+0x3>
     25e:	08 95       	ret

00000260 <update_voltage>:
}

void update_voltage()
{
	voltage = avg_read_adc_channel(1, 10);		//0-30V	Least count = 29.29mv
     260:	6a e0       	ldi	r22, 0x0A	; 10
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     268:	bc 01       	movw	r22, r24
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatunsisf>
	voltage = voltage*29.29;	
     272:	2c ee       	ldi	r18, 0xEC	; 236
     274:	31 e5       	ldi	r19, 0x51	; 81
     276:	4a ee       	ldi	r20, 0xEA	; 234
     278:	51 e4       	ldi	r21, 0x41	; 65
     27a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__mulsf3>
     27e:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <voltage>
     282:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <voltage+0x1>
     286:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <voltage+0x2>
     28a:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <voltage+0x3>
     28e:	08 95       	ret

00000290 <update_power>:
}

void update_power()
{
	power = voltage*current/1000;
     290:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <current>
     294:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <current+0x1>
     298:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <current+0x2>
     29c:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <current+0x3>
     2a0:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <voltage>
     2a4:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <voltage+0x1>
     2a8:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <voltage+0x2>
     2ac:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <voltage+0x3>
     2b0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__mulsf3>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	4a e7       	ldi	r20, 0x7A	; 122
     2ba:	54 e4       	ldi	r21, 0x44	; 68
     2bc:	0e 94 16 07 	call	0xe2c	; 0xe2c <__divsf3>
     2c0:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <power>
     2c4:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <power+0x1>
     2c8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <power+0x2>
     2cc:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <power+0x3>
     2d0:	08 95       	ret

000002d2 <update_gate_voltage>:
}

void update_gate_voltage()
{
	gate_voltage = avg_read_adc_channel(2, 10)*7.5;		//0-7.68V	
     2d2:	6a e0       	ldi	r22, 0x0A	; 10
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     2da:	bc 01       	movw	r22, r24
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatunsisf>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 ef       	ldi	r20, 0xF0	; 240
     2ea:	50 e4       	ldi	r21, 0x40	; 64
     2ec:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__mulsf3>
     2f0:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <gate_voltage>
     2f4:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <gate_voltage+0x1>
     2f8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <gate_voltage+0x2>
     2fc:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <gate_voltage+0x3>
     300:	08 95       	ret

00000302 <print_current>:
}

void print_current(char row, char col)
{
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	c8 2f       	mov	r28, r24
     30c:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,current,4, "mA");					//Least count = 1.95mA
     30e:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <current>
     312:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <current+0x1>
     316:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <current+0x2>
     31a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <current+0x3>
     31e:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     322:	06 e0       	ldi	r16, 0x06	; 6
     324:	11 e0       	ldi	r17, 0x01	; 1
     326:	24 e0       	ldi	r18, 0x04	; 4
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	ab 01       	movw	r20, r22
     32c:	6d 2f       	mov	r22, r29
     32e:	8c 2f       	mov	r24, r28
     330:	0e 94 95 03 	call	0x72a	; 0x72a <lcd_print2>
	//lcd_string2(row,col+4,"mA  ");
}
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	08 95       	ret

0000033e <print_voltage>:

void print_voltage(char row, char col)
{
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	c8 2f       	mov	r28, r24
     348:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,voltage,5, "mV");					//Least count = 29.29mv
     34a:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <voltage>
     34e:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <voltage+0x1>
     352:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <voltage+0x2>
     356:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <voltage+0x3>
     35a:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     35e:	09 e0       	ldi	r16, 0x09	; 9
     360:	11 e0       	ldi	r17, 0x01	; 1
     362:	25 e0       	ldi	r18, 0x05	; 5
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	ab 01       	movw	r20, r22
     368:	6d 2f       	mov	r22, r29
     36a:	8c 2f       	mov	r24, r28
     36c:	0e 94 95 03 	call	0x72a	; 0x72a <lcd_print2>
	//lcd_string2(row,col+5,"mV");
}
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	08 95       	ret

0000037a <print_power>:

void print_power(char row, char col)
{
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	c8 2f       	mov	r28, r24
     384:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,power,5, "mW");
     386:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <power>
     38a:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <power+0x1>
     38e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <power+0x2>
     392:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <power+0x3>
     396:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     39a:	0c e0       	ldi	r16, 0x0C	; 12
     39c:	11 e0       	ldi	r17, 0x01	; 1
     39e:	25 e0       	ldi	r18, 0x05	; 5
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	ab 01       	movw	r20, r22
     3a4:	6d 2f       	mov	r22, r29
     3a6:	8c 2f       	mov	r24, r28
     3a8:	0e 94 95 03 	call	0x72a	; 0x72a <lcd_print2>
	//lcd_string2(row,col+5,"mW");
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <print_gate_voltage>:

void print_gate_voltage(char row, char col)
{
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	c8 2f       	mov	r28, r24
     3c0:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,gate_voltage,4, "mV");				//Least count = 7.5mv
     3c2:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <gate_voltage>
     3c6:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <gate_voltage+0x1>
     3ca:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <gate_voltage+0x2>
     3ce:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <gate_voltage+0x3>
     3d2:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     3d6:	09 e0       	ldi	r16, 0x09	; 9
     3d8:	11 e0       	ldi	r17, 0x01	; 1
     3da:	24 e0       	ldi	r18, 0x04	; 4
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	ab 01       	movw	r20, r22
     3e0:	6d 2f       	mov	r22, r29
     3e2:	8c 2f       	mov	r24, r28
     3e4:	0e 94 95 03 	call	0x72a	; 0x72a <lcd_print2>
	//lcd_string2(row,col+4,"mV");
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <check_thresholds>:

char check_thresholds()
{
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
	static char val = 0;
	
	if (current<current_thresh && voltage<v_thresh && power<power_thresh)
     406:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <current_thresh>
     40a:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <current_thresh+0x1>
     40e:	c0 90 77 01 	lds	r12, 0x0177	; 0x800177 <current>
     412:	d0 90 78 01 	lds	r13, 0x0178	; 0x800178 <current+0x1>
     416:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <current+0x2>
     41a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <current+0x3>
     41e:	be 01       	movw	r22, r28
     420:	0d 2e       	mov	r0, r29
     422:	00 0c       	add	r0, r0
     424:	88 0b       	sbc	r24, r24
     426:	99 0b       	sbc	r25, r25
     428:	0e 94 b9 07 	call	0xf72	; 0xf72 <__floatsisf>
     42c:	a7 01       	movw	r20, r14
     42e:	96 01       	movw	r18, r12
     430:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__gesf2>
     434:	18 16       	cp	r1, r24
     436:	0c f0       	brlt	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	4b c0       	rjmp	.+150    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     43a:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <v_thresh>
     43e:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <v_thresh+0x1>
     442:	b8 01       	movw	r22, r16
     444:	01 2e       	mov	r0, r17
     446:	00 0c       	add	r0, r0
     448:	88 0b       	sbc	r24, r24
     44a:	99 0b       	sbc	r25, r25
     44c:	0e 94 b9 07 	call	0xf72	; 0xf72 <__floatsisf>
     450:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <voltage>
     454:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <voltage+0x1>
     458:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <voltage+0x2>
     45c:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <voltage+0x3>
     460:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__gesf2>
     464:	18 16       	cp	r1, r24
     466:	a4 f5       	brge	.+104    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     468:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_start>
     46c:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_start+0x1>
     470:	b5 01       	movw	r22, r10
     472:	0b 2c       	mov	r0, r11
     474:	00 0c       	add	r0, r0
     476:	88 0b       	sbc	r24, r24
     478:	99 0b       	sbc	r25, r25
     47a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__floatsisf>
     47e:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <power>
     482:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <power+0x1>
     486:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <power+0x2>
     48a:	50 91 76 01 	lds	r21, 0x0176	; 0x800176 <power+0x3>
     48e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__gesf2>
     492:	18 16       	cp	r1, r24
     494:	ec f4       	brge	.+58     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	{
		if (val == 1)
     496:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	09 f0       	breq	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49e:	79 c0       	rjmp	.+242    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		{
			power_thresh += 500;
     4a0:	8c e0       	ldi	r24, 0x0C	; 12
     4a2:	a8 1a       	sub	r10, r24
     4a4:	8e ef       	ldi	r24, 0xFE	; 254
     4a6:	b8 0a       	sbc	r11, r24
     4a8:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
     4ac:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
			v_thresh += 2000;
     4b0:	00 53       	subi	r16, 0x30	; 48
     4b2:	18 4f       	sbci	r17, 0xF8	; 248
     4b4:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <v_thresh+0x1>
     4b8:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <v_thresh>
			current_thresh += 100;
     4bc:	cc 59       	subi	r28, 0x9C	; 156
     4be:	df 4f       	sbci	r29, 0xFF	; 255
     4c0:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     4c4:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 0;
     4c8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__data_end>
		}
		
		return 0;	//All okay
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	68 c0       	rjmp	.+208    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
	}
	
	else
	{	
		if (val == 0)
     4d0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     4d4:	81 11       	cpse	r24, r1
     4d6:	1d c0       	rjmp	.+58     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
		{
			power_thresh -= 500;
     4d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     4e0:	84 5f       	subi	r24, 0xF4	; 244
     4e2:	91 40       	sbci	r25, 0x01	; 1
     4e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     4e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			v_thresh -= 2000;
     4ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <v_thresh>
     4f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <v_thresh+0x1>
     4f4:	80 5d       	subi	r24, 0xD0	; 208
     4f6:	97 40       	sbci	r25, 0x07	; 7
     4f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <v_thresh+0x1>
     4fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <v_thresh>
			current_thresh -= 100;
     500:	c4 56       	subi	r28, 0x64	; 100
     502:	d1 09       	sbc	r29, r1
     504:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     508:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 1;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
		}
		
		if (power>power_thresh)
     512:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     516:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     51a:	07 2e       	mov	r0, r23
     51c:	00 0c       	add	r0, r0
     51e:	88 0b       	sbc	r24, r24
     520:	99 0b       	sbc	r25, r25
     522:	0e 94 b9 07 	call	0xf72	; 0xf72 <__floatsisf>
     526:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <power>
     52a:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <power+0x1>
     52e:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <power+0x2>
     532:	50 91 76 01 	lds	r21, 0x0176	; 0x800176 <power+0x3>
     536:	0e 94 11 07 	call	0xe22	; 0xe22 <__cmpsf2>
     53a:	88 23       	and	r24, r24
     53c:	64 f1       	brlt	.+88     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
			return 1;
	
		else if (voltage>v_thresh)
     53e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <v_thresh>
     542:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <v_thresh+0x1>
     546:	07 2e       	mov	r0, r23
     548:	00 0c       	add	r0, r0
     54a:	88 0b       	sbc	r24, r24
     54c:	99 0b       	sbc	r25, r25
     54e:	0e 94 b9 07 	call	0xf72	; 0xf72 <__floatsisf>
     552:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <voltage>
     556:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <voltage+0x1>
     55a:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <voltage+0x2>
     55e:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <voltage+0x3>
     562:	0e 94 11 07 	call	0xe22	; 0xe22 <__cmpsf2>
     566:	88 23       	and	r24, r24
     568:	c4 f0       	brlt	.+48     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			return 2;

		else if (current>current_thresh)	
     56a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <current_thresh>
     56e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <current_thresh+0x1>
     572:	07 2e       	mov	r0, r23
     574:	00 0c       	add	r0, r0
     576:	88 0b       	sbc	r24, r24
     578:	99 0b       	sbc	r25, r25
     57a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__floatsisf>
     57e:	9b 01       	movw	r18, r22
     580:	ac 01       	movw	r20, r24
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__gesf2>
     58a:	18 16       	cp	r1, r24
     58c:	44 f0       	brlt	.+16     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			return 3;
	
		else
			return 4;	//Error
     58e:	84 e0       	ldi	r24, 0x04	; 4
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			v_thresh += 2000;
			current_thresh += 100;
			val = 0;
		}
		
		return 0;	//All okay
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			current_thresh -= 100;
			val = 1;
		}
		
		if (power>power_thresh)
			return 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
	
		else if (voltage>v_thresh)
			return 2;
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>

		else if (current>current_thresh)	
			return 3;
     59e:	83 e0       	ldi	r24, 0x03	; 3
	
		else
			return 4;	//Error
	}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	08 95       	ret

000005b6 <Bit_Reverse>:
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
     5b6:	98 2f       	mov	r25, r24
     5b8:	88 1f       	adc	r24, r24
     5ba:	88 27       	eor	r24, r24
     5bc:	88 1f       	adc	r24, r24
     5be:	96 fd       	sbrc	r25, 6
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <Bit_Reverse+0x10>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <Bit_Reverse+0x12>
     5c6:	22 e0       	ldi	r18, 0x02	; 2
     5c8:	82 2b       	or	r24, r18
     5ca:	95 fd       	sbrc	r25, 5
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <Bit_Reverse+0x1c>
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <Bit_Reverse+0x1e>
     5d2:	24 e0       	ldi	r18, 0x04	; 4
     5d4:	82 2b       	or	r24, r18
     5d6:	94 fd       	sbrc	r25, 4
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <Bit_Reverse+0x28>
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <Bit_Reverse+0x2a>
     5de:	28 e0       	ldi	r18, 0x08	; 8
     5e0:	82 2b       	or	r24, r18
     5e2:	93 fd       	sbrc	r25, 3
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <Bit_Reverse+0x34>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <Bit_Reverse+0x36>
     5ea:	20 e1       	ldi	r18, 0x10	; 16
     5ec:	82 2b       	or	r24, r18
     5ee:	92 fd       	sbrc	r25, 2
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <Bit_Reverse+0x40>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <Bit_Reverse+0x42>
     5f6:	20 e2       	ldi	r18, 0x20	; 32
     5f8:	82 2b       	or	r24, r18
     5fa:	91 fd       	sbrc	r25, 1
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <Bit_Reverse+0x4c>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	01 c0       	rjmp	.+2      	; 0x604 <Bit_Reverse+0x4e>
     602:	20 e4       	ldi	r18, 0x40	; 64
     604:	82 2b       	or	r24, r18
     606:	90 fd       	sbrc	r25, 0
     608:	02 c0       	rjmp	.+4      	; 0x60e <Bit_Reverse+0x58>
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	01 c0       	rjmp	.+2      	; 0x610 <Bit_Reverse+0x5a>
     60e:	90 e8       	ldi	r25, 0x80	; 128
     610:	89 2b       	or	r24, r25
     612:	08 95       	ret

00000614 <lcd_wr_command>:
     614:	cf 93       	push	r28
     616:	c8 2f       	mov	r28, r24
     618:	80 7f       	andi	r24, 0xF0	; 240
     61a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Bit_Reverse>
     61e:	88 0f       	add	r24, r24
     620:	88 0f       	add	r24, r24
     622:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <temp.1660>
     626:	9b b1       	in	r25, 0x0b	; 11
     628:	93 7c       	andi	r25, 0xC3	; 195
     62a:	9b b9       	out	0x0b, r25	; 11
     62c:	8b b1       	in	r24, 0x0b	; 11
     62e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <temp.1660>
     632:	98 2b       	or	r25, r24
     634:	9b b9       	out	0x0b, r25	; 11
     636:	5f 98       	cbi	0x0b, 7	; 11
     638:	5e 9a       	sbi	0x0b, 6	; 11
     63a:	8f e1       	ldi	r24, 0x1F	; 31
     63c:	9e e4       	ldi	r25, 0x4E	; 78
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <lcd_wr_command+0x2a>
     642:	00 c0       	rjmp	.+0      	; 0x644 <lcd_wr_command+0x30>
     644:	00 00       	nop
     646:	5e 98       	cbi	0x0b, 6	; 11
     648:	8c 2f       	mov	r24, r28
     64a:	82 95       	swap	r24
     64c:	80 7f       	andi	r24, 0xF0	; 240
     64e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Bit_Reverse>
     652:	9b b1       	in	r25, 0x0b	; 11
     654:	93 7c       	andi	r25, 0xC3	; 195
     656:	9b b9       	out	0x0b, r25	; 11
     658:	9b b1       	in	r25, 0x0b	; 11
     65a:	88 0f       	add	r24, r24
     65c:	88 0f       	add	r24, r24
     65e:	98 2b       	or	r25, r24
     660:	9b b9       	out	0x0b, r25	; 11
     662:	5f 98       	cbi	0x0b, 7	; 11
     664:	5e 9a       	sbi	0x0b, 6	; 11
     666:	8f e1       	ldi	r24, 0x1F	; 31
     668:	9e e4       	ldi	r25, 0x4E	; 78
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <lcd_wr_command+0x56>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <lcd_wr_command+0x5c>
     670:	00 00       	nop
     672:	5e 98       	cbi	0x0b, 6	; 11
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <lcd_wr_char>:
     678:	cf 93       	push	r28
     67a:	c8 2f       	mov	r28, r24
     67c:	80 7f       	andi	r24, 0xF0	; 240
     67e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Bit_Reverse>
     682:	9b b1       	in	r25, 0x0b	; 11
     684:	93 7c       	andi	r25, 0xC3	; 195
     686:	9b b9       	out	0x0b, r25	; 11
     688:	9b b1       	in	r25, 0x0b	; 11
     68a:	88 0f       	add	r24, r24
     68c:	88 0f       	add	r24, r24
     68e:	98 2b       	or	r25, r24
     690:	9b b9       	out	0x0b, r25	; 11
     692:	5f 9a       	sbi	0x0b, 7	; 11
     694:	5e 9a       	sbi	0x0b, 6	; 11
     696:	8f e1       	ldi	r24, 0x1F	; 31
     698:	9e e4       	ldi	r25, 0x4E	; 78
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <lcd_wr_char+0x22>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <lcd_wr_char+0x28>
     6a0:	00 00       	nop
     6a2:	5e 98       	cbi	0x0b, 6	; 11
     6a4:	8c 2f       	mov	r24, r28
     6a6:	82 95       	swap	r24
     6a8:	80 7f       	andi	r24, 0xF0	; 240
     6aa:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Bit_Reverse>
     6ae:	9b b1       	in	r25, 0x0b	; 11
     6b0:	93 7c       	andi	r25, 0xC3	; 195
     6b2:	9b b9       	out	0x0b, r25	; 11
     6b4:	9b b1       	in	r25, 0x0b	; 11
     6b6:	88 0f       	add	r24, r24
     6b8:	88 0f       	add	r24, r24
     6ba:	98 2b       	or	r25, r24
     6bc:	9b b9       	out	0x0b, r25	; 11
     6be:	5f 9a       	sbi	0x0b, 7	; 11
     6c0:	5e 9a       	sbi	0x0b, 6	; 11
     6c2:	8f e1       	ldi	r24, 0x1F	; 31
     6c4:	9e e4       	ldi	r25, 0x4E	; 78
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <lcd_wr_char+0x4e>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <lcd_wr_char+0x54>
     6cc:	00 00       	nop
     6ce:	5e 98       	cbi	0x0b, 6	; 11
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <lcd_port_config>:
     6d4:	8a b1       	in	r24, 0x0a	; 10
     6d6:	8c 6f       	ori	r24, 0xFC	; 252
     6d8:	8a b9       	out	0x0a, r24	; 10
     6da:	8b b1       	in	r24, 0x0b	; 11
     6dc:	84 70       	andi	r24, 0x04	; 4
     6de:	8b b9       	out	0x0b, r24	; 11
     6e0:	08 95       	ret

000006e2 <lcd_home>:
     6e2:	80 e8       	ldi	r24, 0x80	; 128
     6e4:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
     6e8:	08 95       	ret

000006ea <lcd_cursor>:
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	19 f0       	breq	.+6      	; 0x6f4 <lcd_cursor+0xa>
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	31 f0       	breq	.+12     	; 0x6fe <lcd_cursor+0x14>
     6f2:	08 95       	ret
     6f4:	8f e7       	ldi	r24, 0x7F	; 127
     6f6:	86 0f       	add	r24, r22
     6f8:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
     6fc:	08 95       	ret
     6fe:	8f eb       	ldi	r24, 0xBF	; 191
     700:	86 0f       	add	r24, r22
     702:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
     706:	08 95       	ret

00000708 <lcd_string2>:
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ea 01       	movw	r28, r20
     70e:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_cursor>
     712:	88 81       	ld	r24, Y
     714:	88 23       	and	r24, r24
     716:	31 f0       	breq	.+12     	; 0x724 <lcd_string2+0x1c>
     718:	21 96       	adiw	r28, 0x01	; 1
     71a:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
     71e:	89 91       	ld	r24, Y+
     720:	81 11       	cpse	r24, r1
     722:	fb cf       	rjmp	.-10     	; 0x71a <lcd_string2+0x12>
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <lcd_print2>:

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	6a 01       	movw	r12, r20
     73a:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     73c:	88 23       	and	r24, r24
     73e:	11 f0       	breq	.+4      	; 0x744 <lcd_print2+0x1a>
     740:	61 11       	cpse	r22, r1
     742:	03 c0       	rjmp	.+6      	; 0x74a <lcd_print2+0x20>
	{
		lcd_home();
     744:	0e 94 71 03 	call	0x6e2	; 0x6e2 <lcd_home>
     748:	02 c0       	rjmp	.+4      	; 0x74e <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     74a:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     74e:	25 e0       	ldi	r18, 0x05	; 5
     750:	e2 16       	cp	r14, r18
     752:	f1 04       	cpc	r15, r1
     754:	f1 f4       	brne	.+60     	; 0x792 <lcd_print2+0x68>
	{
		million=value/10000+48;
     756:	96 01       	movw	r18, r12
     758:	32 95       	swap	r19
     75a:	22 95       	swap	r18
     75c:	2f 70       	andi	r18, 0x0F	; 15
     75e:	23 27       	eor	r18, r19
     760:	3f 70       	andi	r19, 0x0F	; 15
     762:	23 27       	eor	r18, r19
     764:	a7 e4       	ldi	r26, 0x47	; 71
     766:	b3 e0       	ldi	r27, 0x03	; 3
     768:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     76c:	96 95       	lsr	r25
     76e:	87 95       	ror	r24
     770:	96 95       	lsr	r25
     772:	87 95       	ror	r24
     774:	96 95       	lsr	r25
     776:	87 95       	ror	r24
     778:	c0 96       	adiw	r24, 0x30	; 48
     77a:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <million+0x1>
     77e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <million>
		if(million != '0')
     782:	80 33       	cpi	r24, 0x30	; 48
     784:	91 05       	cpc	r25, r1
     786:	09 f4       	brne	.+2      	; 0x78a <lcd_print2+0x60>
     788:	76 c0       	rjmp	.+236    	; 0x876 <lcd_print2+0x14c>
		{
			lcd_wr_char(million);
     78a:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
			count++;	
     78e:	c1 e0       	ldi	r28, 0x01	; 1
     790:	73 c0       	rjmp	.+230    	; 0x878 <lcd_print2+0x14e>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     792:	34 e0       	ldi	r19, 0x04	; 4
     794:	e3 16       	cp	r14, r19
     796:	f1 04       	cpc	r15, r1
     798:	09 f0       	breq	.+2      	; 0x79c <lcd_print2+0x72>
     79a:	dc c0       	rjmp	.+440    	; 0x954 <__stack+0x55>
     79c:	21 c1       	rjmp	.+578    	; 0x9e0 <__stack+0xe1>
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)
     79e:	cc 23       	and	r28, r28
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <lcd_print2+0x7a>
     7a2:	a4 c0       	rjmp	.+328    	; 0x8ec <lcd_print2+0x1c2>
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <lcd_print2+0x7e>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7a6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)
		{
			lcd_wr_char(thousand);
     7a8:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
			count++;
     7ac:	cf 5f       	subi	r28, 0xFF	; 255
     7ae:	9e c0       	rjmp	.+316    	; 0x8ec <lcd_print2+0x1c2>
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     7b0:	cc 23       	and	r28, r28
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <lcd_print2+0x8c>
     7b4:	d5 c0       	rjmp	.+426    	; 0x960 <__stack+0x61>
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <lcd_print2+0x90>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7b8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     7ba:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
			count++;
     7be:	cf 5f       	subi	r28, 0xFF	; 255
     7c0:	cf c0       	rjmp	.+414    	; 0x960 <__stack+0x61>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	e8 16       	cp	r14, r24
     7c6:	f1 04       	cpc	r15, r1
     7c8:	09 f0       	breq	.+2      	; 0x7cc <lcd_print2+0xa2>
     7ca:	fc c0       	rjmp	.+504    	; 0x9c4 <__stack+0xc5>
     7cc:	79 c1       	rjmp	.+754    	; 0xac0 <__stack+0x1c1>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     7ce:	cc 23       	and	r28, r28
     7d0:	39 f0       	breq	.+14     	; 0x7e0 <lcd_print2+0xb6>
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <lcd_print2+0xac>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7d4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     7d6:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
			count++;
     7da:	cf 5f       	subi	r28, 0xFF	; 255
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <lcd_print2+0xb6>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7de:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     7e0:	96 01       	movw	r18, r12
     7e2:	ad ec       	ldi	r26, 0xCD	; 205
     7e4:	bc ec       	ldi	r27, 0xCC	; 204
     7e6:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     7ea:	96 95       	lsr	r25
     7ec:	87 95       	ror	r24
     7ee:	96 95       	lsr	r25
     7f0:	87 95       	ror	r24
     7f2:	96 95       	lsr	r25
     7f4:	87 95       	ror	r24
     7f6:	9c 01       	movw	r18, r24
     7f8:	22 0f       	add	r18, r18
     7fa:	33 1f       	adc	r19, r19
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	82 0f       	add	r24, r18
     80a:	93 1f       	adc	r25, r19
     80c:	f6 01       	movw	r30, r12
     80e:	e8 1b       	sub	r30, r24
     810:	f9 0b       	sbc	r31, r25
     812:	cf 01       	movw	r24, r30
     814:	c0 96       	adiw	r24, 0x30	; 48
     816:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <unit+0x1>
     81a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <unit>
		lcd_wr_char(unit);
     81e:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
		count++;
     822:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     824:	f6 e0       	ldi	r31, 0x06	; 6
     826:	ef 16       	cp	r14, r31
     828:	f1 04       	cpc	r15, r1
     82a:	1c f0       	brlt	.+6      	; 0x832 <lcd_print2+0x108>
	{
		lcd_wr_char('E');
     82c:	85 e4       	ldi	r24, 0x45	; 69
     82e:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
	}
	
	while(*str != '\0')
     832:	f8 01       	movw	r30, r16
     834:	80 81       	ld	r24, Z
     836:	88 23       	and	r24, r24
     838:	09 f4       	brne	.+2      	; 0x83c <lcd_print2+0x112>
     83a:	cb c0       	rjmp	.+406    	; 0x9d2 <__stack+0xd3>
     83c:	0f 5f       	subi	r16, 0xFF	; 255
     83e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     840:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
		count++;
     844:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     846:	ff ef       	ldi	r31, 0xFF	; 255
     848:	ef 1a       	sub	r14, r31
     84a:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     84c:	f8 01       	movw	r30, r16
     84e:	81 91       	ld	r24, Z+
     850:	8f 01       	movw	r16, r30
     852:	81 11       	cpse	r24, r1
     854:	f5 cf       	rjmp	.-22     	; 0x840 <lcd_print2+0x116>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     856:	8c 2f       	mov	r24, r28
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	8e 15       	cp	r24, r14
     85c:	9f 05       	cpc	r25, r15
     85e:	0c f0       	brlt	.+2      	; 0x862 <lcd_print2+0x138>
     860:	62 c1       	rjmp	.+708    	; 0xb26 <__stack+0x227>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_wr_char>
			count++;
     868:	cf 5f       	subi	r28, 0xFF	; 255
		str++;		
	}
	
	if(count<digits)
	{
		while(count != digits)
     86a:	8c 2f       	mov	r24, r28
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	8e 15       	cp	r24, r14
     870:	9f 05       	cpc	r25, r15
     872:	b9 f7       	brne	.-18     	; 0x862 <lcd_print2+0x138>
     874:	58 c1       	rjmp	.+688    	; 0xb26 <__stack+0x227>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     876:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     878:	96 01       	movw	r18, r12
     87a:	36 95       	lsr	r19
     87c:	27 95       	ror	r18
     87e:	36 95       	lsr	r19
     880:	27 95       	ror	r18
     882:	36 95       	lsr	r19
     884:	27 95       	ror	r18
     886:	a5 ec       	ldi	r26, 0xC5	; 197
     888:	b0 e2       	ldi	r27, 0x20	; 32
     88a:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     88e:	ac 01       	movw	r20, r24
     890:	52 95       	swap	r21
     892:	42 95       	swap	r20
     894:	4f 70       	andi	r20, 0x0F	; 15
     896:	45 27       	eor	r20, r21
     898:	5f 70       	andi	r21, 0x0F	; 15
     89a:	45 27       	eor	r20, r21
     89c:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     8a0:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		thousand = temp%10 + 48;
     8a4:	9a 01       	movw	r18, r20
     8a6:	ad ec       	ldi	r26, 0xCD	; 205
     8a8:	bc ec       	ldi	r27, 0xCC	; 204
     8aa:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	9c 01       	movw	r18, r24
     8bc:	22 0f       	add	r18, r18
     8be:	33 1f       	adc	r19, r19
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	82 0f       	add	r24, r18
     8ce:	93 1f       	adc	r25, r19
     8d0:	9a 01       	movw	r18, r20
     8d2:	28 1b       	sub	r18, r24
     8d4:	39 0b       	sbc	r19, r25
     8d6:	c9 01       	movw	r24, r18
     8d8:	c0 96       	adiw	r24, 0x30	; 48
     8da:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <thousand+0x1>
     8de:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <thousand>
		if(thousand != '0' || count != 0)
     8e2:	80 33       	cpi	r24, 0x30	; 48
     8e4:	91 05       	cpc	r25, r1
     8e6:	09 f0       	breq	.+2      	; 0x8ea <lcd_print2+0x1c0>
     8e8:	5f cf       	rjmp	.-322    	; 0x7a8 <lcd_print2+0x7e>
     8ea:	59 cf       	rjmp	.-334    	; 0x79e <lcd_print2+0x74>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     8ec:	96 01       	movw	r18, r12
     8ee:	36 95       	lsr	r19
     8f0:	27 95       	ror	r18
     8f2:	36 95       	lsr	r19
     8f4:	27 95       	ror	r18
     8f6:	ab e7       	ldi	r26, 0x7B	; 123
     8f8:	b4 e1       	ldi	r27, 0x14	; 20
     8fa:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     8fe:	ac 01       	movw	r20, r24
     900:	56 95       	lsr	r21
     902:	47 95       	ror	r20
     904:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     908:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		hundred = temp%10 + 48;
     90c:	9a 01       	movw	r18, r20
     90e:	ad ec       	ldi	r26, 0xCD	; 205
     910:	bc ec       	ldi	r27, 0xCC	; 204
     912:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	96 95       	lsr	r25
     91c:	87 95       	ror	r24
     91e:	96 95       	lsr	r25
     920:	87 95       	ror	r24
     922:	9c 01       	movw	r18, r24
     924:	22 0f       	add	r18, r18
     926:	33 1f       	adc	r19, r19
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	82 0f       	add	r24, r18
     936:	93 1f       	adc	r25, r19
     938:	fa 01       	movw	r30, r20
     93a:	e8 1b       	sub	r30, r24
     93c:	f9 0b       	sbc	r31, r25
     93e:	cf 01       	movw	r24, r30
     940:	c0 96       	adiw	r24, 0x30	; 48
     942:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <hundred+0x1>
     946:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hundred>
		if(hundred != '0' || count != 0)
     94a:	80 33       	cpi	r24, 0x30	; 48
     94c:	91 05       	cpc	r25, r1
     94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0x53>
     950:	34 cf       	rjmp	.-408    	; 0x7ba <lcd_print2+0x90>
     952:	2e cf       	rjmp	.-420    	; 0x7b0 <lcd_print2+0x86>
			lcd_wr_char(thousand);
			count++;
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     954:	f3 e0       	ldi	r31, 0x03	; 3
     956:	ef 16       	cp	r14, r31
     958:	f1 04       	cpc	r15, r1
     95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x5f>
     95c:	32 cf       	rjmp	.-412    	; 0x7c2 <lcd_print2+0x98>
     95e:	7b c0       	rjmp	.+246    	; 0xa56 <__stack+0x157>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     960:	96 01       	movw	r18, r12
     962:	ad ec       	ldi	r26, 0xCD	; 205
     964:	bc ec       	ldi	r27, 0xCC	; 204
     966:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     96a:	ac 01       	movw	r20, r24
     96c:	56 95       	lsr	r21
     96e:	47 95       	ror	r20
     970:	56 95       	lsr	r21
     972:	47 95       	ror	r20
     974:	56 95       	lsr	r21
     976:	47 95       	ror	r20
     978:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     97c:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		tens = temp%10 + 48;
     980:	9a 01       	movw	r18, r20
     982:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     986:	96 95       	lsr	r25
     988:	87 95       	ror	r24
     98a:	96 95       	lsr	r25
     98c:	87 95       	ror	r24
     98e:	96 95       	lsr	r25
     990:	87 95       	ror	r24
     992:	9c 01       	movw	r18, r24
     994:	22 0f       	add	r18, r18
     996:	33 1f       	adc	r19, r19
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	82 0f       	add	r24, r18
     9a6:	93 1f       	adc	r25, r19
     9a8:	9a 01       	movw	r18, r20
     9aa:	28 1b       	sub	r18, r24
     9ac:	39 0b       	sbc	r19, r25
     9ae:	c9 01       	movw	r24, r18
     9b0:	c0 96       	adiw	r24, 0x30	; 48
     9b2:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <tens+0x1>
     9b6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tens>
		if(tens != '0' || count != 0)
     9ba:	80 33       	cpi	r24, 0x30	; 48
     9bc:	91 05       	cpc	r25, r1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	0a cf       	rjmp	.-492    	; 0x7d6 <lcd_print2+0xac>
     9c2:	05 cf       	rjmp	.-502    	; 0x7ce <lcd_print2+0xa4>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     9c4:	31 e0       	ldi	r19, 0x01	; 1
     9c6:	e3 16       	cp	r14, r19
     9c8:	f1 04       	cpc	r15, r1
     9ca:	09 f4       	brne	.+2      	; 0x9ce <__stack+0xcf>
     9cc:	08 cf       	rjmp	.-496    	; 0x7de <lcd_print2+0xb4>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     9ce:	c0 e0       	ldi	r28, 0x00	; 0
     9d0:	29 cf       	rjmp	.-430    	; 0x824 <lcd_print2+0xfa>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     9d2:	8c 2f       	mov	r24, r28
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	8e 15       	cp	r24, r14
     9d8:	9f 05       	cpc	r25, r15
     9da:	0c f4       	brge	.+2      	; 0x9de <__stack+0xdf>
     9dc:	42 cf       	rjmp	.-380    	; 0x862 <lcd_print2+0x138>
     9de:	a3 c0       	rjmp	.+326    	; 0xb26 <__stack+0x227>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     9e0:	96 01       	movw	r18, r12
     9e2:	36 95       	lsr	r19
     9e4:	27 95       	ror	r18
     9e6:	36 95       	lsr	r19
     9e8:	27 95       	ror	r18
     9ea:	36 95       	lsr	r19
     9ec:	27 95       	ror	r18
     9ee:	a5 ec       	ldi	r26, 0xC5	; 197
     9f0:	b0 e2       	ldi	r27, 0x20	; 32
     9f2:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     9f6:	ac 01       	movw	r20, r24
     9f8:	52 95       	swap	r21
     9fa:	42 95       	swap	r20
     9fc:	4f 70       	andi	r20, 0x0F	; 15
     9fe:	45 27       	eor	r20, r21
     a00:	5f 70       	andi	r21, 0x0F	; 15
     a02:	45 27       	eor	r20, r21
     a04:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     a08:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		thousand = temp%10 + 48;
     a0c:	9a 01       	movw	r18, r20
     a0e:	ad ec       	ldi	r26, 0xCD	; 205
     a10:	bc ec       	ldi	r27, 0xCC	; 204
     a12:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     a16:	96 95       	lsr	r25
     a18:	87 95       	ror	r24
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	9c 01       	movw	r18, r24
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	82 0f       	add	r24, r18
     a36:	93 1f       	adc	r25, r19
     a38:	fa 01       	movw	r30, r20
     a3a:	e8 1b       	sub	r30, r24
     a3c:	f9 0b       	sbc	r31, r25
     a3e:	cf 01       	movw	r24, r30
     a40:	c0 96       	adiw	r24, 0x30	; 48
     a42:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <thousand+0x1>
     a46:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <thousand>
		if(thousand != '0' || count != 0)
     a4a:	80 33       	cpi	r24, 0x30	; 48
     a4c:	91 05       	cpc	r25, r1
     a4e:	09 f0       	breq	.+2      	; 0xa52 <__stack+0x153>
     a50:	aa ce       	rjmp	.-684    	; 0x7a6 <lcd_print2+0x7c>
     a52:	c0 e0       	ldi	r28, 0x00	; 0
     a54:	4b cf       	rjmp	.-362    	; 0x8ec <lcd_print2+0x1c2>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     a56:	96 01       	movw	r18, r12
     a58:	36 95       	lsr	r19
     a5a:	27 95       	ror	r18
     a5c:	36 95       	lsr	r19
     a5e:	27 95       	ror	r18
     a60:	ab e7       	ldi	r26, 0x7B	; 123
     a62:	b4 e1       	ldi	r27, 0x14	; 20
     a64:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     a68:	ac 01       	movw	r20, r24
     a6a:	56 95       	lsr	r21
     a6c:	47 95       	ror	r20
     a6e:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     a72:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		hundred = temp%10 + 48;
     a76:	9a 01       	movw	r18, r20
     a78:	ad ec       	ldi	r26, 0xCD	; 205
     a7a:	bc ec       	ldi	r27, 0xCC	; 204
     a7c:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     a80:	96 95       	lsr	r25
     a82:	87 95       	ror	r24
     a84:	96 95       	lsr	r25
     a86:	87 95       	ror	r24
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	9c 01       	movw	r18, r24
     a8e:	22 0f       	add	r18, r18
     a90:	33 1f       	adc	r19, r19
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	82 0f       	add	r24, r18
     aa0:	93 1f       	adc	r25, r19
     aa2:	9a 01       	movw	r18, r20
     aa4:	28 1b       	sub	r18, r24
     aa6:	39 0b       	sbc	r19, r25
     aa8:	c9 01       	movw	r24, r18
     aaa:	c0 96       	adiw	r24, 0x30	; 48
     aac:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <hundred+0x1>
     ab0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hundred>
		if(hundred != '0' || count != 0)
     ab4:	80 33       	cpi	r24, 0x30	; 48
     ab6:	91 05       	cpc	r25, r1
     ab8:	09 f0       	breq	.+2      	; 0xabc <__stack+0x1bd>
     aba:	7e ce       	rjmp	.-772    	; 0x7b8 <lcd_print2+0x8e>
     abc:	c0 e0       	ldi	r28, 0x00	; 0
     abe:	50 cf       	rjmp	.-352    	; 0x960 <__stack+0x61>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     ac0:	96 01       	movw	r18, r12
     ac2:	ad ec       	ldi	r26, 0xCD	; 205
     ac4:	bc ec       	ldi	r27, 0xCC	; 204
     ac6:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     aca:	ac 01       	movw	r20, r24
     acc:	56 95       	lsr	r21
     ace:	47 95       	ror	r20
     ad0:	56 95       	lsr	r21
     ad2:	47 95       	ror	r20
     ad4:	56 95       	lsr	r21
     ad6:	47 95       	ror	r20
     ad8:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     adc:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		tens = temp%10 + 48;
     ae0:	9a 01       	movw	r18, r20
     ae2:	0e 94 ef 08 	call	0x11de	; 0x11de <__umulhisi3>
     ae6:	96 95       	lsr	r25
     ae8:	87 95       	ror	r24
     aea:	96 95       	lsr	r25
     aec:	87 95       	ror	r24
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	9c 01       	movw	r18, r24
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	fa 01       	movw	r30, r20
     b0a:	e8 1b       	sub	r30, r24
     b0c:	f9 0b       	sbc	r31, r25
     b0e:	cf 01       	movw	r24, r30
     b10:	c0 96       	adiw	r24, 0x30	; 48
     b12:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <tens+0x1>
     b16:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tens>
		if(tens != '0' || count != 0)
     b1a:	80 33       	cpi	r24, 0x30	; 48
     b1c:	91 05       	cpc	r25, r1
     b1e:	09 f0       	breq	.+2      	; 0xb22 <__stack+0x223>
     b20:	59 ce       	rjmp	.-846    	; 0x7d4 <lcd_print2+0xaa>
     b22:	c0 e0       	ldi	r28, 0x00	; 0
     b24:	5d ce       	rjmp	.-838    	; 0x7e0 <lcd_print2+0xb6>
		{
			lcd_wr_char(32);
			count++;
		}	
	}	
}
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	08 95       	ret

00000b36 <lcd_start>:
     b36:	8f e9       	ldi	r24, 0x9F	; 159
     b38:	9f e0       	ldi	r25, 0x0F	; 15
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <lcd_start+0x4>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <lcd_start+0xa>
     b40:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b42:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
     b44:	80 e3       	ldi	r24, 0x30	; 48
     b46:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     b48:	5e 9a       	sbi	0x0b, 6	; 11
     b4a:	ef e1       	ldi	r30, 0x1F	; 31
     b4c:	fe e4       	ldi	r31, 0x4E	; 78
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <lcd_start+0x18>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <lcd_start+0x1e>
     b54:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b56:	5e 98       	cbi	0x0b, 6	; 11
     b58:	ef e9       	ldi	r30, 0x9F	; 159
     b5a:	ff e0       	ldi	r31, 0x0F	; 15
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <lcd_start+0x26>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <lcd_start+0x2c>
     b62:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b64:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     b66:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     b68:	5e 9a       	sbi	0x0b, 6	; 11
     b6a:	ef e1       	ldi	r30, 0x1F	; 31
     b6c:	fe e4       	ldi	r31, 0x4E	; 78
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <lcd_start+0x38>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <lcd_start+0x3e>
     b74:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b76:	5e 98       	cbi	0x0b, 6	; 11
     b78:	ef e9       	ldi	r30, 0x9F	; 159
     b7a:	ff e0       	ldi	r31, 0x0F	; 15
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <lcd_start+0x46>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <lcd_start+0x4c>
     b82:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b84:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     b86:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     b88:	5e 9a       	sbi	0x0b, 6	; 11
     b8a:	8f e1       	ldi	r24, 0x1F	; 31
     b8c:	9e e4       	ldi	r25, 0x4E	; 78
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <lcd_start+0x58>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <lcd_start+0x5e>
     b94:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b96:	5e 98       	cbi	0x0b, 6	; 11
     b98:	ef e9       	ldi	r30, 0x9F	; 159
     b9a:	ff e0       	ldi	r31, 0x0F	; 15
     b9c:	31 97       	sbiw	r30, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <lcd_start+0x66>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <lcd_start+0x6c>
     ba2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     ba4:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
     ba6:	80 e1       	ldi	r24, 0x10	; 16
     ba8:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     baa:	5e 9a       	sbi	0x0b, 6	; 11
     bac:	8f e9       	ldi	r24, 0x9F	; 159
     bae:	9f e0       	ldi	r25, 0x0F	; 15
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <lcd_start+0x7a>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <lcd_start+0x80>
     bb6:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     bb8:	5e 98       	cbi	0x0b, 6	; 11
     bba:	ef e9       	ldi	r30, 0x9F	; 159
     bbc:	ff e0       	ldi	r31, 0x0F	; 15
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <lcd_start+0x88>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <lcd_start+0x8e>
     bc4:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     bc6:	88 e2       	ldi	r24, 0x28	; 40
     bc8:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
     bd2:	8c e0       	ldi	r24, 0x0C	; 12
     bd4:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
     bd8:	80 e8       	ldi	r24, 0x80	; 128
     bda:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
     bde:	08 95       	ret

00000be0 <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_wr_command>
     be6:	08 95       	ret

00000be8 <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
     be8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_port_config>
	adc_pin_config();
     bec:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
     bf0:	08 95       	ret

00000bf2 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
     bf2:	f8 94       	cli
	lcd_start();
     bf4:	0e 94 9b 05 	call	0xb36	; 0xb36 <lcd_start>
	adc_config();
     bf8:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
     bfc:	78 94       	sei
     bfe:	08 95       	ret

00000c00 <main>:
}

int main(void)
{
	port_config();
     c00:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <port_config>
	init_devices();
     c04:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <init_devices>
		
	lcd_string2(1, 7, "CCL");
     c08:	4f e0       	ldi	r20, 0x0F	; 15
     c0a:	51 e0       	ldi	r21, 0x01	; 1
     c0c:	67 e0       	ldi	r22, 0x07	; 7
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string2>
     c14:	2f ef       	ldi	r18, 0xFF	; 255
     c16:	85 ea       	ldi	r24, 0xA5	; 165
     c18:	9e e0       	ldi	r25, 0x0E	; 14
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	80 40       	sbci	r24, 0x00	; 0
     c1e:	90 40       	sbci	r25, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <main+0x1a>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <main+0x24>
     c24:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
     c26:	1d 9b       	sbis	0x03, 5	; 3
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <main+0x38>
	{
		lcd_string2(2,1,"Supply Connected");
     c2a:	43 e1       	ldi	r20, 0x13	; 19
     c2c:	51 e0       	ldi	r21, 0x01	; 1
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string2>
     c36:	12 c0       	rjmp	.+36     	; 0xc5c <main+0x5c>
	}
	
	else
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
     c38:	44 e2       	ldi	r20, 0x24	; 36
     c3a:	51 e0       	ldi	r21, 0x01	; 1
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string2>
		offset = 26.2;
     c44:	8a e9       	ldi	r24, 0x9A	; 154
     c46:	99 e9       	ldi	r25, 0x99	; 153
     c48:	a1 ed       	ldi	r26, 0xD1	; 209
     c4a:	b1 e4       	ldi	r27, 0x41	; 65
     c4c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <offset>
     c50:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <offset+0x1>
     c54:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <offset+0x2>
     c58:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <offset+0x3>
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	8b e4       	ldi	r24, 0x4B	; 75
     c60:	9d e1       	ldi	r25, 0x1D	; 29
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <main+0x62>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <main+0x6c>
     c6c:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
     c6e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <lcd_clear>
		print_gate_voltage(2,10);
	}
	else
	{
		lcd_clear();
		char flag = 0;
     c72:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(600);
	lcd_clear();
	
	while (1)
	{
		update_current();
     c74:	0e 94 08 01 	call	0x210	; 0x210 <update_current>
		update_voltage();
     c78:	0e 94 30 01 	call	0x260	; 0x260 <update_voltage>
		update_power();
     c7c:	0e 94 48 01 	call	0x290	; 0x290 <update_power>
		update_gate_voltage();
     c80:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_gate_voltage>
	
	if(check_thresholds()==0)	
     c84:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <check_thresholds>
     c88:	81 11       	cpse	r24, r1
     c8a:	11 c0       	rjmp	.+34     	; 0xcae <main+0xae>
	{	
		print_current(1,1);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	0e 94 81 01 	call	0x302	; 0x302 <print_current>
		print_voltage(1,10);
     c94:	6a e0       	ldi	r22, 0x0A	; 10
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 9f 01 	call	0x33e	; 0x33e <print_voltage>
		print_power(2,1);
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	0e 94 bd 01 	call	0x37a	; 0x37a <print_power>
		print_gate_voltage(2,10);
     ca4:	6a e0       	ldi	r22, 0x0A	; 10
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_gate_voltage>
     cac:	e3 cf       	rjmp	.-58     	; 0xc74 <main+0x74>
	}
	else
	{
		lcd_clear();
     cae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <lcd_clear>
		char flag = 0;
     cb2:	cd 2f       	mov	r28, r29
		while(check_thresholds())
     cb4:	42 c0       	rjmp	.+132    	; 0xd3a <main+0x13a>
		{	
			update_current();
     cb6:	0e 94 08 01 	call	0x210	; 0x210 <update_current>
			update_voltage();
     cba:	0e 94 30 01 	call	0x260	; 0x260 <update_voltage>
			update_power();
     cbe:	0e 94 48 01 	call	0x290	; 0x290 <update_power>
			update_gate_voltage();
     cc2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_gate_voltage>
			
			switch (check_thresholds())
     cc6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <check_thresholds>
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	89 f0       	breq	.+34     	; 0xcf0 <main+0xf0>
     cce:	83 30       	cpi	r24, 0x03	; 3
     cd0:	e9 f0       	breq	.+58     	; 0xd0c <main+0x10c>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	49 f5       	brne	.+82     	; 0xd28 <main+0x128>
			{
				case 1:	//Power exceeds threshold
					print_power(1,1);
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	0e 94 bd 01 	call	0x37a	; 0x37a <print_power>
					
					if(flag)
     cdc:	c1 11       	cpse	r28, r1
     cde:	2d c0       	rjmp	.+90     	; 0xd3a <main+0x13a>
					break;
						
					lcd_string2(2, 1, "Power Exceeded");
     ce0:	42 e3       	ldi	r20, 0x32	; 50
     ce2:	51 e0       	ldi	r21, 0x01	; 1
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string2>
					flag = 1;
     cec:	c1 e0       	ldi	r28, 0x01	; 1
					break;
     cee:	25 c0       	rjmp	.+74     	; 0xd3a <main+0x13a>
			
				case 2:	//Voltage
					print_voltage(1,1);
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	0e 94 9f 01 	call	0x33e	; 0x33e <print_voltage>
					if(flag)
     cf8:	c1 11       	cpse	r28, r1
     cfa:	1f c0       	rjmp	.+62     	; 0xd3a <main+0x13a>
					break;
					
					lcd_string2(1, 1, "Voltage Exceeded");
     cfc:	41 e4       	ldi	r20, 0x41	; 65
     cfe:	51 e0       	ldi	r21, 0x01	; 1
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string2>
					flag = 1;
     d08:	c1 e0       	ldi	r28, 0x01	; 1
					break;
     d0a:	17 c0       	rjmp	.+46     	; 0xd3a <main+0x13a>
			
				case 3:	//Current
					print_current(1,1);
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	0e 94 81 01 	call	0x302	; 0x302 <print_current>
					if(flag)
     d14:	c1 11       	cpse	r28, r1
     d16:	11 c0       	rjmp	.+34     	; 0xd3a <main+0x13a>
					break;
					
					lcd_string2(1, 1, "Current Exceeded");
     d18:	42 e5       	ldi	r20, 0x52	; 82
     d1a:	51 e0       	ldi	r21, 0x01	; 1
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string2>
					flag = 1;
     d24:	c1 e0       	ldi	r28, 0x01	; 1
					break;
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <main+0x13a>
			
				default:
					if(flag)
     d28:	c1 11       	cpse	r28, r1
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <main+0x13a>
					break;
				
					lcd_string2(1, 6, "Error");
     d2c:	43 e6       	ldi	r20, 0x63	; 99
     d2e:	51 e0       	ldi	r21, 0x01	; 1
     d30:	66 e0       	ldi	r22, 0x06	; 6
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string2>
					flag = 1;
     d38:	c1 e0       	ldi	r28, 0x01	; 1
	}
	else
	{
		lcd_clear();
		char flag = 0;
		while(check_thresholds())
     d3a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <check_thresholds>
     d3e:	81 11       	cpse	r24, r1
     d40:	ba cf       	rjmp	.-140    	; 0xcb6 <main+0xb6>
					lcd_string2(1, 6, "Error");
					flag = 1;
					break;
			}
		}
		lcd_clear();
     d42:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <lcd_clear>
     d46:	96 cf       	rjmp	.-212    	; 0xc74 <main+0x74>

00000d48 <__subsf3>:
     d48:	50 58       	subi	r21, 0x80	; 128

00000d4a <__addsf3>:
     d4a:	bb 27       	eor	r27, r27
     d4c:	aa 27       	eor	r26, r26
     d4e:	0e 94 bc 06 	call	0xd78	; 0xd78 <__addsf3x>
     d52:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_round>
     d56:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_pscA>
     d5a:	38 f0       	brcs	.+14     	; 0xd6a <__addsf3+0x20>
     d5c:	0e 94 28 08 	call	0x1050	; 0x1050 <__fp_pscB>
     d60:	20 f0       	brcs	.+8      	; 0xd6a <__addsf3+0x20>
     d62:	39 f4       	brne	.+14     	; 0xd72 <__addsf3+0x28>
     d64:	9f 3f       	cpi	r25, 0xFF	; 255
     d66:	19 f4       	brne	.+6      	; 0xd6e <__addsf3+0x24>
     d68:	26 f4       	brtc	.+8      	; 0xd72 <__addsf3+0x28>
     d6a:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_nan>
     d6e:	0e f4       	brtc	.+2      	; 0xd72 <__addsf3+0x28>
     d70:	e0 95       	com	r30
     d72:	e7 fb       	bst	r30, 7
     d74:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_inf>

00000d78 <__addsf3x>:
     d78:	e9 2f       	mov	r30, r25
     d7a:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_split3>
     d7e:	58 f3       	brcs	.-42     	; 0xd56 <__addsf3+0xc>
     d80:	ba 17       	cp	r27, r26
     d82:	62 07       	cpc	r22, r18
     d84:	73 07       	cpc	r23, r19
     d86:	84 07       	cpc	r24, r20
     d88:	95 07       	cpc	r25, r21
     d8a:	20 f0       	brcs	.+8      	; 0xd94 <__addsf3x+0x1c>
     d8c:	79 f4       	brne	.+30     	; 0xdac <__addsf3x+0x34>
     d8e:	a6 f5       	brtc	.+104    	; 0xdf8 <__addsf3x+0x80>
     d90:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_zero>
     d94:	0e f4       	brtc	.+2      	; 0xd98 <__addsf3x+0x20>
     d96:	e0 95       	com	r30
     d98:	0b 2e       	mov	r0, r27
     d9a:	ba 2f       	mov	r27, r26
     d9c:	a0 2d       	mov	r26, r0
     d9e:	0b 01       	movw	r0, r22
     da0:	b9 01       	movw	r22, r18
     da2:	90 01       	movw	r18, r0
     da4:	0c 01       	movw	r0, r24
     da6:	ca 01       	movw	r24, r20
     da8:	a0 01       	movw	r20, r0
     daa:	11 24       	eor	r1, r1
     dac:	ff 27       	eor	r31, r31
     dae:	59 1b       	sub	r21, r25
     db0:	99 f0       	breq	.+38     	; 0xdd8 <__addsf3x+0x60>
     db2:	59 3f       	cpi	r21, 0xF9	; 249
     db4:	50 f4       	brcc	.+20     	; 0xdca <__addsf3x+0x52>
     db6:	50 3e       	cpi	r21, 0xE0	; 224
     db8:	68 f1       	brcs	.+90     	; 0xe14 <__addsf3x+0x9c>
     dba:	1a 16       	cp	r1, r26
     dbc:	f0 40       	sbci	r31, 0x00	; 0
     dbe:	a2 2f       	mov	r26, r18
     dc0:	23 2f       	mov	r18, r19
     dc2:	34 2f       	mov	r19, r20
     dc4:	44 27       	eor	r20, r20
     dc6:	58 5f       	subi	r21, 0xF8	; 248
     dc8:	f3 cf       	rjmp	.-26     	; 0xdb0 <__addsf3x+0x38>
     dca:	46 95       	lsr	r20
     dcc:	37 95       	ror	r19
     dce:	27 95       	ror	r18
     dd0:	a7 95       	ror	r26
     dd2:	f0 40       	sbci	r31, 0x00	; 0
     dd4:	53 95       	inc	r21
     dd6:	c9 f7       	brne	.-14     	; 0xdca <__addsf3x+0x52>
     dd8:	7e f4       	brtc	.+30     	; 0xdf8 <__addsf3x+0x80>
     dda:	1f 16       	cp	r1, r31
     ddc:	ba 0b       	sbc	r27, r26
     dde:	62 0b       	sbc	r22, r18
     de0:	73 0b       	sbc	r23, r19
     de2:	84 0b       	sbc	r24, r20
     de4:	ba f0       	brmi	.+46     	; 0xe14 <__addsf3x+0x9c>
     de6:	91 50       	subi	r25, 0x01	; 1
     de8:	a1 f0       	breq	.+40     	; 0xe12 <__addsf3x+0x9a>
     dea:	ff 0f       	add	r31, r31
     dec:	bb 1f       	adc	r27, r27
     dee:	66 1f       	adc	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	88 1f       	adc	r24, r24
     df4:	c2 f7       	brpl	.-16     	; 0xde6 <__addsf3x+0x6e>
     df6:	0e c0       	rjmp	.+28     	; 0xe14 <__addsf3x+0x9c>
     df8:	ba 0f       	add	r27, r26
     dfa:	62 1f       	adc	r22, r18
     dfc:	73 1f       	adc	r23, r19
     dfe:	84 1f       	adc	r24, r20
     e00:	48 f4       	brcc	.+18     	; 0xe14 <__addsf3x+0x9c>
     e02:	87 95       	ror	r24
     e04:	77 95       	ror	r23
     e06:	67 95       	ror	r22
     e08:	b7 95       	ror	r27
     e0a:	f7 95       	ror	r31
     e0c:	9e 3f       	cpi	r25, 0xFE	; 254
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <__addsf3x+0x9a>
     e10:	b0 cf       	rjmp	.-160    	; 0xd72 <__addsf3+0x28>
     e12:	93 95       	inc	r25
     e14:	88 0f       	add	r24, r24
     e16:	08 f0       	brcs	.+2      	; 0xe1a <__addsf3x+0xa2>
     e18:	99 27       	eor	r25, r25
     e1a:	ee 0f       	add	r30, r30
     e1c:	97 95       	ror	r25
     e1e:	87 95       	ror	r24
     e20:	08 95       	ret

00000e22 <__cmpsf2>:
     e22:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__fp_cmp>
     e26:	08 f4       	brcc	.+2      	; 0xe2a <__cmpsf2+0x8>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	08 95       	ret

00000e2c <__divsf3>:
     e2c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divsf3x>
     e30:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_round>
     e34:	0e 94 28 08 	call	0x1050	; 0x1050 <__fp_pscB>
     e38:	58 f0       	brcs	.+22     	; 0xe50 <__divsf3+0x24>
     e3a:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_pscA>
     e3e:	40 f0       	brcs	.+16     	; 0xe50 <__divsf3+0x24>
     e40:	29 f4       	brne	.+10     	; 0xe4c <__divsf3+0x20>
     e42:	5f 3f       	cpi	r21, 0xFF	; 255
     e44:	29 f0       	breq	.+10     	; 0xe50 <__divsf3+0x24>
     e46:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_inf>
     e4a:	51 11       	cpse	r21, r1
     e4c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__fp_szero>
     e50:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_nan>

00000e54 <__divsf3x>:
     e54:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_split3>
     e58:	68 f3       	brcs	.-38     	; 0xe34 <__divsf3+0x8>

00000e5a <__divsf3_pse>:
     e5a:	99 23       	and	r25, r25
     e5c:	b1 f3       	breq	.-20     	; 0xe4a <__divsf3+0x1e>
     e5e:	55 23       	and	r21, r21
     e60:	91 f3       	breq	.-28     	; 0xe46 <__divsf3+0x1a>
     e62:	95 1b       	sub	r25, r21
     e64:	55 0b       	sbc	r21, r21
     e66:	bb 27       	eor	r27, r27
     e68:	aa 27       	eor	r26, r26
     e6a:	62 17       	cp	r22, r18
     e6c:	73 07       	cpc	r23, r19
     e6e:	84 07       	cpc	r24, r20
     e70:	38 f0       	brcs	.+14     	; 0xe80 <__divsf3_pse+0x26>
     e72:	9f 5f       	subi	r25, 0xFF	; 255
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	44 1f       	adc	r20, r20
     e7c:	aa 1f       	adc	r26, r26
     e7e:	a9 f3       	breq	.-22     	; 0xe6a <__divsf3_pse+0x10>
     e80:	35 d0       	rcall	.+106    	; 0xeec <__divsf3_pse+0x92>
     e82:	0e 2e       	mov	r0, r30
     e84:	3a f0       	brmi	.+14     	; 0xe94 <__divsf3_pse+0x3a>
     e86:	e0 e8       	ldi	r30, 0x80	; 128
     e88:	32 d0       	rcall	.+100    	; 0xeee <__divsf3_pse+0x94>
     e8a:	91 50       	subi	r25, 0x01	; 1
     e8c:	50 40       	sbci	r21, 0x00	; 0
     e8e:	e6 95       	lsr	r30
     e90:	00 1c       	adc	r0, r0
     e92:	ca f7       	brpl	.-14     	; 0xe86 <__divsf3_pse+0x2c>
     e94:	2b d0       	rcall	.+86     	; 0xeec <__divsf3_pse+0x92>
     e96:	fe 2f       	mov	r31, r30
     e98:	29 d0       	rcall	.+82     	; 0xeec <__divsf3_pse+0x92>
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	bb 1f       	adc	r27, r27
     ea2:	26 17       	cp	r18, r22
     ea4:	37 07       	cpc	r19, r23
     ea6:	48 07       	cpc	r20, r24
     ea8:	ab 07       	cpc	r26, r27
     eaa:	b0 e8       	ldi	r27, 0x80	; 128
     eac:	09 f0       	breq	.+2      	; 0xeb0 <__divsf3_pse+0x56>
     eae:	bb 0b       	sbc	r27, r27
     eb0:	80 2d       	mov	r24, r0
     eb2:	bf 01       	movw	r22, r30
     eb4:	ff 27       	eor	r31, r31
     eb6:	93 58       	subi	r25, 0x83	; 131
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	3a f0       	brmi	.+14     	; 0xeca <__divsf3_pse+0x70>
     ebc:	9e 3f       	cpi	r25, 0xFE	; 254
     ebe:	51 05       	cpc	r21, r1
     ec0:	78 f0       	brcs	.+30     	; 0xee0 <__divsf3_pse+0x86>
     ec2:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_inf>
     ec6:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__fp_szero>
     eca:	5f 3f       	cpi	r21, 0xFF	; 255
     ecc:	e4 f3       	brlt	.-8      	; 0xec6 <__divsf3_pse+0x6c>
     ece:	98 3e       	cpi	r25, 0xE8	; 232
     ed0:	d4 f3       	brlt	.-12     	; 0xec6 <__divsf3_pse+0x6c>
     ed2:	86 95       	lsr	r24
     ed4:	77 95       	ror	r23
     ed6:	67 95       	ror	r22
     ed8:	b7 95       	ror	r27
     eda:	f7 95       	ror	r31
     edc:	9f 5f       	subi	r25, 0xFF	; 255
     ede:	c9 f7       	brne	.-14     	; 0xed2 <__divsf3_pse+0x78>
     ee0:	88 0f       	add	r24, r24
     ee2:	91 1d       	adc	r25, r1
     ee4:	96 95       	lsr	r25
     ee6:	87 95       	ror	r24
     ee8:	97 f9       	bld	r25, 7
     eea:	08 95       	ret
     eec:	e1 e0       	ldi	r30, 0x01	; 1
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	bb 1f       	adc	r27, r27
     ef6:	62 17       	cp	r22, r18
     ef8:	73 07       	cpc	r23, r19
     efa:	84 07       	cpc	r24, r20
     efc:	ba 07       	cpc	r27, r26
     efe:	20 f0       	brcs	.+8      	; 0xf08 <__divsf3_pse+0xae>
     f00:	62 1b       	sub	r22, r18
     f02:	73 0b       	sbc	r23, r19
     f04:	84 0b       	sbc	r24, r20
     f06:	ba 0b       	sbc	r27, r26
     f08:	ee 1f       	adc	r30, r30
     f0a:	88 f7       	brcc	.-30     	; 0xeee <__divsf3_pse+0x94>
     f0c:	e0 95       	com	r30
     f0e:	08 95       	ret

00000f10 <__fixunssfsi>:
     f10:	0e 94 48 08 	call	0x1090	; 0x1090 <__fp_splitA>
     f14:	88 f0       	brcs	.+34     	; 0xf38 <__fixunssfsi+0x28>
     f16:	9f 57       	subi	r25, 0x7F	; 127
     f18:	98 f0       	brcs	.+38     	; 0xf40 <__fixunssfsi+0x30>
     f1a:	b9 2f       	mov	r27, r25
     f1c:	99 27       	eor	r25, r25
     f1e:	b7 51       	subi	r27, 0x17	; 23
     f20:	b0 f0       	brcs	.+44     	; 0xf4e <__fixunssfsi+0x3e>
     f22:	e1 f0       	breq	.+56     	; 0xf5c <__fixunssfsi+0x4c>
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	1a f0       	brmi	.+6      	; 0xf34 <__fixunssfsi+0x24>
     f2e:	ba 95       	dec	r27
     f30:	c9 f7       	brne	.-14     	; 0xf24 <__fixunssfsi+0x14>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <__fixunssfsi+0x4c>
     f34:	b1 30       	cpi	r27, 0x01	; 1
     f36:	91 f0       	breq	.+36     	; 0xf5c <__fixunssfsi+0x4c>
     f38:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_zero>
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	08 95       	ret
     f40:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_zero>
     f44:	67 2f       	mov	r22, r23
     f46:	78 2f       	mov	r23, r24
     f48:	88 27       	eor	r24, r24
     f4a:	b8 5f       	subi	r27, 0xF8	; 248
     f4c:	39 f0       	breq	.+14     	; 0xf5c <__fixunssfsi+0x4c>
     f4e:	b9 3f       	cpi	r27, 0xF9	; 249
     f50:	cc f3       	brlt	.-14     	; 0xf44 <__fixunssfsi+0x34>
     f52:	86 95       	lsr	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	b3 95       	inc	r27
     f5a:	d9 f7       	brne	.-10     	; 0xf52 <__fixunssfsi+0x42>
     f5c:	3e f4       	brtc	.+14     	; 0xf6c <__fixunssfsi+0x5c>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <__floatunsisf>:
     f6e:	e8 94       	clt
     f70:	09 c0       	rjmp	.+18     	; 0xf84 <__floatsisf+0x12>

00000f72 <__floatsisf>:
     f72:	97 fb       	bst	r25, 7
     f74:	3e f4       	brtc	.+14     	; 0xf84 <__floatsisf+0x12>
     f76:	90 95       	com	r25
     f78:	80 95       	com	r24
     f7a:	70 95       	com	r23
     f7c:	61 95       	neg	r22
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	99 23       	and	r25, r25
     f86:	a9 f0       	breq	.+42     	; 0xfb2 <__floatsisf+0x40>
     f88:	f9 2f       	mov	r31, r25
     f8a:	96 e9       	ldi	r25, 0x96	; 150
     f8c:	bb 27       	eor	r27, r27
     f8e:	93 95       	inc	r25
     f90:	f6 95       	lsr	r31
     f92:	87 95       	ror	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	f1 11       	cpse	r31, r1
     f9c:	f8 cf       	rjmp	.-16     	; 0xf8e <__floatsisf+0x1c>
     f9e:	fa f4       	brpl	.+62     	; 0xfde <__floatsisf+0x6c>
     fa0:	bb 0f       	add	r27, r27
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <__floatsisf+0x36>
     fa4:	60 ff       	sbrs	r22, 0
     fa6:	1b c0       	rjmp	.+54     	; 0xfde <__floatsisf+0x6c>
     fa8:	6f 5f       	subi	r22, 0xFF	; 255
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	16 c0       	rjmp	.+44     	; 0xfde <__floatsisf+0x6c>
     fb2:	88 23       	and	r24, r24
     fb4:	11 f0       	breq	.+4      	; 0xfba <__floatsisf+0x48>
     fb6:	96 e9       	ldi	r25, 0x96	; 150
     fb8:	11 c0       	rjmp	.+34     	; 0xfdc <__floatsisf+0x6a>
     fba:	77 23       	and	r23, r23
     fbc:	21 f0       	breq	.+8      	; 0xfc6 <__floatsisf+0x54>
     fbe:	9e e8       	ldi	r25, 0x8E	; 142
     fc0:	87 2f       	mov	r24, r23
     fc2:	76 2f       	mov	r23, r22
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <__floatsisf+0x5e>
     fc6:	66 23       	and	r22, r22
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <__floatsisf+0x74>
     fca:	96 e8       	ldi	r25, 0x86	; 134
     fcc:	86 2f       	mov	r24, r22
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	2a f0       	brmi	.+10     	; 0xfde <__floatsisf+0x6c>
     fd4:	9a 95       	dec	r25
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	da f7       	brpl	.-10     	; 0xfd4 <__floatsisf+0x62>
     fde:	88 0f       	add	r24, r24
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	97 f9       	bld	r25, 7
     fe6:	08 95       	ret

00000fe8 <__fp_cmp>:
     fe8:	99 0f       	add	r25, r25
     fea:	00 08       	sbc	r0, r0
     fec:	55 0f       	add	r21, r21
     fee:	aa 0b       	sbc	r26, r26
     ff0:	e0 e8       	ldi	r30, 0x80	; 128
     ff2:	fe ef       	ldi	r31, 0xFE	; 254
     ff4:	16 16       	cp	r1, r22
     ff6:	17 06       	cpc	r1, r23
     ff8:	e8 07       	cpc	r30, r24
     ffa:	f9 07       	cpc	r31, r25
     ffc:	c0 f0       	brcs	.+48     	; 0x102e <__fp_cmp+0x46>
     ffe:	12 16       	cp	r1, r18
    1000:	13 06       	cpc	r1, r19
    1002:	e4 07       	cpc	r30, r20
    1004:	f5 07       	cpc	r31, r21
    1006:	98 f0       	brcs	.+38     	; 0x102e <__fp_cmp+0x46>
    1008:	62 1b       	sub	r22, r18
    100a:	73 0b       	sbc	r23, r19
    100c:	84 0b       	sbc	r24, r20
    100e:	95 0b       	sbc	r25, r21
    1010:	39 f4       	brne	.+14     	; 0x1020 <__fp_cmp+0x38>
    1012:	0a 26       	eor	r0, r26
    1014:	61 f0       	breq	.+24     	; 0x102e <__fp_cmp+0x46>
    1016:	23 2b       	or	r18, r19
    1018:	24 2b       	or	r18, r20
    101a:	25 2b       	or	r18, r21
    101c:	21 f4       	brne	.+8      	; 0x1026 <__fp_cmp+0x3e>
    101e:	08 95       	ret
    1020:	0a 26       	eor	r0, r26
    1022:	09 f4       	brne	.+2      	; 0x1026 <__fp_cmp+0x3e>
    1024:	a1 40       	sbci	r26, 0x01	; 1
    1026:	a6 95       	lsr	r26
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	81 1d       	adc	r24, r1
    102c:	81 1d       	adc	r24, r1
    102e:	08 95       	ret

00001030 <__fp_inf>:
    1030:	97 f9       	bld	r25, 7
    1032:	9f 67       	ori	r25, 0x7F	; 127
    1034:	80 e8       	ldi	r24, 0x80	; 128
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	08 95       	ret

0000103c <__fp_nan>:
    103c:	9f ef       	ldi	r25, 0xFF	; 255
    103e:	80 ec       	ldi	r24, 0xC0	; 192
    1040:	08 95       	ret

00001042 <__fp_pscA>:
    1042:	00 24       	eor	r0, r0
    1044:	0a 94       	dec	r0
    1046:	16 16       	cp	r1, r22
    1048:	17 06       	cpc	r1, r23
    104a:	18 06       	cpc	r1, r24
    104c:	09 06       	cpc	r0, r25
    104e:	08 95       	ret

00001050 <__fp_pscB>:
    1050:	00 24       	eor	r0, r0
    1052:	0a 94       	dec	r0
    1054:	12 16       	cp	r1, r18
    1056:	13 06       	cpc	r1, r19
    1058:	14 06       	cpc	r1, r20
    105a:	05 06       	cpc	r0, r21
    105c:	08 95       	ret

0000105e <__fp_round>:
    105e:	09 2e       	mov	r0, r25
    1060:	03 94       	inc	r0
    1062:	00 0c       	add	r0, r0
    1064:	11 f4       	brne	.+4      	; 0x106a <__fp_round+0xc>
    1066:	88 23       	and	r24, r24
    1068:	52 f0       	brmi	.+20     	; 0x107e <__fp_round+0x20>
    106a:	bb 0f       	add	r27, r27
    106c:	40 f4       	brcc	.+16     	; 0x107e <__fp_round+0x20>
    106e:	bf 2b       	or	r27, r31
    1070:	11 f4       	brne	.+4      	; 0x1076 <__fp_round+0x18>
    1072:	60 ff       	sbrs	r22, 0
    1074:	04 c0       	rjmp	.+8      	; 0x107e <__fp_round+0x20>
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	08 95       	ret

00001080 <__fp_split3>:
    1080:	57 fd       	sbrc	r21, 7
    1082:	90 58       	subi	r25, 0x80	; 128
    1084:	44 0f       	add	r20, r20
    1086:	55 1f       	adc	r21, r21
    1088:	59 f0       	breq	.+22     	; 0x10a0 <__fp_splitA+0x10>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	71 f0       	breq	.+28     	; 0x10aa <__fp_splitA+0x1a>
    108e:	47 95       	ror	r20

00001090 <__fp_splitA>:
    1090:	88 0f       	add	r24, r24
    1092:	97 fb       	bst	r25, 7
    1094:	99 1f       	adc	r25, r25
    1096:	61 f0       	breq	.+24     	; 0x10b0 <__fp_splitA+0x20>
    1098:	9f 3f       	cpi	r25, 0xFF	; 255
    109a:	79 f0       	breq	.+30     	; 0x10ba <__fp_splitA+0x2a>
    109c:	87 95       	ror	r24
    109e:	08 95       	ret
    10a0:	12 16       	cp	r1, r18
    10a2:	13 06       	cpc	r1, r19
    10a4:	14 06       	cpc	r1, r20
    10a6:	55 1f       	adc	r21, r21
    10a8:	f2 cf       	rjmp	.-28     	; 0x108e <__fp_split3+0xe>
    10aa:	46 95       	lsr	r20
    10ac:	f1 df       	rcall	.-30     	; 0x1090 <__fp_splitA>
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <__fp_splitA+0x30>
    10b0:	16 16       	cp	r1, r22
    10b2:	17 06       	cpc	r1, r23
    10b4:	18 06       	cpc	r1, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	f1 cf       	rjmp	.-30     	; 0x109c <__fp_splitA+0xc>
    10ba:	86 95       	lsr	r24
    10bc:	71 05       	cpc	r23, r1
    10be:	61 05       	cpc	r22, r1
    10c0:	08 94       	sec
    10c2:	08 95       	ret

000010c4 <__fp_zero>:
    10c4:	e8 94       	clt

000010c6 <__fp_szero>:
    10c6:	bb 27       	eor	r27, r27
    10c8:	66 27       	eor	r22, r22
    10ca:	77 27       	eor	r23, r23
    10cc:	cb 01       	movw	r24, r22
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret

000010d2 <__gesf2>:
    10d2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__fp_cmp>
    10d6:	08 f4       	brcc	.+2      	; 0x10da <__gesf2+0x8>
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	08 95       	ret

000010dc <__mulsf3>:
    10dc:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3x>
    10e0:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_round>
    10e4:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_pscA>
    10e8:	38 f0       	brcs	.+14     	; 0x10f8 <__mulsf3+0x1c>
    10ea:	0e 94 28 08 	call	0x1050	; 0x1050 <__fp_pscB>
    10ee:	20 f0       	brcs	.+8      	; 0x10f8 <__mulsf3+0x1c>
    10f0:	95 23       	and	r25, r21
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <__mulsf3+0x1c>
    10f4:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_inf>
    10f8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_nan>
    10fc:	11 24       	eor	r1, r1
    10fe:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__fp_szero>

00001102 <__mulsf3x>:
    1102:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_split3>
    1106:	70 f3       	brcs	.-36     	; 0x10e4 <__mulsf3+0x8>

00001108 <__mulsf3_pse>:
    1108:	95 9f       	mul	r25, r21
    110a:	c1 f3       	breq	.-16     	; 0x10fc <__mulsf3+0x20>
    110c:	95 0f       	add	r25, r21
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	55 1f       	adc	r21, r21
    1112:	62 9f       	mul	r22, r18
    1114:	f0 01       	movw	r30, r0
    1116:	72 9f       	mul	r23, r18
    1118:	bb 27       	eor	r27, r27
    111a:	f0 0d       	add	r31, r0
    111c:	b1 1d       	adc	r27, r1
    111e:	63 9f       	mul	r22, r19
    1120:	aa 27       	eor	r26, r26
    1122:	f0 0d       	add	r31, r0
    1124:	b1 1d       	adc	r27, r1
    1126:	aa 1f       	adc	r26, r26
    1128:	64 9f       	mul	r22, r20
    112a:	66 27       	eor	r22, r22
    112c:	b0 0d       	add	r27, r0
    112e:	a1 1d       	adc	r26, r1
    1130:	66 1f       	adc	r22, r22
    1132:	82 9f       	mul	r24, r18
    1134:	22 27       	eor	r18, r18
    1136:	b0 0d       	add	r27, r0
    1138:	a1 1d       	adc	r26, r1
    113a:	62 1f       	adc	r22, r18
    113c:	73 9f       	mul	r23, r19
    113e:	b0 0d       	add	r27, r0
    1140:	a1 1d       	adc	r26, r1
    1142:	62 1f       	adc	r22, r18
    1144:	83 9f       	mul	r24, r19
    1146:	a0 0d       	add	r26, r0
    1148:	61 1d       	adc	r22, r1
    114a:	22 1f       	adc	r18, r18
    114c:	74 9f       	mul	r23, r20
    114e:	33 27       	eor	r19, r19
    1150:	a0 0d       	add	r26, r0
    1152:	61 1d       	adc	r22, r1
    1154:	23 1f       	adc	r18, r19
    1156:	84 9f       	mul	r24, r20
    1158:	60 0d       	add	r22, r0
    115a:	21 1d       	adc	r18, r1
    115c:	82 2f       	mov	r24, r18
    115e:	76 2f       	mov	r23, r22
    1160:	6a 2f       	mov	r22, r26
    1162:	11 24       	eor	r1, r1
    1164:	9f 57       	subi	r25, 0x7F	; 127
    1166:	50 40       	sbci	r21, 0x00	; 0
    1168:	9a f0       	brmi	.+38     	; 0x1190 <__mulsf3_pse+0x88>
    116a:	f1 f0       	breq	.+60     	; 0x11a8 <__mulsf3_pse+0xa0>
    116c:	88 23       	and	r24, r24
    116e:	4a f0       	brmi	.+18     	; 0x1182 <__mulsf3_pse+0x7a>
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	bb 1f       	adc	r27, r27
    1176:	66 1f       	adc	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	88 1f       	adc	r24, r24
    117c:	91 50       	subi	r25, 0x01	; 1
    117e:	50 40       	sbci	r21, 0x00	; 0
    1180:	a9 f7       	brne	.-22     	; 0x116c <__mulsf3_pse+0x64>
    1182:	9e 3f       	cpi	r25, 0xFE	; 254
    1184:	51 05       	cpc	r21, r1
    1186:	80 f0       	brcs	.+32     	; 0x11a8 <__mulsf3_pse+0xa0>
    1188:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_inf>
    118c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__fp_szero>
    1190:	5f 3f       	cpi	r21, 0xFF	; 255
    1192:	e4 f3       	brlt	.-8      	; 0x118c <__mulsf3_pse+0x84>
    1194:	98 3e       	cpi	r25, 0xE8	; 232
    1196:	d4 f3       	brlt	.-12     	; 0x118c <__mulsf3_pse+0x84>
    1198:	86 95       	lsr	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	b7 95       	ror	r27
    11a0:	f7 95       	ror	r31
    11a2:	e7 95       	ror	r30
    11a4:	9f 5f       	subi	r25, 0xFF	; 255
    11a6:	c1 f7       	brne	.-16     	; 0x1198 <__mulsf3_pse+0x90>
    11a8:	fe 2b       	or	r31, r30
    11aa:	88 0f       	add	r24, r24
    11ac:	91 1d       	adc	r25, r1
    11ae:	96 95       	lsr	r25
    11b0:	87 95       	ror	r24
    11b2:	97 f9       	bld	r25, 7
    11b4:	08 95       	ret

000011b6 <__udivmodhi4>:
    11b6:	aa 1b       	sub	r26, r26
    11b8:	bb 1b       	sub	r27, r27
    11ba:	51 e1       	ldi	r21, 0x11	; 17
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <__udivmodhi4_ep>

000011be <__udivmodhi4_loop>:
    11be:	aa 1f       	adc	r26, r26
    11c0:	bb 1f       	adc	r27, r27
    11c2:	a6 17       	cp	r26, r22
    11c4:	b7 07       	cpc	r27, r23
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <__udivmodhi4_ep>
    11c8:	a6 1b       	sub	r26, r22
    11ca:	b7 0b       	sbc	r27, r23

000011cc <__udivmodhi4_ep>:
    11cc:	88 1f       	adc	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	5a 95       	dec	r21
    11d2:	a9 f7       	brne	.-22     	; 0x11be <__udivmodhi4_loop>
    11d4:	80 95       	com	r24
    11d6:	90 95       	com	r25
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	08 95       	ret

000011de <__umulhisi3>:
    11de:	a2 9f       	mul	r26, r18
    11e0:	b0 01       	movw	r22, r0
    11e2:	b3 9f       	mul	r27, r19
    11e4:	c0 01       	movw	r24, r0
    11e6:	a3 9f       	mul	r26, r19
    11e8:	70 0d       	add	r23, r0
    11ea:	81 1d       	adc	r24, r1
    11ec:	11 24       	eor	r1, r1
    11ee:	91 1d       	adc	r25, r1
    11f0:	b2 9f       	mul	r27, r18
    11f2:	70 0d       	add	r23, r0
    11f4:	81 1d       	adc	r24, r1
    11f6:	11 24       	eor	r1, r1
    11f8:	91 1d       	adc	r25, r1
    11fa:	08 95       	ret

000011fc <_exit>:
    11fc:	f8 94       	cli

000011fe <__stop_program>:
    11fe:	ff cf       	rjmp	.-2      	; 0x11fe <__stop_program>
