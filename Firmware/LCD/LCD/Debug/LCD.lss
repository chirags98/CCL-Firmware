
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000c36  00000cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080012e  0080012e  00000cf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000150b  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b59  00000000  00000000  0000235b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a65  00000000  00000000  00002eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000883  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3d 03 	call	0x67a	; 0x67a <main>
  9e:	0c 94 19 06 	jmp	0xc32	; 0xc32 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
extern volatile int i;

//ADC pin configuration
void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
  a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
  a8:	18 b8       	out	0x08, r1	; 8
  aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	//ADCSRA=0x87;	//1 --- 0 111 ADC Enable, ADC Interrupt disable, ADC Prescaler=128
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
  ac:	8f e8       	ldi	r24, 0x8F	; 143
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	83 bf       	out	0x33, r24	; 51
  b8:	08 95       	ret

000000ba <read_adc>:
	//ADCSRA|=0x40; //ADSC: ADC Start Conversion: In Single Conversion mode, write this bit to one to start each conversion.
	//while((ADCSRA & 0x10)==0); //ADIF: ADC Interrupt Flag: This bit is set when an ADC conversion completes and the Data Registers are updated.
	//ADCSRA|=0x10;	//ADIF is cleared by writing a logical one to the flag.
		
	//flag = 1;
	SMCR |= 0x01;		//ADC Start Conversion
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	83 bf       	out	0x33, r24	; 51
  c0:	08 95       	ret

000000c2 <update_adc_channel>:
	//SMCR &= 0x02;
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
  c2:	88 30       	cpi	r24, 0x08	; 8
  c4:	50 f4       	brcc	.+20     	; 0xda <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <update_adc_channel+0xc>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <update_adc_channel+0x12>
  d4:	00 00       	nop
		_delay_ms(1);
		read_adc();
  d6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
  da:	08 95       	ret

000000dc <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
  dc:	7f 92       	push	r7
  de:	8f 92       	push	r8
  e0:	9f 92       	push	r9
  e2:	af 92       	push	r10
  e4:	bf 92       	push	r11
  e6:	cf 92       	push	r12
  e8:	df 92       	push	r13
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	78 2e       	mov	r7, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
  f8:	c6 2e       	mov	r12, r22
  fa:	d1 2c       	mov	r13, r1
  fc:	1c 14       	cp	r1, r12
  fe:	1d 04       	cpc	r1, r13
 100:	34 f5       	brge	.+76     	; 0x14e <avg_read_adc_channel+0x72>
 102:	c1 e0       	ldi	r28, 0x01	; 1
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	81 2c       	mov	r8, r1
 108:	91 2c       	mov	r9, r1
 10a:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
 10c:	08 2f       	mov	r16, r24
 10e:	10 e0       	ldi	r17, 0x00	; 0
 110:	00 0f       	add	r16, r16
 112:	11 1f       	adc	r17, r17
 114:	02 5c       	subi	r16, 0xC2	; 194
 116:	1e 4f       	sbci	r17, 0xFE	; 254
 118:	76 01       	movw	r14, r12
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
 11a:	87 2d       	mov	r24, r7
 11c:	0e 94 61 00 	call	0xc2	; 0xc2 <update_adc_channel>
		val = val + adc_val[channel]/i;
 120:	f8 01       	movw	r30, r16
 122:	80 81       	ld	r24, Z
 124:	91 81       	ldd	r25, Z+1	; 0x01
 126:	b7 01       	movw	r22, r14
 128:	0e 94 f6 05 	call	0xbec	; 0xbec <__udivmodhi4>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__floatunsisf>
 134:	9b 01       	movw	r18, r22
 136:	ac 01       	movw	r20, r24
 138:	c5 01       	movw	r24, r10
 13a:	b4 01       	movw	r22, r8
 13c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__addsf3>
 140:	4b 01       	movw	r8, r22
 142:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	cc 16       	cp	r12, r28
 148:	dd 06       	cpc	r13, r29
 14a:	3c f7       	brge	.-50     	; 0x11a <avg_read_adc_channel+0x3e>
 14c:	03 c0       	rjmp	.+6      	; 0x154 <avg_read_adc_channel+0x78>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
 14e:	81 2c       	mov	r8, r1
 150:	91 2c       	mov	r9, r1
 152:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
	}
	
	adc_val[channel] = val;
 154:	c7 2d       	mov	r28, r7
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	c5 01       	movw	r24, r10
 15a:	b4 01       	movw	r22, r8
 15c:	0e 94 cc 04 	call	0x998	; 0x998 <__fixunssfsi>
 160:	fe 01       	movw	r30, r28
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e2 5c       	subi	r30, 0xC2	; 194
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	71 83       	std	Z+1, r23	; 0x01
 16c:	60 83       	st	Z, r22
	
	return adc_val[channel];
 16e:	80 81       	ld	r24, Z
 170:	91 81       	ldd	r25, Z+1	; 0x01
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	ff 90       	pop	r15
 17c:	ef 90       	pop	r14
 17e:	df 90       	pop	r13
 180:	cf 90       	pop	r12
 182:	bf 90       	pop	r11
 184:	af 90       	pop	r10
 186:	9f 90       	pop	r9
 188:	8f 90       	pop	r8
 18a:	7f 90       	pop	r7
 18c:	08 95       	ret

0000018e <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <__vector_21+0x1e>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
 1b0:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	ADCSRA|=0x10;	//ADIF is cleared by writing a logical one to the flag.
 1b4:	aa e7       	ldi	r26, 0x7A	; 122
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8c 91       	ld	r24, X
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8c 93       	st	X, r24
	//Read ADC value
	volatile unsigned char low = ADCL;
 1be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1c2:	89 83       	std	Y+1, r24	; 0x01
	volatile unsigned char high = ADCH;
 1c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c8:	8a 83       	std	Y+2, r24	; 0x02
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
 1ca:	ef 70       	andi	r30, 0x0F	; 15
	ADCSRA|=0x10;	//ADIF is cleared by writing a logical one to the flag.
	//Read ADC value
	volatile unsigned char low = ADCL;
	volatile unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	2a 81       	ldd	r18, Y+2	; 0x02
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	21 11       	cpse	r18, r1
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_21+0x4e>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	e2 5c       	subi	r30, 0xC2	; 194
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
	adc_val[channel] = adc_val[channel]<<8;
 1e8:	80 81       	ld	r24, Z
 1ea:	91 81       	ldd	r25, Z+1	; 0x01
 1ec:	98 2f       	mov	r25, r24
 1ee:	88 27       	eor	r24, r24
 1f0:	91 83       	std	Z+1, r25	; 0x01
 1f2:	80 83       	st	Z, r24
	adc_val[channel] = 256*high + low;
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	98 2f       	mov	r25, r24
 1fc:	88 27       	eor	r24, r24
 1fe:	82 0f       	add	r24, r18
 200:	91 1d       	adc	r25, r1
 202:	91 83       	std	Z+1, r25	; 0x01
 204:	80 83       	st	Z, r24
	//adc_val[channel] = 500;
	
	i++;
 206:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <i>
 20a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <i+0x1>
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <i+0x1>
 214:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <i>
	flag=0;		//conversion complete
 218:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
 23c:	98 2f       	mov	r25, r24
 23e:	88 1f       	adc	r24, r24
 240:	88 27       	eor	r24, r24
 242:	88 1f       	adc	r24, r24
 244:	96 fd       	sbrc	r25, 6
 246:	02 c0       	rjmp	.+4      	; 0x24c <Bit_Reverse+0x10>
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	01 c0       	rjmp	.+2      	; 0x24e <Bit_Reverse+0x12>
 24c:	22 e0       	ldi	r18, 0x02	; 2
 24e:	82 2b       	or	r24, r18
 250:	95 fd       	sbrc	r25, 5
 252:	02 c0       	rjmp	.+4      	; 0x258 <Bit_Reverse+0x1c>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	01 c0       	rjmp	.+2      	; 0x25a <Bit_Reverse+0x1e>
 258:	24 e0       	ldi	r18, 0x04	; 4
 25a:	82 2b       	or	r24, r18
 25c:	94 fd       	sbrc	r25, 4
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Bit_Reverse+0x28>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	01 c0       	rjmp	.+2      	; 0x266 <Bit_Reverse+0x2a>
 264:	28 e0       	ldi	r18, 0x08	; 8
 266:	82 2b       	or	r24, r18
 268:	93 fd       	sbrc	r25, 3
 26a:	02 c0       	rjmp	.+4      	; 0x270 <Bit_Reverse+0x34>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	01 c0       	rjmp	.+2      	; 0x272 <Bit_Reverse+0x36>
 270:	20 e1       	ldi	r18, 0x10	; 16
 272:	82 2b       	or	r24, r18
 274:	92 fd       	sbrc	r25, 2
 276:	02 c0       	rjmp	.+4      	; 0x27c <Bit_Reverse+0x40>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	01 c0       	rjmp	.+2      	; 0x27e <Bit_Reverse+0x42>
 27c:	20 e2       	ldi	r18, 0x20	; 32
 27e:	82 2b       	or	r24, r18
 280:	91 fd       	sbrc	r25, 1
 282:	02 c0       	rjmp	.+4      	; 0x288 <Bit_Reverse+0x4c>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	01 c0       	rjmp	.+2      	; 0x28a <Bit_Reverse+0x4e>
 288:	20 e4       	ldi	r18, 0x40	; 64
 28a:	82 2b       	or	r24, r18
 28c:	90 fd       	sbrc	r25, 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <Bit_Reverse+0x58>
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 c0       	rjmp	.+2      	; 0x296 <Bit_Reverse+0x5a>
 294:	90 e8       	ldi	r25, 0x80	; 128
 296:	89 2b       	or	r24, r25
 298:	08 95       	ret

0000029a <lcd_wr_command>:
 29a:	cf 93       	push	r28
 29c:	c8 2f       	mov	r28, r24
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	0e 94 1e 01 	call	0x23c	; 0x23c <Bit_Reverse>
 2a4:	88 0f       	add	r24, r24
 2a6:	88 0f       	add	r24, r24
 2a8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <temp.1654>
 2ac:	9b b1       	in	r25, 0x0b	; 11
 2ae:	93 7c       	andi	r25, 0xC3	; 195
 2b0:	9b b9       	out	0x0b, r25	; 11
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <temp.1654>
 2b8:	98 2b       	or	r25, r24
 2ba:	9b b9       	out	0x0b, r25	; 11
 2bc:	5f 98       	cbi	0x0b, 7	; 11
 2be:	5e 9a       	sbi	0x0b, 6	; 11
 2c0:	8f e1       	ldi	r24, 0x1F	; 31
 2c2:	9e e4       	ldi	r25, 0x4E	; 78
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_wr_command+0x2a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_wr_command+0x30>
 2ca:	00 00       	nop
 2cc:	5e 98       	cbi	0x0b, 6	; 11
 2ce:	8c 2f       	mov	r24, r28
 2d0:	82 95       	swap	r24
 2d2:	80 7f       	andi	r24, 0xF0	; 240
 2d4:	0e 94 1e 01 	call	0x23c	; 0x23c <Bit_Reverse>
 2d8:	9b b1       	in	r25, 0x0b	; 11
 2da:	93 7c       	andi	r25, 0xC3	; 195
 2dc:	9b b9       	out	0x0b, r25	; 11
 2de:	9b b1       	in	r25, 0x0b	; 11
 2e0:	88 0f       	add	r24, r24
 2e2:	88 0f       	add	r24, r24
 2e4:	98 2b       	or	r25, r24
 2e6:	9b b9       	out	0x0b, r25	; 11
 2e8:	5f 98       	cbi	0x0b, 7	; 11
 2ea:	5e 9a       	sbi	0x0b, 6	; 11
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	9e e4       	ldi	r25, 0x4E	; 78
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_wr_command+0x56>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_wr_command+0x5c>
 2f6:	00 00       	nop
 2f8:	5e 98       	cbi	0x0b, 6	; 11
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <lcd_wr_char>:
 2fe:	cf 93       	push	r28
 300:	c8 2f       	mov	r28, r24
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	0e 94 1e 01 	call	0x23c	; 0x23c <Bit_Reverse>
 308:	9b b1       	in	r25, 0x0b	; 11
 30a:	93 7c       	andi	r25, 0xC3	; 195
 30c:	9b b9       	out	0x0b, r25	; 11
 30e:	9b b1       	in	r25, 0x0b	; 11
 310:	88 0f       	add	r24, r24
 312:	88 0f       	add	r24, r24
 314:	98 2b       	or	r25, r24
 316:	9b b9       	out	0x0b, r25	; 11
 318:	5f 9a       	sbi	0x0b, 7	; 11
 31a:	5e 9a       	sbi	0x0b, 6	; 11
 31c:	8f e1       	ldi	r24, 0x1F	; 31
 31e:	9e e4       	ldi	r25, 0x4E	; 78
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <lcd_wr_char+0x22>
 324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_wr_char+0x28>
 326:	00 00       	nop
 328:	5e 98       	cbi	0x0b, 6	; 11
 32a:	8c 2f       	mov	r24, r28
 32c:	82 95       	swap	r24
 32e:	80 7f       	andi	r24, 0xF0	; 240
 330:	0e 94 1e 01 	call	0x23c	; 0x23c <Bit_Reverse>
 334:	9b b1       	in	r25, 0x0b	; 11
 336:	93 7c       	andi	r25, 0xC3	; 195
 338:	9b b9       	out	0x0b, r25	; 11
 33a:	9b b1       	in	r25, 0x0b	; 11
 33c:	88 0f       	add	r24, r24
 33e:	88 0f       	add	r24, r24
 340:	98 2b       	or	r25, r24
 342:	9b b9       	out	0x0b, r25	; 11
 344:	5f 9a       	sbi	0x0b, 7	; 11
 346:	5e 9a       	sbi	0x0b, 6	; 11
 348:	8f e1       	ldi	r24, 0x1F	; 31
 34a:	9e e4       	ldi	r25, 0x4E	; 78
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_wr_char+0x4e>
 350:	00 c0       	rjmp	.+0      	; 0x352 <lcd_wr_char+0x54>
 352:	00 00       	nop
 354:	5e 98       	cbi	0x0b, 6	; 11
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <lcd_port_config>:
 35a:	8a b1       	in	r24, 0x0a	; 10
 35c:	8c 6f       	ori	r24, 0xFC	; 252
 35e:	8a b9       	out	0x0a, r24	; 10
 360:	8b b1       	in	r24, 0x0b	; 11
 362:	84 70       	andi	r24, 0x04	; 4
 364:	8b b9       	out	0x0b, r24	; 11
 366:	08 95       	ret

00000368 <lcd_home>:
 368:	80 e8       	ldi	r24, 0x80	; 128
 36a:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
 36e:	08 95       	ret

00000370 <lcd_cursor>:
	row
* Example Call: lcd_string(2,3)
*/
void lcd_cursor (char row, char column)
{
	switch (row) {
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	19 f0       	breq	.+6      	; 0x37a <lcd_cursor+0xa>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	31 f0       	breq	.+12     	; 0x384 <lcd_cursor+0x14>
 378:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 37a:	8f e7       	ldi	r24, 0x7F	; 127
 37c:	86 0f       	add	r24, r22
 37e:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
 382:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 384:	8f eb       	ldi	r24, 0xBF	; 191
 386:	86 0f       	add	r24, r22
 388:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
 38c:	08 95       	ret

0000038e <lcd_string2>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ea 01       	movw	r28, r20
	lcd_cursor(row,column);	
 394:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_cursor>
	while(*str != '\0')
 398:	88 81       	ld	r24, Y
 39a:	88 23       	and	r24, r24
 39c:	31 f0       	breq	.+12     	; 0x3aa <lcd_string2+0x1c>
 39e:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
 3a0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_wr_char>
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
	lcd_cursor(row,column);	
	while(*str != '\0')
 3a4:	89 91       	ld	r24, Y+
 3a6:	81 11       	cpse	r24, r1
 3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <lcd_string2+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <lcd_print>:
* Output: Integer is printed to the desired location and upto the desired number of digits
* Logic: 
* Example Call: lcd_string("hello")
*/
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	8a 01       	movw	r16, r20
 3ba:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 3bc:	88 23       	and	r24, r24
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0x14>
 3c0:	61 11       	cpse	r22, r1
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <lcd_print+0x1a>
	{
		lcd_home();
 3c4:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_home>
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 3ca:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 3ce:	c5 30       	cpi	r28, 0x05	; 5
 3d0:	d1 05       	cpc	r29, r1
 3d2:	c9 f4       	brne	.+50     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		million=value/10000+48;
 3d4:	98 01       	movw	r18, r16
 3d6:	32 95       	swap	r19
 3d8:	22 95       	swap	r18
 3da:	2f 70       	andi	r18, 0x0F	; 15
 3dc:	23 27       	eor	r18, r19
 3de:	3f 70       	andi	r19, 0x0F	; 15
 3e0:	23 27       	eor	r18, r19
 3e2:	a7 e4       	ldi	r26, 0x47	; 71
 3e4:	b3 e0       	ldi	r27, 0x03	; 3
 3e6:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	c0 96       	adiw	r24, 0x30	; 48
 3f8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <million+0x1>
 3fc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <million>
		lcd_wr_char(million);
 400:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_wr_char>
 404:	04 c0       	rjmp	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		flag=1;
	}
	if(digits==4 || flag==1)
 406:	c4 30       	cpi	r28, 0x04	; 4
 408:	d1 05       	cpc	r29, r1
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	c3 c0       	rjmp	.+390    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
	{
		temp = value/1000;
 40e:	98 01       	movw	r18, r16
 410:	36 95       	lsr	r19
 412:	27 95       	ror	r18
 414:	36 95       	lsr	r19
 416:	27 95       	ror	r18
 418:	36 95       	lsr	r19
 41a:	27 95       	ror	r18
 41c:	a5 ec       	ldi	r26, 0xC5	; 197
 41e:	b0 e2       	ldi	r27, 0x20	; 32
 420:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 424:	ac 01       	movw	r20, r24
 426:	52 95       	swap	r21
 428:	42 95       	swap	r20
 42a:	4f 70       	andi	r20, 0x0F	; 15
 42c:	45 27       	eor	r20, r21
 42e:	5f 70       	andi	r21, 0x0F	; 15
 430:	45 27       	eor	r20, r21
 432:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <temp+0x1>
 436:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <temp>
		thousand = temp%10 + 48;
 43a:	9a 01       	movw	r18, r20
 43c:	ad ec       	ldi	r26, 0xCD	; 205
 43e:	bc ec       	ldi	r27, 0xCC	; 204
 440:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	9c 01       	movw	r18, r24
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	82 0f       	add	r24, r18
 464:	93 1f       	adc	r25, r19
 466:	9a 01       	movw	r18, r20
 468:	28 1b       	sub	r18, r24
 46a:	39 0b       	sbc	r19, r25
 46c:	c9 01       	movw	r24, r18
 46e:	c0 96       	adiw	r24, 0x30	; 48
 470:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <thousand+0x1>
 474:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <thousand>
		lcd_wr_char(thousand);
 478:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 47c:	98 01       	movw	r18, r16
 47e:	36 95       	lsr	r19
 480:	27 95       	ror	r18
 482:	36 95       	lsr	r19
 484:	27 95       	ror	r18
 486:	ab e7       	ldi	r26, 0x7B	; 123
 488:	b4 e1       	ldi	r27, 0x14	; 20
 48a:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 48e:	ac 01       	movw	r20, r24
 490:	56 95       	lsr	r21
 492:	47 95       	ror	r20
 494:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <temp+0x1>
 498:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <temp>
		hundred = temp%10 + 48;
 49c:	9a 01       	movw	r18, r20
 49e:	ad ec       	ldi	r26, 0xCD	; 205
 4a0:	bc ec       	ldi	r27, 0xCC	; 204
 4a2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	96 95       	lsr	r25
 4b0:	87 95       	ror	r24
 4b2:	9c 01       	movw	r18, r24
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	82 0f       	add	r24, r18
 4c6:	93 1f       	adc	r25, r19
 4c8:	9a 01       	movw	r18, r20
 4ca:	28 1b       	sub	r18, r24
 4cc:	39 0b       	sbc	r19, r25
 4ce:	c9 01       	movw	r24, r18
 4d0:	c0 96       	adiw	r24, 0x30	; 48
 4d2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <hundred+0x1>
 4d6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <hundred>
		lcd_wr_char(hundred);
 4da:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_wr_char>
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		flag=1;
	}
	if(digits==2 || flag==1)
 4e0:	c2 30       	cpi	r28, 0x02	; 2
 4e2:	d1 05       	cpc	r29, r1
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e6:	5b c0       	rjmp	.+182    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
	{
		temp = value/10;
 4e8:	98 01       	movw	r18, r16
 4ea:	ad ec       	ldi	r26, 0xCD	; 205
 4ec:	bc ec       	ldi	r27, 0xCC	; 204
 4ee:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 4f2:	ac 01       	movw	r20, r24
 4f4:	56 95       	lsr	r21
 4f6:	47 95       	ror	r20
 4f8:	56 95       	lsr	r21
 4fa:	47 95       	ror	r20
 4fc:	56 95       	lsr	r21
 4fe:	47 95       	ror	r20
 500:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <temp+0x1>
 504:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <temp>
		tens = temp%10 + 48;
 508:	9a 01       	movw	r18, r20
 50a:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 50e:	96 95       	lsr	r25
 510:	87 95       	ror	r24
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	9c 01       	movw	r18, r24
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	82 0f       	add	r24, r18
 52e:	93 1f       	adc	r25, r19
 530:	9a 01       	movw	r18, r20
 532:	28 1b       	sub	r18, r24
 534:	39 0b       	sbc	r19, r25
 536:	c9 01       	movw	r24, r18
 538:	c0 96       	adiw	r24, 0x30	; 48
 53a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <tens+0x1>
 53e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <tens>
		lcd_wr_char(tens);
 542:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 546:	98 01       	movw	r18, r16
 548:	ad ec       	ldi	r26, 0xCD	; 205
 54a:	bc ec       	ldi	r27, 0xCC	; 204
 54c:	0e 94 0a 06 	call	0xc14	; 0xc14 <__umulhisi3>
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	9c 01       	movw	r18, r24
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	82 0f       	add	r24, r18
 570:	93 1f       	adc	r25, r19
 572:	98 01       	movw	r18, r16
 574:	28 1b       	sub	r18, r24
 576:	39 0b       	sbc	r19, r25
 578:	c9 01       	movw	r24, r18
 57a:	c0 96       	adiw	r24, 0x30	; 48
 57c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <unit+0x1>
 580:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <unit>
		lcd_wr_char(unit);
 584:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_wr_char>
	}
	if(digits>5)
 588:	26 97       	sbiw	r28, 0x06	; 6
 58a:	6c f0       	brlt	.+26     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
	{
		lcd_wr_char('E');
 58c:	85 e4       	ldi	r24, 0x45	; 69
 58e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_wr_char>
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 594:	c3 30       	cpi	r28, 0x03	; 3
 596:	d1 05       	cpc	r29, r1
 598:	09 f0       	breq	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 59a:	a2 cf       	rjmp	.-188    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 59c:	6f cf       	rjmp	.-290    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 59e:	c1 30       	cpi	r28, 0x01	; 1
 5a0:	d1 05       	cpc	r29, r1
 5a2:	91 f7       	brne	.-28     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 5a4:	d0 cf       	rjmp	.-96     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	08 95       	ret

000005b0 <lcd_start>:
 5b0:	8f e9       	ldi	r24, 0x9F	; 159
 5b2:	9f e0       	ldi	r25, 0x0F	; 15
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_start+0x4>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <lcd_start+0xa>
 5ba:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5bc:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 5be:	80 e3       	ldi	r24, 0x30	; 48
 5c0:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 5c2:	5e 9a       	sbi	0x0b, 6	; 11
 5c4:	ef e1       	ldi	r30, 0x1F	; 31
 5c6:	fe e4       	ldi	r31, 0x4E	; 78
 5c8:	31 97       	sbiw	r30, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <lcd_start+0x18>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <lcd_start+0x1e>
 5ce:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5d0:	5e 98       	cbi	0x0b, 6	; 11
 5d2:	ef e9       	ldi	r30, 0x9F	; 159
 5d4:	ff e0       	ldi	r31, 0x0F	; 15
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_start+0x26>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <lcd_start+0x2c>
 5dc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5de:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 5e0:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 5e2:	5e 9a       	sbi	0x0b, 6	; 11
 5e4:	ef e1       	ldi	r30, 0x1F	; 31
 5e6:	fe e4       	ldi	r31, 0x4E	; 78
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <lcd_start+0x38>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <lcd_start+0x3e>
 5ee:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5f0:	5e 98       	cbi	0x0b, 6	; 11
 5f2:	ef e9       	ldi	r30, 0x9F	; 159
 5f4:	ff e0       	ldi	r31, 0x0F	; 15
 5f6:	31 97       	sbiw	r30, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <lcd_start+0x46>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <lcd_start+0x4c>
 5fc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5fe:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 600:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 602:	5e 9a       	sbi	0x0b, 6	; 11
 604:	8f e1       	ldi	r24, 0x1F	; 31
 606:	9e e4       	ldi	r25, 0x4E	; 78
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <lcd_start+0x58>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <lcd_start+0x5e>
 60e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 610:	5e 98       	cbi	0x0b, 6	; 11
 612:	ef e9       	ldi	r30, 0x9F	; 159
 614:	ff e0       	ldi	r31, 0x0F	; 15
 616:	31 97       	sbiw	r30, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <lcd_start+0x66>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <lcd_start+0x6c>
 61c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 61e:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 620:	80 e1       	ldi	r24, 0x10	; 16
 622:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 624:	5e 9a       	sbi	0x0b, 6	; 11
 626:	8f e9       	ldi	r24, 0x9F	; 159
 628:	9f e0       	ldi	r25, 0x0F	; 15
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_start+0x7a>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <lcd_start+0x80>
 630:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 632:	5e 98       	cbi	0x0b, 6	; 11
 634:	ef e9       	ldi	r30, 0x9F	; 159
 636:	ff e0       	ldi	r31, 0x0F	; 15
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <lcd_start+0x88>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <lcd_start+0x8e>
 63e:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 640:	88 e2       	ldi	r24, 0x28	; 40
 642:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 64c:	8c e0       	ldi	r24, 0x0C	; 12
 64e:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
 658:	08 95       	ret

0000065a <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_wr_command>
 660:	08 95       	ret

00000662 <port_config>:

volatile int i =0;

void port_config (void)
{
	lcd_port_config();
 662:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_port_config>
	adc_pin_config();
 666:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
 66a:	08 95       	ret

0000066c <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 66c:	f8 94       	cli
	lcd_start();
 66e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <lcd_start>
	adc_config();
 672:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
 676:	78 94       	sei
 678:	08 95       	ret

0000067a <main>:
}

int main(void)
{
	port_config();
 67a:	0e 94 31 03 	call	0x662	; 0x662 <port_config>
	init_devices();
 67e:	0e 94 36 03 	call	0x66c	; 0x66c <init_devices>
	float current = 0;
	float power = 0;
	float gate_voltage = 0;
	float offset = 0;
	
	lcd_string2(1, 7, "CCL");
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	51 e0       	ldi	r21, 0x01	; 1
 686:	67 e0       	ldi	r22, 0x07	; 7
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_string2>
 68e:	2f ef       	ldi	r18, 0xFF	; 255
 690:	85 ea       	ldi	r24, 0xA5	; 165
 692:	9e e0       	ldi	r25, 0x0E	; 14
 694:	21 50       	subi	r18, 0x01	; 1
 696:	80 40       	sbci	r24, 0x00	; 0
 698:	90 40       	sbci	r25, 0x00	; 0
 69a:	e1 f7       	brne	.-8      	; 0x694 <main+0x1a>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <main+0x24>
 69e:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
 6a0:	1d 9b       	sbis	0x03, 5	; 3
 6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <main+0x3e>
	{
		lcd_string2(2,1,"Supply Connected");
 6a4:	44 e0       	ldi	r20, 0x04	; 4
 6a6:	51 e0       	ldi	r21, 0x01	; 1
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_string2>
	
	float voltage = 0;
	float current = 0;
	float power = 0;
	float gate_voltage = 0;
	float offset = 0;
 6b0:	c1 2c       	mov	r12, r1
 6b2:	d1 2c       	mov	r13, r1
 6b4:	76 01       	movw	r14, r12
 6b6:	10 c0       	rjmp	.+32     	; 0x6d8 <main+0x5e>
		lcd_string2(2,1,"Supply Connected");
	}
	
	else
	{
		lcd_string2(2,2,"12v Supply NC");
 6b8:	45 e1       	ldi	r20, 0x15	; 21
 6ba:	51 e0       	ldi	r21, 0x01	; 1
 6bc:	62 e0       	ldi	r22, 0x02	; 2
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_string2>
		offset = 28.2;
 6c4:	0f 2e       	mov	r0, r31
 6c6:	fa e9       	ldi	r31, 0x9A	; 154
 6c8:	cf 2e       	mov	r12, r31
 6ca:	f9 e9       	ldi	r31, 0x99	; 153
 6cc:	df 2e       	mov	r13, r31
 6ce:	f1 ee       	ldi	r31, 0xE1	; 225
 6d0:	ef 2e       	mov	r14, r31
 6d2:	f1 e4       	ldi	r31, 0x41	; 65
 6d4:	ff 2e       	mov	r15, r31
 6d6:	f0 2d       	mov	r31, r0
 6d8:	2f ef       	ldi	r18, 0xFF	; 255
 6da:	8b e4       	ldi	r24, 0x4B	; 75
 6dc:	9d e1       	ldi	r25, 0x1D	; 29
 6de:	21 50       	subi	r18, 0x01	; 1
 6e0:	80 40       	sbci	r24, 0x00	; 0
 6e2:	90 40       	sbci	r25, 0x00	; 0
 6e4:	e1 f7       	brne	.-8      	; 0x6de <main+0x64>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <main+0x6e>
 6e8:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
 6ea:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_clear>
	
	while (1)
	{
		current = avg_read_adc_channel(0, 10);
 6ee:	6a e0       	ldi	r22, 0x0A	; 10
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	0e 94 6e 00 	call	0xdc	; 0xdc <avg_read_adc_channel>
 6f6:	bc 01       	movw	r22, r24
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__floatunsisf>
		current = current*1.953+5.7 + offset;
 700:	27 ee       	ldi	r18, 0xE7	; 231
 702:	3b ef       	ldi	r19, 0xFB	; 251
 704:	49 ef       	ldi	r20, 0xF9	; 249
 706:	5f e3       	ldi	r21, 0x3F	; 63
 708:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 70c:	26 e6       	ldi	r18, 0x66	; 102
 70e:	36 e6       	ldi	r19, 0x66	; 102
 710:	46 eb       	ldi	r20, 0xB6	; 182
 712:	50 e4       	ldi	r21, 0x40	; 64
 714:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__addsf3>
 718:	a7 01       	movw	r20, r14
 71a:	96 01       	movw	r18, r12
 71c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__addsf3>
 720:	4b 01       	movw	r8, r22
 722:	5c 01       	movw	r10, r24
		lcd_print(1,1,current,4);
 724:	0e 94 cc 04 	call	0x998	; 0x998 <__fixunssfsi>
 728:	24 e0       	ldi	r18, 0x04	; 4
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	ab 01       	movw	r20, r22
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_print>
		lcd_string2(1,5,"mA  ");
 736:	43 e2       	ldi	r20, 0x23	; 35
 738:	51 e0       	ldi	r21, 0x01	; 1
 73a:	65 e0       	ldi	r22, 0x05	; 5
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_string2>
				
		voltage = avg_read_adc_channel(1, 10);
 742:	6a e0       	ldi	r22, 0x0A	; 10
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 6e 00 	call	0xdc	; 0xdc <avg_read_adc_channel>
 74a:	bc 01       	movw	r22, r24
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__floatunsisf>
		voltage = voltage*29.3;
 754:	26 e6       	ldi	r18, 0x66	; 102
 756:	36 e6       	ldi	r19, 0x66	; 102
 758:	4a ee       	ldi	r20, 0xEA	; 234
 75a:	51 e4       	ldi	r21, 0x41	; 65
 75c:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 760:	2b 01       	movw	r4, r22
 762:	3c 01       	movw	r6, r24
		lcd_print(1,10,voltage,5);
 764:	0e 94 cc 04 	call	0x998	; 0x998 <__fixunssfsi>
 768:	25 e0       	ldi	r18, 0x05	; 5
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	ab 01       	movw	r20, r22
 76e:	6a e0       	ldi	r22, 0x0A	; 10
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_print>
		lcd_string2(1,15,"mV");
 776:	48 e2       	ldi	r20, 0x28	; 40
 778:	51 e0       	ldi	r21, 0x01	; 1
 77a:	6f e0       	ldi	r22, 0x0F	; 15
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_string2>
		
		power = voltage*current/1000;
 782:	a5 01       	movw	r20, r10
 784:	94 01       	movw	r18, r8
 786:	c3 01       	movw	r24, r6
 788:	b2 01       	movw	r22, r4
 78a:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 78e:	20 e0       	ldi	r18, 0x00	; 0
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	4a e7       	ldi	r20, 0x7A	; 122
 794:	54 e4       	ldi	r21, 0x44	; 68
 796:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divsf3>
		lcd_print(2,1,power,5);
 79a:	0e 94 cc 04 	call	0x998	; 0x998 <__fixunssfsi>
 79e:	25 e0       	ldi	r18, 0x05	; 5
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	ab 01       	movw	r20, r22
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_print>
		lcd_string2(2,6,"mW");
 7ac:	4b e2       	ldi	r20, 0x2B	; 43
 7ae:	51 e0       	ldi	r21, 0x01	; 1
 7b0:	66 e0       	ldi	r22, 0x06	; 6
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_string2>
 7b8:	8f e3       	ldi	r24, 0x3F	; 63
 7ba:	9c e9       	ldi	r25, 0x9C	; 156
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <main+0x142>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <main+0x148>
 7c2:	00 00       	nop
		lcd_string2(2,15,"mV");
		*/
				
		_delay_ms(10);
		//i++;
		lcd_print(2,11,i,3);
 7c4:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <i>
 7c8:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <i+0x1>
 7cc:	23 e0       	ldi	r18, 0x03	; 3
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	6b e0       	ldi	r22, 0x0B	; 11
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_print>
	}
 7d8:	8a cf       	rjmp	.-236    	; 0x6ee <main+0x74>

000007da <__subsf3>:
 7da:	50 58       	subi	r21, 0x80	; 128

000007dc <__addsf3>:
 7dc:	bb 27       	eor	r27, r27
 7de:	aa 27       	eor	r26, r26
 7e0:	0e 94 05 04 	call	0x80a	; 0x80a <__addsf3x>
 7e4:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 7e8:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 7ec:	38 f0       	brcs	.+14     	; 0x7fc <__addsf3+0x20>
 7ee:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <__addsf3+0x20>
 7f4:	39 f4       	brne	.+14     	; 0x804 <__addsf3+0x28>
 7f6:	9f 3f       	cpi	r25, 0xFF	; 255
 7f8:	19 f4       	brne	.+6      	; 0x800 <__addsf3+0x24>
 7fa:	26 f4       	brtc	.+8      	; 0x804 <__addsf3+0x28>
 7fc:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_nan>
 800:	0e f4       	brtc	.+2      	; 0x804 <__addsf3+0x28>
 802:	e0 95       	com	r30
 804:	e7 fb       	bst	r30, 7
 806:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>

0000080a <__addsf3x>:
 80a:	e9 2f       	mov	r30, r25
 80c:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 810:	58 f3       	brcs	.-42     	; 0x7e8 <__addsf3+0xc>
 812:	ba 17       	cp	r27, r26
 814:	62 07       	cpc	r22, r18
 816:	73 07       	cpc	r23, r19
 818:	84 07       	cpc	r24, r20
 81a:	95 07       	cpc	r25, r21
 81c:	20 f0       	brcs	.+8      	; 0x826 <__addsf3x+0x1c>
 81e:	79 f4       	brne	.+30     	; 0x83e <__addsf3x+0x34>
 820:	a6 f5       	brtc	.+104    	; 0x88a <__addsf3x+0x80>
 822:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_zero>
 826:	0e f4       	brtc	.+2      	; 0x82a <__addsf3x+0x20>
 828:	e0 95       	com	r30
 82a:	0b 2e       	mov	r0, r27
 82c:	ba 2f       	mov	r27, r26
 82e:	a0 2d       	mov	r26, r0
 830:	0b 01       	movw	r0, r22
 832:	b9 01       	movw	r22, r18
 834:	90 01       	movw	r18, r0
 836:	0c 01       	movw	r0, r24
 838:	ca 01       	movw	r24, r20
 83a:	a0 01       	movw	r20, r0
 83c:	11 24       	eor	r1, r1
 83e:	ff 27       	eor	r31, r31
 840:	59 1b       	sub	r21, r25
 842:	99 f0       	breq	.+38     	; 0x86a <__addsf3x+0x60>
 844:	59 3f       	cpi	r21, 0xF9	; 249
 846:	50 f4       	brcc	.+20     	; 0x85c <__addsf3x+0x52>
 848:	50 3e       	cpi	r21, 0xE0	; 224
 84a:	68 f1       	brcs	.+90     	; 0x8a6 <__addsf3x+0x9c>
 84c:	1a 16       	cp	r1, r26
 84e:	f0 40       	sbci	r31, 0x00	; 0
 850:	a2 2f       	mov	r26, r18
 852:	23 2f       	mov	r18, r19
 854:	34 2f       	mov	r19, r20
 856:	44 27       	eor	r20, r20
 858:	58 5f       	subi	r21, 0xF8	; 248
 85a:	f3 cf       	rjmp	.-26     	; 0x842 <__addsf3x+0x38>
 85c:	46 95       	lsr	r20
 85e:	37 95       	ror	r19
 860:	27 95       	ror	r18
 862:	a7 95       	ror	r26
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	53 95       	inc	r21
 868:	c9 f7       	brne	.-14     	; 0x85c <__addsf3x+0x52>
 86a:	7e f4       	brtc	.+30     	; 0x88a <__addsf3x+0x80>
 86c:	1f 16       	cp	r1, r31
 86e:	ba 0b       	sbc	r27, r26
 870:	62 0b       	sbc	r22, r18
 872:	73 0b       	sbc	r23, r19
 874:	84 0b       	sbc	r24, r20
 876:	ba f0       	brmi	.+46     	; 0x8a6 <__addsf3x+0x9c>
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	a1 f0       	breq	.+40     	; 0x8a4 <__addsf3x+0x9a>
 87c:	ff 0f       	add	r31, r31
 87e:	bb 1f       	adc	r27, r27
 880:	66 1f       	adc	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	c2 f7       	brpl	.-16     	; 0x878 <__addsf3x+0x6e>
 888:	0e c0       	rjmp	.+28     	; 0x8a6 <__addsf3x+0x9c>
 88a:	ba 0f       	add	r27, r26
 88c:	62 1f       	adc	r22, r18
 88e:	73 1f       	adc	r23, r19
 890:	84 1f       	adc	r24, r20
 892:	48 f4       	brcc	.+18     	; 0x8a6 <__addsf3x+0x9c>
 894:	87 95       	ror	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f7 95       	ror	r31
 89e:	9e 3f       	cpi	r25, 0xFE	; 254
 8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__addsf3x+0x9a>
 8a2:	b0 cf       	rjmp	.-160    	; 0x804 <__addsf3+0x28>
 8a4:	93 95       	inc	r25
 8a6:	88 0f       	add	r24, r24
 8a8:	08 f0       	brcs	.+2      	; 0x8ac <__addsf3x+0xa2>
 8aa:	99 27       	eor	r25, r25
 8ac:	ee 0f       	add	r30, r30
 8ae:	97 95       	ror	r25
 8b0:	87 95       	ror	r24
 8b2:	08 95       	ret

000008b4 <__divsf3>:
 8b4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divsf3x>
 8b8:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 8bc:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 8c0:	58 f0       	brcs	.+22     	; 0x8d8 <__divsf3+0x24>
 8c2:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 8c6:	40 f0       	brcs	.+16     	; 0x8d8 <__divsf3+0x24>
 8c8:	29 f4       	brne	.+10     	; 0x8d4 <__divsf3+0x20>
 8ca:	5f 3f       	cpi	r21, 0xFF	; 255
 8cc:	29 f0       	breq	.+10     	; 0x8d8 <__divsf3+0x24>
 8ce:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 8d2:	51 11       	cpse	r21, r1
 8d4:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 8d8:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_nan>

000008dc <__divsf3x>:
 8dc:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 8e0:	68 f3       	brcs	.-38     	; 0x8bc <__divsf3+0x8>

000008e2 <__divsf3_pse>:
 8e2:	99 23       	and	r25, r25
 8e4:	b1 f3       	breq	.-20     	; 0x8d2 <__divsf3+0x1e>
 8e6:	55 23       	and	r21, r21
 8e8:	91 f3       	breq	.-28     	; 0x8ce <__divsf3+0x1a>
 8ea:	95 1b       	sub	r25, r21
 8ec:	55 0b       	sbc	r21, r21
 8ee:	bb 27       	eor	r27, r27
 8f0:	aa 27       	eor	r26, r26
 8f2:	62 17       	cp	r22, r18
 8f4:	73 07       	cpc	r23, r19
 8f6:	84 07       	cpc	r24, r20
 8f8:	38 f0       	brcs	.+14     	; 0x908 <__stack+0x9>
 8fa:	9f 5f       	subi	r25, 0xFF	; 255
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	22 0f       	add	r18, r18
 900:	33 1f       	adc	r19, r19
 902:	44 1f       	adc	r20, r20
 904:	aa 1f       	adc	r26, r26
 906:	a9 f3       	breq	.-22     	; 0x8f2 <__divsf3_pse+0x10>
 908:	35 d0       	rcall	.+106    	; 0x974 <__stack+0x75>
 90a:	0e 2e       	mov	r0, r30
 90c:	3a f0       	brmi	.+14     	; 0x91c <__stack+0x1d>
 90e:	e0 e8       	ldi	r30, 0x80	; 128
 910:	32 d0       	rcall	.+100    	; 0x976 <__stack+0x77>
 912:	91 50       	subi	r25, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	e6 95       	lsr	r30
 918:	00 1c       	adc	r0, r0
 91a:	ca f7       	brpl	.-14     	; 0x90e <__stack+0xf>
 91c:	2b d0       	rcall	.+86     	; 0x974 <__stack+0x75>
 91e:	fe 2f       	mov	r31, r30
 920:	29 d0       	rcall	.+82     	; 0x974 <__stack+0x75>
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	bb 1f       	adc	r27, r27
 92a:	26 17       	cp	r18, r22
 92c:	37 07       	cpc	r19, r23
 92e:	48 07       	cpc	r20, r24
 930:	ab 07       	cpc	r26, r27
 932:	b0 e8       	ldi	r27, 0x80	; 128
 934:	09 f0       	breq	.+2      	; 0x938 <__stack+0x39>
 936:	bb 0b       	sbc	r27, r27
 938:	80 2d       	mov	r24, r0
 93a:	bf 01       	movw	r22, r30
 93c:	ff 27       	eor	r31, r31
 93e:	93 58       	subi	r25, 0x83	; 131
 940:	5f 4f       	sbci	r21, 0xFF	; 255
 942:	3a f0       	brmi	.+14     	; 0x952 <__stack+0x53>
 944:	9e 3f       	cpi	r25, 0xFE	; 254
 946:	51 05       	cpc	r21, r1
 948:	78 f0       	brcs	.+30     	; 0x968 <__stack+0x69>
 94a:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 94e:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 952:	5f 3f       	cpi	r21, 0xFF	; 255
 954:	e4 f3       	brlt	.-8      	; 0x94e <__stack+0x4f>
 956:	98 3e       	cpi	r25, 0xE8	; 232
 958:	d4 f3       	brlt	.-12     	; 0x94e <__stack+0x4f>
 95a:	86 95       	lsr	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	b7 95       	ror	r27
 962:	f7 95       	ror	r31
 964:	9f 5f       	subi	r25, 0xFF	; 255
 966:	c9 f7       	brne	.-14     	; 0x95a <__stack+0x5b>
 968:	88 0f       	add	r24, r24
 96a:	91 1d       	adc	r25, r1
 96c:	96 95       	lsr	r25
 96e:	87 95       	ror	r24
 970:	97 f9       	bld	r25, 7
 972:	08 95       	ret
 974:	e1 e0       	ldi	r30, 0x01	; 1
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	bb 1f       	adc	r27, r27
 97e:	62 17       	cp	r22, r18
 980:	73 07       	cpc	r23, r19
 982:	84 07       	cpc	r24, r20
 984:	ba 07       	cpc	r27, r26
 986:	20 f0       	brcs	.+8      	; 0x990 <__stack+0x91>
 988:	62 1b       	sub	r22, r18
 98a:	73 0b       	sbc	r23, r19
 98c:	84 0b       	sbc	r24, r20
 98e:	ba 0b       	sbc	r27, r26
 990:	ee 1f       	adc	r30, r30
 992:	88 f7       	brcc	.-30     	; 0x976 <__stack+0x77>
 994:	e0 95       	com	r30
 996:	08 95       	ret

00000998 <__fixunssfsi>:
 998:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_splitA>
 99c:	88 f0       	brcs	.+34     	; 0x9c0 <__fixunssfsi+0x28>
 99e:	9f 57       	subi	r25, 0x7F	; 127
 9a0:	98 f0       	brcs	.+38     	; 0x9c8 <__fixunssfsi+0x30>
 9a2:	b9 2f       	mov	r27, r25
 9a4:	99 27       	eor	r25, r25
 9a6:	b7 51       	subi	r27, 0x17	; 23
 9a8:	b0 f0       	brcs	.+44     	; 0x9d6 <__fixunssfsi+0x3e>
 9aa:	e1 f0       	breq	.+56     	; 0x9e4 <__fixunssfsi+0x4c>
 9ac:	66 0f       	add	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	1a f0       	brmi	.+6      	; 0x9bc <__fixunssfsi+0x24>
 9b6:	ba 95       	dec	r27
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <__fixunssfsi+0x14>
 9ba:	14 c0       	rjmp	.+40     	; 0x9e4 <__fixunssfsi+0x4c>
 9bc:	b1 30       	cpi	r27, 0x01	; 1
 9be:	91 f0       	breq	.+36     	; 0x9e4 <__fixunssfsi+0x4c>
 9c0:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_zero>
 9c4:	b1 e0       	ldi	r27, 0x01	; 1
 9c6:	08 95       	ret
 9c8:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_zero>
 9cc:	67 2f       	mov	r22, r23
 9ce:	78 2f       	mov	r23, r24
 9d0:	88 27       	eor	r24, r24
 9d2:	b8 5f       	subi	r27, 0xF8	; 248
 9d4:	39 f0       	breq	.+14     	; 0x9e4 <__fixunssfsi+0x4c>
 9d6:	b9 3f       	cpi	r27, 0xF9	; 249
 9d8:	cc f3       	brlt	.-14     	; 0x9cc <__fixunssfsi+0x34>
 9da:	86 95       	lsr	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b3 95       	inc	r27
 9e2:	d9 f7       	brne	.-10     	; 0x9da <__fixunssfsi+0x42>
 9e4:	3e f4       	brtc	.+14     	; 0x9f4 <__fixunssfsi+0x5c>
 9e6:	90 95       	com	r25
 9e8:	80 95       	com	r24
 9ea:	70 95       	com	r23
 9ec:	61 95       	neg	r22
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__floatunsisf>:
 9f6:	e8 94       	clt
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__floatsisf+0x12>

000009fa <__floatsisf>:
 9fa:	97 fb       	bst	r25, 7
 9fc:	3e f4       	brtc	.+14     	; 0xa0c <__floatsisf+0x12>
 9fe:	90 95       	com	r25
 a00:	80 95       	com	r24
 a02:	70 95       	com	r23
 a04:	61 95       	neg	r22
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8f 4f       	sbci	r24, 0xFF	; 255
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	99 23       	and	r25, r25
 a0e:	a9 f0       	breq	.+42     	; 0xa3a <__floatsisf+0x40>
 a10:	f9 2f       	mov	r31, r25
 a12:	96 e9       	ldi	r25, 0x96	; 150
 a14:	bb 27       	eor	r27, r27
 a16:	93 95       	inc	r25
 a18:	f6 95       	lsr	r31
 a1a:	87 95       	ror	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f1 11       	cpse	r31, r1
 a24:	f8 cf       	rjmp	.-16     	; 0xa16 <__floatsisf+0x1c>
 a26:	fa f4       	brpl	.+62     	; 0xa66 <__floatsisf+0x6c>
 a28:	bb 0f       	add	r27, r27
 a2a:	11 f4       	brne	.+4      	; 0xa30 <__floatsisf+0x36>
 a2c:	60 ff       	sbrs	r22, 0
 a2e:	1b c0       	rjmp	.+54     	; 0xa66 <__floatsisf+0x6c>
 a30:	6f 5f       	subi	r22, 0xFF	; 255
 a32:	7f 4f       	sbci	r23, 0xFF	; 255
 a34:	8f 4f       	sbci	r24, 0xFF	; 255
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	16 c0       	rjmp	.+44     	; 0xa66 <__floatsisf+0x6c>
 a3a:	88 23       	and	r24, r24
 a3c:	11 f0       	breq	.+4      	; 0xa42 <__floatsisf+0x48>
 a3e:	96 e9       	ldi	r25, 0x96	; 150
 a40:	11 c0       	rjmp	.+34     	; 0xa64 <__floatsisf+0x6a>
 a42:	77 23       	and	r23, r23
 a44:	21 f0       	breq	.+8      	; 0xa4e <__floatsisf+0x54>
 a46:	9e e8       	ldi	r25, 0x8E	; 142
 a48:	87 2f       	mov	r24, r23
 a4a:	76 2f       	mov	r23, r22
 a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__floatsisf+0x5e>
 a4e:	66 23       	and	r22, r22
 a50:	71 f0       	breq	.+28     	; 0xa6e <__floatsisf+0x74>
 a52:	96 e8       	ldi	r25, 0x86	; 134
 a54:	86 2f       	mov	r24, r22
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	2a f0       	brmi	.+10     	; 0xa66 <__floatsisf+0x6c>
 a5c:	9a 95       	dec	r25
 a5e:	66 0f       	add	r22, r22
 a60:	77 1f       	adc	r23, r23
 a62:	88 1f       	adc	r24, r24
 a64:	da f7       	brpl	.-10     	; 0xa5c <__floatsisf+0x62>
 a66:	88 0f       	add	r24, r24
 a68:	96 95       	lsr	r25
 a6a:	87 95       	ror	r24
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret

00000a70 <__fp_inf>:
 a70:	97 f9       	bld	r25, 7
 a72:	9f 67       	ori	r25, 0x7F	; 127
 a74:	80 e8       	ldi	r24, 0x80	; 128
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	08 95       	ret

00000a7c <__fp_nan>:
 a7c:	9f ef       	ldi	r25, 0xFF	; 255
 a7e:	80 ec       	ldi	r24, 0xC0	; 192
 a80:	08 95       	ret

00000a82 <__fp_pscA>:
 a82:	00 24       	eor	r0, r0
 a84:	0a 94       	dec	r0
 a86:	16 16       	cp	r1, r22
 a88:	17 06       	cpc	r1, r23
 a8a:	18 06       	cpc	r1, r24
 a8c:	09 06       	cpc	r0, r25
 a8e:	08 95       	ret

00000a90 <__fp_pscB>:
 a90:	00 24       	eor	r0, r0
 a92:	0a 94       	dec	r0
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	05 06       	cpc	r0, r21
 a9c:	08 95       	ret

00000a9e <__fp_round>:
 a9e:	09 2e       	mov	r0, r25
 aa0:	03 94       	inc	r0
 aa2:	00 0c       	add	r0, r0
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__fp_round+0xc>
 aa6:	88 23       	and	r24, r24
 aa8:	52 f0       	brmi	.+20     	; 0xabe <__fp_round+0x20>
 aaa:	bb 0f       	add	r27, r27
 aac:	40 f4       	brcc	.+16     	; 0xabe <__fp_round+0x20>
 aae:	bf 2b       	or	r27, r31
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__fp_round+0x18>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <__fp_round+0x20>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	08 95       	ret

00000ac0 <__fp_split3>:
 ac0:	57 fd       	sbrc	r21, 7
 ac2:	90 58       	subi	r25, 0x80	; 128
 ac4:	44 0f       	add	r20, r20
 ac6:	55 1f       	adc	r21, r21
 ac8:	59 f0       	breq	.+22     	; 0xae0 <__fp_splitA+0x10>
 aca:	5f 3f       	cpi	r21, 0xFF	; 255
 acc:	71 f0       	breq	.+28     	; 0xaea <__fp_splitA+0x1a>
 ace:	47 95       	ror	r20

00000ad0 <__fp_splitA>:
 ad0:	88 0f       	add	r24, r24
 ad2:	97 fb       	bst	r25, 7
 ad4:	99 1f       	adc	r25, r25
 ad6:	61 f0       	breq	.+24     	; 0xaf0 <__fp_splitA+0x20>
 ad8:	9f 3f       	cpi	r25, 0xFF	; 255
 ada:	79 f0       	breq	.+30     	; 0xafa <__fp_splitA+0x2a>
 adc:	87 95       	ror	r24
 ade:	08 95       	ret
 ae0:	12 16       	cp	r1, r18
 ae2:	13 06       	cpc	r1, r19
 ae4:	14 06       	cpc	r1, r20
 ae6:	55 1f       	adc	r21, r21
 ae8:	f2 cf       	rjmp	.-28     	; 0xace <__fp_split3+0xe>
 aea:	46 95       	lsr	r20
 aec:	f1 df       	rcall	.-30     	; 0xad0 <__fp_splitA>
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <__fp_splitA+0x30>
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	18 06       	cpc	r1, r24
 af6:	99 1f       	adc	r25, r25
 af8:	f1 cf       	rjmp	.-30     	; 0xadc <__fp_splitA+0xc>
 afa:	86 95       	lsr	r24
 afc:	71 05       	cpc	r23, r1
 afe:	61 05       	cpc	r22, r1
 b00:	08 94       	sec
 b02:	08 95       	ret

00000b04 <__fp_zero>:
 b04:	e8 94       	clt

00000b06 <__fp_szero>:
 b06:	bb 27       	eor	r27, r27
 b08:	66 27       	eor	r22, r22
 b0a:	77 27       	eor	r23, r23
 b0c:	cb 01       	movw	r24, r22
 b0e:	97 f9       	bld	r25, 7
 b10:	08 95       	ret

00000b12 <__mulsf3>:
 b12:	0e 94 9c 05 	call	0xb38	; 0xb38 <__mulsf3x>
 b16:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 b1a:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 b1e:	38 f0       	brcs	.+14     	; 0xb2e <__mulsf3+0x1c>
 b20:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 b24:	20 f0       	brcs	.+8      	; 0xb2e <__mulsf3+0x1c>
 b26:	95 23       	and	r25, r21
 b28:	11 f0       	breq	.+4      	; 0xb2e <__mulsf3+0x1c>
 b2a:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 b2e:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_nan>
 b32:	11 24       	eor	r1, r1
 b34:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>

00000b38 <__mulsf3x>:
 b38:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 b3c:	70 f3       	brcs	.-36     	; 0xb1a <__mulsf3+0x8>

00000b3e <__mulsf3_pse>:
 b3e:	95 9f       	mul	r25, r21
 b40:	c1 f3       	breq	.-16     	; 0xb32 <__mulsf3+0x20>
 b42:	95 0f       	add	r25, r21
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	55 1f       	adc	r21, r21
 b48:	62 9f       	mul	r22, r18
 b4a:	f0 01       	movw	r30, r0
 b4c:	72 9f       	mul	r23, r18
 b4e:	bb 27       	eor	r27, r27
 b50:	f0 0d       	add	r31, r0
 b52:	b1 1d       	adc	r27, r1
 b54:	63 9f       	mul	r22, r19
 b56:	aa 27       	eor	r26, r26
 b58:	f0 0d       	add	r31, r0
 b5a:	b1 1d       	adc	r27, r1
 b5c:	aa 1f       	adc	r26, r26
 b5e:	64 9f       	mul	r22, r20
 b60:	66 27       	eor	r22, r22
 b62:	b0 0d       	add	r27, r0
 b64:	a1 1d       	adc	r26, r1
 b66:	66 1f       	adc	r22, r22
 b68:	82 9f       	mul	r24, r18
 b6a:	22 27       	eor	r18, r18
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	62 1f       	adc	r22, r18
 b72:	73 9f       	mul	r23, r19
 b74:	b0 0d       	add	r27, r0
 b76:	a1 1d       	adc	r26, r1
 b78:	62 1f       	adc	r22, r18
 b7a:	83 9f       	mul	r24, r19
 b7c:	a0 0d       	add	r26, r0
 b7e:	61 1d       	adc	r22, r1
 b80:	22 1f       	adc	r18, r18
 b82:	74 9f       	mul	r23, r20
 b84:	33 27       	eor	r19, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	23 1f       	adc	r18, r19
 b8c:	84 9f       	mul	r24, r20
 b8e:	60 0d       	add	r22, r0
 b90:	21 1d       	adc	r18, r1
 b92:	82 2f       	mov	r24, r18
 b94:	76 2f       	mov	r23, r22
 b96:	6a 2f       	mov	r22, r26
 b98:	11 24       	eor	r1, r1
 b9a:	9f 57       	subi	r25, 0x7F	; 127
 b9c:	50 40       	sbci	r21, 0x00	; 0
 b9e:	9a f0       	brmi	.+38     	; 0xbc6 <__mulsf3_pse+0x88>
 ba0:	f1 f0       	breq	.+60     	; 0xbde <__mulsf3_pse+0xa0>
 ba2:	88 23       	and	r24, r24
 ba4:	4a f0       	brmi	.+18     	; 0xbb8 <__mulsf3_pse+0x7a>
 ba6:	ee 0f       	add	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	bb 1f       	adc	r27, r27
 bac:	66 1f       	adc	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	91 50       	subi	r25, 0x01	; 1
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__mulsf3_pse+0x64>
 bb8:	9e 3f       	cpi	r25, 0xFE	; 254
 bba:	51 05       	cpc	r21, r1
 bbc:	80 f0       	brcs	.+32     	; 0xbde <__mulsf3_pse+0xa0>
 bbe:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 bc2:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 bc6:	5f 3f       	cpi	r21, 0xFF	; 255
 bc8:	e4 f3       	brlt	.-8      	; 0xbc2 <__mulsf3_pse+0x84>
 bca:	98 3e       	cpi	r25, 0xE8	; 232
 bcc:	d4 f3       	brlt	.-12     	; 0xbc2 <__mulsf3_pse+0x84>
 bce:	86 95       	lsr	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b7 95       	ror	r27
 bd6:	f7 95       	ror	r31
 bd8:	e7 95       	ror	r30
 bda:	9f 5f       	subi	r25, 0xFF	; 255
 bdc:	c1 f7       	brne	.-16     	; 0xbce <__mulsf3_pse+0x90>
 bde:	fe 2b       	or	r31, r30
 be0:	88 0f       	add	r24, r24
 be2:	91 1d       	adc	r25, r1
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__udivmodhi4>:
 bec:	aa 1b       	sub	r26, r26
 bee:	bb 1b       	sub	r27, r27
 bf0:	51 e1       	ldi	r21, 0x11	; 17
 bf2:	07 c0       	rjmp	.+14     	; 0xc02 <__udivmodhi4_ep>

00000bf4 <__udivmodhi4_loop>:
 bf4:	aa 1f       	adc	r26, r26
 bf6:	bb 1f       	adc	r27, r27
 bf8:	a6 17       	cp	r26, r22
 bfa:	b7 07       	cpc	r27, r23
 bfc:	10 f0       	brcs	.+4      	; 0xc02 <__udivmodhi4_ep>
 bfe:	a6 1b       	sub	r26, r22
 c00:	b7 0b       	sbc	r27, r23

00000c02 <__udivmodhi4_ep>:
 c02:	88 1f       	adc	r24, r24
 c04:	99 1f       	adc	r25, r25
 c06:	5a 95       	dec	r21
 c08:	a9 f7       	brne	.-22     	; 0xbf4 <__udivmodhi4_loop>
 c0a:	80 95       	com	r24
 c0c:	90 95       	com	r25
 c0e:	bc 01       	movw	r22, r24
 c10:	cd 01       	movw	r24, r26
 c12:	08 95       	ret

00000c14 <__umulhisi3>:
 c14:	a2 9f       	mul	r26, r18
 c16:	b0 01       	movw	r22, r0
 c18:	b3 9f       	mul	r27, r19
 c1a:	c0 01       	movw	r24, r0
 c1c:	a3 9f       	mul	r26, r19
 c1e:	70 0d       	add	r23, r0
 c20:	81 1d       	adc	r24, r1
 c22:	11 24       	eor	r1, r1
 c24:	91 1d       	adc	r25, r1
 c26:	b2 9f       	mul	r27, r18
 c28:	70 0d       	add	r23, r0
 c2a:	81 1d       	adc	r24, r1
 c2c:	11 24       	eor	r1, r1
 c2e:	91 1d       	adc	r25, r1
 c30:	08 95       	ret

00000c32 <_exit>:
 c32:	f8 94       	cli

00000c34 <__stop_program>:
 c34:	ff cf       	rjmp	.-2      	; 0xc34 <__stop_program>
