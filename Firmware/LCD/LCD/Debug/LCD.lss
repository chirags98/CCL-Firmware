
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000113e  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e1  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d1  00000000  00000000  0000227b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000529  00000000  00000000  00003191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000036ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
  88:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_pin_config>:
#include "LCD.h"

//ADC pin configuration
void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
  90:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
  92:	18 b8       	out	0x08, r1	; 8
  94:	08 95       	ret

00000096 <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x85; //1000 01 01 ADC Enable, ADC Interrupt Enable, ADC Prescaler=2
  96:	85 e8       	ldi	r24, 0x85	; 133
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  9c:	08 95       	ret

0000009e <read_adc>:
}

unsigned int read_adc()
{
	ADCSRA|=0x40; //ADSC: ADC Start Conversion: In Single Conversion mode, write this bit to one to start each conversion.
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
	while((ADCSRA & 0x10)==0); //ADIF: ADC Interrupt Flag: This bit is set when an ADC conversion completes and the Data Registers are updated.
  a8:	80 81       	ld	r24, Z
  aa:	84 ff       	sbrs	r24, 4
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <read_adc+0xa>
	ADCSRA|=0x10;	//ADIF is cleared by writing a logical one to the flag.
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	80 83       	st	Z, r24
	
	unsigned char low = ADCL;
  b8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
  bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	unsigned int val = 0x03 && high;
	val = val<<8;
	val = 256*high + low;
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	98 2f       	mov	r25, r24
  c4:	88 27       	eor	r24, r24
	
	return val;
  c6:	82 0f       	add	r24, r18
  c8:	91 1d       	adc	r25, r1
  ca:	08 95       	ret

000000cc <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
  cc:	98 2f       	mov	r25, r24
  ce:	88 1f       	adc	r24, r24
  d0:	88 27       	eor	r24, r24
  d2:	88 1f       	adc	r24, r24
  d4:	96 fd       	sbrc	r25, 6
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Bit_Reverse+0x10>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	01 c0       	rjmp	.+2      	; 0xde <Bit_Reverse+0x12>
  dc:	22 e0       	ldi	r18, 0x02	; 2
  de:	82 2b       	or	r24, r18
  e0:	95 fd       	sbrc	r25, 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <Bit_Reverse+0x1c>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	01 c0       	rjmp	.+2      	; 0xea <Bit_Reverse+0x1e>
  e8:	24 e0       	ldi	r18, 0x04	; 4
  ea:	82 2b       	or	r24, r18
  ec:	94 fd       	sbrc	r25, 4
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <Bit_Reverse+0x28>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <Bit_Reverse+0x2a>
  f4:	28 e0       	ldi	r18, 0x08	; 8
  f6:	82 2b       	or	r24, r18
  f8:	93 fd       	sbrc	r25, 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <Bit_Reverse+0x34>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <Bit_Reverse+0x36>
 100:	20 e1       	ldi	r18, 0x10	; 16
 102:	82 2b       	or	r24, r18
 104:	92 fd       	sbrc	r25, 2
 106:	02 c0       	rjmp	.+4      	; 0x10c <Bit_Reverse+0x40>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	01 c0       	rjmp	.+2      	; 0x10e <Bit_Reverse+0x42>
 10c:	20 e2       	ldi	r18, 0x20	; 32
 10e:	82 2b       	or	r24, r18
 110:	91 fd       	sbrc	r25, 1
 112:	02 c0       	rjmp	.+4      	; 0x118 <Bit_Reverse+0x4c>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	01 c0       	rjmp	.+2      	; 0x11a <Bit_Reverse+0x4e>
 118:	20 e4       	ldi	r18, 0x40	; 64
 11a:	82 2b       	or	r24, r18
 11c:	90 fd       	sbrc	r25, 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Bit_Reverse+0x58>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 c0       	rjmp	.+2      	; 0x126 <Bit_Reverse+0x5a>
 124:	90 e8       	ldi	r25, 0x80	; 128
 126:	89 2b       	or	r24, r25
 128:	08 95       	ret

0000012a <lcd_wr_command>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	0e 94 66 00 	call	0xcc	; 0xcc <Bit_Reverse>
 134:	88 0f       	add	r24, r24
 136:	88 0f       	add	r24, r24
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13c:	9b b1       	in	r25, 0x0b	; 11
 13e:	93 7c       	andi	r25, 0xC3	; 195
 140:	9b b9       	out	0x0b, r25	; 11
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 148:	98 2b       	or	r25, r24
 14a:	9b b9       	out	0x0b, r25	; 11
 14c:	5f 98       	cbi	0x0b, 7	; 11
 14e:	5e 9a       	sbi	0x0b, 6	; 11
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	9e e4       	ldi	r25, 0x4E	; 78
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_wr_command+0x2a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_wr_command+0x30>
 15a:	00 00       	nop
 15c:	5e 98       	cbi	0x0b, 6	; 11
 15e:	8c 2f       	mov	r24, r28
 160:	82 95       	swap	r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	0e 94 66 00 	call	0xcc	; 0xcc <Bit_Reverse>
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	93 7c       	andi	r25, 0xC3	; 195
 16c:	9b b9       	out	0x0b, r25	; 11
 16e:	9b b1       	in	r25, 0x0b	; 11
 170:	88 0f       	add	r24, r24
 172:	88 0f       	add	r24, r24
 174:	98 2b       	or	r25, r24
 176:	9b b9       	out	0x0b, r25	; 11
 178:	5f 98       	cbi	0x0b, 7	; 11
 17a:	5e 9a       	sbi	0x0b, 6	; 11
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_wr_command+0x56>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_wr_command+0x5c>
 186:	00 00       	nop
 188:	5e 98       	cbi	0x0b, 6	; 11
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_wr_char>:
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	0e 94 66 00 	call	0xcc	; 0xcc <Bit_Reverse>
 198:	9b b1       	in	r25, 0x0b	; 11
 19a:	93 7c       	andi	r25, 0xC3	; 195
 19c:	9b b9       	out	0x0b, r25	; 11
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	88 0f       	add	r24, r24
 1a2:	88 0f       	add	r24, r24
 1a4:	98 2b       	or	r25, r24
 1a6:	9b b9       	out	0x0b, r25	; 11
 1a8:	5f 9a       	sbi	0x0b, 7	; 11
 1aa:	5e 9a       	sbi	0x0b, 6	; 11
 1ac:	8f e1       	ldi	r24, 0x1F	; 31
 1ae:	9e e4       	ldi	r25, 0x4E	; 78
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_wr_char+0x22>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_wr_char+0x28>
 1b6:	00 00       	nop
 1b8:	5e 98       	cbi	0x0b, 6	; 11
 1ba:	8c 2f       	mov	r24, r28
 1bc:	82 95       	swap	r24
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	0e 94 66 00 	call	0xcc	; 0xcc <Bit_Reverse>
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	93 7c       	andi	r25, 0xC3	; 195
 1c8:	9b b9       	out	0x0b, r25	; 11
 1ca:	9b b1       	in	r25, 0x0b	; 11
 1cc:	88 0f       	add	r24, r24
 1ce:	88 0f       	add	r24, r24
 1d0:	98 2b       	or	r25, r24
 1d2:	9b b9       	out	0x0b, r25	; 11
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	5e 9a       	sbi	0x0b, 6	; 11
 1d8:	8f e1       	ldi	r24, 0x1F	; 31
 1da:	9e e4       	ldi	r25, 0x4E	; 78
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_wr_char+0x4e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_wr_char+0x54>
 1e2:	00 00       	nop
 1e4:	5e 98       	cbi	0x0b, 6	; 11
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <lcd_port_config>:
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	8c 6f       	ori	r24, 0xFC	; 252
 1ee:	8a b9       	out	0x0a, r24	; 10
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	84 70       	andi	r24, 0x04	; 4
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	08 95       	ret

000001f8 <lcd_home>:
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
 1fe:	08 95       	ret

00000200 <lcd_cursor>:
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	19 f0       	breq	.+6      	; 0x20a <lcd_cursor+0xa>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	31 f0       	breq	.+12     	; 0x214 <lcd_cursor+0x14>
 208:	08 95       	ret
 20a:	8f e7       	ldi	r24, 0x7F	; 127
 20c:	86 0f       	add	r24, r22
 20e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
 212:	08 95       	ret
 214:	8f eb       	ldi	r24, 0xBF	; 191
 216:	86 0f       	add	r24, r22
 218:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
 21c:	08 95       	ret

0000021e <lcd_print>:
* Output: Integer is printed to the desired location and upto the desired number of digits
* Logic: 
* Example Call: lcd_string("hello")
*/
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	8a 01       	movw	r16, r20
 228:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 22a:	88 23       	and	r24, r24
 22c:	11 f0       	breq	.+4      	; 0x232 <lcd_print+0x14>
 22e:	61 11       	cpse	r22, r1
 230:	03 c0       	rjmp	.+6      	; 0x238 <lcd_print+0x1a>
	{
		lcd_home();
 232:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_home>
 236:	02 c0       	rjmp	.+4      	; 0x23c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 238:	0e 94 00 01 	call	0x200	; 0x200 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 23c:	c5 30       	cpi	r28, 0x05	; 5
 23e:	d1 05       	cpc	r29, r1
 240:	c9 f4       	brne	.+50     	; 0x274 <lcd_print+0x56>
	{
		million=value/10000+48;
 242:	98 01       	movw	r18, r16
 244:	32 95       	swap	r19
 246:	22 95       	swap	r18
 248:	2f 70       	andi	r18, 0x0F	; 15
 24a:	23 27       	eor	r18, r19
 24c:	3f 70       	andi	r19, 0x0F	; 15
 24e:	23 27       	eor	r18, r19
 250:	a7 e4       	ldi	r26, 0x47	; 71
 252:	b3 e0       	ldi	r27, 0x03	; 3
 254:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	c0 96       	adiw	r24, 0x30	; 48
 266:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <million+0x1>
 26a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <million>
		lcd_wr_char(million);
 26e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_char>
 272:	04 c0       	rjmp	.+8      	; 0x27c <lcd_print+0x5e>
		flag=1;
	}
	if(digits==4 || flag==1)
 274:	c4 30       	cpi	r28, 0x04	; 4
 276:	d1 05       	cpc	r29, r1
 278:	09 f0       	breq	.+2      	; 0x27c <lcd_print+0x5e>
 27a:	c3 c0       	rjmp	.+390    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		temp = value/1000;
 27c:	98 01       	movw	r18, r16
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	36 95       	lsr	r19
 284:	27 95       	ror	r18
 286:	36 95       	lsr	r19
 288:	27 95       	ror	r18
 28a:	a5 ec       	ldi	r26, 0xC5	; 197
 28c:	b0 e2       	ldi	r27, 0x20	; 32
 28e:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 292:	ac 01       	movw	r20, r24
 294:	52 95       	swap	r21
 296:	42 95       	swap	r20
 298:	4f 70       	andi	r20, 0x0F	; 15
 29a:	45 27       	eor	r20, r21
 29c:	5f 70       	andi	r21, 0x0F	; 15
 29e:	45 27       	eor	r20, r21
 2a0:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <temp+0x1>
 2a4:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <temp>
		thousand = temp%10 + 48;
 2a8:	9a 01       	movw	r18, r20
 2aa:	ad ec       	ldi	r26, 0xCD	; 205
 2ac:	bc ec       	ldi	r27, 0xCC	; 204
 2ae:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	9c 01       	movw	r18, r24
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	82 0f       	add	r24, r18
 2d2:	93 1f       	adc	r25, r19
 2d4:	9a 01       	movw	r18, r20
 2d6:	28 1b       	sub	r18, r24
 2d8:	39 0b       	sbc	r19, r25
 2da:	c9 01       	movw	r24, r18
 2dc:	c0 96       	adiw	r24, 0x30	; 48
 2de:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <thousand+0x1>
 2e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <thousand>
		lcd_wr_char(thousand);
 2e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 2ea:	98 01       	movw	r18, r16
 2ec:	36 95       	lsr	r19
 2ee:	27 95       	ror	r18
 2f0:	36 95       	lsr	r19
 2f2:	27 95       	ror	r18
 2f4:	ab e7       	ldi	r26, 0x7B	; 123
 2f6:	b4 e1       	ldi	r27, 0x14	; 20
 2f8:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 2fc:	ac 01       	movw	r20, r24
 2fe:	56 95       	lsr	r21
 300:	47 95       	ror	r20
 302:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <temp+0x1>
 306:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <temp>
		hundred = temp%10 + 48;
 30a:	9a 01       	movw	r18, r20
 30c:	ad ec       	ldi	r26, 0xCD	; 205
 30e:	bc ec       	ldi	r27, 0xCC	; 204
 310:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	9c 01       	movw	r18, r24
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	82 0f       	add	r24, r18
 334:	93 1f       	adc	r25, r19
 336:	9a 01       	movw	r18, r20
 338:	28 1b       	sub	r18, r24
 33a:	39 0b       	sbc	r19, r25
 33c:	c9 01       	movw	r24, r18
 33e:	c0 96       	adiw	r24, 0x30	; 48
 340:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <hundred+0x1>
 344:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <hundred>
		lcd_wr_char(hundred);
 348:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_char>
 34c:	04 c0       	rjmp	.+8      	; 0x356 <lcd_print+0x138>
		flag=1;
	}
	if(digits==2 || flag==1)
 34e:	c2 30       	cpi	r28, 0x02	; 2
 350:	d1 05       	cpc	r29, r1
 352:	09 f0       	breq	.+2      	; 0x356 <lcd_print+0x138>
 354:	5b c0       	rjmp	.+182    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
		temp = value/10;
 356:	98 01       	movw	r18, r16
 358:	ad ec       	ldi	r26, 0xCD	; 205
 35a:	bc ec       	ldi	r27, 0xCC	; 204
 35c:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 360:	ac 01       	movw	r20, r24
 362:	56 95       	lsr	r21
 364:	47 95       	ror	r20
 366:	56 95       	lsr	r21
 368:	47 95       	ror	r20
 36a:	56 95       	lsr	r21
 36c:	47 95       	ror	r20
 36e:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <temp+0x1>
 372:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <temp>
		tens = temp%10 + 48;
 376:	9a 01       	movw	r18, r20
 378:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	96 95       	lsr	r25
 382:	87 95       	ror	r24
 384:	96 95       	lsr	r25
 386:	87 95       	ror	r24
 388:	9c 01       	movw	r18, r24
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	82 0f       	add	r24, r18
 39c:	93 1f       	adc	r25, r19
 39e:	9a 01       	movw	r18, r20
 3a0:	28 1b       	sub	r18, r24
 3a2:	39 0b       	sbc	r19, r25
 3a4:	c9 01       	movw	r24, r18
 3a6:	c0 96       	adiw	r24, 0x30	; 48
 3a8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <tens+0x1>
 3ac:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tens>
		lcd_wr_char(tens);
 3b0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 3b4:	98 01       	movw	r18, r16
 3b6:	ad ec       	ldi	r26, 0xCD	; 205
 3b8:	bc ec       	ldi	r27, 0xCC	; 204
 3ba:	0e 94 c3 02 	call	0x586	; 0x586 <__umulhisi3>
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	9c 01       	movw	r18, r24
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	98 01       	movw	r18, r16
 3e2:	28 1b       	sub	r18, r24
 3e4:	39 0b       	sbc	r19, r25
 3e6:	c9 01       	movw	r24, r18
 3e8:	c0 96       	adiw	r24, 0x30	; 48
 3ea:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <unit+0x1>
 3ee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <unit>
		lcd_wr_char(unit);
 3f2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_char>
	}
	if(digits>5)
 3f6:	26 97       	sbiw	r28, 0x06	; 6
 3f8:	6c f0       	brlt	.+26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		lcd_wr_char('E');
 3fa:	85 e4       	ldi	r24, 0x45	; 69
 3fc:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_char>
 400:	09 c0       	rjmp	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 402:	c3 30       	cpi	r28, 0x03	; 3
 404:	d1 05       	cpc	r29, r1
 406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	a2 cf       	rjmp	.-188    	; 0x34e <lcd_print+0x130>
 40a:	6f cf       	rjmp	.-290    	; 0x2ea <lcd_print+0xcc>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 40c:	c1 30       	cpi	r28, 0x01	; 1
 40e:	d1 05       	cpc	r29, r1
 410:	91 f7       	brne	.-28     	; 0x3f6 <lcd_print+0x1d8>
 412:	d0 cf       	rjmp	.-96     	; 0x3b4 <lcd_print+0x196>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	08 95       	ret

0000041e <lcd_start>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41e:	8f e9       	ldi	r24, 0x9F	; 159
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <lcd_start+0x4>
 426:	00 c0       	rjmp	.+0      	; 0x428 <lcd_start+0xa>
 428:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 42a:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 42c:	80 e3       	ldi	r24, 0x30	; 48
 42e:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 430:	5e 9a       	sbi	0x0b, 6	; 11
 432:	ef e1       	ldi	r30, 0x1F	; 31
 434:	fe e4       	ldi	r31, 0x4E	; 78
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <lcd_start+0x18>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <lcd_start+0x1e>
 43c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 43e:	5e 98       	cbi	0x0b, 6	; 11
 440:	ef e9       	ldi	r30, 0x9F	; 159
 442:	ff e0       	ldi	r31, 0x0F	; 15
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <lcd_start+0x26>
 448:	00 c0       	rjmp	.+0      	; 0x44a <lcd_start+0x2c>
 44a:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 44c:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 44e:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 450:	5e 9a       	sbi	0x0b, 6	; 11
 452:	ef e1       	ldi	r30, 0x1F	; 31
 454:	fe e4       	ldi	r31, 0x4E	; 78
 456:	31 97       	sbiw	r30, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <lcd_start+0x38>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <lcd_start+0x3e>
 45c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 45e:	5e 98       	cbi	0x0b, 6	; 11
 460:	ef e9       	ldi	r30, 0x9F	; 159
 462:	ff e0       	ldi	r31, 0x0F	; 15
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <lcd_start+0x46>
 468:	00 c0       	rjmp	.+0      	; 0x46a <lcd_start+0x4c>
 46a:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 46c:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 46e:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 470:	5e 9a       	sbi	0x0b, 6	; 11
 472:	8f e1       	ldi	r24, 0x1F	; 31
 474:	9e e4       	ldi	r25, 0x4E	; 78
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <lcd_start+0x58>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <lcd_start+0x5e>
 47c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 47e:	5e 98       	cbi	0x0b, 6	; 11
 480:	ef e9       	ldi	r30, 0x9F	; 159
 482:	ff e0       	ldi	r31, 0x0F	; 15
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <lcd_start+0x66>
 488:	00 c0       	rjmp	.+0      	; 0x48a <lcd_start+0x6c>
 48a:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 48c:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 48e:	80 e1       	ldi	r24, 0x10	; 16
 490:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 492:	5e 9a       	sbi	0x0b, 6	; 11
 494:	8f e9       	ldi	r24, 0x9F	; 159
 496:	9f e0       	ldi	r25, 0x0F	; 15
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_start+0x7a>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <lcd_start+0x80>
 49e:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 4a0:	5e 98       	cbi	0x0b, 6	; 11
 4a2:	ef e9       	ldi	r30, 0x9F	; 159
 4a4:	ff e0       	ldi	r31, 0x0F	; 15
 4a6:	31 97       	sbiw	r30, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <lcd_start+0x88>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <lcd_start+0x8e>
 4ac:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 4ae:	88 e2       	ldi	r24, 0x28	; 40
 4b0:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
	lcd_wr_command(0x01);
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
	lcd_wr_command(0x06);
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
	lcd_wr_command(0x0E);
 4c0:	8e e0       	ldi	r24, 0x0E	; 14
 4c2:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
	lcd_wr_command(0x80);
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_wr_command>
 4cc:	08 95       	ret

000004ce <port_config>:
#include "lcd.h"
#include "ADC.h"

void port_config (void)
{
	lcd_port_config();
 4ce:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_port_config>
	adc_pin_config();
 4d2:	0e 94 48 00 	call	0x90	; 0x90 <adc_pin_config>
 4d6:	08 95       	ret

000004d8 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 4d8:	f8 94       	cli
	lcd_start();
 4da:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_start>
	adc_config();
 4de:	0e 94 4b 00 	call	0x96	; 0x96 <adc_config>
	sei();   //Enables the global interrupts
 4e2:	78 94       	sei
 4e4:	08 95       	ret

000004e6 <main>:
}

int main(void)
{
	port_config();
 4e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <port_config>
	init_devices();
 4ea:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <init_devices>
	
	ADMUX=0x41;    //Channel 1
 4ee:	81 e4       	ldi	r24, 0x41	; 65
 4f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	int i = 0;
 4f4:	c0 e0       	ldi	r28, 0x00	; 0
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		unsigned int val = read_adc();
		val = val*5/1023*1000;
 4f8:	0f 2e       	mov	r0, r31
 4fa:	ee 24       	eor	r14, r14
 4fc:	ea 94       	dec	r14
 4fe:	f3 e0       	ldi	r31, 0x03	; 3
 500:	ff 2e       	mov	r15, r31
 502:	f0 2d       	mov	r31, r0
 504:	08 ee       	ldi	r16, 0xE8	; 232
 506:	13 e0       	ldi	r17, 0x03	; 3
	
	ADMUX=0x41;    //Channel 1
	int i = 0;
	while (1)
	{
		unsigned int val = read_adc();
 508:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
		val = val*5/1023*1000;
 50c:	9c 01       	movw	r18, r24
 50e:	22 0f       	add	r18, r18
 510:	33 1f       	adc	r19, r19
 512:	22 0f       	add	r18, r18
 514:	33 1f       	adc	r19, r19
 516:	82 0f       	add	r24, r18
 518:	93 1f       	adc	r25, r19
 51a:	b7 01       	movw	r22, r14
 51c:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 520:	60 9f       	mul	r22, r16
 522:	a0 01       	movw	r20, r0
 524:	61 9f       	mul	r22, r17
 526:	50 0d       	add	r21, r0
 528:	70 9f       	mul	r23, r16
 52a:	50 0d       	add	r21, r0
 52c:	11 24       	eor	r1, r1
		lcd_print(1,1,val,5);
 52e:	25 e0       	ldi	r18, 0x05	; 5
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_print>
		lcd_print(2,1,i,3);
 53a:	23 e0       	ldi	r18, 0x03	; 3
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	ae 01       	movw	r20, r28
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_print>
		i++;
 548:	21 96       	adiw	r28, 0x01	; 1
 54a:	2f ef       	ldi	r18, 0xFF	; 255
 54c:	83 ed       	ldi	r24, 0xD3	; 211
 54e:	90 e3       	ldi	r25, 0x30	; 48
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <main+0x6a>
 558:	00 c0       	rjmp	.+0      	; 0x55a <main+0x74>
 55a:	00 00       	nop
 55c:	d5 cf       	rjmp	.-86     	; 0x508 <main+0x22>

0000055e <__udivmodhi4>:
 55e:	aa 1b       	sub	r26, r26
 560:	bb 1b       	sub	r27, r27
 562:	51 e1       	ldi	r21, 0x11	; 17
 564:	07 c0       	rjmp	.+14     	; 0x574 <__udivmodhi4_ep>

00000566 <__udivmodhi4_loop>:
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	a6 17       	cp	r26, r22
 56c:	b7 07       	cpc	r27, r23
 56e:	10 f0       	brcs	.+4      	; 0x574 <__udivmodhi4_ep>
 570:	a6 1b       	sub	r26, r22
 572:	b7 0b       	sbc	r27, r23

00000574 <__udivmodhi4_ep>:
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	5a 95       	dec	r21
 57a:	a9 f7       	brne	.-22     	; 0x566 <__udivmodhi4_loop>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	08 95       	ret

00000586 <__umulhisi3>:
 586:	a2 9f       	mul	r26, r18
 588:	b0 01       	movw	r22, r0
 58a:	b3 9f       	mul	r27, r19
 58c:	c0 01       	movw	r24, r0
 58e:	a3 9f       	mul	r26, r19
 590:	70 0d       	add	r23, r0
 592:	81 1d       	adc	r24, r1
 594:	11 24       	eor	r1, r1
 596:	91 1d       	adc	r25, r1
 598:	b2 9f       	mul	r27, r18
 59a:	70 0d       	add	r23, r0
 59c:	81 1d       	adc	r24, r1
 59e:	11 24       	eor	r1, r1
 5a0:	91 1d       	adc	r25, r1
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
