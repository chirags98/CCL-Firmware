
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000011e2  00001276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080016a  0080016a  000012e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a0c  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3b  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e31  00000000  00000000  00003ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00004918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e6  00000000  00000000  00004c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6e  00000000  00000000  0000527a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000060e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ee       	ldi	r30, 0xE2	; 226
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 36       	cpi	r26, 0x6A	; 106
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e6       	ldi	r26, 0x6A	; 106
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 39       	cpi	r26, 0x92	; 146
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 05 06 	call	0xc0a	; 0xc0a <main>
      9e:	0c 94 ef 08 	jmp	0x11de	; 0x11de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	d8 2e       	mov	r13, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     104:	06 2f       	mov	r16, r22
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	10 16       	cp	r1, r16
     10a:	11 06       	cpc	r1, r17
     10c:	34 f5       	brge	.+76     	; 0x15a <avg_read_adc_channel+0x6e>
     10e:	c1 e0       	ldi	r28, 0x01	; 1
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	81 2c       	mov	r8, r1
     114:	91 2c       	mov	r9, r1
     116:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
     118:	e8 2e       	mov	r14, r24
     11a:	f1 2c       	mov	r15, r1
     11c:	c7 01       	movw	r24, r14
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	9c 01       	movw	r18, r24
     124:	24 57       	subi	r18, 0x74	; 116
     126:	3e 4f       	sbci	r19, 0xFE	; 254
     128:	79 01       	movw	r14, r18
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	8d 2d       	mov	r24, r13
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel];
     130:	f7 01       	movw	r30, r14
     132:	40 81       	ld	r20, Z
     134:	51 81       	ldd	r21, Z+1	; 0x01
     136:	ba 01       	movw	r22, r20
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 bc 07 	call	0xf78	; 0xf78 <__floatunsisf>
     140:	9b 01       	movw	r18, r22
     142:	ac 01       	movw	r20, r24
     144:	c5 01       	movw	r24, r10
     146:	b4 01       	movw	r22, r8
     148:	0e 94 aa 06 	call	0xd54	; 0xd54 <__addsf3>
     14c:	4b 01       	movw	r8, r22
     14e:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     150:	21 96       	adiw	r28, 0x01	; 1
     152:	0c 17       	cp	r16, r28
     154:	1d 07       	cpc	r17, r29
     156:	4c f7       	brge	.-46     	; 0x12a <avg_read_adc_channel+0x3e>
     158:	03 c0       	rjmp	.+6      	; 0x160 <avg_read_adc_channel+0x74>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     15a:	81 2c       	mov	r8, r1
     15c:	91 2c       	mov	r9, r1
     15e:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
	}
	
	adc_val[channel] = val/i;
     160:	cd 2d       	mov	r28, r13
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	b8 01       	movw	r22, r16
     166:	11 0f       	add	r17, r17
     168:	88 0b       	sbc	r24, r24
     16a:	99 0b       	sbc	r25, r25
     16c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__floatsisf>
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	c5 01       	movw	r24, r10
     176:	b4 01       	movw	r22, r8
     178:	0e 94 1b 07 	call	0xe36	; 0xe36 <__divsf3>
     17c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__fixunssfsi>
     180:	cc 0f       	add	r28, r28
     182:	dd 1f       	adc	r29, r29
     184:	c4 57       	subi	r28, 0x74	; 116
     186:	de 4f       	sbci	r29, 0xFE	; 254
     188:	79 83       	std	Y+1, r23	; 0x01
     18a:	68 83       	st	Y, r22
	
	return adc_val[channel];
     18c:	88 81       	ld	r24, Y
     18e:	99 81       	ldd	r25, Y+1	; 0x01
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	bf 90       	pop	r11
     1a0:	af 90       	pop	r10
     1a2:	9f 90       	pop	r9
     1a4:	8f 90       	pop	r8
     1a6:	08 95       	ret

000001a8 <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	3f 93       	push	r19
     1b6:	4f 93       	push	r20
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
     1bc:	ef 93       	push	r30
     1be:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1c0:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1c4:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1cc:	ef 70       	andi	r30, 0x0F	; 15
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
	unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	21 e0       	ldi	r18, 0x01	; 1
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	81 11       	cpse	r24, r1
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_21+0x34>
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	e4 57       	subi	r30, 0x74	; 116
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1e8:	20 81       	ld	r18, Z
     1ea:	31 81       	ldd	r19, Z+1	; 0x01
     1ec:	32 2f       	mov	r19, r18
     1ee:	22 27       	eor	r18, r18
     1f0:	31 83       	std	Z+1, r19	; 0x01
     1f2:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	98 2f       	mov	r25, r24
     1f8:	88 27       	eor	r24, r24
     1fa:	84 0f       	add	r24, r20
     1fc:	91 1d       	adc	r25, r1
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	9f 91       	pop	r25
     208:	8f 91       	pop	r24
     20a:	4f 91       	pop	r20
     20c:	3f 91       	pop	r19
     20e:	2f 91       	pop	r18
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <update_current>:
int v_thresh = 25000;
int power_thresh = 10000;

void update_current()
{
	current = avg_read_adc_channel(0, 10);		//0-2A	Least count = 1.95mv
     21a:	6a e0       	ldi	r22, 0x0A	; 10
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     222:	bc 01       	movw	r22, r24
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 bc 07 	call	0xf78	; 0xf78 <__floatunsisf>
	current = current*1.953 + 0.3 + offset;		//1.953*(1.0228, 9.57, 1.1054, 1.016,1.0570)
     22c:	27 ee       	ldi	r18, 0xE7	; 231
     22e:	3b ef       	ldi	r19, 0xFB	; 251
     230:	49 ef       	ldi	r20, 0xF9	; 249
     232:	5f e3       	ldi	r21, 0x3F	; 63
     234:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__mulsf3>
     238:	2a e9       	ldi	r18, 0x9A	; 154
     23a:	39 e9       	ldi	r19, 0x99	; 153
     23c:	49 e9       	ldi	r20, 0x99	; 153
     23e:	5e e3       	ldi	r21, 0x3E	; 62
     240:	0e 94 aa 06 	call	0xd54	; 0xd54 <__addsf3>
     244:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <offset>
     248:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <offset+0x1>
     24c:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <offset+0x2>
     250:	50 91 6e 01 	lds	r21, 0x016E	; 0x80016e <offset+0x3>
     254:	0e 94 aa 06 	call	0xd54	; 0xd54 <__addsf3>
     258:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <current>
     25c:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <current+0x1>
     260:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <current+0x2>
     264:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <current+0x3>
     268:	08 95       	ret

0000026a <update_voltage>:
}

void update_voltage()
{
	voltage = avg_read_adc_channel(1, 10);		//0-30V	Least count = 29.29mv
     26a:	6a e0       	ldi	r22, 0x0A	; 10
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     272:	bc 01       	movw	r22, r24
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 bc 07 	call	0xf78	; 0xf78 <__floatunsisf>
	voltage = voltage*29.29;	
     27c:	2c ee       	ldi	r18, 0xEC	; 236
     27e:	31 e5       	ldi	r19, 0x51	; 81
     280:	4a ee       	ldi	r20, 0xEA	; 234
     282:	51 e4       	ldi	r21, 0x41	; 65
     284:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__mulsf3>
     288:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <voltage>
     28c:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <voltage+0x1>
     290:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <voltage+0x2>
     294:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <voltage+0x3>
     298:	08 95       	ret

0000029a <update_power>:
}

void update_power()
{
	power = voltage*current/1000;
     29a:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <current>
     29e:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <current+0x1>
     2a2:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <current+0x2>
     2a6:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <current+0x3>
     2aa:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <voltage>
     2ae:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <voltage+0x1>
     2b2:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <voltage+0x2>
     2b6:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <voltage+0x3>
     2ba:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__mulsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	4a e7       	ldi	r20, 0x7A	; 122
     2c4:	54 e4       	ldi	r21, 0x44	; 68
     2c6:	0e 94 1b 07 	call	0xe36	; 0xe36 <__divsf3>
     2ca:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <power>
     2ce:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <power+0x1>
     2d2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <power+0x2>
     2d6:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <power+0x3>
     2da:	08 95       	ret

000002dc <update_gate_voltage>:
}

void update_gate_voltage()
{
	gate_voltage = avg_read_adc_channel(2, 10)*7.5;		//0-7.68V	
     2dc:	6a e0       	ldi	r22, 0x0A	; 10
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     2e4:	bc 01       	movw	r22, r24
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 bc 07 	call	0xf78	; 0xf78 <__floatunsisf>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 ef       	ldi	r20, 0xF0	; 240
     2f4:	50 e4       	ldi	r21, 0x40	; 64
     2f6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__mulsf3>
     2fa:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <gate_voltage>
     2fe:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <gate_voltage+0x1>
     302:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <gate_voltage+0x2>
     306:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <gate_voltage+0x3>
     30a:	08 95       	ret

0000030c <print_current>:
}

void print_current(char row, char col)
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	c8 2f       	mov	r28, r24
     316:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,current,4, "mA");					//Least count = 1.95mA
     318:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <current>
     31c:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <current+0x1>
     320:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <current+0x2>
     324:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <current+0x3>
     328:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__fixunssfsi>
     32c:	06 e0       	ldi	r16, 0x06	; 6
     32e:	11 e0       	ldi	r17, 0x01	; 1
     330:	24 e0       	ldi	r18, 0x04	; 4
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	ab 01       	movw	r20, r22
     336:	6d 2f       	mov	r22, r29
     338:	8c 2f       	mov	r24, r28
     33a:	0e 94 9a 03 	call	0x734	; 0x734 <lcd_print2>
	//lcd_string2(row,col+4,"mA  ");
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <print_voltage>:

void print_voltage(char row, char col)
{
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	c8 2f       	mov	r28, r24
     352:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,voltage,5, "mV");					//Least count = 29.29mv
     354:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <voltage>
     358:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <voltage+0x1>
     35c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <voltage+0x2>
     360:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <voltage+0x3>
     364:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__fixunssfsi>
     368:	09 e0       	ldi	r16, 0x09	; 9
     36a:	11 e0       	ldi	r17, 0x01	; 1
     36c:	25 e0       	ldi	r18, 0x05	; 5
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	ab 01       	movw	r20, r22
     372:	6d 2f       	mov	r22, r29
     374:	8c 2f       	mov	r24, r28
     376:	0e 94 9a 03 	call	0x734	; 0x734 <lcd_print2>
	//lcd_string2(row,col+5,"mV");
}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <print_power>:

void print_power(char row, char col)
{
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	c8 2f       	mov	r28, r24
     38e:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,power,5, "mW");
     390:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <power>
     394:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <power+0x1>
     398:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <power+0x2>
     39c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <power+0x3>
     3a0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__fixunssfsi>
     3a4:	0c e0       	ldi	r16, 0x0C	; 12
     3a6:	11 e0       	ldi	r17, 0x01	; 1
     3a8:	25 e0       	ldi	r18, 0x05	; 5
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	ab 01       	movw	r20, r22
     3ae:	6d 2f       	mov	r22, r29
     3b0:	8c 2f       	mov	r24, r28
     3b2:	0e 94 9a 03 	call	0x734	; 0x734 <lcd_print2>
	//lcd_string2(row,col+5,"mW");
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	08 95       	ret

000003c0 <print_gate_voltage>:

void print_gate_voltage(char row, char col)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	c8 2f       	mov	r28, r24
     3ca:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,gate_voltage,4, "mV");				//Least count = 7.5mv
     3cc:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <gate_voltage>
     3d0:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <gate_voltage+0x1>
     3d4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <gate_voltage+0x2>
     3d8:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <gate_voltage+0x3>
     3dc:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__fixunssfsi>
     3e0:	09 e0       	ldi	r16, 0x09	; 9
     3e2:	11 e0       	ldi	r17, 0x01	; 1
     3e4:	24 e0       	ldi	r18, 0x04	; 4
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	ab 01       	movw	r20, r22
     3ea:	6d 2f       	mov	r22, r29
     3ec:	8c 2f       	mov	r24, r28
     3ee:	0e 94 9a 03 	call	0x734	; 0x734 <lcd_print2>
	//lcd_string2(row,col+4,"mV");
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <check_thresholds>:

char check_thresholds()
{
     3fc:	af 92       	push	r10
     3fe:	bf 92       	push	r11
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
	static char val = 0;
	
	if (current<current_thresh && voltage<v_thresh && power<power_thresh)
     410:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <current_thresh>
     414:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <current_thresh+0x1>
     418:	c0 90 77 01 	lds	r12, 0x0177	; 0x800177 <current>
     41c:	d0 90 78 01 	lds	r13, 0x0178	; 0x800178 <current+0x1>
     420:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <current+0x2>
     424:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <current+0x3>
     428:	be 01       	movw	r22, r28
     42a:	0d 2e       	mov	r0, r29
     42c:	00 0c       	add	r0, r0
     42e:	88 0b       	sbc	r24, r24
     430:	99 0b       	sbc	r25, r25
     432:	0e 94 be 07 	call	0xf7c	; 0xf7c <__floatsisf>
     436:	a7 01       	movw	r20, r14
     438:	96 01       	movw	r18, r12
     43a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__gesf2>
     43e:	18 16       	cp	r1, r24
     440:	0c f0       	brlt	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	4b c0       	rjmp	.+150    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     444:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <v_thresh>
     448:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <v_thresh+0x1>
     44c:	b8 01       	movw	r22, r16
     44e:	01 2e       	mov	r0, r17
     450:	00 0c       	add	r0, r0
     452:	88 0b       	sbc	r24, r24
     454:	99 0b       	sbc	r25, r25
     456:	0e 94 be 07 	call	0xf7c	; 0xf7c <__floatsisf>
     45a:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <voltage>
     45e:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <voltage+0x1>
     462:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <voltage+0x2>
     466:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <voltage+0x3>
     46a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__gesf2>
     46e:	18 16       	cp	r1, r24
     470:	a4 f5       	brge	.+104    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     472:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_start>
     476:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_start+0x1>
     47a:	b5 01       	movw	r22, r10
     47c:	0b 2c       	mov	r0, r11
     47e:	00 0c       	add	r0, r0
     480:	88 0b       	sbc	r24, r24
     482:	99 0b       	sbc	r25, r25
     484:	0e 94 be 07 	call	0xf7c	; 0xf7c <__floatsisf>
     488:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <power>
     48c:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <power+0x1>
     490:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <power+0x2>
     494:	50 91 76 01 	lds	r21, 0x0176	; 0x800176 <power+0x3>
     498:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__gesf2>
     49c:	18 16       	cp	r1, r24
     49e:	ec f4       	brge	.+58     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	{
		if (val == 1)
     4a0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4a8:	79 c0       	rjmp	.+242    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
		{
			power_thresh += 500;
     4aa:	8c e0       	ldi	r24, 0x0C	; 12
     4ac:	a8 1a       	sub	r10, r24
     4ae:	8e ef       	ldi	r24, 0xFE	; 254
     4b0:	b8 0a       	sbc	r11, r24
     4b2:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
     4b6:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
			v_thresh += 2000;
     4ba:	00 53       	subi	r16, 0x30	; 48
     4bc:	18 4f       	sbci	r17, 0xF8	; 248
     4be:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <v_thresh+0x1>
     4c2:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <v_thresh>
			current_thresh += 100;
     4c6:	cc 59       	subi	r28, 0x9C	; 156
     4c8:	df 4f       	sbci	r29, 0xFF	; 255
     4ca:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     4ce:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 0;
     4d2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__data_end>
		}
		
		return 0;	//All okay
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	68 c0       	rjmp	.+208    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
	}
	
	else
	{	
		if (val == 0)
     4da:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     4de:	81 11       	cpse	r24, r1
     4e0:	1d c0       	rjmp	.+58     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		{
			power_thresh -= 500;
     4e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     4ea:	84 5f       	subi	r24, 0xF4	; 244
     4ec:	91 40       	sbci	r25, 0x01	; 1
     4ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     4f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			v_thresh -= 2000;
     4f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <v_thresh>
     4fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <v_thresh+0x1>
     4fe:	80 5d       	subi	r24, 0xD0	; 208
     500:	97 40       	sbci	r25, 0x07	; 7
     502:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <v_thresh+0x1>
     506:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <v_thresh>
			current_thresh -= 100;
     50a:	c4 56       	subi	r28, 0x64	; 100
     50c:	d1 09       	sbc	r29, r1
     50e:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     512:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
		}
		
		if (power>power_thresh)
     51c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     520:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__floatsisf>
     530:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <power>
     534:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <power+0x1>
     538:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <power+0x2>
     53c:	50 91 76 01 	lds	r21, 0x0176	; 0x800176 <power+0x3>
     540:	0e 94 16 07 	call	0xe2c	; 0xe2c <__cmpsf2>
     544:	88 23       	and	r24, r24
     546:	64 f1       	brlt	.+88     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			return 1;
	
		else if (voltage>v_thresh)
     548:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <v_thresh>
     54c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <v_thresh+0x1>
     550:	07 2e       	mov	r0, r23
     552:	00 0c       	add	r0, r0
     554:	88 0b       	sbc	r24, r24
     556:	99 0b       	sbc	r25, r25
     558:	0e 94 be 07 	call	0xf7c	; 0xf7c <__floatsisf>
     55c:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <voltage>
     560:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <voltage+0x1>
     564:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <voltage+0x2>
     568:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <voltage+0x3>
     56c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__cmpsf2>
     570:	88 23       	and	r24, r24
     572:	c4 f0       	brlt	.+48     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
			return 2;

		else if (current>current_thresh)	
     574:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <current_thresh>
     578:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <current_thresh+0x1>
     57c:	07 2e       	mov	r0, r23
     57e:	00 0c       	add	r0, r0
     580:	88 0b       	sbc	r24, r24
     582:	99 0b       	sbc	r25, r25
     584:	0e 94 be 07 	call	0xf7c	; 0xf7c <__floatsisf>
     588:	9b 01       	movw	r18, r22
     58a:	ac 01       	movw	r20, r24
     58c:	c7 01       	movw	r24, r14
     58e:	b6 01       	movw	r22, r12
     590:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__gesf2>
     594:	18 16       	cp	r1, r24
     596:	44 f0       	brlt	.+16     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			return 3;
	
		else
			return 4;	//Error
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	07 c0       	rjmp	.+14     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
			v_thresh += 2000;
			current_thresh += 100;
			val = 0;
		}
		
		return 0;	//All okay
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
			current_thresh -= 100;
			val = 1;
		}
		
		if (power>power_thresh)
			return 1;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
	
		else if (voltage>v_thresh)
			return 2;
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>

		else if (current>current_thresh)	
			return 3;
     5a8:	83 e0       	ldi	r24, 0x03	; 3
	
		else
			return 4;	//Error
	}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	08 95       	ret

000005c0 <Bit_Reverse>:
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
     5c0:	98 2f       	mov	r25, r24
     5c2:	88 1f       	adc	r24, r24
     5c4:	88 27       	eor	r24, r24
     5c6:	88 1f       	adc	r24, r24
     5c8:	96 fd       	sbrc	r25, 6
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <Bit_Reverse+0x10>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <Bit_Reverse+0x12>
     5d0:	22 e0       	ldi	r18, 0x02	; 2
     5d2:	82 2b       	or	r24, r18
     5d4:	95 fd       	sbrc	r25, 5
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <Bit_Reverse+0x1c>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	01 c0       	rjmp	.+2      	; 0x5de <Bit_Reverse+0x1e>
     5dc:	24 e0       	ldi	r18, 0x04	; 4
     5de:	82 2b       	or	r24, r18
     5e0:	94 fd       	sbrc	r25, 4
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <Bit_Reverse+0x28>
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <Bit_Reverse+0x2a>
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	82 2b       	or	r24, r18
     5ec:	93 fd       	sbrc	r25, 3
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <Bit_Reverse+0x34>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <Bit_Reverse+0x36>
     5f4:	20 e1       	ldi	r18, 0x10	; 16
     5f6:	82 2b       	or	r24, r18
     5f8:	92 fd       	sbrc	r25, 2
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <Bit_Reverse+0x40>
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <Bit_Reverse+0x42>
     600:	20 e2       	ldi	r18, 0x20	; 32
     602:	82 2b       	or	r24, r18
     604:	91 fd       	sbrc	r25, 1
     606:	02 c0       	rjmp	.+4      	; 0x60c <Bit_Reverse+0x4c>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	01 c0       	rjmp	.+2      	; 0x60e <Bit_Reverse+0x4e>
     60c:	20 e4       	ldi	r18, 0x40	; 64
     60e:	82 2b       	or	r24, r18
     610:	90 fd       	sbrc	r25, 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <Bit_Reverse+0x58>
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <Bit_Reverse+0x5a>
     618:	90 e8       	ldi	r25, 0x80	; 128
     61a:	89 2b       	or	r24, r25
     61c:	08 95       	ret

0000061e <lcd_wr_command>:
     61e:	cf 93       	push	r28
     620:	c8 2f       	mov	r28, r24
     622:	80 7f       	andi	r24, 0xF0	; 240
     624:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Bit_Reverse>
     628:	88 0f       	add	r24, r24
     62a:	88 0f       	add	r24, r24
     62c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <temp.1660>
     630:	9b b1       	in	r25, 0x0b	; 11
     632:	93 7c       	andi	r25, 0xC3	; 195
     634:	9b b9       	out	0x0b, r25	; 11
     636:	8b b1       	in	r24, 0x0b	; 11
     638:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <temp.1660>
     63c:	98 2b       	or	r25, r24
     63e:	9b b9       	out	0x0b, r25	; 11
     640:	5f 98       	cbi	0x0b, 7	; 11
     642:	5e 9a       	sbi	0x0b, 6	; 11
     644:	8f e1       	ldi	r24, 0x1F	; 31
     646:	9e e4       	ldi	r25, 0x4E	; 78
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <lcd_wr_command+0x2a>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <lcd_wr_command+0x30>
     64e:	00 00       	nop
     650:	5e 98       	cbi	0x0b, 6	; 11
     652:	8c 2f       	mov	r24, r28
     654:	82 95       	swap	r24
     656:	80 7f       	andi	r24, 0xF0	; 240
     658:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Bit_Reverse>
     65c:	9b b1       	in	r25, 0x0b	; 11
     65e:	93 7c       	andi	r25, 0xC3	; 195
     660:	9b b9       	out	0x0b, r25	; 11
     662:	9b b1       	in	r25, 0x0b	; 11
     664:	88 0f       	add	r24, r24
     666:	88 0f       	add	r24, r24
     668:	98 2b       	or	r25, r24
     66a:	9b b9       	out	0x0b, r25	; 11
     66c:	5f 98       	cbi	0x0b, 7	; 11
     66e:	5e 9a       	sbi	0x0b, 6	; 11
     670:	8f e1       	ldi	r24, 0x1F	; 31
     672:	9e e4       	ldi	r25, 0x4E	; 78
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <lcd_wr_command+0x56>
     678:	00 c0       	rjmp	.+0      	; 0x67a <lcd_wr_command+0x5c>
     67a:	00 00       	nop
     67c:	5e 98       	cbi	0x0b, 6	; 11
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <lcd_wr_char>:
     682:	cf 93       	push	r28
     684:	c8 2f       	mov	r28, r24
     686:	80 7f       	andi	r24, 0xF0	; 240
     688:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Bit_Reverse>
     68c:	9b b1       	in	r25, 0x0b	; 11
     68e:	93 7c       	andi	r25, 0xC3	; 195
     690:	9b b9       	out	0x0b, r25	; 11
     692:	9b b1       	in	r25, 0x0b	; 11
     694:	88 0f       	add	r24, r24
     696:	88 0f       	add	r24, r24
     698:	98 2b       	or	r25, r24
     69a:	9b b9       	out	0x0b, r25	; 11
     69c:	5f 9a       	sbi	0x0b, 7	; 11
     69e:	5e 9a       	sbi	0x0b, 6	; 11
     6a0:	8f e1       	ldi	r24, 0x1F	; 31
     6a2:	9e e4       	ldi	r25, 0x4E	; 78
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <lcd_wr_char+0x22>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <lcd_wr_char+0x28>
     6aa:	00 00       	nop
     6ac:	5e 98       	cbi	0x0b, 6	; 11
     6ae:	8c 2f       	mov	r24, r28
     6b0:	82 95       	swap	r24
     6b2:	80 7f       	andi	r24, 0xF0	; 240
     6b4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Bit_Reverse>
     6b8:	9b b1       	in	r25, 0x0b	; 11
     6ba:	93 7c       	andi	r25, 0xC3	; 195
     6bc:	9b b9       	out	0x0b, r25	; 11
     6be:	9b b1       	in	r25, 0x0b	; 11
     6c0:	88 0f       	add	r24, r24
     6c2:	88 0f       	add	r24, r24
     6c4:	98 2b       	or	r25, r24
     6c6:	9b b9       	out	0x0b, r25	; 11
     6c8:	5f 9a       	sbi	0x0b, 7	; 11
     6ca:	5e 9a       	sbi	0x0b, 6	; 11
     6cc:	8f e1       	ldi	r24, 0x1F	; 31
     6ce:	9e e4       	ldi	r25, 0x4E	; 78
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lcd_wr_char+0x4e>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <lcd_wr_char+0x54>
     6d6:	00 00       	nop
     6d8:	5e 98       	cbi	0x0b, 6	; 11
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <lcd_port_config>:
     6de:	8a b1       	in	r24, 0x0a	; 10
     6e0:	8c 6f       	ori	r24, 0xFC	; 252
     6e2:	8a b9       	out	0x0a, r24	; 10
     6e4:	8b b1       	in	r24, 0x0b	; 11
     6e6:	84 70       	andi	r24, 0x04	; 4
     6e8:	8b b9       	out	0x0b, r24	; 11
     6ea:	08 95       	ret

000006ec <lcd_home>:
     6ec:	80 e8       	ldi	r24, 0x80	; 128
     6ee:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
     6f2:	08 95       	ret

000006f4 <lcd_cursor>:
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	19 f0       	breq	.+6      	; 0x6fe <lcd_cursor+0xa>
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	31 f0       	breq	.+12     	; 0x708 <lcd_cursor+0x14>
     6fc:	08 95       	ret
     6fe:	8f e7       	ldi	r24, 0x7F	; 127
     700:	86 0f       	add	r24, r22
     702:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
     706:	08 95       	ret
     708:	8f eb       	ldi	r24, 0xBF	; 191
     70a:	86 0f       	add	r24, r22
     70c:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
     710:	08 95       	ret

00000712 <lcd_string2>:
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	ea 01       	movw	r28, r20
     718:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <lcd_cursor>
     71c:	88 81       	ld	r24, Y
     71e:	88 23       	and	r24, r24
     720:	31 f0       	breq	.+12     	; 0x72e <lcd_string2+0x1c>
     722:	21 96       	adiw	r28, 0x01	; 1
     724:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
     728:	89 91       	ld	r24, Y+
     72a:	81 11       	cpse	r24, r1
     72c:	fb cf       	rjmp	.-10     	; 0x724 <lcd_string2+0x12>
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <lcd_print2>:

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	6a 01       	movw	r12, r20
     744:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     746:	88 23       	and	r24, r24
     748:	11 f0       	breq	.+4      	; 0x74e <lcd_print2+0x1a>
     74a:	61 11       	cpse	r22, r1
     74c:	03 c0       	rjmp	.+6      	; 0x754 <lcd_print2+0x20>
	{
		lcd_home();
     74e:	0e 94 76 03 	call	0x6ec	; 0x6ec <lcd_home>
     752:	02 c0       	rjmp	.+4      	; 0x758 <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     754:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     758:	25 e0       	ldi	r18, 0x05	; 5
     75a:	e2 16       	cp	r14, r18
     75c:	f1 04       	cpc	r15, r1
     75e:	f1 f4       	brne	.+60     	; 0x79c <lcd_print2+0x68>
	{
		million=value/10000+48;
     760:	96 01       	movw	r18, r12
     762:	32 95       	swap	r19
     764:	22 95       	swap	r18
     766:	2f 70       	andi	r18, 0x0F	; 15
     768:	23 27       	eor	r18, r19
     76a:	3f 70       	andi	r19, 0x0F	; 15
     76c:	23 27       	eor	r18, r19
     76e:	a7 e4       	ldi	r26, 0x47	; 71
     770:	b3 e0       	ldi	r27, 0x03	; 3
     772:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     776:	96 95       	lsr	r25
     778:	87 95       	ror	r24
     77a:	96 95       	lsr	r25
     77c:	87 95       	ror	r24
     77e:	96 95       	lsr	r25
     780:	87 95       	ror	r24
     782:	c0 96       	adiw	r24, 0x30	; 48
     784:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <million+0x1>
     788:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <million>
		if(million != '0')
     78c:	80 33       	cpi	r24, 0x30	; 48
     78e:	91 05       	cpc	r25, r1
     790:	09 f4       	brne	.+2      	; 0x794 <lcd_print2+0x60>
     792:	76 c0       	rjmp	.+236    	; 0x880 <lcd_print2+0x14c>
		{
			lcd_wr_char(million);
     794:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
			count++;	
     798:	c1 e0       	ldi	r28, 0x01	; 1
     79a:	73 c0       	rjmp	.+230    	; 0x882 <lcd_print2+0x14e>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     79c:	34 e0       	ldi	r19, 0x04	; 4
     79e:	e3 16       	cp	r14, r19
     7a0:	f1 04       	cpc	r15, r1
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <lcd_print2+0x72>
     7a4:	dc c0       	rjmp	.+440    	; 0x95e <__stack+0x5f>
     7a6:	21 c1       	rjmp	.+578    	; 0x9ea <__stack+0xeb>
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)
     7a8:	cc 23       	and	r28, r28
     7aa:	09 f4       	brne	.+2      	; 0x7ae <lcd_print2+0x7a>
     7ac:	a4 c0       	rjmp	.+328    	; 0x8f6 <lcd_print2+0x1c2>
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <lcd_print2+0x7e>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7b0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)
		{
			lcd_wr_char(thousand);
     7b2:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
			count++;
     7b6:	cf 5f       	subi	r28, 0xFF	; 255
     7b8:	9e c0       	rjmp	.+316    	; 0x8f6 <lcd_print2+0x1c2>
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     7ba:	cc 23       	and	r28, r28
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <lcd_print2+0x8c>
     7be:	d5 c0       	rjmp	.+426    	; 0x96a <__stack+0x6b>
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <lcd_print2+0x90>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7c2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     7c4:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
			count++;
     7c8:	cf 5f       	subi	r28, 0xFF	; 255
     7ca:	cf c0       	rjmp	.+414    	; 0x96a <__stack+0x6b>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	e8 16       	cp	r14, r24
     7d0:	f1 04       	cpc	r15, r1
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <lcd_print2+0xa2>
     7d4:	fc c0       	rjmp	.+504    	; 0x9ce <__stack+0xcf>
     7d6:	79 c1       	rjmp	.+754    	; 0xaca <__stack+0x1cb>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     7d8:	cc 23       	and	r28, r28
     7da:	39 f0       	breq	.+14     	; 0x7ea <lcd_print2+0xb6>
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <lcd_print2+0xac>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7de:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     7e0:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
			count++;
     7e4:	cf 5f       	subi	r28, 0xFF	; 255
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <lcd_print2+0xb6>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     7e8:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     7ea:	96 01       	movw	r18, r12
     7ec:	ad ec       	ldi	r26, 0xCD	; 205
     7ee:	bc ec       	ldi	r27, 0xCC	; 204
     7f0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     7f4:	96 95       	lsr	r25
     7f6:	87 95       	ror	r24
     7f8:	96 95       	lsr	r25
     7fa:	87 95       	ror	r24
     7fc:	96 95       	lsr	r25
     7fe:	87 95       	ror	r24
     800:	9c 01       	movw	r18, r24
     802:	22 0f       	add	r18, r18
     804:	33 1f       	adc	r19, r19
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	82 0f       	add	r24, r18
     814:	93 1f       	adc	r25, r19
     816:	f6 01       	movw	r30, r12
     818:	e8 1b       	sub	r30, r24
     81a:	f9 0b       	sbc	r31, r25
     81c:	cf 01       	movw	r24, r30
     81e:	c0 96       	adiw	r24, 0x30	; 48
     820:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <unit+0x1>
     824:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <unit>
		lcd_wr_char(unit);
     828:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
		count++;
     82c:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     82e:	f6 e0       	ldi	r31, 0x06	; 6
     830:	ef 16       	cp	r14, r31
     832:	f1 04       	cpc	r15, r1
     834:	1c f0       	brlt	.+6      	; 0x83c <lcd_print2+0x108>
	{
		lcd_wr_char('E');
     836:	85 e4       	ldi	r24, 0x45	; 69
     838:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
	}
	
	while(*str != '\0')
     83c:	f8 01       	movw	r30, r16
     83e:	80 81       	ld	r24, Z
     840:	88 23       	and	r24, r24
     842:	09 f4       	brne	.+2      	; 0x846 <lcd_print2+0x112>
     844:	cb c0       	rjmp	.+406    	; 0x9dc <__stack+0xdd>
     846:	0f 5f       	subi	r16, 0xFF	; 255
     848:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     84a:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
		count++;
     84e:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     850:	ff ef       	ldi	r31, 0xFF	; 255
     852:	ef 1a       	sub	r14, r31
     854:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     856:	f8 01       	movw	r30, r16
     858:	81 91       	ld	r24, Z+
     85a:	8f 01       	movw	r16, r30
     85c:	81 11       	cpse	r24, r1
     85e:	f5 cf       	rjmp	.-22     	; 0x84a <lcd_print2+0x116>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     860:	8c 2f       	mov	r24, r28
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	8e 15       	cp	r24, r14
     866:	9f 05       	cpc	r25, r15
     868:	0c f0       	brlt	.+2      	; 0x86c <lcd_print2+0x138>
     86a:	62 c1       	rjmp	.+708    	; 0xb30 <__stack+0x231>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     86c:	80 e2       	ldi	r24, 0x20	; 32
     86e:	0e 94 41 03 	call	0x682	; 0x682 <lcd_wr_char>
			count++;
     872:	cf 5f       	subi	r28, 0xFF	; 255
		str++;		
	}
	
	if(count<digits)
	{
		while(count != digits)
     874:	8c 2f       	mov	r24, r28
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	8e 15       	cp	r24, r14
     87a:	9f 05       	cpc	r25, r15
     87c:	b9 f7       	brne	.-18     	; 0x86c <lcd_print2+0x138>
     87e:	58 c1       	rjmp	.+688    	; 0xb30 <__stack+0x231>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     880:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     882:	96 01       	movw	r18, r12
     884:	36 95       	lsr	r19
     886:	27 95       	ror	r18
     888:	36 95       	lsr	r19
     88a:	27 95       	ror	r18
     88c:	36 95       	lsr	r19
     88e:	27 95       	ror	r18
     890:	a5 ec       	ldi	r26, 0xC5	; 197
     892:	b0 e2       	ldi	r27, 0x20	; 32
     894:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     898:	ac 01       	movw	r20, r24
     89a:	52 95       	swap	r21
     89c:	42 95       	swap	r20
     89e:	4f 70       	andi	r20, 0x0F	; 15
     8a0:	45 27       	eor	r20, r21
     8a2:	5f 70       	andi	r21, 0x0F	; 15
     8a4:	45 27       	eor	r20, r21
     8a6:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     8aa:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		thousand = temp%10 + 48;
     8ae:	9a 01       	movw	r18, r20
     8b0:	ad ec       	ldi	r26, 0xCD	; 205
     8b2:	bc ec       	ldi	r27, 0xCC	; 204
     8b4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     8b8:	96 95       	lsr	r25
     8ba:	87 95       	ror	r24
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
     8c0:	96 95       	lsr	r25
     8c2:	87 95       	ror	r24
     8c4:	9c 01       	movw	r18, r24
     8c6:	22 0f       	add	r18, r18
     8c8:	33 1f       	adc	r19, r19
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	82 0f       	add	r24, r18
     8d8:	93 1f       	adc	r25, r19
     8da:	9a 01       	movw	r18, r20
     8dc:	28 1b       	sub	r18, r24
     8de:	39 0b       	sbc	r19, r25
     8e0:	c9 01       	movw	r24, r18
     8e2:	c0 96       	adiw	r24, 0x30	; 48
     8e4:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <thousand+0x1>
     8e8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <thousand>
		if(thousand != '0' || count != 0)
     8ec:	80 33       	cpi	r24, 0x30	; 48
     8ee:	91 05       	cpc	r25, r1
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <lcd_print2+0x1c0>
     8f2:	5f cf       	rjmp	.-322    	; 0x7b2 <lcd_print2+0x7e>
     8f4:	59 cf       	rjmp	.-334    	; 0x7a8 <lcd_print2+0x74>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     8f6:	96 01       	movw	r18, r12
     8f8:	36 95       	lsr	r19
     8fa:	27 95       	ror	r18
     8fc:	36 95       	lsr	r19
     8fe:	27 95       	ror	r18
     900:	ab e7       	ldi	r26, 0x7B	; 123
     902:	b4 e1       	ldi	r27, 0x14	; 20
     904:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     908:	ac 01       	movw	r20, r24
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     912:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		hundred = temp%10 + 48;
     916:	9a 01       	movw	r18, r20
     918:	ad ec       	ldi	r26, 0xCD	; 205
     91a:	bc ec       	ldi	r27, 0xCC	; 204
     91c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     920:	96 95       	lsr	r25
     922:	87 95       	ror	r24
     924:	96 95       	lsr	r25
     926:	87 95       	ror	r24
     928:	96 95       	lsr	r25
     92a:	87 95       	ror	r24
     92c:	9c 01       	movw	r18, r24
     92e:	22 0f       	add	r18, r18
     930:	33 1f       	adc	r19, r19
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	82 0f       	add	r24, r18
     940:	93 1f       	adc	r25, r19
     942:	fa 01       	movw	r30, r20
     944:	e8 1b       	sub	r30, r24
     946:	f9 0b       	sbc	r31, r25
     948:	cf 01       	movw	r24, r30
     94a:	c0 96       	adiw	r24, 0x30	; 48
     94c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <hundred+0x1>
     950:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hundred>
		if(hundred != '0' || count != 0)
     954:	80 33       	cpi	r24, 0x30	; 48
     956:	91 05       	cpc	r25, r1
     958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
     95a:	34 cf       	rjmp	.-408    	; 0x7c4 <lcd_print2+0x90>
     95c:	2e cf       	rjmp	.-420    	; 0x7ba <lcd_print2+0x86>
			lcd_wr_char(thousand);
			count++;
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     95e:	f3 e0       	ldi	r31, 0x03	; 3
     960:	ef 16       	cp	r14, r31
     962:	f1 04       	cpc	r15, r1
     964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x69>
     966:	32 cf       	rjmp	.-412    	; 0x7cc <lcd_print2+0x98>
     968:	7b c0       	rjmp	.+246    	; 0xa60 <__stack+0x161>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     96a:	96 01       	movw	r18, r12
     96c:	ad ec       	ldi	r26, 0xCD	; 205
     96e:	bc ec       	ldi	r27, 0xCC	; 204
     970:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     974:	ac 01       	movw	r20, r24
     976:	56 95       	lsr	r21
     978:	47 95       	ror	r20
     97a:	56 95       	lsr	r21
     97c:	47 95       	ror	r20
     97e:	56 95       	lsr	r21
     980:	47 95       	ror	r20
     982:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     986:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		tens = temp%10 + 48;
     98a:	9a 01       	movw	r18, r20
     98c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	96 95       	lsr	r25
     996:	87 95       	ror	r24
     998:	96 95       	lsr	r25
     99a:	87 95       	ror	r24
     99c:	9c 01       	movw	r18, r24
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	9a 01       	movw	r18, r20
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	c9 01       	movw	r24, r18
     9ba:	c0 96       	adiw	r24, 0x30	; 48
     9bc:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <tens+0x1>
     9c0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tens>
		if(tens != '0' || count != 0)
     9c4:	80 33       	cpi	r24, 0x30	; 48
     9c6:	91 05       	cpc	r25, r1
     9c8:	09 f0       	breq	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	0a cf       	rjmp	.-492    	; 0x7e0 <lcd_print2+0xac>
     9cc:	05 cf       	rjmp	.-502    	; 0x7d8 <lcd_print2+0xa4>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     9ce:	31 e0       	ldi	r19, 0x01	; 1
     9d0:	e3 16       	cp	r14, r19
     9d2:	f1 04       	cpc	r15, r1
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <__stack+0xd9>
     9d6:	08 cf       	rjmp	.-496    	; 0x7e8 <lcd_print2+0xb4>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     9d8:	c0 e0       	ldi	r28, 0x00	; 0
     9da:	29 cf       	rjmp	.-430    	; 0x82e <lcd_print2+0xfa>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     9dc:	8c 2f       	mov	r24, r28
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	8e 15       	cp	r24, r14
     9e2:	9f 05       	cpc	r25, r15
     9e4:	0c f4       	brge	.+2      	; 0x9e8 <__stack+0xe9>
     9e6:	42 cf       	rjmp	.-380    	; 0x86c <lcd_print2+0x138>
     9e8:	a3 c0       	rjmp	.+326    	; 0xb30 <__stack+0x231>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     9ea:	96 01       	movw	r18, r12
     9ec:	36 95       	lsr	r19
     9ee:	27 95       	ror	r18
     9f0:	36 95       	lsr	r19
     9f2:	27 95       	ror	r18
     9f4:	36 95       	lsr	r19
     9f6:	27 95       	ror	r18
     9f8:	a5 ec       	ldi	r26, 0xC5	; 197
     9fa:	b0 e2       	ldi	r27, 0x20	; 32
     9fc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     a00:	ac 01       	movw	r20, r24
     a02:	52 95       	swap	r21
     a04:	42 95       	swap	r20
     a06:	4f 70       	andi	r20, 0x0F	; 15
     a08:	45 27       	eor	r20, r21
     a0a:	5f 70       	andi	r21, 0x0F	; 15
     a0c:	45 27       	eor	r20, r21
     a0e:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     a12:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		thousand = temp%10 + 48;
     a16:	9a 01       	movw	r18, r20
     a18:	ad ec       	ldi	r26, 0xCD	; 205
     a1a:	bc ec       	ldi	r27, 0xCC	; 204
     a1c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
     a28:	96 95       	lsr	r25
     a2a:	87 95       	ror	r24
     a2c:	9c 01       	movw	r18, r24
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	82 0f       	add	r24, r18
     a40:	93 1f       	adc	r25, r19
     a42:	fa 01       	movw	r30, r20
     a44:	e8 1b       	sub	r30, r24
     a46:	f9 0b       	sbc	r31, r25
     a48:	cf 01       	movw	r24, r30
     a4a:	c0 96       	adiw	r24, 0x30	; 48
     a4c:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <thousand+0x1>
     a50:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <thousand>
		if(thousand != '0' || count != 0)
     a54:	80 33       	cpi	r24, 0x30	; 48
     a56:	91 05       	cpc	r25, r1
     a58:	09 f0       	breq	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	aa ce       	rjmp	.-684    	; 0x7b0 <lcd_print2+0x7c>
     a5c:	c0 e0       	ldi	r28, 0x00	; 0
     a5e:	4b cf       	rjmp	.-362    	; 0x8f6 <lcd_print2+0x1c2>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     a60:	96 01       	movw	r18, r12
     a62:	36 95       	lsr	r19
     a64:	27 95       	ror	r18
     a66:	36 95       	lsr	r19
     a68:	27 95       	ror	r18
     a6a:	ab e7       	ldi	r26, 0x7B	; 123
     a6c:	b4 e1       	ldi	r27, 0x14	; 20
     a6e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     a72:	ac 01       	movw	r20, r24
     a74:	56 95       	lsr	r21
     a76:	47 95       	ror	r20
     a78:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     a7c:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		hundred = temp%10 + 48;
     a80:	9a 01       	movw	r18, r20
     a82:	ad ec       	ldi	r26, 0xCD	; 205
     a84:	bc ec       	ldi	r27, 0xCC	; 204
     a86:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     a8a:	96 95       	lsr	r25
     a8c:	87 95       	ror	r24
     a8e:	96 95       	lsr	r25
     a90:	87 95       	ror	r24
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	9c 01       	movw	r18, r24
     a98:	22 0f       	add	r18, r18
     a9a:	33 1f       	adc	r19, r19
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	82 0f       	add	r24, r18
     aaa:	93 1f       	adc	r25, r19
     aac:	9a 01       	movw	r18, r20
     aae:	28 1b       	sub	r18, r24
     ab0:	39 0b       	sbc	r19, r25
     ab2:	c9 01       	movw	r24, r18
     ab4:	c0 96       	adiw	r24, 0x30	; 48
     ab6:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <hundred+0x1>
     aba:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hundred>
		if(hundred != '0' || count != 0)
     abe:	80 33       	cpi	r24, 0x30	; 48
     ac0:	91 05       	cpc	r25, r1
     ac2:	09 f0       	breq	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	7e ce       	rjmp	.-772    	; 0x7c2 <lcd_print2+0x8e>
     ac6:	c0 e0       	ldi	r28, 0x00	; 0
     ac8:	50 cf       	rjmp	.-352    	; 0x96a <__stack+0x6b>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     aca:	96 01       	movw	r18, r12
     acc:	ad ec       	ldi	r26, 0xCD	; 205
     ace:	bc ec       	ldi	r27, 0xCC	; 204
     ad0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     ad4:	ac 01       	movw	r20, r24
     ad6:	56 95       	lsr	r21
     ad8:	47 95       	ror	r20
     ada:	56 95       	lsr	r21
     adc:	47 95       	ror	r20
     ade:	56 95       	lsr	r21
     ae0:	47 95       	ror	r20
     ae2:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <temp+0x1>
     ae6:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <temp>
		tens = temp%10 + 48;
     aea:	9a 01       	movw	r18, r20
     aec:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     af0:	96 95       	lsr	r25
     af2:	87 95       	ror	r24
     af4:	96 95       	lsr	r25
     af6:	87 95       	ror	r24
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	9c 01       	movw	r18, r24
     afe:	22 0f       	add	r18, r18
     b00:	33 1f       	adc	r19, r19
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	82 0f       	add	r24, r18
     b10:	93 1f       	adc	r25, r19
     b12:	fa 01       	movw	r30, r20
     b14:	e8 1b       	sub	r30, r24
     b16:	f9 0b       	sbc	r31, r25
     b18:	cf 01       	movw	r24, r30
     b1a:	c0 96       	adiw	r24, 0x30	; 48
     b1c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <tens+0x1>
     b20:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tens>
		if(tens != '0' || count != 0)
     b24:	80 33       	cpi	r24, 0x30	; 48
     b26:	91 05       	cpc	r25, r1
     b28:	09 f0       	breq	.+2      	; 0xb2c <__stack+0x22d>
     b2a:	59 ce       	rjmp	.-846    	; 0x7de <lcd_print2+0xaa>
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	5d ce       	rjmp	.-838    	; 0x7ea <lcd_print2+0xb6>
		{
			lcd_wr_char(32);
			count++;
		}	
	}	
}
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	08 95       	ret

00000b40 <lcd_start>:
     b40:	8f e9       	ldi	r24, 0x9F	; 159
     b42:	9f e0       	ldi	r25, 0x0F	; 15
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <lcd_start+0x4>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <lcd_start+0xa>
     b4a:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b4c:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
     b4e:	80 e3       	ldi	r24, 0x30	; 48
     b50:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     b52:	5e 9a       	sbi	0x0b, 6	; 11
     b54:	ef e1       	ldi	r30, 0x1F	; 31
     b56:	fe e4       	ldi	r31, 0x4E	; 78
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <lcd_start+0x18>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <lcd_start+0x1e>
     b5e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b60:	5e 98       	cbi	0x0b, 6	; 11
     b62:	ef e9       	ldi	r30, 0x9F	; 159
     b64:	ff e0       	ldi	r31, 0x0F	; 15
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <lcd_start+0x26>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <lcd_start+0x2c>
     b6c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b6e:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     b70:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     b72:	5e 9a       	sbi	0x0b, 6	; 11
     b74:	ef e1       	ldi	r30, 0x1F	; 31
     b76:	fe e4       	ldi	r31, 0x4E	; 78
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <lcd_start+0x38>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <lcd_start+0x3e>
     b7e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b80:	5e 98       	cbi	0x0b, 6	; 11
     b82:	ef e9       	ldi	r30, 0x9F	; 159
     b84:	ff e0       	ldi	r31, 0x0F	; 15
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <lcd_start+0x46>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <lcd_start+0x4c>
     b8c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b8e:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     b90:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     b92:	5e 9a       	sbi	0x0b, 6	; 11
     b94:	8f e1       	ldi	r24, 0x1F	; 31
     b96:	9e e4       	ldi	r25, 0x4E	; 78
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <lcd_start+0x58>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <lcd_start+0x5e>
     b9e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     ba0:	5e 98       	cbi	0x0b, 6	; 11
     ba2:	ef e9       	ldi	r30, 0x9F	; 159
     ba4:	ff e0       	ldi	r31, 0x0F	; 15
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <lcd_start+0x66>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <lcd_start+0x6c>
     bac:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     bae:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
     bb0:	80 e1       	ldi	r24, 0x10	; 16
     bb2:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     bb4:	5e 9a       	sbi	0x0b, 6	; 11
     bb6:	8f e9       	ldi	r24, 0x9F	; 159
     bb8:	9f e0       	ldi	r25, 0x0F	; 15
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <lcd_start+0x7a>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <lcd_start+0x80>
     bc0:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     bc2:	5e 98       	cbi	0x0b, 6	; 11
     bc4:	ef e9       	ldi	r30, 0x9F	; 159
     bc6:	ff e0       	ldi	r31, 0x0F	; 15
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <lcd_start+0x88>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <lcd_start+0x8e>
     bce:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     bd0:	88 e2       	ldi	r24, 0x28	; 40
     bd2:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
     bdc:	8c e0       	ldi	r24, 0x0C	; 12
     bde:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
     be2:	80 e8       	ldi	r24, 0x80	; 128
     be4:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
     be8:	08 95       	ret

00000bea <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_wr_command>
     bf0:	08 95       	ret

00000bf2 <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
     bf2:	0e 94 6f 03 	call	0x6de	; 0x6de <lcd_port_config>
	adc_pin_config();
     bf6:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
     bfa:	08 95       	ret

00000bfc <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
     bfc:	f8 94       	cli
	lcd_start();
     bfe:	0e 94 a0 05 	call	0xb40	; 0xb40 <lcd_start>
	adc_config();
     c02:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
     c06:	78 94       	sei
     c08:	08 95       	ret

00000c0a <main>:
}

int main(void)
{
	port_config();
     c0a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <port_config>
	init_devices();
     c0e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <init_devices>
		
	lcd_string2(1, 7, "CCL");
     c12:	4f e0       	ldi	r20, 0x0F	; 15
     c14:	51 e0       	ldi	r21, 0x01	; 1
     c16:	67 e0       	ldi	r22, 0x07	; 7
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 89 03 	call	0x712	; 0x712 <lcd_string2>
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	85 ea       	ldi	r24, 0xA5	; 165
     c22:	9e e0       	ldi	r25, 0x0E	; 14
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	80 40       	sbci	r24, 0x00	; 0
     c28:	90 40       	sbci	r25, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <main+0x1a>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <main+0x24>
     c2e:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
     c30:	1d 9b       	sbis	0x03, 5	; 3
     c32:	07 c0       	rjmp	.+14     	; 0xc42 <main+0x38>
	{
		lcd_string2(2,1,"Supply Connected");
     c34:	43 e1       	ldi	r20, 0x13	; 19
     c36:	51 e0       	ldi	r21, 0x01	; 1
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	0e 94 89 03 	call	0x712	; 0x712 <lcd_string2>
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <main+0x5c>
	}
	
	else
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
     c42:	44 e2       	ldi	r20, 0x24	; 36
     c44:	51 e0       	ldi	r21, 0x01	; 1
     c46:	62 e0       	ldi	r22, 0x02	; 2
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	0e 94 89 03 	call	0x712	; 0x712 <lcd_string2>
		offset = 26.2;
     c4e:	8a e9       	ldi	r24, 0x9A	; 154
     c50:	99 e9       	ldi	r25, 0x99	; 153
     c52:	a1 ed       	ldi	r26, 0xD1	; 209
     c54:	b1 e4       	ldi	r27, 0x41	; 65
     c56:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <offset>
     c5a:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <offset+0x1>
     c5e:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <offset+0x2>
     c62:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <offset+0x3>
     c66:	2f ef       	ldi	r18, 0xFF	; 255
     c68:	8b e4       	ldi	r24, 0x4B	; 75
     c6a:	9d e1       	ldi	r25, 0x1D	; 29
     c6c:	21 50       	subi	r18, 0x01	; 1
     c6e:	80 40       	sbci	r24, 0x00	; 0
     c70:	90 40       	sbci	r25, 0x00	; 0
     c72:	e1 f7       	brne	.-8      	; 0xc6c <main+0x62>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <main+0x6c>
     c76:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
     c78:	0e 94 f5 05 	call	0xbea	; 0xbea <lcd_clear>
		print_gate_voltage(2,10);
	}
	else
	{
		lcd_clear();
		char flag = 0;
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(600);
	lcd_clear();
	
	while (1)
	{
		update_current();
     c7e:	0e 94 0d 01 	call	0x21a	; 0x21a <update_current>
		update_voltage();
     c82:	0e 94 35 01 	call	0x26a	; 0x26a <update_voltage>
		update_power();
     c86:	0e 94 4d 01 	call	0x29a	; 0x29a <update_power>
		update_gate_voltage();
     c8a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <update_gate_voltage>
	
	if(check_thresholds()==0)	
     c8e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <check_thresholds>
     c92:	81 11       	cpse	r24, r1
     c94:	11 c0       	rjmp	.+34     	; 0xcb8 <main+0xae>
	{	
		print_current(1,1);
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 86 01 	call	0x30c	; 0x30c <print_current>
		print_voltage(1,10);
     c9e:	6a e0       	ldi	r22, 0x0A	; 10
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 a4 01 	call	0x348	; 0x348 <print_voltage>
		print_power(2,1);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	0e 94 c2 01 	call	0x384	; 0x384 <print_power>
		print_gate_voltage(2,10);
     cae:	6a e0       	ldi	r22, 0x0A	; 10
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <print_gate_voltage>
     cb6:	e3 cf       	rjmp	.-58     	; 0xc7e <main+0x74>
	}
	else
	{
		lcd_clear();
     cb8:	0e 94 f5 05 	call	0xbea	; 0xbea <lcd_clear>
		char flag = 0;
     cbc:	cd 2f       	mov	r28, r29
		while(check_thresholds())
     cbe:	42 c0       	rjmp	.+132    	; 0xd44 <main+0x13a>
		{	
			update_current();
     cc0:	0e 94 0d 01 	call	0x21a	; 0x21a <update_current>
			update_voltage();
     cc4:	0e 94 35 01 	call	0x26a	; 0x26a <update_voltage>
			update_power();
     cc8:	0e 94 4d 01 	call	0x29a	; 0x29a <update_power>
			update_gate_voltage();
     ccc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <update_gate_voltage>
			
			switch (check_thresholds())
     cd0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <check_thresholds>
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	89 f0       	breq	.+34     	; 0xcfa <main+0xf0>
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	e9 f0       	breq	.+58     	; 0xd16 <main+0x10c>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	49 f5       	brne	.+82     	; 0xd32 <main+0x128>
			{
				case 1:	//Power exceeds threshold
					print_power(1,1);
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 c2 01 	call	0x384	; 0x384 <print_power>
					
					if(flag)
     ce6:	c1 11       	cpse	r28, r1
     ce8:	2d c0       	rjmp	.+90     	; 0xd44 <main+0x13a>
					break;
						
					lcd_string2(2, 1, "Power Exceeded");
     cea:	42 e3       	ldi	r20, 0x32	; 50
     cec:	51 e0       	ldi	r21, 0x01	; 1
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	0e 94 89 03 	call	0x712	; 0x712 <lcd_string2>
					flag = 1;
     cf6:	c1 e0       	ldi	r28, 0x01	; 1
					break;
     cf8:	25 c0       	rjmp	.+74     	; 0xd44 <main+0x13a>
			
				case 2:	//Voltage
					print_voltage(1,1);
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	0e 94 a4 01 	call	0x348	; 0x348 <print_voltage>
					if(flag)
     d02:	c1 11       	cpse	r28, r1
     d04:	1f c0       	rjmp	.+62     	; 0xd44 <main+0x13a>
					break;
					
					lcd_string2(1, 1, "Voltage Exceeded");
     d06:	41 e4       	ldi	r20, 0x41	; 65
     d08:	51 e0       	ldi	r21, 0x01	; 1
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 89 03 	call	0x712	; 0x712 <lcd_string2>
					flag = 1;
     d12:	c1 e0       	ldi	r28, 0x01	; 1
					break;
     d14:	17 c0       	rjmp	.+46     	; 0xd44 <main+0x13a>
			
				case 3:	//Current
					print_current(1,1);
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0e 94 86 01 	call	0x30c	; 0x30c <print_current>
					if(flag)
     d1e:	c1 11       	cpse	r28, r1
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <main+0x13a>
					break;
					
					lcd_string2(1, 1, "Current Exceeded");
     d22:	42 e5       	ldi	r20, 0x52	; 82
     d24:	51 e0       	ldi	r21, 0x01	; 1
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 89 03 	call	0x712	; 0x712 <lcd_string2>
					flag = 1;
     d2e:	c1 e0       	ldi	r28, 0x01	; 1
					break;
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <main+0x13a>
			
				default:
					if(flag)
     d32:	c1 11       	cpse	r28, r1
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <main+0x13a>
					break;
				
					lcd_string2(1, 6, "Error");
     d36:	43 e6       	ldi	r20, 0x63	; 99
     d38:	51 e0       	ldi	r21, 0x01	; 1
     d3a:	66 e0       	ldi	r22, 0x06	; 6
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 89 03 	call	0x712	; 0x712 <lcd_string2>
					flag = 1;
     d42:	c1 e0       	ldi	r28, 0x01	; 1
	}
	else
	{
		lcd_clear();
		char flag = 0;
		while(check_thresholds())
     d44:	0e 94 fe 01 	call	0x3fc	; 0x3fc <check_thresholds>
     d48:	81 11       	cpse	r24, r1
     d4a:	ba cf       	rjmp	.-140    	; 0xcc0 <main+0xb6>
					lcd_string2(1, 6, "Error");
					flag = 1;
					break;
			}
		}
		lcd_clear();
     d4c:	0e 94 f5 05 	call	0xbea	; 0xbea <lcd_clear>
     d50:	96 cf       	rjmp	.-212    	; 0xc7e <main+0x74>

00000d52 <__subsf3>:
     d52:	50 58       	subi	r21, 0x80	; 128

00000d54 <__addsf3>:
     d54:	bb 27       	eor	r27, r27
     d56:	aa 27       	eor	r26, r26
     d58:	0e 94 c1 06 	call	0xd82	; 0xd82 <__addsf3x>
     d5c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_round>
     d60:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscA>
     d64:	38 f0       	brcs	.+14     	; 0xd74 <__addsf3+0x20>
     d66:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_pscB>
     d6a:	20 f0       	brcs	.+8      	; 0xd74 <__addsf3+0x20>
     d6c:	39 f4       	brne	.+14     	; 0xd7c <__addsf3+0x28>
     d6e:	9f 3f       	cpi	r25, 0xFF	; 255
     d70:	19 f4       	brne	.+6      	; 0xd78 <__addsf3+0x24>
     d72:	26 f4       	brtc	.+8      	; 0xd7c <__addsf3+0x28>
     d74:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_nan>
     d78:	0e f4       	brtc	.+2      	; 0xd7c <__addsf3+0x28>
     d7a:	e0 95       	com	r30
     d7c:	e7 fb       	bst	r30, 7
     d7e:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_inf>

00000d82 <__addsf3x>:
     d82:	e9 2f       	mov	r30, r25
     d84:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_split3>
     d88:	58 f3       	brcs	.-42     	; 0xd60 <__addsf3+0xc>
     d8a:	ba 17       	cp	r27, r26
     d8c:	62 07       	cpc	r22, r18
     d8e:	73 07       	cpc	r23, r19
     d90:	84 07       	cpc	r24, r20
     d92:	95 07       	cpc	r25, r21
     d94:	20 f0       	brcs	.+8      	; 0xd9e <__addsf3x+0x1c>
     d96:	79 f4       	brne	.+30     	; 0xdb6 <__addsf3x+0x34>
     d98:	a6 f5       	brtc	.+104    	; 0xe02 <__addsf3x+0x80>
     d9a:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_zero>
     d9e:	0e f4       	brtc	.+2      	; 0xda2 <__addsf3x+0x20>
     da0:	e0 95       	com	r30
     da2:	0b 2e       	mov	r0, r27
     da4:	ba 2f       	mov	r27, r26
     da6:	a0 2d       	mov	r26, r0
     da8:	0b 01       	movw	r0, r22
     daa:	b9 01       	movw	r22, r18
     dac:	90 01       	movw	r18, r0
     dae:	0c 01       	movw	r0, r24
     db0:	ca 01       	movw	r24, r20
     db2:	a0 01       	movw	r20, r0
     db4:	11 24       	eor	r1, r1
     db6:	ff 27       	eor	r31, r31
     db8:	59 1b       	sub	r21, r25
     dba:	99 f0       	breq	.+38     	; 0xde2 <__addsf3x+0x60>
     dbc:	59 3f       	cpi	r21, 0xF9	; 249
     dbe:	50 f4       	brcc	.+20     	; 0xdd4 <__addsf3x+0x52>
     dc0:	50 3e       	cpi	r21, 0xE0	; 224
     dc2:	68 f1       	brcs	.+90     	; 0xe1e <__addsf3x+0x9c>
     dc4:	1a 16       	cp	r1, r26
     dc6:	f0 40       	sbci	r31, 0x00	; 0
     dc8:	a2 2f       	mov	r26, r18
     dca:	23 2f       	mov	r18, r19
     dcc:	34 2f       	mov	r19, r20
     dce:	44 27       	eor	r20, r20
     dd0:	58 5f       	subi	r21, 0xF8	; 248
     dd2:	f3 cf       	rjmp	.-26     	; 0xdba <__addsf3x+0x38>
     dd4:	46 95       	lsr	r20
     dd6:	37 95       	ror	r19
     dd8:	27 95       	ror	r18
     dda:	a7 95       	ror	r26
     ddc:	f0 40       	sbci	r31, 0x00	; 0
     dde:	53 95       	inc	r21
     de0:	c9 f7       	brne	.-14     	; 0xdd4 <__addsf3x+0x52>
     de2:	7e f4       	brtc	.+30     	; 0xe02 <__addsf3x+0x80>
     de4:	1f 16       	cp	r1, r31
     de6:	ba 0b       	sbc	r27, r26
     de8:	62 0b       	sbc	r22, r18
     dea:	73 0b       	sbc	r23, r19
     dec:	84 0b       	sbc	r24, r20
     dee:	ba f0       	brmi	.+46     	; 0xe1e <__addsf3x+0x9c>
     df0:	91 50       	subi	r25, 0x01	; 1
     df2:	a1 f0       	breq	.+40     	; 0xe1c <__addsf3x+0x9a>
     df4:	ff 0f       	add	r31, r31
     df6:	bb 1f       	adc	r27, r27
     df8:	66 1f       	adc	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	88 1f       	adc	r24, r24
     dfe:	c2 f7       	brpl	.-16     	; 0xdf0 <__addsf3x+0x6e>
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <__addsf3x+0x9c>
     e02:	ba 0f       	add	r27, r26
     e04:	62 1f       	adc	r22, r18
     e06:	73 1f       	adc	r23, r19
     e08:	84 1f       	adc	r24, r20
     e0a:	48 f4       	brcc	.+18     	; 0xe1e <__addsf3x+0x9c>
     e0c:	87 95       	ror	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b7 95       	ror	r27
     e14:	f7 95       	ror	r31
     e16:	9e 3f       	cpi	r25, 0xFE	; 254
     e18:	08 f0       	brcs	.+2      	; 0xe1c <__addsf3x+0x9a>
     e1a:	b0 cf       	rjmp	.-160    	; 0xd7c <__addsf3+0x28>
     e1c:	93 95       	inc	r25
     e1e:	88 0f       	add	r24, r24
     e20:	08 f0       	brcs	.+2      	; 0xe24 <__addsf3x+0xa2>
     e22:	99 27       	eor	r25, r25
     e24:	ee 0f       	add	r30, r30
     e26:	97 95       	ror	r25
     e28:	87 95       	ror	r24
     e2a:	08 95       	ret

00000e2c <__cmpsf2>:
     e2c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_cmp>
     e30:	08 f4       	brcc	.+2      	; 0xe34 <__cmpsf2+0x8>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	08 95       	ret

00000e36 <__divsf3>:
     e36:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__divsf3x>
     e3a:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_round>
     e3e:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_pscB>
     e42:	58 f0       	brcs	.+22     	; 0xe5a <__divsf3+0x24>
     e44:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscA>
     e48:	40 f0       	brcs	.+16     	; 0xe5a <__divsf3+0x24>
     e4a:	29 f4       	brne	.+10     	; 0xe56 <__divsf3+0x20>
     e4c:	5f 3f       	cpi	r21, 0xFF	; 255
     e4e:	29 f0       	breq	.+10     	; 0xe5a <__divsf3+0x24>
     e50:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_inf>
     e54:	51 11       	cpse	r21, r1
     e56:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>
     e5a:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_nan>

00000e5e <__divsf3x>:
     e5e:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_split3>
     e62:	68 f3       	brcs	.-38     	; 0xe3e <__divsf3+0x8>

00000e64 <__divsf3_pse>:
     e64:	99 23       	and	r25, r25
     e66:	b1 f3       	breq	.-20     	; 0xe54 <__divsf3+0x1e>
     e68:	55 23       	and	r21, r21
     e6a:	91 f3       	breq	.-28     	; 0xe50 <__divsf3+0x1a>
     e6c:	95 1b       	sub	r25, r21
     e6e:	55 0b       	sbc	r21, r21
     e70:	bb 27       	eor	r27, r27
     e72:	aa 27       	eor	r26, r26
     e74:	62 17       	cp	r22, r18
     e76:	73 07       	cpc	r23, r19
     e78:	84 07       	cpc	r24, r20
     e7a:	38 f0       	brcs	.+14     	; 0xe8a <__divsf3_pse+0x26>
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	44 1f       	adc	r20, r20
     e86:	aa 1f       	adc	r26, r26
     e88:	a9 f3       	breq	.-22     	; 0xe74 <__divsf3_pse+0x10>
     e8a:	35 d0       	rcall	.+106    	; 0xef6 <__divsf3_pse+0x92>
     e8c:	0e 2e       	mov	r0, r30
     e8e:	3a f0       	brmi	.+14     	; 0xe9e <__divsf3_pse+0x3a>
     e90:	e0 e8       	ldi	r30, 0x80	; 128
     e92:	32 d0       	rcall	.+100    	; 0xef8 <__divsf3_pse+0x94>
     e94:	91 50       	subi	r25, 0x01	; 1
     e96:	50 40       	sbci	r21, 0x00	; 0
     e98:	e6 95       	lsr	r30
     e9a:	00 1c       	adc	r0, r0
     e9c:	ca f7       	brpl	.-14     	; 0xe90 <__divsf3_pse+0x2c>
     e9e:	2b d0       	rcall	.+86     	; 0xef6 <__divsf3_pse+0x92>
     ea0:	fe 2f       	mov	r31, r30
     ea2:	29 d0       	rcall	.+82     	; 0xef6 <__divsf3_pse+0x92>
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	bb 1f       	adc	r27, r27
     eac:	26 17       	cp	r18, r22
     eae:	37 07       	cpc	r19, r23
     eb0:	48 07       	cpc	r20, r24
     eb2:	ab 07       	cpc	r26, r27
     eb4:	b0 e8       	ldi	r27, 0x80	; 128
     eb6:	09 f0       	breq	.+2      	; 0xeba <__divsf3_pse+0x56>
     eb8:	bb 0b       	sbc	r27, r27
     eba:	80 2d       	mov	r24, r0
     ebc:	bf 01       	movw	r22, r30
     ebe:	ff 27       	eor	r31, r31
     ec0:	93 58       	subi	r25, 0x83	; 131
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	3a f0       	brmi	.+14     	; 0xed4 <__divsf3_pse+0x70>
     ec6:	9e 3f       	cpi	r25, 0xFE	; 254
     ec8:	51 05       	cpc	r21, r1
     eca:	78 f0       	brcs	.+30     	; 0xeea <__divsf3_pse+0x86>
     ecc:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_inf>
     ed0:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>
     ed4:	5f 3f       	cpi	r21, 0xFF	; 255
     ed6:	e4 f3       	brlt	.-8      	; 0xed0 <__divsf3_pse+0x6c>
     ed8:	98 3e       	cpi	r25, 0xE8	; 232
     eda:	d4 f3       	brlt	.-12     	; 0xed0 <__divsf3_pse+0x6c>
     edc:	86 95       	lsr	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f7 95       	ror	r31
     ee6:	9f 5f       	subi	r25, 0xFF	; 255
     ee8:	c9 f7       	brne	.-14     	; 0xedc <__divsf3_pse+0x78>
     eea:	88 0f       	add	r24, r24
     eec:	91 1d       	adc	r25, r1
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24
     ef2:	97 f9       	bld	r25, 7
     ef4:	08 95       	ret
     ef6:	e1 e0       	ldi	r30, 0x01	; 1
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	bb 1f       	adc	r27, r27
     f00:	62 17       	cp	r22, r18
     f02:	73 07       	cpc	r23, r19
     f04:	84 07       	cpc	r24, r20
     f06:	ba 07       	cpc	r27, r26
     f08:	20 f0       	brcs	.+8      	; 0xf12 <__divsf3_pse+0xae>
     f0a:	62 1b       	sub	r22, r18
     f0c:	73 0b       	sbc	r23, r19
     f0e:	84 0b       	sbc	r24, r20
     f10:	ba 0b       	sbc	r27, r26
     f12:	ee 1f       	adc	r30, r30
     f14:	88 f7       	brcc	.-30     	; 0xef8 <__divsf3_pse+0x94>
     f16:	e0 95       	com	r30
     f18:	08 95       	ret

00000f1a <__fixunssfsi>:
     f1a:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_splitA>
     f1e:	88 f0       	brcs	.+34     	; 0xf42 <__fixunssfsi+0x28>
     f20:	9f 57       	subi	r25, 0x7F	; 127
     f22:	98 f0       	brcs	.+38     	; 0xf4a <__fixunssfsi+0x30>
     f24:	b9 2f       	mov	r27, r25
     f26:	99 27       	eor	r25, r25
     f28:	b7 51       	subi	r27, 0x17	; 23
     f2a:	b0 f0       	brcs	.+44     	; 0xf58 <__fixunssfsi+0x3e>
     f2c:	e1 f0       	breq	.+56     	; 0xf66 <__fixunssfsi+0x4c>
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	1a f0       	brmi	.+6      	; 0xf3e <__fixunssfsi+0x24>
     f38:	ba 95       	dec	r27
     f3a:	c9 f7       	brne	.-14     	; 0xf2e <__fixunssfsi+0x14>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <__fixunssfsi+0x4c>
     f3e:	b1 30       	cpi	r27, 0x01	; 1
     f40:	91 f0       	breq	.+36     	; 0xf66 <__fixunssfsi+0x4c>
     f42:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fp_zero>
     f46:	b1 e0       	ldi	r27, 0x01	; 1
     f48:	08 95       	ret
     f4a:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_zero>
     f4e:	67 2f       	mov	r22, r23
     f50:	78 2f       	mov	r23, r24
     f52:	88 27       	eor	r24, r24
     f54:	b8 5f       	subi	r27, 0xF8	; 248
     f56:	39 f0       	breq	.+14     	; 0xf66 <__fixunssfsi+0x4c>
     f58:	b9 3f       	cpi	r27, 0xF9	; 249
     f5a:	cc f3       	brlt	.-14     	; 0xf4e <__fixunssfsi+0x34>
     f5c:	86 95       	lsr	r24
     f5e:	77 95       	ror	r23
     f60:	67 95       	ror	r22
     f62:	b3 95       	inc	r27
     f64:	d9 f7       	brne	.-10     	; 0xf5c <__fixunssfsi+0x42>
     f66:	3e f4       	brtc	.+14     	; 0xf76 <__fixunssfsi+0x5c>
     f68:	90 95       	com	r25
     f6a:	80 95       	com	r24
     f6c:	70 95       	com	r23
     f6e:	61 95       	neg	r22
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	08 95       	ret

00000f78 <__floatunsisf>:
     f78:	e8 94       	clt
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <__floatsisf+0x12>

00000f7c <__floatsisf>:
     f7c:	97 fb       	bst	r25, 7
     f7e:	3e f4       	brtc	.+14     	; 0xf8e <__floatsisf+0x12>
     f80:	90 95       	com	r25
     f82:	80 95       	com	r24
     f84:	70 95       	com	r23
     f86:	61 95       	neg	r22
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	99 23       	and	r25, r25
     f90:	a9 f0       	breq	.+42     	; 0xfbc <__floatsisf+0x40>
     f92:	f9 2f       	mov	r31, r25
     f94:	96 e9       	ldi	r25, 0x96	; 150
     f96:	bb 27       	eor	r27, r27
     f98:	93 95       	inc	r25
     f9a:	f6 95       	lsr	r31
     f9c:	87 95       	ror	r24
     f9e:	77 95       	ror	r23
     fa0:	67 95       	ror	r22
     fa2:	b7 95       	ror	r27
     fa4:	f1 11       	cpse	r31, r1
     fa6:	f8 cf       	rjmp	.-16     	; 0xf98 <__floatsisf+0x1c>
     fa8:	fa f4       	brpl	.+62     	; 0xfe8 <__floatsisf+0x6c>
     faa:	bb 0f       	add	r27, r27
     fac:	11 f4       	brne	.+4      	; 0xfb2 <__floatsisf+0x36>
     fae:	60 ff       	sbrs	r22, 0
     fb0:	1b c0       	rjmp	.+54     	; 0xfe8 <__floatsisf+0x6c>
     fb2:	6f 5f       	subi	r22, 0xFF	; 255
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	16 c0       	rjmp	.+44     	; 0xfe8 <__floatsisf+0x6c>
     fbc:	88 23       	and	r24, r24
     fbe:	11 f0       	breq	.+4      	; 0xfc4 <__floatsisf+0x48>
     fc0:	96 e9       	ldi	r25, 0x96	; 150
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <__floatsisf+0x6a>
     fc4:	77 23       	and	r23, r23
     fc6:	21 f0       	breq	.+8      	; 0xfd0 <__floatsisf+0x54>
     fc8:	9e e8       	ldi	r25, 0x8E	; 142
     fca:	87 2f       	mov	r24, r23
     fcc:	76 2f       	mov	r23, r22
     fce:	05 c0       	rjmp	.+10     	; 0xfda <__floatsisf+0x5e>
     fd0:	66 23       	and	r22, r22
     fd2:	71 f0       	breq	.+28     	; 0xff0 <__floatsisf+0x74>
     fd4:	96 e8       	ldi	r25, 0x86	; 134
     fd6:	86 2f       	mov	r24, r22
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	2a f0       	brmi	.+10     	; 0xfe8 <__floatsisf+0x6c>
     fde:	9a 95       	dec	r25
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	da f7       	brpl	.-10     	; 0xfde <__floatsisf+0x62>
     fe8:	88 0f       	add	r24, r24
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	97 f9       	bld	r25, 7
     ff0:	08 95       	ret

00000ff2 <__fp_cmp>:
     ff2:	99 0f       	add	r25, r25
     ff4:	00 08       	sbc	r0, r0
     ff6:	55 0f       	add	r21, r21
     ff8:	aa 0b       	sbc	r26, r26
     ffa:	e0 e8       	ldi	r30, 0x80	; 128
     ffc:	fe ef       	ldi	r31, 0xFE	; 254
     ffe:	16 16       	cp	r1, r22
    1000:	17 06       	cpc	r1, r23
    1002:	e8 07       	cpc	r30, r24
    1004:	f9 07       	cpc	r31, r25
    1006:	c0 f0       	brcs	.+48     	; 0x1038 <__fp_cmp+0x46>
    1008:	12 16       	cp	r1, r18
    100a:	13 06       	cpc	r1, r19
    100c:	e4 07       	cpc	r30, r20
    100e:	f5 07       	cpc	r31, r21
    1010:	98 f0       	brcs	.+38     	; 0x1038 <__fp_cmp+0x46>
    1012:	62 1b       	sub	r22, r18
    1014:	73 0b       	sbc	r23, r19
    1016:	84 0b       	sbc	r24, r20
    1018:	95 0b       	sbc	r25, r21
    101a:	39 f4       	brne	.+14     	; 0x102a <__fp_cmp+0x38>
    101c:	0a 26       	eor	r0, r26
    101e:	61 f0       	breq	.+24     	; 0x1038 <__fp_cmp+0x46>
    1020:	23 2b       	or	r18, r19
    1022:	24 2b       	or	r18, r20
    1024:	25 2b       	or	r18, r21
    1026:	21 f4       	brne	.+8      	; 0x1030 <__fp_cmp+0x3e>
    1028:	08 95       	ret
    102a:	0a 26       	eor	r0, r26
    102c:	09 f4       	brne	.+2      	; 0x1030 <__fp_cmp+0x3e>
    102e:	a1 40       	sbci	r26, 0x01	; 1
    1030:	a6 95       	lsr	r26
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	81 1d       	adc	r24, r1
    1036:	81 1d       	adc	r24, r1
    1038:	08 95       	ret

0000103a <__fp_inf>:
    103a:	97 f9       	bld	r25, 7
    103c:	9f 67       	ori	r25, 0x7F	; 127
    103e:	80 e8       	ldi	r24, 0x80	; 128
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	08 95       	ret

00001046 <__fp_nan>:
    1046:	9f ef       	ldi	r25, 0xFF	; 255
    1048:	80 ec       	ldi	r24, 0xC0	; 192
    104a:	08 95       	ret

0000104c <__fp_pscA>:
    104c:	00 24       	eor	r0, r0
    104e:	0a 94       	dec	r0
    1050:	16 16       	cp	r1, r22
    1052:	17 06       	cpc	r1, r23
    1054:	18 06       	cpc	r1, r24
    1056:	09 06       	cpc	r0, r25
    1058:	08 95       	ret

0000105a <__fp_pscB>:
    105a:	00 24       	eor	r0, r0
    105c:	0a 94       	dec	r0
    105e:	12 16       	cp	r1, r18
    1060:	13 06       	cpc	r1, r19
    1062:	14 06       	cpc	r1, r20
    1064:	05 06       	cpc	r0, r21
    1066:	08 95       	ret

00001068 <__fp_round>:
    1068:	09 2e       	mov	r0, r25
    106a:	03 94       	inc	r0
    106c:	00 0c       	add	r0, r0
    106e:	11 f4       	brne	.+4      	; 0x1074 <__fp_round+0xc>
    1070:	88 23       	and	r24, r24
    1072:	52 f0       	brmi	.+20     	; 0x1088 <__fp_round+0x20>
    1074:	bb 0f       	add	r27, r27
    1076:	40 f4       	brcc	.+16     	; 0x1088 <__fp_round+0x20>
    1078:	bf 2b       	or	r27, r31
    107a:	11 f4       	brne	.+4      	; 0x1080 <__fp_round+0x18>
    107c:	60 ff       	sbrs	r22, 0
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <__fp_round+0x20>
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__fp_split3>:
    108a:	57 fd       	sbrc	r21, 7
    108c:	90 58       	subi	r25, 0x80	; 128
    108e:	44 0f       	add	r20, r20
    1090:	55 1f       	adc	r21, r21
    1092:	59 f0       	breq	.+22     	; 0x10aa <__fp_splitA+0x10>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	71 f0       	breq	.+28     	; 0x10b4 <__fp_splitA+0x1a>
    1098:	47 95       	ror	r20

0000109a <__fp_splitA>:
    109a:	88 0f       	add	r24, r24
    109c:	97 fb       	bst	r25, 7
    109e:	99 1f       	adc	r25, r25
    10a0:	61 f0       	breq	.+24     	; 0x10ba <__fp_splitA+0x20>
    10a2:	9f 3f       	cpi	r25, 0xFF	; 255
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <__fp_splitA+0x2a>
    10a6:	87 95       	ror	r24
    10a8:	08 95       	ret
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	14 06       	cpc	r1, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	f2 cf       	rjmp	.-28     	; 0x1098 <__fp_split3+0xe>
    10b4:	46 95       	lsr	r20
    10b6:	f1 df       	rcall	.-30     	; 0x109a <__fp_splitA>
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <__fp_splitA+0x30>
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	18 06       	cpc	r1, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	f1 cf       	rjmp	.-30     	; 0x10a6 <__fp_splitA+0xc>
    10c4:	86 95       	lsr	r24
    10c6:	71 05       	cpc	r23, r1
    10c8:	61 05       	cpc	r22, r1
    10ca:	08 94       	sec
    10cc:	08 95       	ret

000010ce <__fp_zero>:
    10ce:	e8 94       	clt

000010d0 <__fp_szero>:
    10d0:	bb 27       	eor	r27, r27
    10d2:	66 27       	eor	r22, r22
    10d4:	77 27       	eor	r23, r23
    10d6:	cb 01       	movw	r24, r22
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret

000010dc <__gesf2>:
    10dc:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_cmp>
    10e0:	08 f4       	brcc	.+2      	; 0x10e4 <__gesf2+0x8>
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	08 95       	ret

000010e6 <__mulsf3>:
    10e6:	0e 94 86 08 	call	0x110c	; 0x110c <__mulsf3x>
    10ea:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_round>
    10ee:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscA>
    10f2:	38 f0       	brcs	.+14     	; 0x1102 <__mulsf3+0x1c>
    10f4:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_pscB>
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__mulsf3+0x1c>
    10fa:	95 23       	and	r25, r21
    10fc:	11 f0       	breq	.+4      	; 0x1102 <__mulsf3+0x1c>
    10fe:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_inf>
    1102:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_nan>
    1106:	11 24       	eor	r1, r1
    1108:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>

0000110c <__mulsf3x>:
    110c:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_split3>
    1110:	70 f3       	brcs	.-36     	; 0x10ee <__mulsf3+0x8>

00001112 <__mulsf3_pse>:
    1112:	95 9f       	mul	r25, r21
    1114:	c1 f3       	breq	.-16     	; 0x1106 <__mulsf3+0x20>
    1116:	95 0f       	add	r25, r21
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	55 1f       	adc	r21, r21
    111c:	62 9f       	mul	r22, r18
    111e:	f0 01       	movw	r30, r0
    1120:	72 9f       	mul	r23, r18
    1122:	bb 27       	eor	r27, r27
    1124:	f0 0d       	add	r31, r0
    1126:	b1 1d       	adc	r27, r1
    1128:	63 9f       	mul	r22, r19
    112a:	aa 27       	eor	r26, r26
    112c:	f0 0d       	add	r31, r0
    112e:	b1 1d       	adc	r27, r1
    1130:	aa 1f       	adc	r26, r26
    1132:	64 9f       	mul	r22, r20
    1134:	66 27       	eor	r22, r22
    1136:	b0 0d       	add	r27, r0
    1138:	a1 1d       	adc	r26, r1
    113a:	66 1f       	adc	r22, r22
    113c:	82 9f       	mul	r24, r18
    113e:	22 27       	eor	r18, r18
    1140:	b0 0d       	add	r27, r0
    1142:	a1 1d       	adc	r26, r1
    1144:	62 1f       	adc	r22, r18
    1146:	73 9f       	mul	r23, r19
    1148:	b0 0d       	add	r27, r0
    114a:	a1 1d       	adc	r26, r1
    114c:	62 1f       	adc	r22, r18
    114e:	83 9f       	mul	r24, r19
    1150:	a0 0d       	add	r26, r0
    1152:	61 1d       	adc	r22, r1
    1154:	22 1f       	adc	r18, r18
    1156:	74 9f       	mul	r23, r20
    1158:	33 27       	eor	r19, r19
    115a:	a0 0d       	add	r26, r0
    115c:	61 1d       	adc	r22, r1
    115e:	23 1f       	adc	r18, r19
    1160:	84 9f       	mul	r24, r20
    1162:	60 0d       	add	r22, r0
    1164:	21 1d       	adc	r18, r1
    1166:	82 2f       	mov	r24, r18
    1168:	76 2f       	mov	r23, r22
    116a:	6a 2f       	mov	r22, r26
    116c:	11 24       	eor	r1, r1
    116e:	9f 57       	subi	r25, 0x7F	; 127
    1170:	50 40       	sbci	r21, 0x00	; 0
    1172:	9a f0       	brmi	.+38     	; 0x119a <__mulsf3_pse+0x88>
    1174:	f1 f0       	breq	.+60     	; 0x11b2 <__mulsf3_pse+0xa0>
    1176:	88 23       	and	r24, r24
    1178:	4a f0       	brmi	.+18     	; 0x118c <__mulsf3_pse+0x7a>
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	bb 1f       	adc	r27, r27
    1180:	66 1f       	adc	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	91 50       	subi	r25, 0x01	; 1
    1188:	50 40       	sbci	r21, 0x00	; 0
    118a:	a9 f7       	brne	.-22     	; 0x1176 <__mulsf3_pse+0x64>
    118c:	9e 3f       	cpi	r25, 0xFE	; 254
    118e:	51 05       	cpc	r21, r1
    1190:	80 f0       	brcs	.+32     	; 0x11b2 <__mulsf3_pse+0xa0>
    1192:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_inf>
    1196:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__fp_szero>
    119a:	5f 3f       	cpi	r21, 0xFF	; 255
    119c:	e4 f3       	brlt	.-8      	; 0x1196 <__mulsf3_pse+0x84>
    119e:	98 3e       	cpi	r25, 0xE8	; 232
    11a0:	d4 f3       	brlt	.-12     	; 0x1196 <__mulsf3_pse+0x84>
    11a2:	86 95       	lsr	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b7 95       	ror	r27
    11aa:	f7 95       	ror	r31
    11ac:	e7 95       	ror	r30
    11ae:	9f 5f       	subi	r25, 0xFF	; 255
    11b0:	c1 f7       	brne	.-16     	; 0x11a2 <__mulsf3_pse+0x90>
    11b2:	fe 2b       	or	r31, r30
    11b4:	88 0f       	add	r24, r24
    11b6:	91 1d       	adc	r25, r1
    11b8:	96 95       	lsr	r25
    11ba:	87 95       	ror	r24
    11bc:	97 f9       	bld	r25, 7
    11be:	08 95       	ret

000011c0 <__umulhisi3>:
    11c0:	a2 9f       	mul	r26, r18
    11c2:	b0 01       	movw	r22, r0
    11c4:	b3 9f       	mul	r27, r19
    11c6:	c0 01       	movw	r24, r0
    11c8:	a3 9f       	mul	r26, r19
    11ca:	70 0d       	add	r23, r0
    11cc:	81 1d       	adc	r24, r1
    11ce:	11 24       	eor	r1, r1
    11d0:	91 1d       	adc	r25, r1
    11d2:	b2 9f       	mul	r27, r18
    11d4:	70 0d       	add	r23, r0
    11d6:	81 1d       	adc	r24, r1
    11d8:	11 24       	eor	r1, r1
    11da:	91 1d       	adc	r25, r1
    11dc:	08 95       	ret

000011de <_exit>:
    11de:	f8 94       	cli

000011e0 <__stop_program>:
    11e0:	ff cf       	rjmp	.-2      	; 0x11e0 <__stop_program>
