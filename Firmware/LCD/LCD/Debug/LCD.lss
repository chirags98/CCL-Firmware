
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  0000195a  000019ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000195a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080016e  0080016e  00001a5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb0  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfe  00000000  00000000  00003b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000106c  00000000  00000000  00004802  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00005870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061b  00000000  00000000  00005d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a9d  00000000  00000000  00006343  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 38       	cpi	r26, 0x8E	; 142
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 84 09 	call	0x1308	; 0x1308 <main>
      9e:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	d8 2e       	mov	r13, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     104:	06 2f       	mov	r16, r22
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	10 16       	cp	r1, r16
     10a:	11 06       	cpc	r1, r17
     10c:	2c f5       	brge	.+74     	; 0x158 <avg_read_adc_channel+0x6c>
     10e:	c1 e0       	ldi	r28, 0x01	; 1
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	81 2c       	mov	r8, r1
     114:	91 2c       	mov	r9, r1
     116:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
     118:	e8 2e       	mov	r14, r24
     11a:	f1 2c       	mov	r15, r1
     11c:	c7 01       	movw	r24, r14
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	9c 01       	movw	r18, r24
     124:	28 57       	subi	r18, 0x78	; 120
     126:	3e 4f       	sbci	r19, 0xFE	; 254
     128:	79 01       	movw	r14, r18
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	8d 2d       	mov	r24, r13
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel];
     130:	f7 01       	movw	r30, r14
     132:	60 81       	ld	r22, Z
     134:	71 81       	ldd	r23, Z+1	; 0x01
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__floatunsisf>
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
     142:	c5 01       	movw	r24, r10
     144:	b4 01       	movw	r22, r8
     146:	0e 94 37 0a 	call	0x146e	; 0x146e <__addsf3>
     14a:	4b 01       	movw	r8, r22
     14c:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     14e:	21 96       	adiw	r28, 0x01	; 1
     150:	0c 17       	cp	r16, r28
     152:	1d 07       	cpc	r17, r29
     154:	54 f7       	brge	.-44     	; 0x12a <avg_read_adc_channel+0x3e>
     156:	03 c0       	rjmp	.+6      	; 0x15e <avg_read_adc_channel+0x72>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     158:	81 2c       	mov	r8, r1
     15a:	91 2c       	mov	r9, r1
     15c:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
	}
	
	adc_val[channel] = val/i;
     15e:	cd 2d       	mov	r28, r13
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	b8 01       	movw	r22, r16
     164:	11 0f       	add	r17, r17
     166:	88 0b       	sbc	r24, r24
     168:	99 0b       	sbc	r25, r25
     16a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     16e:	9b 01       	movw	r18, r22
     170:	ac 01       	movw	r20, r24
     172:	c5 01       	movw	r24, r10
     174:	b4 01       	movw	r22, r8
     176:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__divsf3>
     17a:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fixunssfsi>
     17e:	cc 0f       	add	r28, r28
     180:	dd 1f       	adc	r29, r29
     182:	c8 57       	subi	r28, 0x78	; 120
     184:	de 4f       	sbci	r29, 0xFE	; 254
     186:	79 83       	std	Y+1, r23	; 0x01
     188:	68 83       	st	Y, r22
	
	return adc_val[channel];
     18a:	88 81       	ld	r24, Y
     18c:	99 81       	ldd	r25, Y+1	; 0x01
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	bf 90       	pop	r11
     19e:	af 90       	pop	r10
     1a0:	9f 90       	pop	r9
     1a2:	8f 90       	pop	r8
     1a4:	08 95       	ret

000001a6 <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	0f 92       	push	r0
     1ae:	11 24       	eor	r1, r1
     1b0:	2f 93       	push	r18
     1b2:	3f 93       	push	r19
     1b4:	4f 93       	push	r20
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	ef 93       	push	r30
     1bc:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1be:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1c2:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	adc_val[channel] = 0x03 && high;
     1ca:	ef 70       	andi	r30, 0x0F	; 15
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	81 11       	cpse	r24, r1
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_21+0x34>
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	ee 0f       	add	r30, r30
     1dc:	ff 1f       	adc	r31, r31
     1de:	e8 57       	subi	r30, 0x78	; 120
     1e0:	fe 4f       	sbci	r31, 0xFE	; 254
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1e6:	20 81       	ld	r18, Z
     1e8:	31 81       	ldd	r19, Z+1	; 0x01
     1ea:	32 2f       	mov	r19, r18
     1ec:	22 27       	eor	r18, r18
     1ee:	31 83       	std	Z+1, r19	; 0x01
     1f0:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	98 2f       	mov	r25, r24
     1f6:	88 27       	eor	r24, r24
     1f8:	84 0f       	add	r24, r20
     1fa:	91 1d       	adc	r25, r1
     1fc:	91 83       	std	Z+1, r25	; 0x01
     1fe:	80 83       	st	Z, r24
     200:	ff 91       	pop	r31
     202:	ef 91       	pop	r30
     204:	9f 91       	pop	r25
     206:	8f 91       	pop	r24
     208:	4f 91       	pop	r20
     20a:	3f 91       	pop	r19
     20c:	2f 91       	pop	r18
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <update_current>:
}

void print_gate_voltage(char row, char col)
{
	lcd_print4(row, col, gate_voltage, "mV", "V");
}
     218:	65 e0       	ldi	r22, 0x05	; 5
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     220:	bc 01       	movw	r22, r24
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__floatunsisf>
     22a:	27 ee       	ldi	r18, 0xE7	; 231
     22c:	3b ef       	ldi	r19, 0xFB	; 251
     22e:	49 ef       	ldi	r20, 0xF9	; 249
     230:	5f e3       	ldi	r21, 0x3F	; 63
     232:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     236:	2a e9       	ldi	r18, 0x9A	; 154
     238:	39 e9       	ldi	r19, 0x99	; 153
     23a:	49 e9       	ldi	r20, 0x99	; 153
     23c:	5e e3       	ldi	r21, 0x3E	; 62
     23e:	0e 94 37 0a 	call	0x146e	; 0x146e <__addsf3>
     242:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <offset>
     246:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <offset+0x1>
     24a:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <offset+0x2>
     24e:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <offset+0x3>
     252:	0e 94 37 0a 	call	0x146e	; 0x146e <__addsf3>
     256:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <current>
     25a:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <current+0x1>
     25e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <current+0x2>
     262:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <current+0x3>
     266:	08 95       	ret

00000268 <update_voltage>:
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	65 e0       	ldi	r22, 0x05	; 5
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     278:	bc 01       	movw	r22, r24
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__floatunsisf>
     282:	2c ee       	ldi	r18, 0xEC	; 236
     284:	31 e5       	ldi	r19, 0x51	; 81
     286:	4a ee       	ldi	r20, 0xEA	; 234
     288:	51 e4       	ldi	r21, 0x41	; 65
     28a:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     28e:	6b 01       	movw	r12, r22
     290:	7c 01       	movw	r14, r24
     292:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
     296:	cb 01       	movw	r24, r22
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 88 0c 	call	0x1910	; 0x1910 <__divmodhi4>
     2a0:	bc 01       	movw	r22, r24
     2a2:	99 0f       	add	r25, r25
     2a4:	88 0b       	sbc	r24, r24
     2a6:	99 0b       	sbc	r25, r25
     2a8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     2ac:	9b 01       	movw	r18, r22
     2ae:	ac 01       	movw	r20, r24
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	0e 94 36 0a 	call	0x146c	; 0x146c <__subsf3>
     2b8:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <voltage>
     2bc:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <voltage+0x1>
     2c0:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <voltage+0x2>
     2c4:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <voltage+0x3>
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <update_power>:
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	c0 90 7f 01 	lds	r12, 0x017F	; 0x80017f <current>
     2ea:	d0 90 80 01 	lds	r13, 0x0180	; 0x800180 <current+0x1>
     2ee:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <current+0x2>
     2f2:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <current+0x3>
     2f6:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     2fa:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     2fe:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     302:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     306:	c7 01       	movw	r24, r14
     308:	b6 01       	movw	r22, r12
     30a:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4a e7       	ldi	r20, 0x7A	; 122
     314:	54 e4       	ldi	r21, 0x44	; 68
     316:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__divsf3>
     31a:	4b 01       	movw	r8, r22
     31c:	5c 01       	movw	r10, r24
     31e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
     322:	ca e0       	ldi	r28, 0x0A	; 10
     324:	d0 e0       	ldi	r29, 0x00	; 0
     326:	cb 01       	movw	r24, r22
     328:	be 01       	movw	r22, r28
     32a:	0e 94 88 0c 	call	0x1910	; 0x1910 <__divmodhi4>
     32e:	bc 01       	movw	r22, r24
     330:	99 0f       	add	r25, r25
     332:	88 0b       	sbc	r24, r24
     334:	99 0b       	sbc	r25, r25
     336:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     33a:	9b 01       	movw	r18, r22
     33c:	ac 01       	movw	r20, r24
     33e:	c5 01       	movw	r24, r10
     340:	b4 01       	movw	r22, r8
     342:	0e 94 36 0a 	call	0x146c	; 0x146c <__subsf3>
     346:	4b 01       	movw	r8, r22
     348:	5c 01       	movw	r10, r24
     34a:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <power>
     34e:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <power+0x1>
     352:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <power+0x2>
     356:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <power+0x3>
     35a:	a7 01       	movw	r20, r14
     35c:	96 01       	movw	r18, r12
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	4a e7       	ldi	r20, 0x7A	; 122
     36c:	54 e4       	ldi	r21, 0x44	; 68
     36e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__divsf3>
     372:	9b 01       	movw	r18, r22
     374:	ac 01       	movw	r20, r24
     376:	c5 01       	movw	r24, r10
     378:	b4 01       	movw	r22, r8
     37a:	0e 94 36 0a 	call	0x146c	; 0x146c <__subsf3>
     37e:	6b 01       	movw	r12, r22
     380:	7c 01       	movw	r14, r24
     382:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
     386:	cb 01       	movw	r24, r22
     388:	be 01       	movw	r22, r28
     38a:	0e 94 88 0c 	call	0x1910	; 0x1910 <__divmodhi4>
     38e:	bc 01       	movw	r22, r24
     390:	99 0f       	add	r25, r25
     392:	88 0b       	sbc	r24, r24
     394:	99 0b       	sbc	r25, r25
     396:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 36 0a 	call	0x146c	; 0x146c <__subsf3>
     3a6:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <power_mos>
     3aa:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <power_mos+0x1>
     3ae:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <power_mos+0x2>
     3b2:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <power_mos+0x3>
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	bf 90       	pop	r11
     3c4:	af 90       	pop	r10
     3c6:	9f 90       	pop	r9
     3c8:	8f 90       	pop	r8
     3ca:	08 95       	ret

000003cc <update_gate_voltage>:
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	6a e0       	ldi	r22, 0x0A	; 10
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     3dc:	bc 01       	movw	r22, r24
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__floatunsisf>
     3e6:	2a e0       	ldi	r18, 0x0A	; 10
     3e8:	37 ed       	ldi	r19, 0xD7	; 215
     3ea:	4b e2       	ldi	r20, 0x2B	; 43
     3ec:	51 e4       	ldi	r21, 0x41	; 65
     3ee:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
     3fa:	cb 01       	movw	r24, r22
     3fc:	6a e0       	ldi	r22, 0x0A	; 10
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 88 0c 	call	0x1910	; 0x1910 <__divmodhi4>
     404:	bc 01       	movw	r22, r24
     406:	99 0f       	add	r25, r25
     408:	88 0b       	sbc	r24, r24
     40a:	99 0b       	sbc	r25, r25
     40c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     410:	9b 01       	movw	r18, r22
     412:	ac 01       	movw	r20, r24
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	0e 94 36 0a 	call	0x146c	; 0x146c <__subsf3>
     41c:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <gate_voltage>
     420:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <gate_voltage+0x1>
     424:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <gate_voltage+0x2>
     428:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <gate_voltage+0x3>
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	08 95       	ret

00000436 <print_current>:
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <current>
     442:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <current+0x1>
     446:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <current+0x2>
     44a:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <current+0x3>
     44e:	0f 2e       	mov	r0, r31
     450:	f7 e0       	ldi	r31, 0x07	; 7
     452:	ef 2e       	mov	r14, r31
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
     45a:	06 e0       	ldi	r16, 0x06	; 6
     45c:	11 e0       	ldi	r17, 0x01	; 1
     45e:	0e 94 ce 08 	call	0x119c	; 0x119c <lcd_print4>
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	08 95       	ret

0000046c <print_voltage>:
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     478:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     47c:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     480:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     484:	0f 2e       	mov	r0, r31
     486:	fa e0       	ldi	r31, 0x0A	; 10
     488:	ef 2e       	mov	r14, r31
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	ff 2e       	mov	r15, r31
     48e:	f0 2d       	mov	r31, r0
     490:	09 e0       	ldi	r16, 0x09	; 9
     492:	11 e0       	ldi	r17, 0x01	; 1
     494:	0e 94 ce 08 	call	0x119c	; 0x119c <lcd_print4>
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	08 95       	ret

000004a2 <print_power>:
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <power>
     4ae:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <power+0x1>
     4b2:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <power+0x2>
     4b6:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <power+0x3>
     4ba:	0f 2e       	mov	r0, r31
     4bc:	fd e0       	ldi	r31, 0x0D	; 13
     4be:	ef 2e       	mov	r14, r31
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	ff 2e       	mov	r15, r31
     4c4:	f0 2d       	mov	r31, r0
     4c6:	0c e0       	ldi	r16, 0x0C	; 12
     4c8:	11 e0       	ldi	r17, 0x01	; 1
     4ca:	0e 94 ce 08 	call	0x119c	; 0x119c <lcd_print4>
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	08 95       	ret

000004d8 <print_mos_power>:

void print_mos_power(char row, char col)
{
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
	lcd_print4(row, col, power_mos, "mW", "W");
     4e0:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <power_mos>
     4e4:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <power_mos+0x1>
     4e8:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <power_mos+0x2>
     4ec:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <power_mos+0x3>
     4f0:	0f 2e       	mov	r0, r31
     4f2:	fd e0       	ldi	r31, 0x0D	; 13
     4f4:	ef 2e       	mov	r14, r31
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	ff 2e       	mov	r15, r31
     4fa:	f0 2d       	mov	r31, r0
     4fc:	0c e0       	ldi	r16, 0x0C	; 12
     4fe:	11 e0       	ldi	r17, 0x01	; 1
     500:	0e 94 ce 08 	call	0x119c	; 0x119c <lcd_print4>
}
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	08 95       	ret

0000050e <check_thresholds>:

char check_thresholds()
{
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
	static char val = 0;	//To create a schmitt trigger like mechanism for power, voltage and current.
	
	//If less than threshold
	if (current<current_thresh && voltage<v_thresh && power_mos<power_thresh)
     522:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <current_thresh>
     526:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <current_thresh+0x1>
     52a:	c0 90 7f 01 	lds	r12, 0x017F	; 0x80017f <current>
     52e:	d0 90 80 01 	lds	r13, 0x0180	; 0x800180 <current+0x1>
     532:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <current+0x2>
     536:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <current+0x3>
     53a:	be 01       	movw	r22, r28
     53c:	0d 2e       	mov	r0, r29
     53e:	00 0c       	add	r0, r0
     540:	88 0b       	sbc	r24, r24
     542:	99 0b       	sbc	r25, r25
     544:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     548:	a7 01       	movw	r20, r14
     54a:	96 01       	movw	r18, r12
     54c:	0e 94 02 0c 	call	0x1804	; 0x1804 <__gesf2>
     550:	18 16       	cp	r1, r24
     552:	0c f0       	brlt	.+2      	; 0x556 <check_thresholds+0x48>
     554:	4b c0       	rjmp	.+150    	; 0x5ec <check_thresholds+0xde>
     556:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <v_thresh>
     55a:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <v_thresh+0x1>
     55e:	b8 01       	movw	r22, r16
     560:	01 2e       	mov	r0, r17
     562:	00 0c       	add	r0, r0
     564:	88 0b       	sbc	r24, r24
     566:	99 0b       	sbc	r25, r25
     568:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     56c:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     570:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     574:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     578:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     57c:	0e 94 02 0c 	call	0x1804	; 0x1804 <__gesf2>
     580:	18 16       	cp	r1, r24
     582:	a4 f5       	brge	.+104    	; 0x5ec <check_thresholds+0xde>
     584:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_start>
     588:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_start+0x1>
     58c:	b5 01       	movw	r22, r10
     58e:	0b 2c       	mov	r0, r11
     590:	00 0c       	add	r0, r0
     592:	88 0b       	sbc	r24, r24
     594:	99 0b       	sbc	r25, r25
     596:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     59a:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <power_mos>
     59e:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <power_mos+0x1>
     5a2:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <power_mos+0x2>
     5a6:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <power_mos+0x3>
     5aa:	0e 94 02 0c 	call	0x1804	; 0x1804 <__gesf2>
     5ae:	18 16       	cp	r1, r24
     5b0:	ec f4       	brge	.+58     	; 0x5ec <check_thresholds+0xde>
	{
		if (val == 1)	//If levels during last check was more than threshold - reset threshold to nominal values
     5b2:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <check_thresholds+0xae>
     5ba:	79 c0       	rjmp	.+242    	; 0x6ae <check_thresholds+0x1a0>
		{
			power_thresh += 500;
     5bc:	8c e0       	ldi	r24, 0x0C	; 12
     5be:	a8 1a       	sub	r10, r24
     5c0:	8e ef       	ldi	r24, 0xFE	; 254
     5c2:	b8 0a       	sbc	r11, r24
     5c4:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
     5c8:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
			v_thresh += 2000;
     5cc:	00 53       	subi	r16, 0x30	; 48
     5ce:	18 4f       	sbci	r17, 0xF8	; 248
     5d0:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <v_thresh+0x1>
     5d4:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <v_thresh>
			current_thresh += 100;
     5d8:	cc 59       	subi	r28, 0x9C	; 156
     5da:	df 4f       	sbci	r29, 0xFF	; 255
     5dc:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     5e0:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 0;	//Values have been reset
     5e4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
		}
		
		return 0;	//All okay
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	68 c0       	rjmp	.+208    	; 0x6bc <check_thresholds+0x1ae>
	}
	
	//If greater than threshold
	else
	{	
		if (val == 0)	//If values are set at the nominal value decrease the values
     5ec:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     5f0:	81 11       	cpse	r24, r1
     5f2:	1d c0       	rjmp	.+58     	; 0x62e <check_thresholds+0x120>
		{
			power_thresh -= 500;
     5f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     5fc:	84 5f       	subi	r24, 0xF4	; 244
     5fe:	91 40       	sbci	r25, 0x01	; 1
     600:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     604:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			v_thresh -= 2000;
     608:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <v_thresh>
     60c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <v_thresh+0x1>
     610:	80 5d       	subi	r24, 0xD0	; 208
     612:	97 40       	sbci	r25, 0x07	; 7
     614:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <v_thresh+0x1>
     618:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <v_thresh>
			current_thresh -= 100;
     61c:	c4 56       	subi	r28, 0x64	; 100
     61e:	d1 09       	sbc	r29, r1
     620:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
     624:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 1;	//Values have been decreased
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
		}
		
		if (power_mos>power_thresh)
     62e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     632:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     636:	07 2e       	mov	r0, r23
     638:	00 0c       	add	r0, r0
     63a:	88 0b       	sbc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     642:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <power_mos>
     646:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <power_mos+0x1>
     64a:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <power_mos+0x2>
     64e:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <power_mos+0x3>
     652:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__cmpsf2>
     656:	88 23       	and	r24, r24
     658:	64 f1       	brlt	.+88     	; 0x6b2 <check_thresholds+0x1a4>
			return 1;
	
		else if (voltage>v_thresh)
     65a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <v_thresh>
     65e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <v_thresh+0x1>
     662:	07 2e       	mov	r0, r23
     664:	00 0c       	add	r0, r0
     666:	88 0b       	sbc	r24, r24
     668:	99 0b       	sbc	r25, r25
     66a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     66e:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <voltage>
     672:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <voltage+0x1>
     676:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <voltage+0x2>
     67a:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <voltage+0x3>
     67e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__cmpsf2>
     682:	88 23       	and	r24, r24
     684:	c4 f0       	brlt	.+48     	; 0x6b6 <check_thresholds+0x1a8>
			return 2;

		else if (current>current_thresh)	
     686:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <current_thresh>
     68a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <current_thresh+0x1>
     68e:	07 2e       	mov	r0, r23
     690:	00 0c       	add	r0, r0
     692:	88 0b       	sbc	r24, r24
     694:	99 0b       	sbc	r25, r25
     696:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatsisf>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 02 0c 	call	0x1804	; 0x1804 <__gesf2>
     6a6:	18 16       	cp	r1, r24
     6a8:	44 f0       	brlt	.+16     	; 0x6ba <check_thresholds+0x1ac>
			return 3;
	
		else
			return 4;	//Error
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	07 c0       	rjmp	.+14     	; 0x6bc <check_thresholds+0x1ae>
			v_thresh += 2000;
			current_thresh += 100;
			val = 0;	//Values have been reset
		}
		
		return 0;	//All okay
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <check_thresholds+0x1ae>
			current_thresh -= 100;
			val = 1;	//Values have been decreased
		}
		
		if (power_mos>power_thresh)
			return 1;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <check_thresholds+0x1ae>
	
		else if (voltage>v_thresh)
			return 2;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <check_thresholds+0x1ae>

		else if (current>current_thresh)	
			return 3;
     6ba:	83 e0       	ldi	r24, 0x03	; 3
	
		else
			return 4;	//Error
	}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	08 95       	ret

000006d2 <Bit_Reverse>:
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     6d2:	98 2f       	mov	r25, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	99 27       	eor	r25, r25
     6d8:	99 1f       	adc	r25, r25
     6da:	86 fd       	sbrc	r24, 6
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <Bit_Reverse+0x10>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <Bit_Reverse+0x12>
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	92 2b       	or	r25, r18
     6e6:	85 fd       	sbrc	r24, 5
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <Bit_Reverse+0x1c>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <Bit_Reverse+0x1e>
     6ee:	24 e0       	ldi	r18, 0x04	; 4
     6f0:	92 2b       	or	r25, r18
     6f2:	84 fd       	sbrc	r24, 4
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <Bit_Reverse+0x28>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <Bit_Reverse+0x2a>
     6fa:	28 e0       	ldi	r18, 0x08	; 8
     6fc:	92 2b       	or	r25, r18
     6fe:	83 fd       	sbrc	r24, 3
     700:	02 c0       	rjmp	.+4      	; 0x706 <Bit_Reverse+0x34>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	01 c0       	rjmp	.+2      	; 0x708 <Bit_Reverse+0x36>
     706:	20 e1       	ldi	r18, 0x10	; 16
     708:	92 2b       	or	r25, r18
     70a:	82 fd       	sbrc	r24, 2
     70c:	02 c0       	rjmp	.+4      	; 0x712 <Bit_Reverse+0x40>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	01 c0       	rjmp	.+2      	; 0x714 <Bit_Reverse+0x42>
     712:	20 e2       	ldi	r18, 0x20	; 32
     714:	92 2b       	or	r25, r18
     716:	81 fd       	sbrc	r24, 1
     718:	02 c0       	rjmp	.+4      	; 0x71e <Bit_Reverse+0x4c>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	01 c0       	rjmp	.+2      	; 0x720 <Bit_Reverse+0x4e>
     71e:	20 e4       	ldi	r18, 0x40	; 64
     720:	92 2b       	or	r25, r18
     722:	80 fd       	sbrc	r24, 0
     724:	02 c0       	rjmp	.+4      	; 0x72a <Bit_Reverse+0x58>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	01 c0       	rjmp	.+2      	; 0x72c <Bit_Reverse+0x5a>
     72a:	80 e8       	ldi	r24, 0x80	; 128
     72c:	89 2b       	or	r24, r25
     72e:	08 95       	ret

00000730 <lcd_wr_command>:
     730:	cf 93       	push	r28
     732:	c8 2f       	mov	r28, r24
     734:	80 7f       	andi	r24, 0xF0	; 240
     736:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Bit_Reverse>
     73a:	88 0f       	add	r24, r24
     73c:	88 0f       	add	r24, r24
     73e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <temp.1773>
     742:	8b b1       	in	r24, 0x0b	; 11
     744:	83 7c       	andi	r24, 0xC3	; 195
     746:	8b b9       	out	0x0b, r24	; 11
     748:	9b b1       	in	r25, 0x0b	; 11
     74a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <temp.1773>
     74e:	89 2b       	or	r24, r25
     750:	8b b9       	out	0x0b, r24	; 11
     752:	5f 98       	cbi	0x0b, 7	; 11
     754:	5e 9a       	sbi	0x0b, 6	; 11
     756:	8f e1       	ldi	r24, 0x1F	; 31
     758:	9e e4       	ldi	r25, 0x4E	; 78
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <lcd_wr_command+0x2a>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <lcd_wr_command+0x30>
     760:	00 00       	nop
     762:	5e 98       	cbi	0x0b, 6	; 11
     764:	8c 2f       	mov	r24, r28
     766:	82 95       	swap	r24
     768:	80 7f       	andi	r24, 0xF0	; 240
     76a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Bit_Reverse>
     76e:	9b b1       	in	r25, 0x0b	; 11
     770:	93 7c       	andi	r25, 0xC3	; 195
     772:	9b b9       	out	0x0b, r25	; 11
     774:	9b b1       	in	r25, 0x0b	; 11
     776:	88 0f       	add	r24, r24
     778:	88 0f       	add	r24, r24
     77a:	98 2b       	or	r25, r24
     77c:	9b b9       	out	0x0b, r25	; 11
     77e:	5f 98       	cbi	0x0b, 7	; 11
     780:	5e 9a       	sbi	0x0b, 6	; 11
     782:	8f e1       	ldi	r24, 0x1F	; 31
     784:	9e e4       	ldi	r25, 0x4E	; 78
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <lcd_wr_command+0x56>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <lcd_wr_command+0x5c>
     78c:	00 00       	nop
     78e:	5e 98       	cbi	0x0b, 6	; 11
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <lcd_port_config>:
     794:	8a b1       	in	r24, 0x0a	; 10
     796:	8c 6f       	ori	r24, 0xFC	; 252
     798:	8a b9       	out	0x0a, r24	; 10
     79a:	8b b1       	in	r24, 0x0b	; 11
     79c:	84 70       	andi	r24, 0x04	; 4
     79e:	8b b9       	out	0x0b, r24	; 11
     7a0:	08 95       	ret

000007a2 <lcd_wr_char>:
     7a2:	cf 93       	push	r28
     7a4:	c8 2f       	mov	r28, r24
     7a6:	80 7f       	andi	r24, 0xF0	; 240
     7a8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Bit_Reverse>
     7ac:	9b b1       	in	r25, 0x0b	; 11
     7ae:	93 7c       	andi	r25, 0xC3	; 195
     7b0:	9b b9       	out	0x0b, r25	; 11
     7b2:	9b b1       	in	r25, 0x0b	; 11
     7b4:	88 0f       	add	r24, r24
     7b6:	88 0f       	add	r24, r24
     7b8:	98 2b       	or	r25, r24
     7ba:	9b b9       	out	0x0b, r25	; 11
     7bc:	5f 9a       	sbi	0x0b, 7	; 11
     7be:	5e 9a       	sbi	0x0b, 6	; 11
     7c0:	8f e1       	ldi	r24, 0x1F	; 31
     7c2:	9e e4       	ldi	r25, 0x4E	; 78
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <lcd_wr_char+0x22>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <lcd_wr_char+0x28>
     7ca:	00 00       	nop
     7cc:	5e 98       	cbi	0x0b, 6	; 11
     7ce:	8c 2f       	mov	r24, r28
     7d0:	82 95       	swap	r24
     7d2:	80 7f       	andi	r24, 0xF0	; 240
     7d4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Bit_Reverse>
     7d8:	9b b1       	in	r25, 0x0b	; 11
     7da:	93 7c       	andi	r25, 0xC3	; 195
     7dc:	9b b9       	out	0x0b, r25	; 11
     7de:	9b b1       	in	r25, 0x0b	; 11
     7e0:	88 0f       	add	r24, r24
     7e2:	88 0f       	add	r24, r24
     7e4:	98 2b       	or	r25, r24
     7e6:	9b b9       	out	0x0b, r25	; 11
     7e8:	5f 9a       	sbi	0x0b, 7	; 11
     7ea:	5e 9a       	sbi	0x0b, 6	; 11
     7ec:	8f e1       	ldi	r24, 0x1F	; 31
     7ee:	9e e4       	ldi	r25, 0x4E	; 78
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <lcd_wr_char+0x4e>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <lcd_wr_char+0x54>
     7f6:	00 00       	nop
     7f8:	5e 98       	cbi	0x0b, 6	; 11
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <lcd_home>:
     7fe:	80 e8       	ldi	r24, 0x80	; 128
     800:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
     804:	08 95       	ret

00000806 <lcd_string>:
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	ec 01       	movw	r28, r24
     80c:	88 81       	ld	r24, Y
     80e:	88 23       	and	r24, r24
     810:	31 f0       	breq	.+12     	; 0x81e <lcd_string+0x18>
     812:	21 96       	adiw	r28, 0x01	; 1
     814:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
     818:	89 91       	ld	r24, Y+
     81a:	81 11       	cpse	r24, r1
     81c:	fb cf       	rjmp	.-10     	; 0x814 <lcd_string+0xe>
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <lcd_cursor>:
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	19 f0       	breq	.+6      	; 0x82e <lcd_cursor+0xa>
     828:	82 30       	cpi	r24, 0x02	; 2
     82a:	31 f0       	breq	.+12     	; 0x838 <lcd_cursor+0x14>
     82c:	08 95       	ret
     82e:	8f e7       	ldi	r24, 0x7F	; 127
     830:	86 0f       	add	r24, r22
     832:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
     836:	08 95       	ret
     838:	8f eb       	ldi	r24, 0xBF	; 191
     83a:	86 0f       	add	r24, r22
     83c:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
     840:	08 95       	ret

00000842 <lcd_string2>:
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	ea 01       	movw	r28, r20
     848:	0e 94 12 04 	call	0x824	; 0x824 <lcd_cursor>
     84c:	88 81       	ld	r24, Y
     84e:	88 23       	and	r24, r24
     850:	31 f0       	breq	.+12     	; 0x85e <lcd_string2+0x1c>
     852:	21 96       	adiw	r28, 0x01	; 1
     854:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
     858:	89 91       	ld	r24, Y+
     85a:	81 11       	cpse	r24, r1
     85c:	fb cf       	rjmp	.-10     	; 0x854 <lcd_string2+0x12>
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <lcd_start>:
     864:	8f e9       	ldi	r24, 0x9F	; 159
     866:	9f e0       	ldi	r25, 0x0F	; 15
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <lcd_start+0x4>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <lcd_start+0xa>
     86e:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     870:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
     872:	80 e3       	ldi	r24, 0x30	; 48
     874:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     876:	5e 9a       	sbi	0x0b, 6	; 11
     878:	ef e1       	ldi	r30, 0x1F	; 31
     87a:	fe e4       	ldi	r31, 0x4E	; 78
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <lcd_start+0x18>
     880:	00 c0       	rjmp	.+0      	; 0x882 <lcd_start+0x1e>
     882:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     884:	5e 98       	cbi	0x0b, 6	; 11
     886:	ef e9       	ldi	r30, 0x9F	; 159
     888:	ff e0       	ldi	r31, 0x0F	; 15
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <lcd_start+0x26>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <lcd_start+0x2c>
     890:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     892:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     894:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     896:	5e 9a       	sbi	0x0b, 6	; 11
     898:	ef e1       	ldi	r30, 0x1F	; 31
     89a:	fe e4       	ldi	r31, 0x4E	; 78
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <lcd_start+0x38>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <lcd_start+0x3e>
     8a2:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8a4:	5e 98       	cbi	0x0b, 6	; 11
     8a6:	ef e9       	ldi	r30, 0x9F	; 159
     8a8:	ff e0       	ldi	r31, 0x0F	; 15
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <lcd_start+0x46>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <lcd_start+0x4c>
     8b0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8b2:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     8b4:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     8b6:	5e 9a       	sbi	0x0b, 6	; 11
     8b8:	8f e1       	ldi	r24, 0x1F	; 31
     8ba:	9e e4       	ldi	r25, 0x4E	; 78
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <lcd_start+0x58>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <lcd_start+0x5e>
     8c2:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8c4:	5e 98       	cbi	0x0b, 6	; 11
     8c6:	ef e9       	ldi	r30, 0x9F	; 159
     8c8:	ff e0       	ldi	r31, 0x0F	; 15
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <lcd_start+0x66>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <lcd_start+0x6c>
     8d0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8d2:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
     8d4:	80 e1       	ldi	r24, 0x10	; 16
     8d6:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     8d8:	5e 9a       	sbi	0x0b, 6	; 11
     8da:	8f e9       	ldi	r24, 0x9F	; 159
     8dc:	9f e0       	ldi	r25, 0x0F	; 15
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <lcd_start+0x7a>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <lcd_start+0x80>
     8e4:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8e6:	5e 98       	cbi	0x0b, 6	; 11
     8e8:	ef e9       	ldi	r30, 0x9F	; 159
     8ea:	ff e0       	ldi	r31, 0x0F	; 15
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <lcd_start+0x88>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <lcd_start+0x8e>
     8f2:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     8f4:	88 e2       	ldi	r24, 0x28	; 40
     8f6:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
     900:	8c e0       	ldi	r24, 0x0C	; 12
     902:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
     906:	80 e8       	ldi	r24, 0x80	; 128
     908:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
     90c:	08 95       	ret

0000090e <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	0e 94 98 03 	call	0x730	; 0x730 <lcd_wr_command>
     914:	08 95       	ret

00000916 <lcd_print5>:
* Logic:
* Example Call: lcd_print(1,1,val,3)
*/
//002 and not 0020
static void lcd_print5(char row, char coloumn, unsigned int value, int digits, char* str)
{
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	7a 01       	movw	r14, r20
     928:	69 01       	movw	r12, r18
	if(value)
     92a:	41 15       	cp	r20, r1
     92c:	51 05       	cpc	r21, r1
     92e:	09 f4       	brne	.+2      	; 0x932 <lcd_print5+0x1c>
     930:	e6 c0       	rjmp	.+460    	; 0xafe <lcd_print5+0x1e8>
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
		{
			if ((num & 1) == 1)
     932:	40 fd       	sbrc	r20, 0
     934:	0c c0       	rjmp	.+24     	; 0x94e <lcd_print5+0x38>
     936:	9a 01       	movw	r18, r20
     938:	c0 e0       	ldi	r28, 0x00	; 0
     93a:	02 c0       	rjmp	.+4      	; 0x940 <lcd_print5+0x2a>
     93c:	20 fd       	sbrc	r18, 0
     93e:	08 c0       	rjmp	.+16     	; 0x950 <lcd_print5+0x3a>
			{
				break;
			}
			else
			{
				count++;
     940:	cf 5f       	subi	r28, 0xFF	; 255
				num = num >> 1;
     942:	36 95       	lsr	r19
     944:	27 95       	ror	r18
	if(value)
	{
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
     946:	21 15       	cp	r18, r1
     948:	31 05       	cpc	r19, r1
     94a:	c1 f7       	brne	.-16     	; 0x93c <lcd_print5+0x26>
     94c:	01 c0       	rjmp	.+2      	; 0x950 <lcd_print5+0x3a>
		{
			if ((num & 1) == 1)
     94e:	c0 e0       	ldi	r28, 0x00	; 0
				num = num >> 1;
			}
		}
		
		unsigned char flag=0;
		if(row==0||coloumn==0)
     950:	88 23       	and	r24, r24
     952:	11 f0       	breq	.+4      	; 0x958 <lcd_print5+0x42>
     954:	61 11       	cpse	r22, r1
     956:	03 c0       	rjmp	.+6      	; 0x95e <lcd_print5+0x48>
			lcd_home();
     958:	0e 94 ff 03 	call	0x7fe	; 0x7fe <lcd_home>
     95c:	02 c0       	rjmp	.+4      	; 0x962 <lcd_print5+0x4c>
		else
			lcd_cursor(row,coloumn);
     95e:	0e 94 12 04 	call	0x824	; 0x824 <lcd_cursor>
	
		if(digits==5 || flag==1)
     962:	25 e0       	ldi	r18, 0x05	; 5
     964:	c2 16       	cp	r12, r18
     966:	d1 04       	cpc	r13, r1
     968:	09 f0       	breq	.+2      	; 0x96c <lcd_print5+0x56>
     96a:	d8 c0       	rjmp	.+432    	; 0xb1c <lcd_print5+0x206>
		{	
			million=value/10000+48;
			//if(count < 5)
			lcd_wr_char(million);
     96c:	97 01       	movw	r18, r14
     96e:	32 95       	swap	r19
     970:	22 95       	swap	r18
     972:	2f 70       	andi	r18, 0x0F	; 15
     974:	23 27       	eor	r18, r19
     976:	3f 70       	andi	r19, 0x0F	; 15
     978:	23 27       	eor	r18, r19
     97a:	a7 e4       	ldi	r26, 0x47	; 71
     97c:	b3 e0       	ldi	r27, 0x03	; 3
     97e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     982:	96 95       	lsr	r25
     984:	87 95       	ror	r24
     986:	96 95       	lsr	r25
     988:	87 95       	ror	r24
     98a:	96 95       	lsr	r25
     98c:	87 95       	ror	r24
     98e:	80 5d       	subi	r24, 0xD0	; 208
     990:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
		if(digits==4 || flag==1)
		{
			temp = value/1000;
			thousand = temp%10 + 48;
			//if(count < 4)
			lcd_wr_char(thousand);
     994:	97 01       	movw	r18, r14
     996:	36 95       	lsr	r19
     998:	27 95       	ror	r18
     99a:	36 95       	lsr	r19
     99c:	27 95       	ror	r18
     99e:	36 95       	lsr	r19
     9a0:	27 95       	ror	r18
     9a2:	a5 ec       	ldi	r26, 0xC5	; 197
     9a4:	b0 e2       	ldi	r27, 0x20	; 32
     9a6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     9aa:	ac 01       	movw	r20, r24
     9ac:	52 95       	swap	r21
     9ae:	42 95       	swap	r20
     9b0:	4f 70       	andi	r20, 0x0F	; 15
     9b2:	45 27       	eor	r20, r21
     9b4:	5f 70       	andi	r21, 0x0F	; 15
     9b6:	45 27       	eor	r20, r21
     9b8:	9a 01       	movw	r18, r20
     9ba:	ad ec       	ldi	r26, 0xCD	; 205
     9bc:	bc ec       	ldi	r27, 0xCC	; 204
     9be:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     9c2:	96 95       	lsr	r25
     9c4:	87 95       	ror	r24
     9c6:	96 95       	lsr	r25
     9c8:	87 95       	ror	r24
     9ca:	96 95       	lsr	r25
     9cc:	87 95       	ror	r24
     9ce:	9c 01       	movw	r18, r24
     9d0:	22 0f       	add	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	fa 01       	movw	r30, r20
     9e6:	e8 1b       	sub	r30, r24
     9e8:	f9 0b       	sbc	r31, r25
     9ea:	cf 01       	movw	r24, r30
     9ec:	80 5d       	subi	r24, 0xD0	; 208
     9ee:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <lcd_print5+0xe6>
			
			flag=1;
		}
		if(digits==3 || flag==1)
     9f4:	f3 e0       	ldi	r31, 0x03	; 3
     9f6:	cf 16       	cp	r12, r31
     9f8:	d1 04       	cpc	r13, r1
     9fa:	51 f5       	brne	.+84     	; 0xa50 <lcd_print5+0x13a>
		{
			temp = value/100;
			hundred = temp%10 + 48;
			//if(count < 3)
			lcd_wr_char(hundred);
     9fc:	97 01       	movw	r18, r14
     9fe:	36 95       	lsr	r19
     a00:	27 95       	ror	r18
     a02:	36 95       	lsr	r19
     a04:	27 95       	ror	r18
     a06:	ab e7       	ldi	r26, 0x7B	; 123
     a08:	b4 e1       	ldi	r27, 0x14	; 20
     a0a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     a0e:	ac 01       	movw	r20, r24
     a10:	56 95       	lsr	r21
     a12:	47 95       	ror	r20
     a14:	9a 01       	movw	r18, r20
     a16:	ad ec       	ldi	r26, 0xCD	; 205
     a18:	bc ec       	ldi	r27, 0xCC	; 204
     a1a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	96 95       	lsr	r25
     a24:	87 95       	ror	r24
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	9c 01       	movw	r18, r24
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	9a 01       	movw	r18, r20
     a42:	28 1b       	sub	r18, r24
     a44:	39 0b       	sbc	r19, r25
     a46:	c9 01       	movw	r24, r18
     a48:	80 5d       	subi	r24, 0xD0	; 208
     a4a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <lcd_print5+0x144>
			flag=1;
		}
		if(digits==2 || flag==1)
     a50:	32 e0       	ldi	r19, 0x02	; 2
     a52:	c3 16       	cp	r12, r19
     a54:	d1 04       	cpc	r13, r1
     a56:	09 f0       	breq	.+2      	; 0xa5a <lcd_print5+0x144>
     a58:	67 c0       	rjmp	.+206    	; 0xb28 <lcd_print5+0x212>
		{
			temp = value/10;
			tens = temp%10 + 48;
			//if(count < 2)
			lcd_wr_char(tens);
     a5a:	97 01       	movw	r18, r14
     a5c:	ad ec       	ldi	r26, 0xCD	; 205
     a5e:	bc ec       	ldi	r27, 0xCC	; 204
     a60:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     a64:	ac 01       	movw	r20, r24
     a66:	56 95       	lsr	r21
     a68:	47 95       	ror	r20
     a6a:	56 95       	lsr	r21
     a6c:	47 95       	ror	r20
     a6e:	56 95       	lsr	r21
     a70:	47 95       	ror	r20
     a72:	9a 01       	movw	r18, r20
     a74:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24
     a80:	96 95       	lsr	r25
     a82:	87 95       	ror	r24
     a84:	9c 01       	movw	r18, r24
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	82 0f       	add	r24, r18
     a98:	93 1f       	adc	r25, r19
     a9a:	fa 01       	movw	r30, r20
     a9c:	e8 1b       	sub	r30, r24
     a9e:	f9 0b       	sbc	r31, r25
     aa0:	cf 01       	movw	r24, r30
     aa2:	80 5d       	subi	r24, 0xD0	; 208
     aa4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			flag=1;
		}
		if(digits==1 || flag==1)
		{
			unit = value%10 + 48;
			if(count < 1)
     aa8:	c1 11       	cpse	r28, r1
     aaa:	1d c0       	rjmp	.+58     	; 0xae6 <lcd_print5+0x1d0>
				lcd_wr_char(unit);
     aac:	97 01       	movw	r18, r14
     aae:	ad ec       	ldi	r26, 0xCD	; 205
     ab0:	bc ec       	ldi	r27, 0xCC	; 204
     ab2:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     ab6:	96 95       	lsr	r25
     ab8:	87 95       	ror	r24
     aba:	96 95       	lsr	r25
     abc:	87 95       	ror	r24
     abe:	96 95       	lsr	r25
     ac0:	87 95       	ror	r24
     ac2:	9c 01       	movw	r18, r24
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	82 0f       	add	r24, r18
     ad6:	93 1f       	adc	r25, r19
     ad8:	97 01       	movw	r18, r14
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	c9 01       	movw	r24, r18
     ae0:	80 5d       	subi	r24, 0xD0	; 208
     ae2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
		}
		if(digits>5)
     ae6:	36 e0       	ldi	r19, 0x06	; 6
     ae8:	c3 16       	cp	r12, r19
     aea:	d1 04       	cpc	r13, r1
     aec:	1c f0       	brlt	.+6      	; 0xaf4 <lcd_print5+0x1de>
		{
			lcd_wr_char('E');
     aee:	85 e4       	ldi	r24, 0x45	; 69
     af0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     af4:	f8 01       	movw	r30, r16
     af6:	80 81       	ld	r24, Z
     af8:	81 11       	cpse	r24, r1
     afa:	08 c0       	rjmp	.+16     	; 0xb0c <lcd_print5+0x1f6>
     afc:	1c c0       	rjmp	.+56     	; 0xb36 <lcd_print5+0x220>
		}
	}
	
	else	//if(value==0)
	{
		lcd_wr_char('0'); //print one 0
     afe:	80 e3       	ldi	r24, 0x30	; 48
     b00:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
		lcd_wr_char('0'); //print one 0
     b04:	80 e3       	ldi	r24, 0x30	; 48
     b06:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
     b0a:	f4 cf       	rjmp	.-24     	; 0xaf4 <lcd_print5+0x1de>
     b0c:	e8 01       	movw	r28, r16
     b0e:	21 96       	adiw	r28, 0x01	; 1
	}
	
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     b10:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     b14:	89 91       	ld	r24, Y+
     b16:	81 11       	cpse	r24, r1
     b18:	fb cf       	rjmp	.-10     	; 0xb10 <lcd_print5+0x1fa>
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <lcd_print5+0x220>
			//if(count < 5)
			lcd_wr_char(million);
			
			flag=1;
		}
		if(digits==4 || flag==1)
     b1c:	f4 e0       	ldi	r31, 0x04	; 4
     b1e:	cf 16       	cp	r12, r31
     b20:	d1 04       	cpc	r13, r1
     b22:	09 f0       	breq	.+2      	; 0xb26 <lcd_print5+0x210>
     b24:	67 cf       	rjmp	.-306    	; 0x9f4 <lcd_print5+0xde>
     b26:	36 cf       	rjmp	.-404    	; 0x994 <lcd_print5+0x7e>
			tens = temp%10 + 48;
			//if(count < 2)
			lcd_wr_char(tens);
			flag=1;
		}
		if(digits==1 || flag==1)
     b28:	21 e0       	ldi	r18, 0x01	; 1
     b2a:	c2 16       	cp	r12, r18
     b2c:	d1 04       	cpc	r13, r1
     b2e:	d9 f6       	brne	.-74     	; 0xae6 <lcd_print5+0x1d0>
		{
			unit = value%10 + 48;
			if(count < 1)
     b30:	c1 11       	cpse	r28, r1
     b32:	e0 cf       	rjmp	.-64     	; 0xaf4 <lcd_print5+0x1de>
     b34:	bb cf       	rjmp	.-138    	; 0xaac <lcd_print5+0x196>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	08 95       	ret

00000b48 <lcd_print2>:

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     b48:	cf 92       	push	r12
     b4a:	df 92       	push	r13
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	6a 01       	movw	r12, r20
     b58:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     b5a:	88 23       	and	r24, r24
     b5c:	11 f0       	breq	.+4      	; 0xb62 <lcd_print2+0x1a>
     b5e:	61 11       	cpse	r22, r1
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <lcd_print2+0x20>
	{
		lcd_home();
     b62:	0e 94 ff 03 	call	0x7fe	; 0x7fe <lcd_home>
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     b68:	0e 94 12 04 	call	0x824	; 0x824 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     b6c:	25 e0       	ldi	r18, 0x05	; 5
     b6e:	e2 16       	cp	r14, r18
     b70:	f1 04       	cpc	r15, r1
     b72:	09 f0       	breq	.+2      	; 0xb76 <lcd_print2+0x2e>
     b74:	b9 c0       	rjmp	.+370    	; 0xce8 <lcd_print2+0x1a0>
	{
		million=value/10000+48;
     b76:	96 01       	movw	r18, r12
     b78:	32 95       	swap	r19
     b7a:	22 95       	swap	r18
     b7c:	2f 70       	andi	r18, 0x0F	; 15
     b7e:	23 27       	eor	r18, r19
     b80:	3f 70       	andi	r19, 0x0F	; 15
     b82:	23 27       	eor	r18, r19
     b84:	a7 e4       	ldi	r26, 0x47	; 71
     b86:	b3 e0       	ldi	r27, 0x03	; 3
     b88:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	96 95       	lsr	r25
     b96:	87 95       	ror	r24
     b98:	c0 96       	adiw	r24, 0x30	; 48
		if(million != '0')
     b9a:	80 33       	cpi	r24, 0x30	; 48
     b9c:	91 05       	cpc	r25, r1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <lcd_print2+0x5a>
     ba0:	70 c0       	rjmp	.+224    	; 0xc82 <lcd_print2+0x13a>
		{
			lcd_wr_char(million);
     ba2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;	
     ba6:	c1 e0       	ldi	r28, 0x01	; 1
     ba8:	6d c0       	rjmp	.+218    	; 0xc84 <lcd_print2+0x13c>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     baa:	c1 11       	cpse	r28, r1
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <lcd_print2+0x6a>
     bae:	a2 c0       	rjmp	.+324    	; 0xcf4 <lcd_print2+0x1ac>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     bb0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     bb2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;
     bb6:	cf 5f       	subi	r28, 0xFF	; 255
     bb8:	9d c0       	rjmp	.+314    	; 0xcf4 <lcd_print2+0x1ac>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     bba:	33 e0       	ldi	r19, 0x03	; 3
     bbc:	e3 16       	cp	r14, r19
     bbe:	f1 04       	cpc	r15, r1
     bc0:	51 f4       	brne	.+20     	; 0xbd6 <lcd_print2+0x8e>
     bc2:	2f c1       	rjmp	.+606    	; 0xe22 <lcd_print2+0x2da>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     bc4:	cc 23       	and	r28, r28
     bc6:	09 f4       	brne	.+2      	; 0xbca <lcd_print2+0x82>
     bc8:	c1 c0       	rjmp	.+386    	; 0xd4c <lcd_print2+0x204>
     bca:	01 c0       	rjmp	.+2      	; 0xbce <lcd_print2+0x86>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     bcc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     bce:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;
     bd2:	cf 5f       	subi	r28, 0xFF	; 255
     bd4:	bb c0       	rjmp	.+374    	; 0xd4c <lcd_print2+0x204>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	e8 16       	cp	r14, r24
     bda:	f1 04       	cpc	r15, r1
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <lcd_print2+0x98>
     bde:	e0 c0       	rjmp	.+448    	; 0xda0 <lcd_print2+0x258>
     be0:	4d c1       	rjmp	.+666    	; 0xe7c <lcd_print2+0x334>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     be2:	cc 23       	and	r28, r28
     be4:	39 f0       	breq	.+14     	; 0xbf4 <lcd_print2+0xac>
     be6:	01 c0       	rjmp	.+2      	; 0xbea <lcd_print2+0xa2>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     be8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     bea:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;
     bee:	cf 5f       	subi	r28, 0xFF	; 255
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <lcd_print2+0xac>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     bf2:	c0 e0       	ldi	r28, 0x00	; 0
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
     bf4:	96 01       	movw	r18, r12
     bf6:	ad ec       	ldi	r26, 0xCD	; 205
     bf8:	bc ec       	ldi	r27, 0xCC	; 204
     bfa:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     bfe:	96 95       	lsr	r25
     c00:	87 95       	ror	r24
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	9c 01       	movw	r18, r24
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	82 0f       	add	r24, r18
     c1e:	93 1f       	adc	r25, r19
     c20:	f6 01       	movw	r30, r12
     c22:	e8 1b       	sub	r30, r24
     c24:	f9 0b       	sbc	r31, r25
     c26:	cf 01       	movw	r24, r30
     c28:	80 5d       	subi	r24, 0xD0	; 208
     c2a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
		count++;
     c2e:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     c30:	f6 e0       	ldi	r31, 0x06	; 6
     c32:	ef 16       	cp	r14, r31
     c34:	f1 04       	cpc	r15, r1
     c36:	1c f0       	brlt	.+6      	; 0xc3e <lcd_print2+0xf6>
	{
		lcd_wr_char('E');
     c38:	85 e4       	ldi	r24, 0x45	; 69
     c3a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
	}
	
	while(*str != '\0')
     c3e:	f8 01       	movw	r30, r16
     c40:	80 81       	ld	r24, Z
     c42:	88 23       	and	r24, r24
     c44:	09 f4       	brne	.+2      	; 0xc48 <lcd_print2+0x100>
     c46:	b3 c0       	rjmp	.+358    	; 0xdae <lcd_print2+0x266>
     c48:	0f 5f       	subi	r16, 0xFF	; 255
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     c4c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
		count++;
     c50:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     c52:	ff ef       	ldi	r31, 0xFF	; 255
     c54:	ef 1a       	sub	r14, r31
     c56:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     c58:	f8 01       	movw	r30, r16
     c5a:	81 91       	ld	r24, Z+
     c5c:	8f 01       	movw	r16, r30
     c5e:	81 11       	cpse	r24, r1
     c60:	f5 cf       	rjmp	.-22     	; 0xc4c <lcd_print2+0x104>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     c62:	8c 2f       	mov	r24, r28
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	8e 15       	cp	r24, r14
     c68:	9f 05       	cpc	r25, r15
     c6a:	0c f0       	brlt	.+2      	; 0xc6e <lcd_print2+0x126>
     c6c:	32 c1       	rjmp	.+612    	; 0xed2 <lcd_print2+0x38a>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     c6e:	80 e2       	ldi	r24, 0x20	; 32
     c70:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;
     c74:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
	{
		while(count != digits)
     c76:	8c 2f       	mov	r24, r28
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	8e 15       	cp	r24, r14
     c7c:	9f 05       	cpc	r25, r15
     c7e:	b9 f7       	brne	.-18     	; 0xc6e <lcd_print2+0x126>
     c80:	28 c1       	rjmp	.+592    	; 0xed2 <lcd_print2+0x38a>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c82:	c0 e0       	ldi	r28, 0x00	; 0
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
     c84:	96 01       	movw	r18, r12
     c86:	36 95       	lsr	r19
     c88:	27 95       	ror	r18
     c8a:	36 95       	lsr	r19
     c8c:	27 95       	ror	r18
     c8e:	36 95       	lsr	r19
     c90:	27 95       	ror	r18
     c92:	a5 ec       	ldi	r26, 0xC5	; 197
     c94:	b0 e2       	ldi	r27, 0x20	; 32
     c96:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     c9a:	ac 01       	movw	r20, r24
     c9c:	52 95       	swap	r21
     c9e:	42 95       	swap	r20
     ca0:	4f 70       	andi	r20, 0x0F	; 15
     ca2:	45 27       	eor	r20, r21
     ca4:	5f 70       	andi	r21, 0x0F	; 15
     ca6:	45 27       	eor	r20, r21
     ca8:	9a 01       	movw	r18, r20
     caa:	ad ec       	ldi	r26, 0xCD	; 205
     cac:	bc ec       	ldi	r27, 0xCC	; 204
     cae:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     cb2:	96 95       	lsr	r25
     cb4:	87 95       	ror	r24
     cb6:	96 95       	lsr	r25
     cb8:	87 95       	ror	r24
     cba:	96 95       	lsr	r25
     cbc:	87 95       	ror	r24
     cbe:	9c 01       	movw	r18, r24
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	82 0f       	add	r24, r18
     cd2:	93 1f       	adc	r25, r19
     cd4:	9a 01       	movw	r18, r20
     cd6:	28 1b       	sub	r18, r24
     cd8:	39 0b       	sbc	r19, r25
     cda:	c9 01       	movw	r24, r18
     cdc:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     cde:	80 33       	cpi	r24, 0x30	; 48
     ce0:	91 05       	cpc	r25, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <lcd_print2+0x19e>
     ce4:	62 cf       	rjmp	.-316    	; 0xbaa <lcd_print2+0x62>
     ce6:	65 cf       	rjmp	.-310    	; 0xbb2 <lcd_print2+0x6a>
			lcd_wr_char(million);
			count++;	
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     ce8:	34 e0       	ldi	r19, 0x04	; 4
     cea:	e3 16       	cp	r14, r19
     cec:	f1 04       	cpc	r15, r1
     cee:	09 f0       	breq	.+2      	; 0xcf2 <lcd_print2+0x1aa>
     cf0:	64 cf       	rjmp	.-312    	; 0xbba <lcd_print2+0x72>
     cf2:	64 c0       	rjmp	.+200    	; 0xdbc <lcd_print2+0x274>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
     cf4:	96 01       	movw	r18, r12
     cf6:	36 95       	lsr	r19
     cf8:	27 95       	ror	r18
     cfa:	36 95       	lsr	r19
     cfc:	27 95       	ror	r18
     cfe:	ab e7       	ldi	r26, 0x7B	; 123
     d00:	b4 e1       	ldi	r27, 0x14	; 20
     d02:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     d06:	ac 01       	movw	r20, r24
     d08:	56 95       	lsr	r21
     d0a:	47 95       	ror	r20
     d0c:	9a 01       	movw	r18, r20
     d0e:	ad ec       	ldi	r26, 0xCD	; 205
     d10:	bc ec       	ldi	r27, 0xCC	; 204
     d12:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	96 95       	lsr	r25
     d20:	87 95       	ror	r24
     d22:	9c 01       	movw	r18, r24
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	fa 01       	movw	r30, r20
     d3a:	e8 1b       	sub	r30, r24
     d3c:	f9 0b       	sbc	r31, r25
     d3e:	cf 01       	movw	r24, r30
     d40:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
     d42:	80 33       	cpi	r24, 0x30	; 48
     d44:	91 05       	cpc	r25, r1
     d46:	09 f0       	breq	.+2      	; 0xd4a <lcd_print2+0x202>
     d48:	42 cf       	rjmp	.-380    	; 0xbce <lcd_print2+0x86>
     d4a:	3c cf       	rjmp	.-392    	; 0xbc4 <lcd_print2+0x7c>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
     d4c:	96 01       	movw	r18, r12
     d4e:	ad ec       	ldi	r26, 0xCD	; 205
     d50:	bc ec       	ldi	r27, 0xCC	; 204
     d52:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     d56:	ac 01       	movw	r20, r24
     d58:	56 95       	lsr	r21
     d5a:	47 95       	ror	r20
     d5c:	56 95       	lsr	r21
     d5e:	47 95       	ror	r20
     d60:	56 95       	lsr	r21
     d62:	47 95       	ror	r20
     d64:	9a 01       	movw	r18, r20
     d66:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     d6a:	96 95       	lsr	r25
     d6c:	87 95       	ror	r24
     d6e:	96 95       	lsr	r25
     d70:	87 95       	ror	r24
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	9c 01       	movw	r18, r24
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	82 0f       	add	r24, r18
     d8a:	93 1f       	adc	r25, r19
     d8c:	9a 01       	movw	r18, r20
     d8e:	28 1b       	sub	r18, r24
     d90:	39 0b       	sbc	r19, r25
     d92:	c9 01       	movw	r24, r18
     d94:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
     d96:	80 33       	cpi	r24, 0x30	; 48
     d98:	91 05       	cpc	r25, r1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <lcd_print2+0x256>
     d9c:	26 cf       	rjmp	.-436    	; 0xbea <lcd_print2+0xa2>
     d9e:	21 cf       	rjmp	.-446    	; 0xbe2 <lcd_print2+0x9a>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     da0:	31 e0       	ldi	r19, 0x01	; 1
     da2:	e3 16       	cp	r14, r19
     da4:	f1 04       	cpc	r15, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <lcd_print2+0x262>
     da8:	24 cf       	rjmp	.-440    	; 0xbf2 <lcd_print2+0xaa>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     daa:	c0 e0       	ldi	r28, 0x00	; 0
     dac:	41 cf       	rjmp	.-382    	; 0xc30 <lcd_print2+0xe8>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     dae:	8c 2f       	mov	r24, r28
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	8e 15       	cp	r24, r14
     db4:	9f 05       	cpc	r25, r15
     db6:	0c f4       	brge	.+2      	; 0xdba <lcd_print2+0x272>
     db8:	5a cf       	rjmp	.-332    	; 0xc6e <lcd_print2+0x126>
     dba:	8b c0       	rjmp	.+278    	; 0xed2 <lcd_print2+0x38a>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
     dbc:	96 01       	movw	r18, r12
     dbe:	36 95       	lsr	r19
     dc0:	27 95       	ror	r18
     dc2:	36 95       	lsr	r19
     dc4:	27 95       	ror	r18
     dc6:	36 95       	lsr	r19
     dc8:	27 95       	ror	r18
     dca:	a5 ec       	ldi	r26, 0xC5	; 197
     dcc:	b0 e2       	ldi	r27, 0x20	; 32
     dce:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     dd2:	ac 01       	movw	r20, r24
     dd4:	52 95       	swap	r21
     dd6:	42 95       	swap	r20
     dd8:	4f 70       	andi	r20, 0x0F	; 15
     dda:	45 27       	eor	r20, r21
     ddc:	5f 70       	andi	r21, 0x0F	; 15
     dde:	45 27       	eor	r20, r21
     de0:	9a 01       	movw	r18, r20
     de2:	ad ec       	ldi	r26, 0xCD	; 205
     de4:	bc ec       	ldi	r27, 0xCC	; 204
     de6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     dea:	96 95       	lsr	r25
     dec:	87 95       	ror	r24
     dee:	96 95       	lsr	r25
     df0:	87 95       	ror	r24
     df2:	96 95       	lsr	r25
     df4:	87 95       	ror	r24
     df6:	9c 01       	movw	r18, r24
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	fa 01       	movw	r30, r20
     e0e:	e8 1b       	sub	r30, r24
     e10:	f9 0b       	sbc	r31, r25
     e12:	cf 01       	movw	r24, r30
     e14:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     e16:	80 33       	cpi	r24, 0x30	; 48
     e18:	91 05       	cpc	r25, r1
     e1a:	09 f0       	breq	.+2      	; 0xe1e <lcd_print2+0x2d6>
     e1c:	c9 ce       	rjmp	.-622    	; 0xbb0 <lcd_print2+0x68>
     e1e:	c0 e0       	ldi	r28, 0x00	; 0
     e20:	69 cf       	rjmp	.-302    	; 0xcf4 <lcd_print2+0x1ac>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
     e22:	96 01       	movw	r18, r12
     e24:	36 95       	lsr	r19
     e26:	27 95       	ror	r18
     e28:	36 95       	lsr	r19
     e2a:	27 95       	ror	r18
     e2c:	ab e7       	ldi	r26, 0x7B	; 123
     e2e:	b4 e1       	ldi	r27, 0x14	; 20
     e30:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     e34:	ac 01       	movw	r20, r24
     e36:	56 95       	lsr	r21
     e38:	47 95       	ror	r20
     e3a:	9a 01       	movw	r18, r20
     e3c:	ad ec       	ldi	r26, 0xCD	; 205
     e3e:	bc ec       	ldi	r27, 0xCC	; 204
     e40:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	96 95       	lsr	r25
     e4a:	87 95       	ror	r24
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	9c 01       	movw	r18, r24
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	9a 01       	movw	r18, r20
     e68:	28 1b       	sub	r18, r24
     e6a:	39 0b       	sbc	r19, r25
     e6c:	c9 01       	movw	r24, r18
     e6e:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
     e70:	80 33       	cpi	r24, 0x30	; 48
     e72:	91 05       	cpc	r25, r1
     e74:	09 f0       	breq	.+2      	; 0xe78 <lcd_print2+0x330>
     e76:	aa ce       	rjmp	.-684    	; 0xbcc <lcd_print2+0x84>
     e78:	c0 e0       	ldi	r28, 0x00	; 0
     e7a:	68 cf       	rjmp	.-304    	; 0xd4c <lcd_print2+0x204>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
     e7c:	96 01       	movw	r18, r12
     e7e:	ad ec       	ldi	r26, 0xCD	; 205
     e80:	bc ec       	ldi	r27, 0xCC	; 204
     e82:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     e86:	ac 01       	movw	r20, r24
     e88:	56 95       	lsr	r21
     e8a:	47 95       	ror	r20
     e8c:	56 95       	lsr	r21
     e8e:	47 95       	ror	r20
     e90:	56 95       	lsr	r21
     e92:	47 95       	ror	r20
     e94:	9a 01       	movw	r18, r20
     e96:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     e9a:	96 95       	lsr	r25
     e9c:	87 95       	ror	r24
     e9e:	96 95       	lsr	r25
     ea0:	87 95       	ror	r24
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	9c 01       	movw	r18, r24
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	fa 01       	movw	r30, r20
     ebe:	e8 1b       	sub	r30, r24
     ec0:	f9 0b       	sbc	r31, r25
     ec2:	cf 01       	movw	r24, r30
     ec4:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
     ec6:	80 33       	cpi	r24, 0x30	; 48
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f0       	breq	.+2      	; 0xece <lcd_print2+0x386>
     ecc:	8d ce       	rjmp	.-742    	; 0xbe8 <lcd_print2+0xa0>
     ece:	c0 e0       	ldi	r28, 0x00	; 0
     ed0:	91 ce       	rjmp	.-734    	; 0xbf4 <lcd_print2+0xac>
		{
			lcd_wr_char(32);
			count++;
		}	
	}
}
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	08 95       	ret

00000ee2 <lcd_print3>:

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	8a 01       	movw	r16, r20
     eee:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     ef0:	88 23       	and	r24, r24
     ef2:	11 f0       	breq	.+4      	; 0xef8 <lcd_print3+0x16>
     ef4:	61 11       	cpse	r22, r1
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <lcd_print3+0x1c>
	{
		lcd_home();
     ef8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <lcd_home>
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <lcd_print3+0x20>
	}
	else
	{
		lcd_cursor(row,coloumn);
     efe:	0e 94 12 04 	call	0x824	; 0x824 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     f02:	c5 30       	cpi	r28, 0x05	; 5
     f04:	d1 05       	cpc	r29, r1
     f06:	09 f0       	breq	.+2      	; 0xf0a <lcd_print3+0x28>
     f08:	8f c0       	rjmp	.+286    	; 0x1028 <lcd_print3+0x146>
	{
		million=value/10000+48;
     f0a:	98 01       	movw	r18, r16
     f0c:	32 95       	swap	r19
     f0e:	22 95       	swap	r18
     f10:	2f 70       	andi	r18, 0x0F	; 15
     f12:	23 27       	eor	r18, r19
     f14:	3f 70       	andi	r19, 0x0F	; 15
     f16:	23 27       	eor	r18, r19
     f18:	a7 e4       	ldi	r26, 0x47	; 71
     f1a:	b3 e0       	ldi	r27, 0x03	; 3
     f1c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	96 95       	lsr	r25
     f26:	87 95       	ror	r24
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	c0 96       	adiw	r24, 0x30	; 48
		if(million != '0')
     f2e:	80 33       	cpi	r24, 0x30	; 48
     f30:	91 05       	cpc	r25, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <lcd_print3+0x54>
     f34:	46 c0       	rjmp	.+140    	; 0xfc2 <lcd_print3+0xe0>
		{
			lcd_wr_char(million);
     f36:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;
     f3a:	ff 24       	eor	r15, r15
     f3c:	f3 94       	inc	r15
     f3e:	42 c0       	rjmp	.+132    	; 0xfc4 <lcd_print3+0xe2>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     f40:	f1 10       	cpse	r15, r1
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <lcd_print3+0x66>
     f44:	76 c0       	rjmp	.+236    	; 0x1032 <lcd_print3+0x150>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     f46:	f1 2c       	mov	r15, r1
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     f48:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;
     f4c:	f3 94       	inc	r15
     f4e:	71 c0       	rjmp	.+226    	; 0x1032 <lcd_print3+0x150>
		}
		flag=1;
	}
	
	if(digits==3 || flag==1)
     f50:	c3 30       	cpi	r28, 0x03	; 3
     f52:	d1 05       	cpc	r29, r1
     f54:	51 f4       	brne	.+20     	; 0xf6a <lcd_print3+0x88>
     f56:	fb c0       	rjmp	.+502    	; 0x114e <lcd_print3+0x26c>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     f58:	ff 20       	and	r15, r15
     f5a:	09 f4       	brne	.+2      	; 0xf5e <lcd_print3+0x7c>
     f5c:	96 c0       	rjmp	.+300    	; 0x108a <lcd_print3+0x1a8>
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <lcd_print3+0x80>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     f60:	f1 2c       	mov	r15, r1
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     f62:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
			count++;
     f66:	f3 94       	inc	r15
     f68:	90 c0       	rjmp	.+288    	; 0x108a <lcd_print3+0x1a8>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     f6a:	c2 30       	cpi	r28, 0x02	; 2
     f6c:	d1 05       	cpc	r29, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <lcd_print3+0x90>
     f70:	b6 c0       	rjmp	.+364    	; 0x10de <lcd_print3+0x1fc>
     f72:	fe c0       	rjmp	.+508    	; 0x1170 <lcd_print3+0x28e>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     f74:	f1 10       	cpse	r15, r1
		{
			lcd_wr_char(tens);
     f76:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
     f7a:	98 01       	movw	r18, r16
     f7c:	ad ec       	ldi	r26, 0xCD	; 205
     f7e:	bc ec       	ldi	r27, 0xCC	; 204
     f80:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     f84:	96 95       	lsr	r25
     f86:	87 95       	ror	r24
     f88:	96 95       	lsr	r25
     f8a:	87 95       	ror	r24
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	9c 01       	movw	r18, r24
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	98 01       	movw	r18, r16
     fa8:	28 1b       	sub	r18, r24
     faa:	39 0b       	sbc	r19, r25
     fac:	c9 01       	movw	r24, r18
     fae:	80 5d       	subi	r24, 0xD0	; 208
     fb0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
		count++;
	}
	if(digits>5)
     fb4:	26 97       	sbiw	r28, 0x06	; 6
     fb6:	0c f4       	brge	.+2      	; 0xfba <lcd_print3+0xd8>
     fb8:	eb c0       	rjmp	.+470    	; 0x1190 <lcd_print3+0x2ae>
	{
		lcd_wr_char('E');
     fba:	85 e4       	ldi	r24, 0x45	; 69
     fbc:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <lcd_wr_char>
	}
}
     fc0:	e7 c0       	rjmp	.+462    	; 0x1190 <lcd_print3+0x2ae>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     fc2:	f1 2c       	mov	r15, r1
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
     fc4:	98 01       	movw	r18, r16
     fc6:	36 95       	lsr	r19
     fc8:	27 95       	ror	r18
     fca:	36 95       	lsr	r19
     fcc:	27 95       	ror	r18
     fce:	36 95       	lsr	r19
     fd0:	27 95       	ror	r18
     fd2:	a5 ec       	ldi	r26, 0xC5	; 197
     fd4:	b0 e2       	ldi	r27, 0x20	; 32
     fd6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     fda:	ac 01       	movw	r20, r24
     fdc:	52 95       	swap	r21
     fde:	42 95       	swap	r20
     fe0:	4f 70       	andi	r20, 0x0F	; 15
     fe2:	45 27       	eor	r20, r21
     fe4:	5f 70       	andi	r21, 0x0F	; 15
     fe6:	45 27       	eor	r20, r21
     fe8:	9a 01       	movw	r18, r20
     fea:	ad ec       	ldi	r26, 0xCD	; 205
     fec:	bc ec       	ldi	r27, 0xCC	; 204
     fee:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
     ff2:	96 95       	lsr	r25
     ff4:	87 95       	ror	r24
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	9c 01       	movw	r18, r24
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	9a 01       	movw	r18, r20
    1016:	28 1b       	sub	r18, r24
    1018:	39 0b       	sbc	r19, r25
    101a:	c9 01       	movw	r24, r18
    101c:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    101e:	80 33       	cpi	r24, 0x30	; 48
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <lcd_print3+0x144>
    1024:	8d cf       	rjmp	.-230    	; 0xf40 <lcd_print3+0x5e>
    1026:	90 cf       	rjmp	.-224    	; 0xf48 <lcd_print3+0x66>
			lcd_wr_char(million);
			count++;
		}
		flag=1;
	}
	if(digits==4 || flag==1)
    1028:	c4 30       	cpi	r28, 0x04	; 4
    102a:	d1 05       	cpc	r29, r1
    102c:	09 f0       	breq	.+2      	; 0x1030 <lcd_print3+0x14e>
    102e:	90 cf       	rjmp	.-224    	; 0xf50 <lcd_print3+0x6e>
    1030:	5b c0       	rjmp	.+182    	; 0x10e8 <lcd_print3+0x206>
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
    1032:	98 01       	movw	r18, r16
    1034:	36 95       	lsr	r19
    1036:	27 95       	ror	r18
    1038:	36 95       	lsr	r19
    103a:	27 95       	ror	r18
    103c:	ab e7       	ldi	r26, 0x7B	; 123
    103e:	b4 e1       	ldi	r27, 0x14	; 20
    1040:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
    1044:	ac 01       	movw	r20, r24
    1046:	56 95       	lsr	r21
    1048:	47 95       	ror	r20
    104a:	9a 01       	movw	r18, r20
    104c:	ad ec       	ldi	r26, 0xCD	; 205
    104e:	bc ec       	ldi	r27, 0xCC	; 204
    1050:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
    1054:	96 95       	lsr	r25
    1056:	87 95       	ror	r24
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	96 95       	lsr	r25
    105e:	87 95       	ror	r24
    1060:	9c 01       	movw	r18, r24
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	9a 01       	movw	r18, r20
    1078:	28 1b       	sub	r18, r24
    107a:	39 0b       	sbc	r19, r25
    107c:	c9 01       	movw	r24, r18
    107e:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
    1080:	80 33       	cpi	r24, 0x30	; 48
    1082:	91 05       	cpc	r25, r1
    1084:	09 f0       	breq	.+2      	; 0x1088 <lcd_print3+0x1a6>
    1086:	6d cf       	rjmp	.-294    	; 0xf62 <lcd_print3+0x80>
    1088:	67 cf       	rjmp	.-306    	; 0xf58 <lcd_print3+0x76>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
    108a:	98 01       	movw	r18, r16
    108c:	ad ec       	ldi	r26, 0xCD	; 205
    108e:	bc ec       	ldi	r27, 0xCC	; 204
    1090:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
    1094:	ac 01       	movw	r20, r24
    1096:	56 95       	lsr	r21
    1098:	47 95       	ror	r20
    109a:	56 95       	lsr	r21
    109c:	47 95       	ror	r20
    109e:	56 95       	lsr	r21
    10a0:	47 95       	ror	r20
    10a2:	9a 01       	movw	r18, r20
    10a4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	96 95       	lsr	r25
    10b2:	87 95       	ror	r24
    10b4:	9c 01       	movw	r18, r24
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	9a 01       	movw	r18, r20
    10cc:	28 1b       	sub	r18, r24
    10ce:	39 0b       	sbc	r19, r25
    10d0:	c9 01       	movw	r24, r18
    10d2:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
    10d4:	80 33       	cpi	r24, 0x30	; 48
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <lcd_print3+0x1fa>
    10da:	4d cf       	rjmp	.-358    	; 0xf76 <lcd_print3+0x94>
    10dc:	4b cf       	rjmp	.-362    	; 0xf74 <lcd_print3+0x92>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
    10de:	c1 30       	cpi	r28, 0x01	; 1
    10e0:	d1 05       	cpc	r29, r1
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <lcd_print3+0x204>
    10e4:	67 cf       	rjmp	.-306    	; 0xfb4 <lcd_print3+0xd2>
    10e6:	49 cf       	rjmp	.-366    	; 0xf7a <lcd_print3+0x98>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
    10e8:	98 01       	movw	r18, r16
    10ea:	36 95       	lsr	r19
    10ec:	27 95       	ror	r18
    10ee:	36 95       	lsr	r19
    10f0:	27 95       	ror	r18
    10f2:	36 95       	lsr	r19
    10f4:	27 95       	ror	r18
    10f6:	a5 ec       	ldi	r26, 0xC5	; 197
    10f8:	b0 e2       	ldi	r27, 0x20	; 32
    10fa:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
    10fe:	ac 01       	movw	r20, r24
    1100:	52 95       	swap	r21
    1102:	42 95       	swap	r20
    1104:	4f 70       	andi	r20, 0x0F	; 15
    1106:	45 27       	eor	r20, r21
    1108:	5f 70       	andi	r21, 0x0F	; 15
    110a:	45 27       	eor	r20, r21
    110c:	9a 01       	movw	r18, r20
    110e:	ad ec       	ldi	r26, 0xCD	; 205
    1110:	bc ec       	ldi	r27, 0xCC	; 204
    1112:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__umulhisi3>
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	96 95       	lsr	r25
    111c:	87 95       	ror	r24
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	9c 01       	movw	r18, r24
    1124:	22 0f       	add	r18, r18
    1126:	33 1f       	adc	r19, r19
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	82 0f       	add	r24, r18
    1136:	93 1f       	adc	r25, r19
    1138:	9a 01       	movw	r18, r20
    113a:	28 1b       	sub	r18, r24
    113c:	39 0b       	sbc	r19, r25
    113e:	c9 01       	movw	r24, r18
    1140:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    1142:	80 33       	cpi	r24, 0x30	; 48
    1144:	91 05       	cpc	r25, r1
    1146:	09 f0       	breq	.+2      	; 0x114a <lcd_print3+0x268>
    1148:	fe ce       	rjmp	.-516    	; 0xf46 <lcd_print3+0x64>
    114a:	f1 2c       	mov	r15, r1
    114c:	72 cf       	rjmp	.-284    	; 0x1032 <lcd_print3+0x150>
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
    114e:	c8 01       	movw	r24, r16
    1150:	64 e6       	ldi	r22, 0x64	; 100
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__udivmodhi4>
    1158:	cb 01       	movw	r24, r22
    115a:	6a e0       	ldi	r22, 0x0A	; 10
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__udivmodhi4>
    1162:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
    1164:	80 33       	cpi	r24, 0x30	; 48
    1166:	91 05       	cpc	r25, r1
    1168:	09 f0       	breq	.+2      	; 0x116c <lcd_print3+0x28a>
    116a:	fa ce       	rjmp	.-524    	; 0xf60 <lcd_print3+0x7e>
    116c:	f1 2c       	mov	r15, r1
    116e:	8d cf       	rjmp	.-230    	; 0x108a <lcd_print3+0x1a8>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	c8 01       	movw	r24, r16
    1176:	b9 01       	movw	r22, r18
    1178:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__udivmodhi4>
    117c:	cb 01       	movw	r24, r22
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__udivmodhi4>
    1184:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
    1186:	80 33       	cpi	r24, 0x30	; 48
    1188:	91 05       	cpc	r25, r1
    118a:	09 f0       	breq	.+2      	; 0x118e <lcd_print3+0x2ac>
    118c:	f4 ce       	rjmp	.-536    	; 0xf76 <lcd_print3+0x94>
    118e:	f5 ce       	rjmp	.-534    	; 0xf7a <lcd_print3+0x98>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	08 95       	ret

0000119c <lcd_print4>:

//27.345A //27mA ...
void lcd_print4(char row, char col, float value, char* str1, char* str2)
{
    119c:	8f 92       	push	r8
    119e:	9f 92       	push	r9
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	d8 2f       	mov	r29, r24
    11b2:	c6 2f       	mov	r28, r22
    11b4:	49 01       	movw	r8, r18
    11b6:	5a 01       	movw	r10, r20
	//Print in mA, mW, mW etc
	if (value<1000)
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	4a e7       	ldi	r20, 0x7A	; 122
    11be:	54 e4       	ldi	r21, 0x44	; 68
    11c0:	c5 01       	movw	r24, r10
    11c2:	b4 01       	movw	r22, r8
    11c4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	64 f4       	brge	.+24     	; 0x11e4 <lcd_print4+0x48>
	{
		lcd_print2(row,col,value,4, str1);
    11cc:	c5 01       	movw	r24, r10
    11ce:	b4 01       	movw	r22, r8
    11d0:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fixunssfsi>
    11d4:	24 e0       	ldi	r18, 0x04	; 4
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	ab 01       	movw	r20, r22
    11da:	6c 2f       	mov	r22, r28
    11dc:	8d 2f       	mov	r24, r29
    11de:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_print2>
    11e2:	7b c0       	rjmp	.+246    	; 0x12da <lcd_print4+0x13e>
		}	
		*/
	}
	
	//Print in A, V, W etc and clear the space after(incase previous was >=10000)
	else if (value>=1000 && value < 10000)
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	4a e7       	ldi	r20, 0x7A	; 122
    11ea:	54 e4       	ldi	r21, 0x44	; 68
    11ec:	c5 01       	movw	r24, r10
    11ee:	b4 01       	movw	r22, r8
    11f0:	0e 94 02 0c 	call	0x1804	; 0x1804 <__gesf2>
    11f4:	88 23       	and	r24, r24
    11f6:	cc f1       	brlt	.+114    	; 0x126a <lcd_print4+0xce>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e4       	ldi	r19, 0x40	; 64
    11fc:	4c e1       	ldi	r20, 0x1C	; 28
    11fe:	56 e4       	ldi	r21, 0x46	; 70
    1200:	c5 01       	movw	r24, r10
    1202:	b4 01       	movw	r22, r8
    1204:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__cmpsf2>
    1208:	88 23       	and	r24, r24
    120a:	7c f5       	brge	.+94     	; 0x126a <lcd_print4+0xce>
	{
		lcd_print3(row, col, value/1000, 1);
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	4a e7       	ldi	r20, 0x7A	; 122
    1212:	54 e4       	ldi	r21, 0x44	; 68
    1214:	c5 01       	movw	r24, r10
    1216:	b4 01       	movw	r22, r8
    1218:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__divsf3>
    121c:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fixunssfsi>
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	ab 01       	movw	r20, r22
    1226:	6c 2f       	mov	r22, r28
    1228:	8d 2f       	mov	r24, r29
    122a:	0e 94 71 07 	call	0xee2	; 0xee2 <lcd_print3>
		lcd_string2(row, col+1, ".");				//Print the decimal point
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	6c 0f       	add	r22, r28
    1232:	4f e0       	ldi	r20, 0x0F	; 15
    1234:	51 e0       	ldi	r21, 0x01	; 1
    1236:	8d 2f       	mov	r24, r29
    1238:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
		
		lcd_print5(row, col+2, (int)value%1000, 3, str2);		
    123c:	c5 01       	movw	r24, r10
    123e:	b4 01       	movw	r22, r8
    1240:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
    1244:	cb 01       	movw	r24, r22
    1246:	68 ee       	ldi	r22, 0xE8	; 232
    1248:	73 e0       	ldi	r23, 0x03	; 3
    124a:	0e 94 88 0c 	call	0x1910	; 0x1910 <__divmodhi4>
    124e:	62 e0       	ldi	r22, 0x02	; 2
    1250:	6c 0f       	add	r22, r28
    1252:	87 01       	movw	r16, r14
    1254:	23 e0       	ldi	r18, 0x03	; 3
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	ac 01       	movw	r20, r24
    125a:	8d 2f       	mov	r24, r29
    125c:	0e 94 8b 04 	call	0x916	; 0x916 <lcd_print5>
		/*							//Print A, V etc
		lcd_print(row, col+2, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		
		lcd_string("  ");
    1260:	81 e1       	ldi	r24, 0x11	; 17
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 03 04 	call	0x806	; 0x806 <lcd_string>
    1268:	38 c0       	rjmp	.+112    	; 0x12da <lcd_print4+0x13e>
	}
	
	//Print in A, V, W etc
	else if (value>=10000)
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e4       	ldi	r19, 0x40	; 64
    126e:	4c e1       	ldi	r20, 0x1C	; 28
    1270:	56 e4       	ldi	r21, 0x46	; 70
    1272:	c5 01       	movw	r24, r10
    1274:	b4 01       	movw	r22, r8
    1276:	0e 94 02 0c 	call	0x1804	; 0x1804 <__gesf2>
    127a:	88 23       	and	r24, r24
    127c:	74 f1       	brlt	.+92     	; 0x12da <lcd_print4+0x13e>
	{
		lcd_print3(row, col, value/1000, 2);
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	4a e7       	ldi	r20, 0x7A	; 122
    1284:	54 e4       	ldi	r21, 0x44	; 68
    1286:	c5 01       	movw	r24, r10
    1288:	b4 01       	movw	r22, r8
    128a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__divsf3>
    128e:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fixunssfsi>
    1292:	22 e0       	ldi	r18, 0x02	; 2
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	ab 01       	movw	r20, r22
    1298:	6c 2f       	mov	r22, r28
    129a:	8d 2f       	mov	r24, r29
    129c:	0e 94 71 07 	call	0xee2	; 0xee2 <lcd_print3>
		lcd_string2(row, col+2, ".");				//Print the decimal point
    12a0:	62 e0       	ldi	r22, 0x02	; 2
    12a2:	6c 0f       	add	r22, r28
    12a4:	4f e0       	ldi	r20, 0x0F	; 15
    12a6:	51 e0       	ldi	r21, 0x01	; 1
    12a8:	8d 2f       	mov	r24, r29
    12aa:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
		
		lcd_print5(row, col+3, (int)value%1000, 3, str2);
    12ae:	c5 01       	movw	r24, r10
    12b0:	b4 01       	movw	r22, r8
    12b2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
    12b6:	cb 01       	movw	r24, r22
    12b8:	68 ee       	ldi	r22, 0xE8	; 232
    12ba:	73 e0       	ldi	r23, 0x03	; 3
    12bc:	0e 94 88 0c 	call	0x1910	; 0x1910 <__divmodhi4>
    12c0:	63 e0       	ldi	r22, 0x03	; 3
    12c2:	6c 0f       	add	r22, r28
    12c4:	87 01       	movw	r16, r14
    12c6:	23 e0       	ldi	r18, 0x03	; 3
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	ac 01       	movw	r20, r24
    12cc:	8d 2f       	mov	r24, r29
    12ce:	0e 94 8b 04 	call	0x916	; 0x916 <lcd_print5>
		
		/*					
		lcd_print(row, col+3, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		lcd_string(" ");
    12d2:	82 e1       	ldi	r24, 0x12	; 18
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	0e 94 03 04 	call	0x806	; 0x806 <lcd_string>
	}	
} 
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	bf 90       	pop	r11
    12e8:	af 90       	pop	r10
    12ea:	9f 90       	pop	r9
    12ec:	8f 90       	pop	r8
    12ee:	08 95       	ret

000012f0 <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
    12f0:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_port_config>
	adc_pin_config();
    12f4:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
    12f8:	08 95       	ret

000012fa <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
    12fa:	f8 94       	cli
	lcd_start();
    12fc:	0e 94 32 04 	call	0x864	; 0x864 <lcd_start>
	adc_config();
    1300:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
    1304:	78 94       	sei
    1306:	08 95       	ret

00001308 <main>:
}

int main(void)
{
	port_config();
    1308:	0e 94 78 09 	call	0x12f0	; 0x12f0 <port_config>
	init_devices();
    130c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <init_devices>
		
	lcd_string2(1, 7, "CCL");
    1310:	44 e1       	ldi	r20, 0x14	; 20
    1312:	51 e0       	ldi	r21, 0x01	; 1
    1314:	67 e0       	ldi	r22, 0x07	; 7
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
    131c:	2f ef       	ldi	r18, 0xFF	; 255
    131e:	85 ea       	ldi	r24, 0xA5	; 165
    1320:	9e e0       	ldi	r25, 0x0E	; 14
    1322:	21 50       	subi	r18, 0x01	; 1
    1324:	80 40       	sbci	r24, 0x00	; 0
    1326:	90 40       	sbci	r25, 0x00	; 0
    1328:	e1 f7       	brne	.-8      	; 0x1322 <main+0x1a>
    132a:	00 c0       	rjmp	.+0      	; 0x132c <main+0x24>
    132c:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)	//Check if external 12v is connected
    132e:	1d 9b       	sbis	0x03, 5	; 3
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <main+0x50>
	{
		extern float offset;
		lcd_string2(2,1,"Supply Connected");
    1332:	48 e1       	ldi	r20, 0x18	; 24
    1334:	51 e0       	ldi	r21, 0x01	; 1
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
		offset = 4;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e8       	ldi	r26, 0x80	; 128
    1344:	b0 e4       	ldi	r27, 0x40	; 64
    1346:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <offset>
    134a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <offset+0x1>
    134e:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <offset+0x2>
    1352:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <offset+0x3>
    1356:	12 c0       	rjmp	.+36     	; 0x137c <main+0x74>
	}
	
	else				//Check if external 12v is NOT connected
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
    1358:	49 e2       	ldi	r20, 0x29	; 41
    135a:	51 e0       	ldi	r21, 0x01	; 1
    135c:	62 e0       	ldi	r22, 0x02	; 2
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
		offset = 31.2;
    1364:	8a e9       	ldi	r24, 0x9A	; 154
    1366:	99 e9       	ldi	r25, 0x99	; 153
    1368:	a9 ef       	ldi	r26, 0xF9	; 249
    136a:	b1 e4       	ldi	r27, 0x41	; 65
    136c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <offset>
    1370:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <offset+0x1>
    1374:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <offset+0x2>
    1378:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <offset+0x3>
    137c:	2f ef       	ldi	r18, 0xFF	; 255
    137e:	8b e4       	ldi	r24, 0x4B	; 75
    1380:	9d e1       	ldi	r25, 0x1D	; 29
    1382:	21 50       	subi	r18, 0x01	; 1
    1384:	80 40       	sbci	r24, 0x00	; 0
    1386:	90 40       	sbci	r25, 0x00	; 0
    1388:	e1 f7       	brne	.-8      	; 0x1382 <main+0x7a>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <main+0x84>
    138c:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
    138e:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_clear>
		1 for power 
		2 for voltage 		
		3 for current
		4 for error
		*/
		char flag = 0;						
    1392:	10 e0       	ldi	r17, 0x00	; 0
					print_current(1,1);
					if(flag == 3)
					break;
					
					lcd_string2(2, 1, "Current Exceeded");
					flag = 3;
    1394:	d3 e0       	ldi	r29, 0x03	; 3
				default:
					if(flag)
					break;
				
					lcd_string2(1, 6, "Error");
					flag = 4;
    1396:	04 e0       	ldi	r16, 0x04	; 4
	_delay_ms(600);
	lcd_clear();
	
	while (1)
	{
		update_current();
    1398:	0e 94 0c 01 	call	0x218	; 0x218 <update_current>
		update_voltage();
    139c:	0e 94 34 01 	call	0x268	; 0x268 <update_voltage>
		update_power();
    13a0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_power>
		update_gate_voltage();
    13a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <update_gate_voltage>
	
	if(check_thresholds()==0)		//If under safe limits print everything
    13a8:	0e 94 87 02 	call	0x50e	; 0x50e <check_thresholds>
    13ac:	81 11       	cpse	r24, r1
    13ae:	11 c0       	rjmp	.+34     	; 0x13d2 <main+0xca>
	//if(1)	
	{	
		print_current(1,1);
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	0e 94 1b 02 	call	0x436	; 0x436 <print_current>
		print_voltage(1,10);
    13b8:	6a e0       	ldi	r22, 0x0A	; 10
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	0e 94 36 02 	call	0x46c	; 0x46c <print_voltage>
		print_power(2,1);
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_power>
		//print_gate_voltage(2,10);
		print_mos_power(2,10);
    13c8:	6a e0       	ldi	r22, 0x0A	; 10
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <print_mos_power>
    13d0:	e3 cf       	rjmp	.-58     	; 0x1398 <main+0x90>
	}
	else							//If over safe limits print what is exceeded and show its value
	{		
		lcd_clear();
    13d2:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_clear>
		1 for power 
		2 for voltage 		
		3 for current
		4 for error
		*/
		char flag = 0;						
    13d6:	c1 2f       	mov	r28, r17
		
		while(check_thresholds())	//Stay here until over safe limits 
    13d8:	42 c0       	rjmp	.+132    	; 0x145e <main+0x156>
		{	
			update_current();
    13da:	0e 94 0c 01 	call	0x218	; 0x218 <update_current>
			update_voltage();
    13de:	0e 94 34 01 	call	0x268	; 0x268 <update_voltage>
			update_power();
    13e2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_power>
			update_gate_voltage();
    13e6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <update_gate_voltage>
			
			switch (check_thresholds())	//Switch according to what limit is exceeded
    13ea:	0e 94 87 02 	call	0x50e	; 0x50e <check_thresholds>
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	89 f0       	breq	.+34     	; 0x1414 <main+0x10c>
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	e9 f0       	breq	.+58     	; 0x1430 <main+0x128>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	49 f5       	brne	.+82     	; 0x144c <main+0x144>
			{
				case 1:				//Power exceeds threshold
					print_power(1,1);					
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_power>
					if(flag == 1)		//To print what is exceeded only once
    1400:	c1 30       	cpi	r28, 0x01	; 1
    1402:	69 f1       	breq	.+90     	; 0x145e <main+0x156>
					break;
						
					lcd_string2(2, 1, "Power Exceeded");
    1404:	47 e3       	ldi	r20, 0x37	; 55
    1406:	51 e0       	ldi	r21, 0x01	; 1
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
					flag = 1;		//What is exceeded is printed once
    1410:	c1 e0       	ldi	r28, 0x01	; 1
					break;
    1412:	25 c0       	rjmp	.+74     	; 0x145e <main+0x156>
			
				case 2:	//Voltage exceeds threshold
					print_voltage(1,1);
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	0e 94 36 02 	call	0x46c	; 0x46c <print_voltage>
					if(flag == 2)
    141c:	c2 30       	cpi	r28, 0x02	; 2
    141e:	f9 f0       	breq	.+62     	; 0x145e <main+0x156>
					break;
					
					lcd_string2(2, 1, "Voltage Exceeded");
    1420:	46 e4       	ldi	r20, 0x46	; 70
    1422:	51 e0       	ldi	r21, 0x01	; 1
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
					flag = 2;
    142c:	c2 e0       	ldi	r28, 0x02	; 2
					break;
    142e:	17 c0       	rjmp	.+46     	; 0x145e <main+0x156>
			 
				case 3:	//Current exceeds threshold
					print_current(1,1);
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	0e 94 1b 02 	call	0x436	; 0x436 <print_current>
					if(flag == 3)
    1438:	c3 30       	cpi	r28, 0x03	; 3
    143a:	89 f0       	breq	.+34     	; 0x145e <main+0x156>
					break;
					
					lcd_string2(2, 1, "Current Exceeded");
    143c:	47 e5       	ldi	r20, 0x57	; 87
    143e:	51 e0       	ldi	r21, 0x01	; 1
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
					flag = 3;
    1448:	cd 2f       	mov	r28, r29
					break;
    144a:	09 c0       	rjmp	.+18     	; 0x145e <main+0x156>
			
				default:
					if(flag)
    144c:	c1 11       	cpse	r28, r1
    144e:	07 c0       	rjmp	.+14     	; 0x145e <main+0x156>
					break;
				
					lcd_string2(1, 6, "Error");
    1450:	48 e6       	ldi	r20, 0x68	; 104
    1452:	51 e0       	ldi	r21, 0x01	; 1
    1454:	66 e0       	ldi	r22, 0x06	; 6
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 21 04 	call	0x842	; 0x842 <lcd_string2>
					flag = 4;
    145c:	c0 2f       	mov	r28, r16
		3 for current
		4 for error
		*/
		char flag = 0;						
		
		while(check_thresholds())	//Stay here until over safe limits 
    145e:	0e 94 87 02 	call	0x50e	; 0x50e <check_thresholds>
    1462:	81 11       	cpse	r24, r1
    1464:	ba cf       	rjmp	.-140    	; 0x13da <main+0xd2>
					lcd_string2(1, 6, "Error");
					flag = 4;
					break;
			}
		}
		lcd_clear();
    1466:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_clear>
    146a:	96 cf       	rjmp	.-212    	; 0x1398 <main+0x90>

0000146c <__subsf3>:
    146c:	50 58       	subi	r21, 0x80	; 128

0000146e <__addsf3>:
    146e:	bb 27       	eor	r27, r27
    1470:	aa 27       	eor	r26, r26
    1472:	0e 94 4e 0a 	call	0x149c	; 0x149c <__addsf3x>
    1476:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_round>
    147a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_pscA>
    147e:	38 f0       	brcs	.+14     	; 0x148e <__addsf3+0x20>
    1480:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_pscB>
    1484:	20 f0       	brcs	.+8      	; 0x148e <__addsf3+0x20>
    1486:	39 f4       	brne	.+14     	; 0x1496 <__addsf3+0x28>
    1488:	9f 3f       	cpi	r25, 0xFF	; 255
    148a:	19 f4       	brne	.+6      	; 0x1492 <__addsf3+0x24>
    148c:	26 f4       	brtc	.+8      	; 0x1496 <__addsf3+0x28>
    148e:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__fp_nan>
    1492:	0e f4       	brtc	.+2      	; 0x1496 <__addsf3+0x28>
    1494:	e0 95       	com	r30
    1496:	e7 fb       	bst	r30, 7
    1498:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_inf>

0000149c <__addsf3x>:
    149c:	e9 2f       	mov	r30, r25
    149e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__fp_split3>
    14a2:	58 f3       	brcs	.-42     	; 0x147a <__addsf3+0xc>
    14a4:	ba 17       	cp	r27, r26
    14a6:	62 07       	cpc	r22, r18
    14a8:	73 07       	cpc	r23, r19
    14aa:	84 07       	cpc	r24, r20
    14ac:	95 07       	cpc	r25, r21
    14ae:	20 f0       	brcs	.+8      	; 0x14b8 <__addsf3x+0x1c>
    14b0:	79 f4       	brne	.+30     	; 0x14d0 <__addsf3x+0x34>
    14b2:	a6 f5       	brtc	.+104    	; 0x151c <__addsf3x+0x80>
    14b4:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_zero>
    14b8:	0e f4       	brtc	.+2      	; 0x14bc <__addsf3x+0x20>
    14ba:	e0 95       	com	r30
    14bc:	0b 2e       	mov	r0, r27
    14be:	ba 2f       	mov	r27, r26
    14c0:	a0 2d       	mov	r26, r0
    14c2:	0b 01       	movw	r0, r22
    14c4:	b9 01       	movw	r22, r18
    14c6:	90 01       	movw	r18, r0
    14c8:	0c 01       	movw	r0, r24
    14ca:	ca 01       	movw	r24, r20
    14cc:	a0 01       	movw	r20, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	ff 27       	eor	r31, r31
    14d2:	59 1b       	sub	r21, r25
    14d4:	99 f0       	breq	.+38     	; 0x14fc <__addsf3x+0x60>
    14d6:	59 3f       	cpi	r21, 0xF9	; 249
    14d8:	50 f4       	brcc	.+20     	; 0x14ee <__addsf3x+0x52>
    14da:	50 3e       	cpi	r21, 0xE0	; 224
    14dc:	68 f1       	brcs	.+90     	; 0x1538 <__addsf3x+0x9c>
    14de:	1a 16       	cp	r1, r26
    14e0:	f0 40       	sbci	r31, 0x00	; 0
    14e2:	a2 2f       	mov	r26, r18
    14e4:	23 2f       	mov	r18, r19
    14e6:	34 2f       	mov	r19, r20
    14e8:	44 27       	eor	r20, r20
    14ea:	58 5f       	subi	r21, 0xF8	; 248
    14ec:	f3 cf       	rjmp	.-26     	; 0x14d4 <__addsf3x+0x38>
    14ee:	46 95       	lsr	r20
    14f0:	37 95       	ror	r19
    14f2:	27 95       	ror	r18
    14f4:	a7 95       	ror	r26
    14f6:	f0 40       	sbci	r31, 0x00	; 0
    14f8:	53 95       	inc	r21
    14fa:	c9 f7       	brne	.-14     	; 0x14ee <__addsf3x+0x52>
    14fc:	7e f4       	brtc	.+30     	; 0x151c <__addsf3x+0x80>
    14fe:	1f 16       	cp	r1, r31
    1500:	ba 0b       	sbc	r27, r26
    1502:	62 0b       	sbc	r22, r18
    1504:	73 0b       	sbc	r23, r19
    1506:	84 0b       	sbc	r24, r20
    1508:	ba f0       	brmi	.+46     	; 0x1538 <__addsf3x+0x9c>
    150a:	91 50       	subi	r25, 0x01	; 1
    150c:	a1 f0       	breq	.+40     	; 0x1536 <__addsf3x+0x9a>
    150e:	ff 0f       	add	r31, r31
    1510:	bb 1f       	adc	r27, r27
    1512:	66 1f       	adc	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	c2 f7       	brpl	.-16     	; 0x150a <__addsf3x+0x6e>
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <__addsf3x+0x9c>
    151c:	ba 0f       	add	r27, r26
    151e:	62 1f       	adc	r22, r18
    1520:	73 1f       	adc	r23, r19
    1522:	84 1f       	adc	r24, r20
    1524:	48 f4       	brcc	.+18     	; 0x1538 <__addsf3x+0x9c>
    1526:	87 95       	ror	r24
    1528:	77 95       	ror	r23
    152a:	67 95       	ror	r22
    152c:	b7 95       	ror	r27
    152e:	f7 95       	ror	r31
    1530:	9e 3f       	cpi	r25, 0xFE	; 254
    1532:	08 f0       	brcs	.+2      	; 0x1536 <__addsf3x+0x9a>
    1534:	b0 cf       	rjmp	.-160    	; 0x1496 <__addsf3+0x28>
    1536:	93 95       	inc	r25
    1538:	88 0f       	add	r24, r24
    153a:	08 f0       	brcs	.+2      	; 0x153e <__addsf3x+0xa2>
    153c:	99 27       	eor	r25, r25
    153e:	ee 0f       	add	r30, r30
    1540:	97 95       	ror	r25
    1542:	87 95       	ror	r24
    1544:	08 95       	ret

00001546 <__cmpsf2>:
    1546:	0e 94 8d 0b 	call	0x171a	; 0x171a <__fp_cmp>
    154a:	08 f4       	brcc	.+2      	; 0x154e <__cmpsf2+0x8>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	08 95       	ret

00001550 <__divsf3>:
    1550:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__divsf3x>
    1554:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_round>
    1558:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_pscB>
    155c:	58 f0       	brcs	.+22     	; 0x1574 <__divsf3+0x24>
    155e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_pscA>
    1562:	40 f0       	brcs	.+16     	; 0x1574 <__divsf3+0x24>
    1564:	29 f4       	brne	.+10     	; 0x1570 <__divsf3+0x20>
    1566:	5f 3f       	cpi	r21, 0xFF	; 255
    1568:	29 f0       	breq	.+10     	; 0x1574 <__divsf3+0x24>
    156a:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_inf>
    156e:	51 11       	cpse	r21, r1
    1570:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_szero>
    1574:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__fp_nan>

00001578 <__divsf3x>:
    1578:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__fp_split3>
    157c:	68 f3       	brcs	.-38     	; 0x1558 <__divsf3+0x8>

0000157e <__divsf3_pse>:
    157e:	99 23       	and	r25, r25
    1580:	b1 f3       	breq	.-20     	; 0x156e <__divsf3+0x1e>
    1582:	55 23       	and	r21, r21
    1584:	91 f3       	breq	.-28     	; 0x156a <__divsf3+0x1a>
    1586:	95 1b       	sub	r25, r21
    1588:	55 0b       	sbc	r21, r21
    158a:	bb 27       	eor	r27, r27
    158c:	aa 27       	eor	r26, r26
    158e:	62 17       	cp	r22, r18
    1590:	73 07       	cpc	r23, r19
    1592:	84 07       	cpc	r24, r20
    1594:	38 f0       	brcs	.+14     	; 0x15a4 <__divsf3_pse+0x26>
    1596:	9f 5f       	subi	r25, 0xFF	; 255
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	44 1f       	adc	r20, r20
    15a0:	aa 1f       	adc	r26, r26
    15a2:	a9 f3       	breq	.-22     	; 0x158e <__divsf3_pse+0x10>
    15a4:	35 d0       	rcall	.+106    	; 0x1610 <__divsf3_pse+0x92>
    15a6:	0e 2e       	mov	r0, r30
    15a8:	3a f0       	brmi	.+14     	; 0x15b8 <__divsf3_pse+0x3a>
    15aa:	e0 e8       	ldi	r30, 0x80	; 128
    15ac:	32 d0       	rcall	.+100    	; 0x1612 <__divsf3_pse+0x94>
    15ae:	91 50       	subi	r25, 0x01	; 1
    15b0:	50 40       	sbci	r21, 0x00	; 0
    15b2:	e6 95       	lsr	r30
    15b4:	00 1c       	adc	r0, r0
    15b6:	ca f7       	brpl	.-14     	; 0x15aa <__divsf3_pse+0x2c>
    15b8:	2b d0       	rcall	.+86     	; 0x1610 <__divsf3_pse+0x92>
    15ba:	fe 2f       	mov	r31, r30
    15bc:	29 d0       	rcall	.+82     	; 0x1610 <__divsf3_pse+0x92>
    15be:	66 0f       	add	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	bb 1f       	adc	r27, r27
    15c6:	26 17       	cp	r18, r22
    15c8:	37 07       	cpc	r19, r23
    15ca:	48 07       	cpc	r20, r24
    15cc:	ab 07       	cpc	r26, r27
    15ce:	b0 e8       	ldi	r27, 0x80	; 128
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <__divsf3_pse+0x56>
    15d2:	bb 0b       	sbc	r27, r27
    15d4:	80 2d       	mov	r24, r0
    15d6:	bf 01       	movw	r22, r30
    15d8:	ff 27       	eor	r31, r31
    15da:	93 58       	subi	r25, 0x83	; 131
    15dc:	5f 4f       	sbci	r21, 0xFF	; 255
    15de:	3a f0       	brmi	.+14     	; 0x15ee <__divsf3_pse+0x70>
    15e0:	9e 3f       	cpi	r25, 0xFE	; 254
    15e2:	51 05       	cpc	r21, r1
    15e4:	78 f0       	brcs	.+30     	; 0x1604 <__divsf3_pse+0x86>
    15e6:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_inf>
    15ea:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_szero>
    15ee:	5f 3f       	cpi	r21, 0xFF	; 255
    15f0:	e4 f3       	brlt	.-8      	; 0x15ea <__divsf3_pse+0x6c>
    15f2:	98 3e       	cpi	r25, 0xE8	; 232
    15f4:	d4 f3       	brlt	.-12     	; 0x15ea <__divsf3_pse+0x6c>
    15f6:	86 95       	lsr	r24
    15f8:	77 95       	ror	r23
    15fa:	67 95       	ror	r22
    15fc:	b7 95       	ror	r27
    15fe:	f7 95       	ror	r31
    1600:	9f 5f       	subi	r25, 0xFF	; 255
    1602:	c9 f7       	brne	.-14     	; 0x15f6 <__divsf3_pse+0x78>
    1604:	88 0f       	add	r24, r24
    1606:	91 1d       	adc	r25, r1
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	97 f9       	bld	r25, 7
    160e:	08 95       	ret
    1610:	e1 e0       	ldi	r30, 0x01	; 1
    1612:	66 0f       	add	r22, r22
    1614:	77 1f       	adc	r23, r23
    1616:	88 1f       	adc	r24, r24
    1618:	bb 1f       	adc	r27, r27
    161a:	62 17       	cp	r22, r18
    161c:	73 07       	cpc	r23, r19
    161e:	84 07       	cpc	r24, r20
    1620:	ba 07       	cpc	r27, r26
    1622:	20 f0       	brcs	.+8      	; 0x162c <__divsf3_pse+0xae>
    1624:	62 1b       	sub	r22, r18
    1626:	73 0b       	sbc	r23, r19
    1628:	84 0b       	sbc	r24, r20
    162a:	ba 0b       	sbc	r27, r26
    162c:	ee 1f       	adc	r30, r30
    162e:	88 f7       	brcc	.-30     	; 0x1612 <__divsf3_pse+0x94>
    1630:	e0 95       	com	r30
    1632:	08 95       	ret

00001634 <__fixsfsi>:
    1634:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fixunssfsi>
    1638:	68 94       	set
    163a:	b1 11       	cpse	r27, r1
    163c:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_szero>
    1640:	08 95       	ret

00001642 <__fixunssfsi>:
    1642:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_splitA>
    1646:	88 f0       	brcs	.+34     	; 0x166a <__fixunssfsi+0x28>
    1648:	9f 57       	subi	r25, 0x7F	; 127
    164a:	98 f0       	brcs	.+38     	; 0x1672 <__fixunssfsi+0x30>
    164c:	b9 2f       	mov	r27, r25
    164e:	99 27       	eor	r25, r25
    1650:	b7 51       	subi	r27, 0x17	; 23
    1652:	b0 f0       	brcs	.+44     	; 0x1680 <__fixunssfsi+0x3e>
    1654:	e1 f0       	breq	.+56     	; 0x168e <__fixunssfsi+0x4c>
    1656:	66 0f       	add	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	1a f0       	brmi	.+6      	; 0x1666 <__fixunssfsi+0x24>
    1660:	ba 95       	dec	r27
    1662:	c9 f7       	brne	.-14     	; 0x1656 <__fixunssfsi+0x14>
    1664:	14 c0       	rjmp	.+40     	; 0x168e <__fixunssfsi+0x4c>
    1666:	b1 30       	cpi	r27, 0x01	; 1
    1668:	91 f0       	breq	.+36     	; 0x168e <__fixunssfsi+0x4c>
    166a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fp_zero>
    166e:	b1 e0       	ldi	r27, 0x01	; 1
    1670:	08 95       	ret
    1672:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_zero>
    1676:	67 2f       	mov	r22, r23
    1678:	78 2f       	mov	r23, r24
    167a:	88 27       	eor	r24, r24
    167c:	b8 5f       	subi	r27, 0xF8	; 248
    167e:	39 f0       	breq	.+14     	; 0x168e <__fixunssfsi+0x4c>
    1680:	b9 3f       	cpi	r27, 0xF9	; 249
    1682:	cc f3       	brlt	.-14     	; 0x1676 <__fixunssfsi+0x34>
    1684:	86 95       	lsr	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b3 95       	inc	r27
    168c:	d9 f7       	brne	.-10     	; 0x1684 <__fixunssfsi+0x42>
    168e:	3e f4       	brtc	.+14     	; 0x169e <__fixunssfsi+0x5c>
    1690:	90 95       	com	r25
    1692:	80 95       	com	r24
    1694:	70 95       	com	r23
    1696:	61 95       	neg	r22
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	8f 4f       	sbci	r24, 0xFF	; 255
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	08 95       	ret

000016a0 <__floatunsisf>:
    16a0:	e8 94       	clt
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <__floatsisf+0x12>

000016a4 <__floatsisf>:
    16a4:	97 fb       	bst	r25, 7
    16a6:	3e f4       	brtc	.+14     	; 0x16b6 <__floatsisf+0x12>
    16a8:	90 95       	com	r25
    16aa:	80 95       	com	r24
    16ac:	70 95       	com	r23
    16ae:	61 95       	neg	r22
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	8f 4f       	sbci	r24, 0xFF	; 255
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	99 23       	and	r25, r25
    16b8:	a9 f0       	breq	.+42     	; 0x16e4 <__floatsisf+0x40>
    16ba:	f9 2f       	mov	r31, r25
    16bc:	96 e9       	ldi	r25, 0x96	; 150
    16be:	bb 27       	eor	r27, r27
    16c0:	93 95       	inc	r25
    16c2:	f6 95       	lsr	r31
    16c4:	87 95       	ror	r24
    16c6:	77 95       	ror	r23
    16c8:	67 95       	ror	r22
    16ca:	b7 95       	ror	r27
    16cc:	f1 11       	cpse	r31, r1
    16ce:	f8 cf       	rjmp	.-16     	; 0x16c0 <__floatsisf+0x1c>
    16d0:	fa f4       	brpl	.+62     	; 0x1710 <__floatsisf+0x6c>
    16d2:	bb 0f       	add	r27, r27
    16d4:	11 f4       	brne	.+4      	; 0x16da <__floatsisf+0x36>
    16d6:	60 ff       	sbrs	r22, 0
    16d8:	1b c0       	rjmp	.+54     	; 0x1710 <__floatsisf+0x6c>
    16da:	6f 5f       	subi	r22, 0xFF	; 255
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	16 c0       	rjmp	.+44     	; 0x1710 <__floatsisf+0x6c>
    16e4:	88 23       	and	r24, r24
    16e6:	11 f0       	breq	.+4      	; 0x16ec <__floatsisf+0x48>
    16e8:	96 e9       	ldi	r25, 0x96	; 150
    16ea:	11 c0       	rjmp	.+34     	; 0x170e <__floatsisf+0x6a>
    16ec:	77 23       	and	r23, r23
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <__floatsisf+0x54>
    16f0:	9e e8       	ldi	r25, 0x8E	; 142
    16f2:	87 2f       	mov	r24, r23
    16f4:	76 2f       	mov	r23, r22
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <__floatsisf+0x5e>
    16f8:	66 23       	and	r22, r22
    16fa:	71 f0       	breq	.+28     	; 0x1718 <__floatsisf+0x74>
    16fc:	96 e8       	ldi	r25, 0x86	; 134
    16fe:	86 2f       	mov	r24, r22
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	2a f0       	brmi	.+10     	; 0x1710 <__floatsisf+0x6c>
    1706:	9a 95       	dec	r25
    1708:	66 0f       	add	r22, r22
    170a:	77 1f       	adc	r23, r23
    170c:	88 1f       	adc	r24, r24
    170e:	da f7       	brpl	.-10     	; 0x1706 <__floatsisf+0x62>
    1710:	88 0f       	add	r24, r24
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	97 f9       	bld	r25, 7
    1718:	08 95       	ret

0000171a <__fp_cmp>:
    171a:	99 0f       	add	r25, r25
    171c:	00 08       	sbc	r0, r0
    171e:	55 0f       	add	r21, r21
    1720:	aa 0b       	sbc	r26, r26
    1722:	e0 e8       	ldi	r30, 0x80	; 128
    1724:	fe ef       	ldi	r31, 0xFE	; 254
    1726:	16 16       	cp	r1, r22
    1728:	17 06       	cpc	r1, r23
    172a:	e8 07       	cpc	r30, r24
    172c:	f9 07       	cpc	r31, r25
    172e:	c0 f0       	brcs	.+48     	; 0x1760 <__fp_cmp+0x46>
    1730:	12 16       	cp	r1, r18
    1732:	13 06       	cpc	r1, r19
    1734:	e4 07       	cpc	r30, r20
    1736:	f5 07       	cpc	r31, r21
    1738:	98 f0       	brcs	.+38     	; 0x1760 <__fp_cmp+0x46>
    173a:	62 1b       	sub	r22, r18
    173c:	73 0b       	sbc	r23, r19
    173e:	84 0b       	sbc	r24, r20
    1740:	95 0b       	sbc	r25, r21
    1742:	39 f4       	brne	.+14     	; 0x1752 <__fp_cmp+0x38>
    1744:	0a 26       	eor	r0, r26
    1746:	61 f0       	breq	.+24     	; 0x1760 <__fp_cmp+0x46>
    1748:	23 2b       	or	r18, r19
    174a:	24 2b       	or	r18, r20
    174c:	25 2b       	or	r18, r21
    174e:	21 f4       	brne	.+8      	; 0x1758 <__fp_cmp+0x3e>
    1750:	08 95       	ret
    1752:	0a 26       	eor	r0, r26
    1754:	09 f4       	brne	.+2      	; 0x1758 <__fp_cmp+0x3e>
    1756:	a1 40       	sbci	r26, 0x01	; 1
    1758:	a6 95       	lsr	r26
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	81 1d       	adc	r24, r1
    175e:	81 1d       	adc	r24, r1
    1760:	08 95       	ret

00001762 <__fp_inf>:
    1762:	97 f9       	bld	r25, 7
    1764:	9f 67       	ori	r25, 0x7F	; 127
    1766:	80 e8       	ldi	r24, 0x80	; 128
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	08 95       	ret

0000176e <__fp_nan>:
    176e:	9f ef       	ldi	r25, 0xFF	; 255
    1770:	80 ec       	ldi	r24, 0xC0	; 192
    1772:	08 95       	ret

00001774 <__fp_pscA>:
    1774:	00 24       	eor	r0, r0
    1776:	0a 94       	dec	r0
    1778:	16 16       	cp	r1, r22
    177a:	17 06       	cpc	r1, r23
    177c:	18 06       	cpc	r1, r24
    177e:	09 06       	cpc	r0, r25
    1780:	08 95       	ret

00001782 <__fp_pscB>:
    1782:	00 24       	eor	r0, r0
    1784:	0a 94       	dec	r0
    1786:	12 16       	cp	r1, r18
    1788:	13 06       	cpc	r1, r19
    178a:	14 06       	cpc	r1, r20
    178c:	05 06       	cpc	r0, r21
    178e:	08 95       	ret

00001790 <__fp_round>:
    1790:	09 2e       	mov	r0, r25
    1792:	03 94       	inc	r0
    1794:	00 0c       	add	r0, r0
    1796:	11 f4       	brne	.+4      	; 0x179c <__fp_round+0xc>
    1798:	88 23       	and	r24, r24
    179a:	52 f0       	brmi	.+20     	; 0x17b0 <__fp_round+0x20>
    179c:	bb 0f       	add	r27, r27
    179e:	40 f4       	brcc	.+16     	; 0x17b0 <__fp_round+0x20>
    17a0:	bf 2b       	or	r27, r31
    17a2:	11 f4       	brne	.+4      	; 0x17a8 <__fp_round+0x18>
    17a4:	60 ff       	sbrs	r22, 0
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <__fp_round+0x20>
    17a8:	6f 5f       	subi	r22, 0xFF	; 255
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	08 95       	ret

000017b2 <__fp_split3>:
    17b2:	57 fd       	sbrc	r21, 7
    17b4:	90 58       	subi	r25, 0x80	; 128
    17b6:	44 0f       	add	r20, r20
    17b8:	55 1f       	adc	r21, r21
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <__fp_splitA+0x10>
    17bc:	5f 3f       	cpi	r21, 0xFF	; 255
    17be:	71 f0       	breq	.+28     	; 0x17dc <__fp_splitA+0x1a>
    17c0:	47 95       	ror	r20

000017c2 <__fp_splitA>:
    17c2:	88 0f       	add	r24, r24
    17c4:	97 fb       	bst	r25, 7
    17c6:	99 1f       	adc	r25, r25
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <__fp_splitA+0x20>
    17ca:	9f 3f       	cpi	r25, 0xFF	; 255
    17cc:	79 f0       	breq	.+30     	; 0x17ec <__fp_splitA+0x2a>
    17ce:	87 95       	ror	r24
    17d0:	08 95       	ret
    17d2:	12 16       	cp	r1, r18
    17d4:	13 06       	cpc	r1, r19
    17d6:	14 06       	cpc	r1, r20
    17d8:	55 1f       	adc	r21, r21
    17da:	f2 cf       	rjmp	.-28     	; 0x17c0 <__fp_split3+0xe>
    17dc:	46 95       	lsr	r20
    17de:	f1 df       	rcall	.-30     	; 0x17c2 <__fp_splitA>
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <__fp_splitA+0x30>
    17e2:	16 16       	cp	r1, r22
    17e4:	17 06       	cpc	r1, r23
    17e6:	18 06       	cpc	r1, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	f1 cf       	rjmp	.-30     	; 0x17ce <__fp_splitA+0xc>
    17ec:	86 95       	lsr	r24
    17ee:	71 05       	cpc	r23, r1
    17f0:	61 05       	cpc	r22, r1
    17f2:	08 94       	sec
    17f4:	08 95       	ret

000017f6 <__fp_zero>:
    17f6:	e8 94       	clt

000017f8 <__fp_szero>:
    17f8:	bb 27       	eor	r27, r27
    17fa:	66 27       	eor	r22, r22
    17fc:	77 27       	eor	r23, r23
    17fe:	cb 01       	movw	r24, r22
    1800:	97 f9       	bld	r25, 7
    1802:	08 95       	ret

00001804 <__gesf2>:
    1804:	0e 94 8d 0b 	call	0x171a	; 0x171a <__fp_cmp>
    1808:	08 f4       	brcc	.+2      	; 0x180c <__gesf2+0x8>
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	08 95       	ret

0000180e <__mulsf3>:
    180e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__mulsf3x>
    1812:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_round>
    1816:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_pscA>
    181a:	38 f0       	brcs	.+14     	; 0x182a <__mulsf3+0x1c>
    181c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_pscB>
    1820:	20 f0       	brcs	.+8      	; 0x182a <__mulsf3+0x1c>
    1822:	95 23       	and	r25, r21
    1824:	11 f0       	breq	.+4      	; 0x182a <__mulsf3+0x1c>
    1826:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_inf>
    182a:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__fp_nan>
    182e:	11 24       	eor	r1, r1
    1830:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_szero>

00001834 <__mulsf3x>:
    1834:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__fp_split3>
    1838:	70 f3       	brcs	.-36     	; 0x1816 <__mulsf3+0x8>

0000183a <__mulsf3_pse>:
    183a:	95 9f       	mul	r25, r21
    183c:	c1 f3       	breq	.-16     	; 0x182e <__mulsf3+0x20>
    183e:	95 0f       	add	r25, r21
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	55 1f       	adc	r21, r21
    1844:	62 9f       	mul	r22, r18
    1846:	f0 01       	movw	r30, r0
    1848:	72 9f       	mul	r23, r18
    184a:	bb 27       	eor	r27, r27
    184c:	f0 0d       	add	r31, r0
    184e:	b1 1d       	adc	r27, r1
    1850:	63 9f       	mul	r22, r19
    1852:	aa 27       	eor	r26, r26
    1854:	f0 0d       	add	r31, r0
    1856:	b1 1d       	adc	r27, r1
    1858:	aa 1f       	adc	r26, r26
    185a:	64 9f       	mul	r22, r20
    185c:	66 27       	eor	r22, r22
    185e:	b0 0d       	add	r27, r0
    1860:	a1 1d       	adc	r26, r1
    1862:	66 1f       	adc	r22, r22
    1864:	82 9f       	mul	r24, r18
    1866:	22 27       	eor	r18, r18
    1868:	b0 0d       	add	r27, r0
    186a:	a1 1d       	adc	r26, r1
    186c:	62 1f       	adc	r22, r18
    186e:	73 9f       	mul	r23, r19
    1870:	b0 0d       	add	r27, r0
    1872:	a1 1d       	adc	r26, r1
    1874:	62 1f       	adc	r22, r18
    1876:	83 9f       	mul	r24, r19
    1878:	a0 0d       	add	r26, r0
    187a:	61 1d       	adc	r22, r1
    187c:	22 1f       	adc	r18, r18
    187e:	74 9f       	mul	r23, r20
    1880:	33 27       	eor	r19, r19
    1882:	a0 0d       	add	r26, r0
    1884:	61 1d       	adc	r22, r1
    1886:	23 1f       	adc	r18, r19
    1888:	84 9f       	mul	r24, r20
    188a:	60 0d       	add	r22, r0
    188c:	21 1d       	adc	r18, r1
    188e:	82 2f       	mov	r24, r18
    1890:	76 2f       	mov	r23, r22
    1892:	6a 2f       	mov	r22, r26
    1894:	11 24       	eor	r1, r1
    1896:	9f 57       	subi	r25, 0x7F	; 127
    1898:	50 40       	sbci	r21, 0x00	; 0
    189a:	9a f0       	brmi	.+38     	; 0x18c2 <__mulsf3_pse+0x88>
    189c:	f1 f0       	breq	.+60     	; 0x18da <__mulsf3_pse+0xa0>
    189e:	88 23       	and	r24, r24
    18a0:	4a f0       	brmi	.+18     	; 0x18b4 <__mulsf3_pse+0x7a>
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	bb 1f       	adc	r27, r27
    18a8:	66 1f       	adc	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	91 50       	subi	r25, 0x01	; 1
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	a9 f7       	brne	.-22     	; 0x189e <__mulsf3_pse+0x64>
    18b4:	9e 3f       	cpi	r25, 0xFE	; 254
    18b6:	51 05       	cpc	r21, r1
    18b8:	80 f0       	brcs	.+32     	; 0x18da <__mulsf3_pse+0xa0>
    18ba:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_inf>
    18be:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_szero>
    18c2:	5f 3f       	cpi	r21, 0xFF	; 255
    18c4:	e4 f3       	brlt	.-8      	; 0x18be <__mulsf3_pse+0x84>
    18c6:	98 3e       	cpi	r25, 0xE8	; 232
    18c8:	d4 f3       	brlt	.-12     	; 0x18be <__mulsf3_pse+0x84>
    18ca:	86 95       	lsr	r24
    18cc:	77 95       	ror	r23
    18ce:	67 95       	ror	r22
    18d0:	b7 95       	ror	r27
    18d2:	f7 95       	ror	r31
    18d4:	e7 95       	ror	r30
    18d6:	9f 5f       	subi	r25, 0xFF	; 255
    18d8:	c1 f7       	brne	.-16     	; 0x18ca <__mulsf3_pse+0x90>
    18da:	fe 2b       	or	r31, r30
    18dc:	88 0f       	add	r24, r24
    18de:	91 1d       	adc	r25, r1
    18e0:	96 95       	lsr	r25
    18e2:	87 95       	ror	r24
    18e4:	97 f9       	bld	r25, 7
    18e6:	08 95       	ret

000018e8 <__udivmodhi4>:
    18e8:	aa 1b       	sub	r26, r26
    18ea:	bb 1b       	sub	r27, r27
    18ec:	51 e1       	ldi	r21, 0x11	; 17
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <__udivmodhi4_ep>

000018f0 <__udivmodhi4_loop>:
    18f0:	aa 1f       	adc	r26, r26
    18f2:	bb 1f       	adc	r27, r27
    18f4:	a6 17       	cp	r26, r22
    18f6:	b7 07       	cpc	r27, r23
    18f8:	10 f0       	brcs	.+4      	; 0x18fe <__udivmodhi4_ep>
    18fa:	a6 1b       	sub	r26, r22
    18fc:	b7 0b       	sbc	r27, r23

000018fe <__udivmodhi4_ep>:
    18fe:	88 1f       	adc	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	5a 95       	dec	r21
    1904:	a9 f7       	brne	.-22     	; 0x18f0 <__udivmodhi4_loop>
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	08 95       	ret

00001910 <__divmodhi4>:
    1910:	97 fb       	bst	r25, 7
    1912:	07 2e       	mov	r0, r23
    1914:	16 f4       	brtc	.+4      	; 0x191a <__divmodhi4+0xa>
    1916:	00 94       	com	r0
    1918:	07 d0       	rcall	.+14     	; 0x1928 <__divmodhi4_neg1>
    191a:	77 fd       	sbrc	r23, 7
    191c:	09 d0       	rcall	.+18     	; 0x1930 <__divmodhi4_neg2>
    191e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__udivmodhi4>
    1922:	07 fc       	sbrc	r0, 7
    1924:	05 d0       	rcall	.+10     	; 0x1930 <__divmodhi4_neg2>
    1926:	3e f4       	brtc	.+14     	; 0x1936 <__divmodhi4_exit>

00001928 <__divmodhi4_neg1>:
    1928:	90 95       	com	r25
    192a:	81 95       	neg	r24
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	08 95       	ret

00001930 <__divmodhi4_neg2>:
    1930:	70 95       	com	r23
    1932:	61 95       	neg	r22
    1934:	7f 4f       	sbci	r23, 0xFF	; 255

00001936 <__divmodhi4_exit>:
    1936:	08 95       	ret

00001938 <__umulhisi3>:
    1938:	a2 9f       	mul	r26, r18
    193a:	b0 01       	movw	r22, r0
    193c:	b3 9f       	mul	r27, r19
    193e:	c0 01       	movw	r24, r0
    1940:	a3 9f       	mul	r26, r19
    1942:	70 0d       	add	r23, r0
    1944:	81 1d       	adc	r24, r1
    1946:	11 24       	eor	r1, r1
    1948:	91 1d       	adc	r25, r1
    194a:	b2 9f       	mul	r27, r18
    194c:	70 0d       	add	r23, r0
    194e:	81 1d       	adc	r24, r1
    1950:	11 24       	eor	r1, r1
    1952:	91 1d       	adc	r25, r1
    1954:	08 95       	ret

00001956 <_exit>:
    1956:	f8 94       	cli

00001958 <__stop_program>:
    1958:	ff cf       	rjmp	.-2      	; 0x1958 <__stop_program>
