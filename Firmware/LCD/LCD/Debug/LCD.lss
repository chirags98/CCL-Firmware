
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  000019f0  00001a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800184  00800184  00001b08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7f  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0b  00000000  00000000  00003c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010dc  00000000  00000000  00004992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00005a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000640  00000000  00000000  00005f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a98  00000000  00000000  00006570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ef       	ldi	r30, 0xF0	; 240
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 38       	cpi	r26, 0x84	; 132
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e8       	ldi	r26, 0x84	; 132
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3a       	cpi	r26, 0xAA	; 170
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 cb 09 	call	0x1396	; 0x1396 <main>
      9e:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	d8 2e       	mov	r13, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     104:	06 2f       	mov	r16, r22
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	10 16       	cp	r1, r16
     10a:	11 06       	cpc	r1, r17
     10c:	2c f5       	brge	.+74     	; 0x158 <avg_read_adc_channel+0x6c>
     10e:	c1 e0       	ldi	r28, 0x01	; 1
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	81 2c       	mov	r8, r1
     114:	91 2c       	mov	r9, r1
     116:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
     118:	e8 2e       	mov	r14, r24
     11a:	f1 2c       	mov	r15, r1
     11c:	c7 01       	movw	r24, r14
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	9c 01       	movw	r18, r24
     124:	2c 55       	subi	r18, 0x5C	; 92
     126:	3e 4f       	sbci	r19, 0xFE	; 254
     128:	79 01       	movw	r14, r18
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	8d 2d       	mov	r24, r13
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel];
     130:	f7 01       	movw	r30, r14
     132:	60 81       	ld	r22, Z
     134:	71 81       	ldd	r23, Z+1	; 0x01
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__floatunsisf>
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
     142:	c5 01       	movw	r24, r10
     144:	b4 01       	movw	r22, r8
     146:	0e 94 82 0a 	call	0x1504	; 0x1504 <__addsf3>
     14a:	4b 01       	movw	r8, r22
     14c:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     14e:	21 96       	adiw	r28, 0x01	; 1
     150:	0c 17       	cp	r16, r28
     152:	1d 07       	cpc	r17, r29
     154:	54 f7       	brge	.-44     	; 0x12a <avg_read_adc_channel+0x3e>
     156:	03 c0       	rjmp	.+6      	; 0x15e <avg_read_adc_channel+0x72>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     158:	81 2c       	mov	r8, r1
     15a:	91 2c       	mov	r9, r1
     15c:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
	}
	
	adc_val[channel] = val/i;
     15e:	cd 2d       	mov	r28, r13
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	b8 01       	movw	r22, r16
     164:	11 0f       	add	r17, r17
     166:	88 0b       	sbc	r24, r24
     168:	99 0b       	sbc	r25, r25
     16a:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     16e:	9b 01       	movw	r18, r22
     170:	ac 01       	movw	r20, r24
     172:	c5 01       	movw	r24, r10
     174:	b4 01       	movw	r22, r8
     176:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__divsf3>
     17a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__fixunssfsi>
     17e:	cc 0f       	add	r28, r28
     180:	dd 1f       	adc	r29, r29
     182:	cc 55       	subi	r28, 0x5C	; 92
     184:	de 4f       	sbci	r29, 0xFE	; 254
     186:	79 83       	std	Y+1, r23	; 0x01
     188:	68 83       	st	Y, r22
	
	return adc_val[channel];
     18a:	88 81       	ld	r24, Y
     18c:	99 81       	ldd	r25, Y+1	; 0x01
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	bf 90       	pop	r11
     19e:	af 90       	pop	r10
     1a0:	9f 90       	pop	r9
     1a2:	8f 90       	pop	r8
     1a4:	08 95       	ret

000001a6 <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	0f 92       	push	r0
     1ae:	11 24       	eor	r1, r1
     1b0:	2f 93       	push	r18
     1b2:	3f 93       	push	r19
     1b4:	4f 93       	push	r20
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	ef 93       	push	r30
     1bc:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1be:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1c2:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	adc_val[channel] = 0x03 && high;
     1ca:	ef 70       	andi	r30, 0x0F	; 15
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	81 11       	cpse	r24, r1
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_21+0x34>
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	ee 0f       	add	r30, r30
     1dc:	ff 1f       	adc	r31, r31
     1de:	ec 55       	subi	r30, 0x5C	; 92
     1e0:	fe 4f       	sbci	r31, 0xFE	; 254
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1e6:	20 81       	ld	r18, Z
     1e8:	31 81       	ldd	r19, Z+1	; 0x01
     1ea:	32 2f       	mov	r19, r18
     1ec:	22 27       	eor	r18, r18
     1ee:	31 83       	std	Z+1, r19	; 0x01
     1f0:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	98 2f       	mov	r25, r24
     1f6:	88 27       	eor	r24, r24
     1f8:	84 0f       	add	r24, r20
     1fa:	91 1d       	adc	r25, r1
     1fc:	91 83       	std	Z+1, r25	; 0x01
     1fe:	80 83       	st	Z, r24
     200:	ff 91       	pop	r31
     202:	ef 91       	pop	r30
     204:	9f 91       	pop	r25
     206:	8f 91       	pop	r24
     208:	4f 91       	pop	r20
     20a:	3f 91       	pop	r19
     20c:	2f 91       	pop	r18
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <update_current>:
}

void print_mos_power(char row, char col)
{
	lcd_print4(row, col, power_mos, "mW", "W");
}
     218:	65 e0       	ldi	r22, 0x05	; 5
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     220:	bc 01       	movw	r22, r24
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__floatunsisf>
     22a:	27 ee       	ldi	r18, 0xE7	; 231
     22c:	3b ef       	ldi	r19, 0xFB	; 251
     22e:	49 ef       	ldi	r20, 0xF9	; 249
     230:	5f e3       	ldi	r21, 0x3F	; 63
     232:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     236:	2a e9       	ldi	r18, 0x9A	; 154
     238:	39 e9       	ldi	r19, 0x99	; 153
     23a:	49 e9       	ldi	r20, 0x99	; 153
     23c:	5e e3       	ldi	r21, 0x3E	; 62
     23e:	0e 94 82 0a 	call	0x1504	; 0x1504 <__addsf3>
     242:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <offset>
     246:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <offset+0x1>
     24a:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <offset+0x2>
     24e:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <offset+0x3>
     252:	0e 94 82 0a 	call	0x1504	; 0x1504 <__addsf3>
     256:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <current>
     25a:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <current+0x1>
     25e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <current+0x2>
     262:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <current+0x3>
     266:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <current_mos>
     26a:	70 93 90 01 	sts	0x0190, r23	; 0x800190 <current_mos+0x1>
     26e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <current_mos+0x2>
     272:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <current_mos+0x3>
     276:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <fan_status>
     27a:	21 30       	cpi	r18, 0x01	; 1
     27c:	a1 f4       	brne	.+40     	; 0x2a6 <update_current+0x8e>
     27e:	9b 01       	movw	r18, r22
     280:	ac 01       	movw	r20, r24
     282:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <fan_offset>
     286:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <fan_offset+0x1>
     28a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <fan_offset+0x2>
     28e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <fan_offset+0x3>
     292:	0e 94 82 0a 	call	0x1504	; 0x1504 <__addsf3>
     296:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <current>
     29a:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <current+0x1>
     29e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <current+0x2>
     2a2:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <current+0x3>
     2a6:	08 95       	ret

000002a8 <update_voltage>:
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	65 e0       	ldi	r22, 0x05	; 5
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     2b8:	bc 01       	movw	r22, r24
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__floatunsisf>
     2c2:	2c ee       	ldi	r18, 0xEC	; 236
     2c4:	31 e5       	ldi	r19, 0x51	; 81
     2c6:	4a ee       	ldi	r20, 0xEA	; 234
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     2ce:	6b 01       	movw	r12, r22
     2d0:	7c 01       	movw	r14, r24
     2d2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__fixsfsi>
     2d6:	cb 01       	movw	r24, r22
     2d8:	6a e0       	ldi	r22, 0x0A	; 10
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__divmodhi4>
     2e0:	bc 01       	movw	r22, r24
     2e2:	99 0f       	add	r25, r25
     2e4:	88 0b       	sbc	r24, r24
     2e6:	99 0b       	sbc	r25, r25
     2e8:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     2ec:	9b 01       	movw	r18, r22
     2ee:	ac 01       	movw	r20, r24
     2f0:	c7 01       	movw	r24, r14
     2f2:	b6 01       	movw	r22, r12
     2f4:	0e 94 81 0a 	call	0x1502	; 0x1502 <__subsf3>
     2f8:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <voltage>
     2fc:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <voltage+0x1>
     300:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <voltage+0x2>
     304:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <voltage+0x3>
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	08 95       	ret

00000312 <update_power>:
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	c0 90 9b 01 	lds	r12, 0x019B	; 0x80019b <current>
     32a:	d0 90 9c 01 	lds	r13, 0x019C	; 0x80019c <current+0x1>
     32e:	e0 90 9d 01 	lds	r14, 0x019D	; 0x80019d <current+0x2>
     332:	f0 90 9e 01 	lds	r15, 0x019E	; 0x80019e <current+0x3>
     336:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <voltage>
     33a:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <voltage+0x1>
     33e:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <voltage+0x2>
     342:	50 91 a2 01 	lds	r21, 0x01A2	; 0x8001a2 <voltage+0x3>
     346:	c7 01       	movw	r24, r14
     348:	b6 01       	movw	r22, r12
     34a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	4a e7       	ldi	r20, 0x7A	; 122
     354:	54 e4       	ldi	r21, 0x44	; 68
     356:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__divsf3>
     35a:	4b 01       	movw	r8, r22
     35c:	5c 01       	movw	r10, r24
     35e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__fixsfsi>
     362:	ca e0       	ldi	r28, 0x0A	; 10
     364:	d0 e0       	ldi	r29, 0x00	; 0
     366:	cb 01       	movw	r24, r22
     368:	be 01       	movw	r22, r28
     36a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__divmodhi4>
     36e:	bc 01       	movw	r22, r24
     370:	99 0f       	add	r25, r25
     372:	88 0b       	sbc	r24, r24
     374:	99 0b       	sbc	r25, r25
     376:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     37a:	9b 01       	movw	r18, r22
     37c:	ac 01       	movw	r20, r24
     37e:	c5 01       	movw	r24, r10
     380:	b4 01       	movw	r22, r8
     382:	0e 94 81 0a 	call	0x1502	; 0x1502 <__subsf3>
     386:	4b 01       	movw	r8, r22
     388:	5c 01       	movw	r10, r24
     38a:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <power>
     38e:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <power+0x1>
     392:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <power+0x2>
     396:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <power+0x3>
     39a:	a7 01       	movw	r20, r14
     39c:	96 01       	movw	r18, r12
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	4a e7       	ldi	r20, 0x7A	; 122
     3ac:	54 e4       	ldi	r21, 0x44	; 68
     3ae:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__divsf3>
     3b2:	9b 01       	movw	r18, r22
     3b4:	ac 01       	movw	r20, r24
     3b6:	c5 01       	movw	r24, r10
     3b8:	b4 01       	movw	r22, r8
     3ba:	0e 94 81 0a 	call	0x1502	; 0x1502 <__subsf3>
     3be:	6b 01       	movw	r12, r22
     3c0:	7c 01       	movw	r14, r24
     3c2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__fixsfsi>
     3c6:	cb 01       	movw	r24, r22
     3c8:	be 01       	movw	r22, r28
     3ca:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__divmodhi4>
     3ce:	bc 01       	movw	r22, r24
     3d0:	99 0f       	add	r25, r25
     3d2:	88 0b       	sbc	r24, r24
     3d4:	99 0b       	sbc	r25, r25
     3d6:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	c7 01       	movw	r24, r14
     3e0:	b6 01       	movw	r22, r12
     3e2:	0e 94 81 0a 	call	0x1502	; 0x1502 <__subsf3>
     3e6:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <power_mos>
     3ea:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <power_mos+0x1>
     3ee:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <power_mos+0x2>
     3f2:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <power_mos+0x3>
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	bf 90       	pop	r11
     404:	af 90       	pop	r10
     406:	9f 90       	pop	r9
     408:	8f 90       	pop	r8
     40a:	08 95       	ret

0000040c <update_gate_voltage>:
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	6a e0       	ldi	r22, 0x0A	; 10
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     41c:	bc 01       	movw	r22, r24
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__floatunsisf>
     426:	2a e0       	ldi	r18, 0x0A	; 10
     428:	37 ed       	ldi	r19, 0xD7	; 215
     42a:	4b e2       	ldi	r20, 0x2B	; 43
     42c:	51 e4       	ldi	r21, 0x41	; 65
     42e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     432:	6b 01       	movw	r12, r22
     434:	7c 01       	movw	r14, r24
     436:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__fixsfsi>
     43a:	cb 01       	movw	r24, r22
     43c:	6a e0       	ldi	r22, 0x0A	; 10
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__divmodhi4>
     444:	bc 01       	movw	r22, r24
     446:	99 0f       	add	r25, r25
     448:	88 0b       	sbc	r24, r24
     44a:	99 0b       	sbc	r25, r25
     44c:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     450:	9b 01       	movw	r18, r22
     452:	ac 01       	movw	r20, r24
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	0e 94 81 0a 	call	0x1502	; 0x1502 <__subsf3>
     45c:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <gate_voltage>
     460:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <gate_voltage+0x1>
     464:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <gate_voltage+0x2>
     468:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <gate_voltage+0x3>
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	df 90       	pop	r13
     472:	cf 90       	pop	r12
     474:	08 95       	ret

00000476 <print_current>:
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <current>
     482:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <current+0x1>
     486:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <current+0x2>
     48a:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <current+0x3>
     48e:	0f 2e       	mov	r0, r31
     490:	fd e0       	ldi	r31, 0x0D	; 13
     492:	ef 2e       	mov	r14, r31
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	ff 2e       	mov	r15, r31
     498:	f0 2d       	mov	r31, r0
     49a:	0c e0       	ldi	r16, 0x0C	; 12
     49c:	11 e0       	ldi	r17, 0x01	; 1
     49e:	0e 94 15 09 	call	0x122a	; 0x122a <lcd_print4>
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	08 95       	ret

000004ac <print_voltage>:
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <voltage>
     4b8:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <voltage+0x1>
     4bc:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <voltage+0x2>
     4c0:	50 91 a2 01 	lds	r21, 0x01A2	; 0x8001a2 <voltage+0x3>
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f0 e1       	ldi	r31, 0x10	; 16
     4c8:	ef 2e       	mov	r14, r31
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	ff 2e       	mov	r15, r31
     4ce:	f0 2d       	mov	r31, r0
     4d0:	0f e0       	ldi	r16, 0x0F	; 15
     4d2:	11 e0       	ldi	r17, 0x01	; 1
     4d4:	0e 94 15 09 	call	0x122a	; 0x122a <lcd_print4>
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	08 95       	ret

000004e2 <print_power>:
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <power>
     4ee:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <power+0x1>
     4f2:	40 91 99 01 	lds	r20, 0x0199	; 0x800199 <power+0x2>
     4f6:	50 91 9a 01 	lds	r21, 0x019A	; 0x80019a <power+0x3>
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f3 e1       	ldi	r31, 0x13	; 19
     4fe:	ef 2e       	mov	r14, r31
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	ff 2e       	mov	r15, r31
     504:	f0 2d       	mov	r31, r0
     506:	02 e1       	ldi	r16, 0x12	; 18
     508:	11 e0       	ldi	r17, 0x01	; 1
     50a:	0e 94 15 09 	call	0x122a	; 0x122a <lcd_print4>
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <print_fan_status>:

void print_fan_status(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
	static char val = 0;	//To create a schmitt trigger like mechanism for power, voltage and current.
	
	if (power_mos > fan_power_thresh)
     51c:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
     520:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
     524:	be 01       	movw	r22, r28
     526:	0d 2e       	mov	r0, r29
     528:	00 0c       	add	r0, r0
     52a:	88 0b       	sbc	r24, r24
     52c:	99 0b       	sbc	r25, r25
     52e:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     532:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <power_mos>
     536:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <power_mos+0x1>
     53a:	40 91 95 01 	lds	r20, 0x0195	; 0x800195 <power_mos+0x2>
     53e:	50 91 96 01 	lds	r21, 0x0196	; 0x800196 <power_mos+0x3>
     542:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__cmpsf2>
     546:	88 23       	and	r24, r24
     548:	bc f4       	brge	.+46     	; 0x578 <print_fan_status+0x60>
	{
		if (val == 0)	//If values are set at the nominal value decrease the values
     54a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <val.1850>
     54e:	81 11       	cpse	r24, r1
     550:	09 c0       	rjmp	.+18     	; 0x564 <print_fan_status+0x4c>
		{
			fan_power_thresh -= 500;
     552:	c4 5f       	subi	r28, 0xF4	; 244
     554:	d1 40       	sbci	r29, 0x01	; 1
     556:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     55a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			val = 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <val.1850>
		}
		
		lcd_string2(2,10, "Fan On ");
     564:	45 e1       	ldi	r20, 0x15	; 21
     566:	51 e0       	ldi	r21, 0x01	; 1
     568:	6a e0       	ldi	r22, 0x0A	; 10
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
		fan_status = 1;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <fan_status>
     576:	14 c0       	rjmp	.+40     	; 0x5a0 <print_fan_status+0x88>
	}
	
	else
	{
		if (val == 1)	//If levels during last check was more than threshold - reset threshold to nominal values
     578:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <val.1850>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	41 f4       	brne	.+16     	; 0x590 <print_fan_status+0x78>
		{
			fan_power_thresh += 500;
     580:	cc 50       	subi	r28, 0x0C	; 12
     582:	de 4f       	sbci	r29, 0xFE	; 254
     584:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     588:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			val = 0;
     58c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <val.1850>
		}
		
		lcd_string2(2,10, "Fan Off");
     590:	4d e1       	ldi	r20, 0x1D	; 29
     592:	51 e0       	ldi	r21, 0x01	; 1
     594:	6a e0       	ldi	r22, 0x0A	; 10
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
		fan_status = 0;
     59c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <fan_status>
	}	
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <check_thresholds>:

char check_thresholds()
{
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
	static char val = 0;	//To create a schmitt trigger like mechanism for power, voltage and current.
	
	//If less than threshold
	if (current_mos<current_thresh && voltage<v_thresh && power_mos<power_thresh)
     5b2:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <current_thresh>
     5b6:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <current_thresh+0x1>
     5ba:	be 01       	movw	r22, r28
     5bc:	0d 2e       	mov	r0, r29
     5be:	00 0c       	add	r0, r0
     5c0:	88 0b       	sbc	r24, r24
     5c2:	99 0b       	sbc	r25, r25
     5c4:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     5c8:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <current_mos>
     5cc:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <current_mos+0x1>
     5d0:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <current_mos+0x2>
     5d4:	50 91 92 01 	lds	r21, 0x0192	; 0x800192 <current_mos+0x3>
     5d8:	0e 94 4d 0c 	call	0x189a	; 0x189a <__gesf2>
     5dc:	18 16       	cp	r1, r24
     5de:	0c f0       	brlt	.+2      	; 0x5e2 <check_thresholds+0x3c>
     5e0:	4b c0       	rjmp	.+150    	; 0x678 <check_thresholds+0xd2>
     5e2:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <v_thresh>
     5e6:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <v_thresh+0x1>
     5ea:	b8 01       	movw	r22, r16
     5ec:	01 2e       	mov	r0, r17
     5ee:	00 0c       	add	r0, r0
     5f0:	88 0b       	sbc	r24, r24
     5f2:	99 0b       	sbc	r25, r25
     5f4:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     5f8:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <voltage>
     5fc:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <voltage+0x1>
     600:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <voltage+0x2>
     604:	50 91 a2 01 	lds	r21, 0x01A2	; 0x8001a2 <voltage+0x3>
     608:	0e 94 4d 0c 	call	0x189a	; 0x189a <__gesf2>
     60c:	18 16       	cp	r1, r24
     60e:	a4 f5       	brge	.+104    	; 0x678 <check_thresholds+0xd2>
     610:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <power_thresh>
     614:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <power_thresh+0x1>
     618:	b7 01       	movw	r22, r14
     61a:	0f 2c       	mov	r0, r15
     61c:	00 0c       	add	r0, r0
     61e:	88 0b       	sbc	r24, r24
     620:	99 0b       	sbc	r25, r25
     622:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     626:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <power_mos>
     62a:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <power_mos+0x1>
     62e:	40 91 95 01 	lds	r20, 0x0195	; 0x800195 <power_mos+0x2>
     632:	50 91 96 01 	lds	r21, 0x0196	; 0x800196 <power_mos+0x3>
     636:	0e 94 4d 0c 	call	0x189a	; 0x189a <__gesf2>
     63a:	18 16       	cp	r1, r24
     63c:	ec f4       	brge	.+58     	; 0x678 <check_thresholds+0xd2>
	{
		if (val == 1)	//If levels during last check was more than threshold - reset threshold to nominal values
     63e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	09 f0       	breq	.+2      	; 0x648 <check_thresholds+0xa2>
     646:	80 c0       	rjmp	.+256    	; 0x748 <check_thresholds+0x1a2>
		{
			power_thresh += 500;
     648:	8c e0       	ldi	r24, 0x0C	; 12
     64a:	e8 1a       	sub	r14, r24
     64c:	8e ef       	ldi	r24, 0xFE	; 254
     64e:	f8 0a       	sbc	r15, r24
     650:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <power_thresh+0x1>
     654:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <power_thresh>
			v_thresh += 500;
     658:	0c 50       	subi	r16, 0x0C	; 12
     65a:	1e 4f       	sbci	r17, 0xFE	; 254
     65c:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <v_thresh+0x1>
     660:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <v_thresh>
			current_thresh += 100;
     664:	cc 59       	subi	r28, 0x9C	; 156
     666:	df 4f       	sbci	r29, 0xFF	; 255
     668:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <current_thresh+0x1>
     66c:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <current_thresh>
			val = 0;	//Values have been reset
     670:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
		}
		
		return 0;	//All okay
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	6d c0       	rjmp	.+218    	; 0x752 <check_thresholds+0x1ac>
	}
	
	//If greater than threshold
	else
	{	
		if (val == 0)	//If values are set at the nominal value decrease the values
     678:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     67c:	81 11       	cpse	r24, r1
     67e:	1d c0       	rjmp	.+58     	; 0x6ba <check_thresholds+0x114>
		{
			power_thresh -= 500;
     680:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power_thresh>
     684:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power_thresh+0x1>
     688:	84 5f       	subi	r24, 0xF4	; 244
     68a:	91 40       	sbci	r25, 0x01	; 1
     68c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <power_thresh+0x1>
     690:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <power_thresh>
			v_thresh -= 500;
     694:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <v_thresh>
     698:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <v_thresh+0x1>
     69c:	84 5f       	subi	r24, 0xF4	; 244
     69e:	91 40       	sbci	r25, 0x01	; 1
     6a0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <v_thresh+0x1>
     6a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <v_thresh>
			current_thresh -= 100;
     6a8:	c4 56       	subi	r28, 0x64	; 100
     6aa:	d1 09       	sbc	r29, r1
     6ac:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <current_thresh+0x1>
     6b0:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <current_thresh>
			val = 1;	//Values have been decreased
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
		}
		
		if (power_mos>power_thresh)
     6ba:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <power_thresh>
     6be:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <power_thresh+0x1>
     6c2:	07 2e       	mov	r0, r23
     6c4:	00 0c       	add	r0, r0
     6c6:	88 0b       	sbc	r24, r24
     6c8:	99 0b       	sbc	r25, r25
     6ca:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     6ce:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <power_mos>
     6d2:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <power_mos+0x1>
     6d6:	40 91 95 01 	lds	r20, 0x0195	; 0x800195 <power_mos+0x2>
     6da:	50 91 96 01 	lds	r21, 0x0196	; 0x800196 <power_mos+0x3>
     6de:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__cmpsf2>
     6e2:	88 23       	and	r24, r24
     6e4:	9c f1       	brlt	.+102    	; 0x74c <check_thresholds+0x1a6>
			return 1;
	
		else if (voltage>v_thresh)
     6e6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <v_thresh>
     6ea:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <v_thresh+0x1>
     6ee:	07 2e       	mov	r0, r23
     6f0:	00 0c       	add	r0, r0
     6f2:	88 0b       	sbc	r24, r24
     6f4:	99 0b       	sbc	r25, r25
     6f6:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     6fa:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <voltage>
     6fe:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <voltage+0x1>
     702:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <voltage+0x2>
     706:	50 91 a2 01 	lds	r21, 0x01A2	; 0x8001a2 <voltage+0x3>
     70a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__cmpsf2>
     70e:	88 23       	and	r24, r24
     710:	fc f0       	brlt	.+62     	; 0x750 <check_thresholds+0x1aa>
			return 2;

		else if (current>current_thresh)	
     712:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <current_thresh>
     716:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <current_thresh+0x1>
     71a:	07 2e       	mov	r0, r23
     71c:	00 0c       	add	r0, r0
     71e:	88 0b       	sbc	r24, r24
     720:	99 0b       	sbc	r25, r25
     722:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     726:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <current>
     72a:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <current+0x1>
     72e:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <current+0x2>
     732:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <current+0x3>
     736:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__cmpsf2>
			return 3;
	
		else
			return 4;	//Error
     73a:	88 1f       	adc	r24, r24
     73c:	88 27       	eor	r24, r24
     73e:	88 1f       	adc	r24, r24
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	98 1b       	sub	r25, r24
     744:	89 2f       	mov	r24, r25
     746:	05 c0       	rjmp	.+10     	; 0x752 <check_thresholds+0x1ac>
			v_thresh += 500;
			current_thresh += 100;
			val = 0;	//Values have been reset
		}
		
		return 0;	//All okay
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	03 c0       	rjmp	.+6      	; 0x752 <check_thresholds+0x1ac>
			current_thresh -= 100;
			val = 1;	//Values have been decreased
		}
		
		if (power_mos>power_thresh)
			return 1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	01 c0       	rjmp	.+2      	; 0x752 <check_thresholds+0x1ac>
	
		else if (voltage>v_thresh)
			return 2;
     750:	82 e0       	ldi	r24, 0x02	; 2
			return 3;
	
		else
			return 4;	//Error
	}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	08 95       	ret

00000760 <Bit_Reverse>:
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     760:	98 2f       	mov	r25, r24
     762:	99 1f       	adc	r25, r25
     764:	99 27       	eor	r25, r25
     766:	99 1f       	adc	r25, r25
     768:	86 fd       	sbrc	r24, 6
     76a:	02 c0       	rjmp	.+4      	; 0x770 <Bit_Reverse+0x10>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	01 c0       	rjmp	.+2      	; 0x772 <Bit_Reverse+0x12>
     770:	22 e0       	ldi	r18, 0x02	; 2
     772:	92 2b       	or	r25, r18
     774:	85 fd       	sbrc	r24, 5
     776:	02 c0       	rjmp	.+4      	; 0x77c <Bit_Reverse+0x1c>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	01 c0       	rjmp	.+2      	; 0x77e <Bit_Reverse+0x1e>
     77c:	24 e0       	ldi	r18, 0x04	; 4
     77e:	92 2b       	or	r25, r18
     780:	84 fd       	sbrc	r24, 4
     782:	02 c0       	rjmp	.+4      	; 0x788 <Bit_Reverse+0x28>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	01 c0       	rjmp	.+2      	; 0x78a <Bit_Reverse+0x2a>
     788:	28 e0       	ldi	r18, 0x08	; 8
     78a:	92 2b       	or	r25, r18
     78c:	83 fd       	sbrc	r24, 3
     78e:	02 c0       	rjmp	.+4      	; 0x794 <Bit_Reverse+0x34>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	01 c0       	rjmp	.+2      	; 0x796 <Bit_Reverse+0x36>
     794:	20 e1       	ldi	r18, 0x10	; 16
     796:	92 2b       	or	r25, r18
     798:	82 fd       	sbrc	r24, 2
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <Bit_Reverse+0x40>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <Bit_Reverse+0x42>
     7a0:	20 e2       	ldi	r18, 0x20	; 32
     7a2:	92 2b       	or	r25, r18
     7a4:	81 fd       	sbrc	r24, 1
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <Bit_Reverse+0x4c>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <Bit_Reverse+0x4e>
     7ac:	20 e4       	ldi	r18, 0x40	; 64
     7ae:	92 2b       	or	r25, r18
     7b0:	80 fd       	sbrc	r24, 0
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <Bit_Reverse+0x58>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <Bit_Reverse+0x5a>
     7b8:	80 e8       	ldi	r24, 0x80	; 128
     7ba:	89 2b       	or	r24, r25
     7bc:	08 95       	ret

000007be <lcd_wr_command>:
     7be:	cf 93       	push	r28
     7c0:	c8 2f       	mov	r28, r24
     7c2:	80 7f       	andi	r24, 0xF0	; 240
     7c4:	0e 94 b0 03 	call	0x760	; 0x760 <Bit_Reverse>
     7c8:	88 0f       	add	r24, r24
     7ca:	88 0f       	add	r24, r24
     7cc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <temp.1773>
     7d0:	8b b1       	in	r24, 0x0b	; 11
     7d2:	83 7c       	andi	r24, 0xC3	; 195
     7d4:	8b b9       	out	0x0b, r24	; 11
     7d6:	9b b1       	in	r25, 0x0b	; 11
     7d8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <temp.1773>
     7dc:	89 2b       	or	r24, r25
     7de:	8b b9       	out	0x0b, r24	; 11
     7e0:	5f 98       	cbi	0x0b, 7	; 11
     7e2:	5e 9a       	sbi	0x0b, 6	; 11
     7e4:	8f e1       	ldi	r24, 0x1F	; 31
     7e6:	9e e4       	ldi	r25, 0x4E	; 78
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <lcd_wr_command+0x2a>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <lcd_wr_command+0x30>
     7ee:	00 00       	nop
     7f0:	5e 98       	cbi	0x0b, 6	; 11
     7f2:	8c 2f       	mov	r24, r28
     7f4:	82 95       	swap	r24
     7f6:	80 7f       	andi	r24, 0xF0	; 240
     7f8:	0e 94 b0 03 	call	0x760	; 0x760 <Bit_Reverse>
     7fc:	9b b1       	in	r25, 0x0b	; 11
     7fe:	93 7c       	andi	r25, 0xC3	; 195
     800:	9b b9       	out	0x0b, r25	; 11
     802:	9b b1       	in	r25, 0x0b	; 11
     804:	88 0f       	add	r24, r24
     806:	88 0f       	add	r24, r24
     808:	98 2b       	or	r25, r24
     80a:	9b b9       	out	0x0b, r25	; 11
     80c:	5f 98       	cbi	0x0b, 7	; 11
     80e:	5e 9a       	sbi	0x0b, 6	; 11
     810:	8f e1       	ldi	r24, 0x1F	; 31
     812:	9e e4       	ldi	r25, 0x4E	; 78
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <lcd_wr_command+0x56>
     818:	00 c0       	rjmp	.+0      	; 0x81a <lcd_wr_command+0x5c>
     81a:	00 00       	nop
     81c:	5e 98       	cbi	0x0b, 6	; 11
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <lcd_port_config>:
     822:	8a b1       	in	r24, 0x0a	; 10
     824:	8c 6f       	ori	r24, 0xFC	; 252
     826:	8a b9       	out	0x0a, r24	; 10
     828:	8b b1       	in	r24, 0x0b	; 11
     82a:	84 70       	andi	r24, 0x04	; 4
     82c:	8b b9       	out	0x0b, r24	; 11
     82e:	08 95       	ret

00000830 <lcd_wr_char>:
     830:	cf 93       	push	r28
     832:	c8 2f       	mov	r28, r24
     834:	80 7f       	andi	r24, 0xF0	; 240
     836:	0e 94 b0 03 	call	0x760	; 0x760 <Bit_Reverse>
     83a:	9b b1       	in	r25, 0x0b	; 11
     83c:	93 7c       	andi	r25, 0xC3	; 195
     83e:	9b b9       	out	0x0b, r25	; 11
     840:	9b b1       	in	r25, 0x0b	; 11
     842:	88 0f       	add	r24, r24
     844:	88 0f       	add	r24, r24
     846:	98 2b       	or	r25, r24
     848:	9b b9       	out	0x0b, r25	; 11
     84a:	5f 9a       	sbi	0x0b, 7	; 11
     84c:	5e 9a       	sbi	0x0b, 6	; 11
     84e:	8f e1       	ldi	r24, 0x1F	; 31
     850:	9e e4       	ldi	r25, 0x4E	; 78
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <lcd_wr_char+0x22>
     856:	00 c0       	rjmp	.+0      	; 0x858 <lcd_wr_char+0x28>
     858:	00 00       	nop
     85a:	5e 98       	cbi	0x0b, 6	; 11
     85c:	8c 2f       	mov	r24, r28
     85e:	82 95       	swap	r24
     860:	80 7f       	andi	r24, 0xF0	; 240
     862:	0e 94 b0 03 	call	0x760	; 0x760 <Bit_Reverse>
     866:	9b b1       	in	r25, 0x0b	; 11
     868:	93 7c       	andi	r25, 0xC3	; 195
     86a:	9b b9       	out	0x0b, r25	; 11
     86c:	9b b1       	in	r25, 0x0b	; 11
     86e:	88 0f       	add	r24, r24
     870:	88 0f       	add	r24, r24
     872:	98 2b       	or	r25, r24
     874:	9b b9       	out	0x0b, r25	; 11
     876:	5f 9a       	sbi	0x0b, 7	; 11
     878:	5e 9a       	sbi	0x0b, 6	; 11
     87a:	8f e1       	ldi	r24, 0x1F	; 31
     87c:	9e e4       	ldi	r25, 0x4E	; 78
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <lcd_wr_char+0x4e>
     882:	00 c0       	rjmp	.+0      	; 0x884 <lcd_wr_char+0x54>
     884:	00 00       	nop
     886:	5e 98       	cbi	0x0b, 6	; 11
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <lcd_home>:
     88c:	80 e8       	ldi	r24, 0x80	; 128
     88e:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
     892:	08 95       	ret

00000894 <lcd_string>:
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	ec 01       	movw	r28, r24
     89a:	88 81       	ld	r24, Y
     89c:	88 23       	and	r24, r24
     89e:	31 f0       	breq	.+12     	; 0x8ac <lcd_string+0x18>
     8a0:	21 96       	adiw	r28, 0x01	; 1
     8a2:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
     8a6:	89 91       	ld	r24, Y+
     8a8:	81 11       	cpse	r24, r1
     8aa:	fb cf       	rjmp	.-10     	; 0x8a2 <lcd_string+0xe>
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <lcd_cursor>:
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	19 f0       	breq	.+6      	; 0x8bc <lcd_cursor+0xa>
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	31 f0       	breq	.+12     	; 0x8c6 <lcd_cursor+0x14>
     8ba:	08 95       	ret
     8bc:	8f e7       	ldi	r24, 0x7F	; 127
     8be:	86 0f       	add	r24, r22
     8c0:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
     8c4:	08 95       	ret
     8c6:	8f eb       	ldi	r24, 0xBF	; 191
     8c8:	86 0f       	add	r24, r22
     8ca:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
     8ce:	08 95       	ret

000008d0 <lcd_string2>:
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ea 01       	movw	r28, r20
     8d6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <lcd_cursor>
     8da:	88 81       	ld	r24, Y
     8dc:	88 23       	and	r24, r24
     8de:	31 f0       	breq	.+12     	; 0x8ec <lcd_string2+0x1c>
     8e0:	21 96       	adiw	r28, 0x01	; 1
     8e2:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
     8e6:	89 91       	ld	r24, Y+
     8e8:	81 11       	cpse	r24, r1
     8ea:	fb cf       	rjmp	.-10     	; 0x8e2 <lcd_string2+0x12>
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <lcd_start>:
     8f2:	8f e9       	ldi	r24, 0x9F	; 159
     8f4:	9f e0       	ldi	r25, 0x0F	; 15
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <lcd_start+0x4>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <lcd_start+0xa>
     8fc:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8fe:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
     900:	80 e3       	ldi	r24, 0x30	; 48
     902:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     904:	5e 9a       	sbi	0x0b, 6	; 11
     906:	ef e1       	ldi	r30, 0x1F	; 31
     908:	fe e4       	ldi	r31, 0x4E	; 78
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <__stack+0xb>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0x11>
     910:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     912:	5e 98       	cbi	0x0b, 6	; 11
     914:	ef e9       	ldi	r30, 0x9F	; 159
     916:	ff e0       	ldi	r31, 0x0F	; 15
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0x19>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0x1f>
     91e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     920:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     922:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     924:	5e 9a       	sbi	0x0b, 6	; 11
     926:	ef e1       	ldi	r30, 0x1F	; 31
     928:	fe e4       	ldi	r31, 0x4E	; 78
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <__stack+0x2b>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0x31>
     930:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     932:	5e 98       	cbi	0x0b, 6	; 11
     934:	ef e9       	ldi	r30, 0x9F	; 159
     936:	ff e0       	ldi	r31, 0x0F	; 15
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <__stack+0x39>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0x3f>
     93e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     940:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
     942:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     944:	5e 9a       	sbi	0x0b, 6	; 11
     946:	8f e1       	ldi	r24, 0x1F	; 31
     948:	9e e4       	ldi	r25, 0x4E	; 78
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <__stack+0x4b>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <__stack+0x51>
     950:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     952:	5e 98       	cbi	0x0b, 6	; 11
     954:	ef e9       	ldi	r30, 0x9F	; 159
     956:	ff e0       	ldi	r31, 0x0F	; 15
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <__stack+0x59>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <__stack+0x5f>
     95e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     960:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
     962:	80 e1       	ldi	r24, 0x10	; 16
     964:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     966:	5e 9a       	sbi	0x0b, 6	; 11
     968:	8f e9       	ldi	r24, 0x9F	; 159
     96a:	9f e0       	ldi	r25, 0x0F	; 15
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <__stack+0x6d>
     970:	00 c0       	rjmp	.+0      	; 0x972 <__stack+0x73>
     972:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     974:	5e 98       	cbi	0x0b, 6	; 11
     976:	ef e9       	ldi	r30, 0x9F	; 159
     978:	ff e0       	ldi	r31, 0x0F	; 15
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <__stack+0x7b>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <__stack+0x81>
     980:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     982:	88 e2       	ldi	r24, 0x28	; 40
     984:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
     98e:	8c e0       	ldi	r24, 0x0C	; 12
     990:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
     994:	80 e8       	ldi	r24, 0x80	; 128
     996:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
     99a:	08 95       	ret

0000099c <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 df 03 	call	0x7be	; 0x7be <lcd_wr_command>
     9a2:	08 95       	ret

000009a4 <lcd_print5>:
* Logic:
* Example Call: lcd_print(1,1,val,3)
*/
//002 and not 0020
static void lcd_print5(char row, char coloumn, unsigned int value, int digits, char* str)
{
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	7a 01       	movw	r14, r20
     9b6:	69 01       	movw	r12, r18
	if(value)
     9b8:	41 15       	cp	r20, r1
     9ba:	51 05       	cpc	r21, r1
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <lcd_print5+0x1c>
     9be:	e6 c0       	rjmp	.+460    	; 0xb8c <lcd_print5+0x1e8>
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
		{
			if ((num & 1) == 1)
     9c0:	40 fd       	sbrc	r20, 0
     9c2:	0c c0       	rjmp	.+24     	; 0x9dc <lcd_print5+0x38>
     9c4:	9a 01       	movw	r18, r20
     9c6:	c0 e0       	ldi	r28, 0x00	; 0
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <lcd_print5+0x2a>
     9ca:	20 fd       	sbrc	r18, 0
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <lcd_print5+0x3a>
			{
				break;
			}
			else
			{
				count++;
     9ce:	cf 5f       	subi	r28, 0xFF	; 255
				num = num >> 1;
     9d0:	36 95       	lsr	r19
     9d2:	27 95       	ror	r18
	if(value)
	{
		//count the number of trailing zeros
		unsigned int num = value;
		unsigned char count = 0;
		while (num != 0)
     9d4:	21 15       	cp	r18, r1
     9d6:	31 05       	cpc	r19, r1
     9d8:	c1 f7       	brne	.-16     	; 0x9ca <lcd_print5+0x26>
     9da:	01 c0       	rjmp	.+2      	; 0x9de <lcd_print5+0x3a>
		{
			if ((num & 1) == 1)
     9dc:	c0 e0       	ldi	r28, 0x00	; 0
				num = num >> 1;
			}
		}
		
		unsigned char flag=0;
		if(row==0||coloumn==0)
     9de:	88 23       	and	r24, r24
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <lcd_print5+0x42>
     9e2:	61 11       	cpse	r22, r1
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <lcd_print5+0x48>
			lcd_home();
     9e6:	0e 94 46 04 	call	0x88c	; 0x88c <lcd_home>
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <lcd_print5+0x4c>
		else
			lcd_cursor(row,coloumn);
     9ec:	0e 94 59 04 	call	0x8b2	; 0x8b2 <lcd_cursor>
	
		if(digits==5 || flag==1)
     9f0:	25 e0       	ldi	r18, 0x05	; 5
     9f2:	c2 16       	cp	r12, r18
     9f4:	d1 04       	cpc	r13, r1
     9f6:	09 f0       	breq	.+2      	; 0x9fa <lcd_print5+0x56>
     9f8:	d8 c0       	rjmp	.+432    	; 0xbaa <lcd_print5+0x206>
		{	
			million=value/10000+48;
			//if(count < 5)
			lcd_wr_char(million);
     9fa:	97 01       	movw	r18, r14
     9fc:	32 95       	swap	r19
     9fe:	22 95       	swap	r18
     a00:	2f 70       	andi	r18, 0x0F	; 15
     a02:	23 27       	eor	r18, r19
     a04:	3f 70       	andi	r19, 0x0F	; 15
     a06:	23 27       	eor	r18, r19
     a08:	a7 e4       	ldi	r26, 0x47	; 71
     a0a:	b3 e0       	ldi	r27, 0x03	; 3
     a0c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     a10:	96 95       	lsr	r25
     a12:	87 95       	ror	r24
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	80 5d       	subi	r24, 0xD0	; 208
     a1e:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		if(digits==4 || flag==1)
		{
			temp = value/1000;
			thousand = temp%10 + 48;
			//if(count < 4)
			lcd_wr_char(thousand);
     a22:	97 01       	movw	r18, r14
     a24:	36 95       	lsr	r19
     a26:	27 95       	ror	r18
     a28:	36 95       	lsr	r19
     a2a:	27 95       	ror	r18
     a2c:	36 95       	lsr	r19
     a2e:	27 95       	ror	r18
     a30:	a5 ec       	ldi	r26, 0xC5	; 197
     a32:	b0 e2       	ldi	r27, 0x20	; 32
     a34:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     a38:	ac 01       	movw	r20, r24
     a3a:	52 95       	swap	r21
     a3c:	42 95       	swap	r20
     a3e:	4f 70       	andi	r20, 0x0F	; 15
     a40:	45 27       	eor	r20, r21
     a42:	5f 70       	andi	r21, 0x0F	; 15
     a44:	45 27       	eor	r20, r21
     a46:	9a 01       	movw	r18, r20
     a48:	ad ec       	ldi	r26, 0xCD	; 205
     a4a:	bc ec       	ldi	r27, 0xCC	; 204
     a4c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     a50:	96 95       	lsr	r25
     a52:	87 95       	ror	r24
     a54:	96 95       	lsr	r25
     a56:	87 95       	ror	r24
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	9c 01       	movw	r18, r24
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	fa 01       	movw	r30, r20
     a74:	e8 1b       	sub	r30, r24
     a76:	f9 0b       	sbc	r31, r25
     a78:	cf 01       	movw	r24, r30
     a7a:	80 5d       	subi	r24, 0xD0	; 208
     a7c:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <lcd_print5+0xe6>
			
			flag=1;
		}
		if(digits==3 || flag==1)
     a82:	f3 e0       	ldi	r31, 0x03	; 3
     a84:	cf 16       	cp	r12, r31
     a86:	d1 04       	cpc	r13, r1
     a88:	51 f5       	brne	.+84     	; 0xade <lcd_print5+0x13a>
		{
			temp = value/100;
			hundred = temp%10 + 48;
			//if(count < 3)
			lcd_wr_char(hundred);
     a8a:	97 01       	movw	r18, r14
     a8c:	36 95       	lsr	r19
     a8e:	27 95       	ror	r18
     a90:	36 95       	lsr	r19
     a92:	27 95       	ror	r18
     a94:	ab e7       	ldi	r26, 0x7B	; 123
     a96:	b4 e1       	ldi	r27, 0x14	; 20
     a98:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     a9c:	ac 01       	movw	r20, r24
     a9e:	56 95       	lsr	r21
     aa0:	47 95       	ror	r20
     aa2:	9a 01       	movw	r18, r20
     aa4:	ad ec       	ldi	r26, 0xCD	; 205
     aa6:	bc ec       	ldi	r27, 0xCC	; 204
     aa8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	96 95       	lsr	r25
     ab2:	87 95       	ror	r24
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	9c 01       	movw	r18, r24
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	82 0f       	add	r24, r18
     acc:	93 1f       	adc	r25, r19
     ace:	9a 01       	movw	r18, r20
     ad0:	28 1b       	sub	r18, r24
     ad2:	39 0b       	sbc	r19, r25
     ad4:	c9 01       	movw	r24, r18
     ad6:	80 5d       	subi	r24, 0xD0	; 208
     ad8:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <lcd_print5+0x144>
			flag=1;
		}
		if(digits==2 || flag==1)
     ade:	32 e0       	ldi	r19, 0x02	; 2
     ae0:	c3 16       	cp	r12, r19
     ae2:	d1 04       	cpc	r13, r1
     ae4:	09 f0       	breq	.+2      	; 0xae8 <lcd_print5+0x144>
     ae6:	67 c0       	rjmp	.+206    	; 0xbb6 <lcd_print5+0x212>
		{
			temp = value/10;
			tens = temp%10 + 48;
			//if(count < 2)
			lcd_wr_char(tens);
     ae8:	97 01       	movw	r18, r14
     aea:	ad ec       	ldi	r26, 0xCD	; 205
     aec:	bc ec       	ldi	r27, 0xCC	; 204
     aee:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     af2:	ac 01       	movw	r20, r24
     af4:	56 95       	lsr	r21
     af6:	47 95       	ror	r20
     af8:	56 95       	lsr	r21
     afa:	47 95       	ror	r20
     afc:	56 95       	lsr	r21
     afe:	47 95       	ror	r20
     b00:	9a 01       	movw	r18, r20
     b02:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     b06:	96 95       	lsr	r25
     b08:	87 95       	ror	r24
     b0a:	96 95       	lsr	r25
     b0c:	87 95       	ror	r24
     b0e:	96 95       	lsr	r25
     b10:	87 95       	ror	r24
     b12:	9c 01       	movw	r18, r24
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	82 0f       	add	r24, r18
     b26:	93 1f       	adc	r25, r19
     b28:	fa 01       	movw	r30, r20
     b2a:	e8 1b       	sub	r30, r24
     b2c:	f9 0b       	sbc	r31, r25
     b2e:	cf 01       	movw	r24, r30
     b30:	80 5d       	subi	r24, 0xD0	; 208
     b32:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			flag=1;
		}
		if(digits==1 || flag==1)
		{
			unit = value%10 + 48;
			if(count < 1)
     b36:	c1 11       	cpse	r28, r1
     b38:	1d c0       	rjmp	.+58     	; 0xb74 <lcd_print5+0x1d0>
				lcd_wr_char(unit);
     b3a:	97 01       	movw	r18, r14
     b3c:	ad ec       	ldi	r26, 0xCD	; 205
     b3e:	bc ec       	ldi	r27, 0xCC	; 204
     b40:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     b44:	96 95       	lsr	r25
     b46:	87 95       	ror	r24
     b48:	96 95       	lsr	r25
     b4a:	87 95       	ror	r24
     b4c:	96 95       	lsr	r25
     b4e:	87 95       	ror	r24
     b50:	9c 01       	movw	r18, r24
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	82 0f       	add	r24, r18
     b64:	93 1f       	adc	r25, r19
     b66:	97 01       	movw	r18, r14
     b68:	28 1b       	sub	r18, r24
     b6a:	39 0b       	sbc	r19, r25
     b6c:	c9 01       	movw	r24, r18
     b6e:	80 5d       	subi	r24, 0xD0	; 208
     b70:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		}
		if(digits>5)
     b74:	36 e0       	ldi	r19, 0x06	; 6
     b76:	c3 16       	cp	r12, r19
     b78:	d1 04       	cpc	r13, r1
     b7a:	1c f0       	brlt	.+6      	; 0xb82 <lcd_print5+0x1de>
		{
			lcd_wr_char('E');
     b7c:	85 e4       	ldi	r24, 0x45	; 69
     b7e:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     b82:	f8 01       	movw	r30, r16
     b84:	80 81       	ld	r24, Z
     b86:	81 11       	cpse	r24, r1
     b88:	08 c0       	rjmp	.+16     	; 0xb9a <lcd_print5+0x1f6>
     b8a:	1c c0       	rjmp	.+56     	; 0xbc4 <lcd_print5+0x220>
		}
	}
	
	else	//if(value==0)
	{
		lcd_wr_char('0'); //print one 0
     b8c:	80 e3       	ldi	r24, 0x30	; 48
     b8e:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		lcd_wr_char('0'); //print one 0
     b92:	80 e3       	ldi	r24, 0x30	; 48
     b94:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
     b98:	f4 cf       	rjmp	.-24     	; 0xb82 <lcd_print5+0x1de>
     b9a:	e8 01       	movw	r28, r16
     b9c:	21 96       	adiw	r28, 0x01	; 1
	}
	
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     b9e:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
	{
		lcd_wr_char('0'); //print one 0
		lcd_wr_char('0'); //print one 0
	}
	
	while(*str != '\0')
     ba2:	89 91       	ld	r24, Y+
     ba4:	81 11       	cpse	r24, r1
     ba6:	fb cf       	rjmp	.-10     	; 0xb9e <lcd_print5+0x1fa>
     ba8:	0d c0       	rjmp	.+26     	; 0xbc4 <lcd_print5+0x220>
			//if(count < 5)
			lcd_wr_char(million);
			
			flag=1;
		}
		if(digits==4 || flag==1)
     baa:	f4 e0       	ldi	r31, 0x04	; 4
     bac:	cf 16       	cp	r12, r31
     bae:	d1 04       	cpc	r13, r1
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <lcd_print5+0x210>
     bb2:	67 cf       	rjmp	.-306    	; 0xa82 <lcd_print5+0xde>
     bb4:	36 cf       	rjmp	.-404    	; 0xa22 <lcd_print5+0x7e>
			tens = temp%10 + 48;
			//if(count < 2)
			lcd_wr_char(tens);
			flag=1;
		}
		if(digits==1 || flag==1)
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	c2 16       	cp	r12, r18
     bba:	d1 04       	cpc	r13, r1
     bbc:	d9 f6       	brne	.-74     	; 0xb74 <lcd_print5+0x1d0>
		{
			unit = value%10 + 48;
			if(count < 1)
     bbe:	c1 11       	cpse	r28, r1
     bc0:	e0 cf       	rjmp	.-64     	; 0xb82 <lcd_print5+0x1de>
     bc2:	bb cf       	rjmp	.-138    	; 0xb3a <lcd_print5+0x196>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	08 95       	ret

00000bd6 <lcd_print2>:

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	6a 01       	movw	r12, r20
     be6:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     be8:	88 23       	and	r24, r24
     bea:	11 f0       	breq	.+4      	; 0xbf0 <lcd_print2+0x1a>
     bec:	61 11       	cpse	r22, r1
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <lcd_print2+0x20>
	{
		lcd_home();
     bf0:	0e 94 46 04 	call	0x88c	; 0x88c <lcd_home>
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     bf6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     bfa:	25 e0       	ldi	r18, 0x05	; 5
     bfc:	e2 16       	cp	r14, r18
     bfe:	f1 04       	cpc	r15, r1
     c00:	09 f0       	breq	.+2      	; 0xc04 <lcd_print2+0x2e>
     c02:	b9 c0       	rjmp	.+370    	; 0xd76 <lcd_print2+0x1a0>
	{
		million=value/10000+48;
     c04:	96 01       	movw	r18, r12
     c06:	32 95       	swap	r19
     c08:	22 95       	swap	r18
     c0a:	2f 70       	andi	r18, 0x0F	; 15
     c0c:	23 27       	eor	r18, r19
     c0e:	3f 70       	andi	r19, 0x0F	; 15
     c10:	23 27       	eor	r18, r19
     c12:	a7 e4       	ldi	r26, 0x47	; 71
     c14:	b3 e0       	ldi	r27, 0x03	; 3
     c16:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     c1a:	96 95       	lsr	r25
     c1c:	87 95       	ror	r24
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	c0 96       	adiw	r24, 0x30	; 48
		if(million != '0')
     c28:	80 33       	cpi	r24, 0x30	; 48
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <lcd_print2+0x5a>
     c2e:	70 c0       	rjmp	.+224    	; 0xd10 <lcd_print2+0x13a>
		{
			lcd_wr_char(million);
     c30:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;	
     c34:	c1 e0       	ldi	r28, 0x01	; 1
     c36:	6d c0       	rjmp	.+218    	; 0xd12 <lcd_print2+0x13c>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     c38:	c1 11       	cpse	r28, r1
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <lcd_print2+0x6a>
     c3c:	a2 c0       	rjmp	.+324    	; 0xd82 <lcd_print2+0x1ac>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c3e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     c40:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;
     c44:	cf 5f       	subi	r28, 0xFF	; 255
     c46:	9d c0       	rjmp	.+314    	; 0xd82 <lcd_print2+0x1ac>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     c48:	33 e0       	ldi	r19, 0x03	; 3
     c4a:	e3 16       	cp	r14, r19
     c4c:	f1 04       	cpc	r15, r1
     c4e:	51 f4       	brne	.+20     	; 0xc64 <lcd_print2+0x8e>
     c50:	2f c1       	rjmp	.+606    	; 0xeb0 <lcd_print2+0x2da>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     c52:	cc 23       	and	r28, r28
     c54:	09 f4       	brne	.+2      	; 0xc58 <lcd_print2+0x82>
     c56:	c1 c0       	rjmp	.+386    	; 0xdda <lcd_print2+0x204>
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <lcd_print2+0x86>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c5a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     c5c:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;
     c60:	cf 5f       	subi	r28, 0xFF	; 255
     c62:	bb c0       	rjmp	.+374    	; 0xdda <lcd_print2+0x204>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	e8 16       	cp	r14, r24
     c68:	f1 04       	cpc	r15, r1
     c6a:	09 f0       	breq	.+2      	; 0xc6e <lcd_print2+0x98>
     c6c:	e0 c0       	rjmp	.+448    	; 0xe2e <lcd_print2+0x258>
     c6e:	4d c1       	rjmp	.+666    	; 0xf0a <lcd_print2+0x334>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     c70:	cc 23       	and	r28, r28
     c72:	39 f0       	breq	.+14     	; 0xc82 <lcd_print2+0xac>
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <lcd_print2+0xa2>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c76:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     c78:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;
     c7c:	cf 5f       	subi	r28, 0xFF	; 255
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <lcd_print2+0xac>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c80:	c0 e0       	ldi	r28, 0x00	; 0
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
     c82:	96 01       	movw	r18, r12
     c84:	ad ec       	ldi	r26, 0xCD	; 205
     c86:	bc ec       	ldi	r27, 0xCC	; 204
     c88:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     c8c:	96 95       	lsr	r25
     c8e:	87 95       	ror	r24
     c90:	96 95       	lsr	r25
     c92:	87 95       	ror	r24
     c94:	96 95       	lsr	r25
     c96:	87 95       	ror	r24
     c98:	9c 01       	movw	r18, r24
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	82 0f       	add	r24, r18
     cac:	93 1f       	adc	r25, r19
     cae:	f6 01       	movw	r30, r12
     cb0:	e8 1b       	sub	r30, r24
     cb2:	f9 0b       	sbc	r31, r25
     cb4:	cf 01       	movw	r24, r30
     cb6:	80 5d       	subi	r24, 0xD0	; 208
     cb8:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		count++;
     cbc:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     cbe:	f6 e0       	ldi	r31, 0x06	; 6
     cc0:	ef 16       	cp	r14, r31
     cc2:	f1 04       	cpc	r15, r1
     cc4:	1c f0       	brlt	.+6      	; 0xccc <lcd_print2+0xf6>
	{
		lcd_wr_char('E');
     cc6:	85 e4       	ldi	r24, 0x45	; 69
     cc8:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
	}
	
	while(*str != '\0')
     ccc:	f8 01       	movw	r30, r16
     cce:	80 81       	ld	r24, Z
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <lcd_print2+0x100>
     cd4:	b3 c0       	rjmp	.+358    	; 0xe3c <lcd_print2+0x266>
     cd6:	0f 5f       	subi	r16, 0xFF	; 255
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     cda:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		count++;
     cde:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     ce0:	ff ef       	ldi	r31, 0xFF	; 255
     ce2:	ef 1a       	sub	r14, r31
     ce4:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     ce6:	f8 01       	movw	r30, r16
     ce8:	81 91       	ld	r24, Z+
     cea:	8f 01       	movw	r16, r30
     cec:	81 11       	cpse	r24, r1
     cee:	f5 cf       	rjmp	.-22     	; 0xcda <lcd_print2+0x104>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     cf0:	8c 2f       	mov	r24, r28
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	8e 15       	cp	r24, r14
     cf6:	9f 05       	cpc	r25, r15
     cf8:	0c f0       	brlt	.+2      	; 0xcfc <lcd_print2+0x126>
     cfa:	32 c1       	rjmp	.+612    	; 0xf60 <lcd_print2+0x38a>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;
     d02:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
	{
		while(count != digits)
     d04:	8c 2f       	mov	r24, r28
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	8e 15       	cp	r24, r14
     d0a:	9f 05       	cpc	r25, r15
     d0c:	b9 f7       	brne	.-18     	; 0xcfc <lcd_print2+0x126>
     d0e:	28 c1       	rjmp	.+592    	; 0xf60 <lcd_print2+0x38a>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     d10:	c0 e0       	ldi	r28, 0x00	; 0
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
     d12:	96 01       	movw	r18, r12
     d14:	36 95       	lsr	r19
     d16:	27 95       	ror	r18
     d18:	36 95       	lsr	r19
     d1a:	27 95       	ror	r18
     d1c:	36 95       	lsr	r19
     d1e:	27 95       	ror	r18
     d20:	a5 ec       	ldi	r26, 0xC5	; 197
     d22:	b0 e2       	ldi	r27, 0x20	; 32
     d24:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     d28:	ac 01       	movw	r20, r24
     d2a:	52 95       	swap	r21
     d2c:	42 95       	swap	r20
     d2e:	4f 70       	andi	r20, 0x0F	; 15
     d30:	45 27       	eor	r20, r21
     d32:	5f 70       	andi	r21, 0x0F	; 15
     d34:	45 27       	eor	r20, r21
     d36:	9a 01       	movw	r18, r20
     d38:	ad ec       	ldi	r26, 0xCD	; 205
     d3a:	bc ec       	ldi	r27, 0xCC	; 204
     d3c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	96 95       	lsr	r25
     d4a:	87 95       	ror	r24
     d4c:	9c 01       	movw	r18, r24
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	82 0f       	add	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	9a 01       	movw	r18, r20
     d64:	28 1b       	sub	r18, r24
     d66:	39 0b       	sbc	r19, r25
     d68:	c9 01       	movw	r24, r18
     d6a:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     d6c:	80 33       	cpi	r24, 0x30	; 48
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <lcd_print2+0x19e>
     d72:	62 cf       	rjmp	.-316    	; 0xc38 <lcd_print2+0x62>
     d74:	65 cf       	rjmp	.-310    	; 0xc40 <lcd_print2+0x6a>
			lcd_wr_char(million);
			count++;	
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     d76:	34 e0       	ldi	r19, 0x04	; 4
     d78:	e3 16       	cp	r14, r19
     d7a:	f1 04       	cpc	r15, r1
     d7c:	09 f0       	breq	.+2      	; 0xd80 <lcd_print2+0x1aa>
     d7e:	64 cf       	rjmp	.-312    	; 0xc48 <lcd_print2+0x72>
     d80:	64 c0       	rjmp	.+200    	; 0xe4a <lcd_print2+0x274>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
     d82:	96 01       	movw	r18, r12
     d84:	36 95       	lsr	r19
     d86:	27 95       	ror	r18
     d88:	36 95       	lsr	r19
     d8a:	27 95       	ror	r18
     d8c:	ab e7       	ldi	r26, 0x7B	; 123
     d8e:	b4 e1       	ldi	r27, 0x14	; 20
     d90:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     d94:	ac 01       	movw	r20, r24
     d96:	56 95       	lsr	r21
     d98:	47 95       	ror	r20
     d9a:	9a 01       	movw	r18, r20
     d9c:	ad ec       	ldi	r26, 0xCD	; 205
     d9e:	bc ec       	ldi	r27, 0xCC	; 204
     da0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	96 95       	lsr	r25
     daa:	87 95       	ror	r24
     dac:	96 95       	lsr	r25
     dae:	87 95       	ror	r24
     db0:	9c 01       	movw	r18, r24
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	82 0f       	add	r24, r18
     dc4:	93 1f       	adc	r25, r19
     dc6:	fa 01       	movw	r30, r20
     dc8:	e8 1b       	sub	r30, r24
     dca:	f9 0b       	sbc	r31, r25
     dcc:	cf 01       	movw	r24, r30
     dce:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
     dd0:	80 33       	cpi	r24, 0x30	; 48
     dd2:	91 05       	cpc	r25, r1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <lcd_print2+0x202>
     dd6:	42 cf       	rjmp	.-380    	; 0xc5c <lcd_print2+0x86>
     dd8:	3c cf       	rjmp	.-392    	; 0xc52 <lcd_print2+0x7c>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
     dda:	96 01       	movw	r18, r12
     ddc:	ad ec       	ldi	r26, 0xCD	; 205
     dde:	bc ec       	ldi	r27, 0xCC	; 204
     de0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     de4:	ac 01       	movw	r20, r24
     de6:	56 95       	lsr	r21
     de8:	47 95       	ror	r20
     dea:	56 95       	lsr	r21
     dec:	47 95       	ror	r20
     dee:	56 95       	lsr	r21
     df0:	47 95       	ror	r20
     df2:	9a 01       	movw	r18, r20
     df4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	9c 01       	movw	r18, r24
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	82 0f       	add	r24, r18
     e18:	93 1f       	adc	r25, r19
     e1a:	9a 01       	movw	r18, r20
     e1c:	28 1b       	sub	r18, r24
     e1e:	39 0b       	sbc	r19, r25
     e20:	c9 01       	movw	r24, r18
     e22:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
     e24:	80 33       	cpi	r24, 0x30	; 48
     e26:	91 05       	cpc	r25, r1
     e28:	09 f0       	breq	.+2      	; 0xe2c <lcd_print2+0x256>
     e2a:	26 cf       	rjmp	.-436    	; 0xc78 <lcd_print2+0xa2>
     e2c:	21 cf       	rjmp	.-446    	; 0xc70 <lcd_print2+0x9a>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     e2e:	31 e0       	ldi	r19, 0x01	; 1
     e30:	e3 16       	cp	r14, r19
     e32:	f1 04       	cpc	r15, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <lcd_print2+0x262>
     e36:	24 cf       	rjmp	.-440    	; 0xc80 <lcd_print2+0xaa>

//20mA and not 0020mA
void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     e38:	c0 e0       	ldi	r28, 0x00	; 0
     e3a:	41 cf       	rjmp	.-382    	; 0xcbe <lcd_print2+0xe8>
		digits++;
		str++;		
	}
	
	//Clear the remaining chars if not enough chars were printed
	if(count<digits)
     e3c:	8c 2f       	mov	r24, r28
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	8e 15       	cp	r24, r14
     e42:	9f 05       	cpc	r25, r15
     e44:	0c f4       	brge	.+2      	; 0xe48 <lcd_print2+0x272>
     e46:	5a cf       	rjmp	.-332    	; 0xcfc <lcd_print2+0x126>
     e48:	8b c0       	rjmp	.+278    	; 0xf60 <lcd_print2+0x38a>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
     e4a:	96 01       	movw	r18, r12
     e4c:	36 95       	lsr	r19
     e4e:	27 95       	ror	r18
     e50:	36 95       	lsr	r19
     e52:	27 95       	ror	r18
     e54:	36 95       	lsr	r19
     e56:	27 95       	ror	r18
     e58:	a5 ec       	ldi	r26, 0xC5	; 197
     e5a:	b0 e2       	ldi	r27, 0x20	; 32
     e5c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     e60:	ac 01       	movw	r20, r24
     e62:	52 95       	swap	r21
     e64:	42 95       	swap	r20
     e66:	4f 70       	andi	r20, 0x0F	; 15
     e68:	45 27       	eor	r20, r21
     e6a:	5f 70       	andi	r21, 0x0F	; 15
     e6c:	45 27       	eor	r20, r21
     e6e:	9a 01       	movw	r18, r20
     e70:	ad ec       	ldi	r26, 0xCD	; 205
     e72:	bc ec       	ldi	r27, 0xCC	; 204
     e74:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     e78:	96 95       	lsr	r25
     e7a:	87 95       	ror	r24
     e7c:	96 95       	lsr	r25
     e7e:	87 95       	ror	r24
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	9c 01       	movw	r18, r24
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	fa 01       	movw	r30, r20
     e9c:	e8 1b       	sub	r30, r24
     e9e:	f9 0b       	sbc	r31, r25
     ea0:	cf 01       	movw	r24, r30
     ea2:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     ea4:	80 33       	cpi	r24, 0x30	; 48
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f0       	breq	.+2      	; 0xeac <lcd_print2+0x2d6>
     eaa:	c9 ce       	rjmp	.-622    	; 0xc3e <lcd_print2+0x68>
     eac:	c0 e0       	ldi	r28, 0x00	; 0
     eae:	69 cf       	rjmp	.-302    	; 0xd82 <lcd_print2+0x1ac>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
     eb0:	96 01       	movw	r18, r12
     eb2:	36 95       	lsr	r19
     eb4:	27 95       	ror	r18
     eb6:	36 95       	lsr	r19
     eb8:	27 95       	ror	r18
     eba:	ab e7       	ldi	r26, 0x7B	; 123
     ebc:	b4 e1       	ldi	r27, 0x14	; 20
     ebe:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     ec2:	ac 01       	movw	r20, r24
     ec4:	56 95       	lsr	r21
     ec6:	47 95       	ror	r20
     ec8:	9a 01       	movw	r18, r20
     eca:	ad ec       	ldi	r26, 0xCD	; 205
     ecc:	bc ec       	ldi	r27, 0xCC	; 204
     ece:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	9c 01       	movw	r18, r24
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	9a 01       	movw	r18, r20
     ef6:	28 1b       	sub	r18, r24
     ef8:	39 0b       	sbc	r19, r25
     efa:	c9 01       	movw	r24, r18
     efc:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
     efe:	80 33       	cpi	r24, 0x30	; 48
     f00:	91 05       	cpc	r25, r1
     f02:	09 f0       	breq	.+2      	; 0xf06 <lcd_print2+0x330>
     f04:	aa ce       	rjmp	.-684    	; 0xc5a <lcd_print2+0x84>
     f06:	c0 e0       	ldi	r28, 0x00	; 0
     f08:	68 cf       	rjmp	.-304    	; 0xdda <lcd_print2+0x204>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
     f0a:	96 01       	movw	r18, r12
     f0c:	ad ec       	ldi	r26, 0xCD	; 205
     f0e:	bc ec       	ldi	r27, 0xCC	; 204
     f10:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     f14:	ac 01       	movw	r20, r24
     f16:	56 95       	lsr	r21
     f18:	47 95       	ror	r20
     f1a:	56 95       	lsr	r21
     f1c:	47 95       	ror	r20
     f1e:	56 95       	lsr	r21
     f20:	47 95       	ror	r20
     f22:	9a 01       	movw	r18, r20
     f24:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	96 95       	lsr	r25
     f32:	87 95       	ror	r24
     f34:	9c 01       	movw	r18, r24
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	82 0f       	add	r24, r18
     f48:	93 1f       	adc	r25, r19
     f4a:	fa 01       	movw	r30, r20
     f4c:	e8 1b       	sub	r30, r24
     f4e:	f9 0b       	sbc	r31, r25
     f50:	cf 01       	movw	r24, r30
     f52:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
     f54:	80 33       	cpi	r24, 0x30	; 48
     f56:	91 05       	cpc	r25, r1
     f58:	09 f0       	breq	.+2      	; 0xf5c <lcd_print2+0x386>
     f5a:	8d ce       	rjmp	.-742    	; 0xc76 <lcd_print2+0xa0>
     f5c:	c0 e0       	ldi	r28, 0x00	; 0
     f5e:	91 ce       	rjmp	.-734    	; 0xc82 <lcd_print2+0xac>
		{
			lcd_wr_char(32);
			count++;
		}	
	}
}
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	08 95       	ret

00000f70 <lcd_print3>:

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	8a 01       	movw	r16, r20
     f7c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     f7e:	88 23       	and	r24, r24
     f80:	11 f0       	breq	.+4      	; 0xf86 <lcd_print3+0x16>
     f82:	61 11       	cpse	r22, r1
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <lcd_print3+0x1c>
	{
		lcd_home();
     f86:	0e 94 46 04 	call	0x88c	; 0x88c <lcd_home>
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <lcd_print3+0x20>
	}
	else
	{
		lcd_cursor(row,coloumn);
     f8c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     f90:	c5 30       	cpi	r28, 0x05	; 5
     f92:	d1 05       	cpc	r29, r1
     f94:	09 f0       	breq	.+2      	; 0xf98 <lcd_print3+0x28>
     f96:	8f c0       	rjmp	.+286    	; 0x10b6 <lcd_print3+0x146>
	{
		million=value/10000+48;
     f98:	98 01       	movw	r18, r16
     f9a:	32 95       	swap	r19
     f9c:	22 95       	swap	r18
     f9e:	2f 70       	andi	r18, 0x0F	; 15
     fa0:	23 27       	eor	r18, r19
     fa2:	3f 70       	andi	r19, 0x0F	; 15
     fa4:	23 27       	eor	r18, r19
     fa6:	a7 e4       	ldi	r26, 0x47	; 71
     fa8:	b3 e0       	ldi	r27, 0x03	; 3
     faa:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
     fae:	96 95       	lsr	r25
     fb0:	87 95       	ror	r24
     fb2:	96 95       	lsr	r25
     fb4:	87 95       	ror	r24
     fb6:	96 95       	lsr	r25
     fb8:	87 95       	ror	r24
     fba:	c0 96       	adiw	r24, 0x30	; 48
		if(million != '0')
     fbc:	80 33       	cpi	r24, 0x30	; 48
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <lcd_print3+0x54>
     fc2:	46 c0       	rjmp	.+140    	; 0x1050 <lcd_print3+0xe0>
		{
			lcd_wr_char(million);
     fc4:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;
     fc8:	ff 24       	eor	r15, r15
     fca:	f3 94       	inc	r15
     fcc:	42 c0       	rjmp	.+132    	; 0x1052 <lcd_print3+0xe2>
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
     fce:	f1 10       	cpse	r15, r1
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <lcd_print3+0x66>
     fd2:	76 c0       	rjmp	.+236    	; 0x10c0 <lcd_print3+0x150>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     fd4:	f1 2c       	mov	r15, r1
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
		{
			lcd_wr_char(thousand);
     fd6:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;
     fda:	f3 94       	inc	r15
     fdc:	71 c0       	rjmp	.+226    	; 0x10c0 <lcd_print3+0x150>
		}
		flag=1;
	}
	
	if(digits==3 || flag==1)
     fde:	c3 30       	cpi	r28, 0x03	; 3
     fe0:	d1 05       	cpc	r29, r1
     fe2:	51 f4       	brne	.+20     	; 0xff8 <lcd_print3+0x88>
     fe4:	fb c0       	rjmp	.+502    	; 0x11dc <lcd_print3+0x26c>
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     fe6:	ff 20       	and	r15, r15
     fe8:	09 f4       	brne	.+2      	; 0xfec <lcd_print3+0x7c>
     fea:	96 c0       	rjmp	.+300    	; 0x1118 <lcd_print3+0x1a8>
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <lcd_print3+0x80>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
     fee:	f1 2c       	mov	r15, r1
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     ff0:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
			count++;
     ff4:	f3 94       	inc	r15
     ff6:	90 c0       	rjmp	.+288    	; 0x1118 <lcd_print3+0x1a8>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     ff8:	c2 30       	cpi	r28, 0x02	; 2
     ffa:	d1 05       	cpc	r29, r1
     ffc:	09 f0       	breq	.+2      	; 0x1000 <lcd_print3+0x90>
     ffe:	b6 c0       	rjmp	.+364    	; 0x116c <lcd_print3+0x1fc>
    1000:	fe c0       	rjmp	.+508    	; 0x11fe <lcd_print3+0x28e>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
    1002:	f1 10       	cpse	r15, r1
		{
			lcd_wr_char(tens);
    1004:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
    1008:	98 01       	movw	r18, r16
    100a:	ad ec       	ldi	r26, 0xCD	; 205
    100c:	bc ec       	ldi	r27, 0xCC	; 204
    100e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    1012:	96 95       	lsr	r25
    1014:	87 95       	ror	r24
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
    101e:	9c 01       	movw	r18, r24
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	82 0f       	add	r24, r18
    1032:	93 1f       	adc	r25, r19
    1034:	98 01       	movw	r18, r16
    1036:	28 1b       	sub	r18, r24
    1038:	39 0b       	sbc	r19, r25
    103a:	c9 01       	movw	r24, r18
    103c:	80 5d       	subi	r24, 0xD0	; 208
    103e:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		count++;
	}
	if(digits>5)
    1042:	26 97       	sbiw	r28, 0x06	; 6
    1044:	0c f4       	brge	.+2      	; 0x1048 <lcd_print3+0xd8>
    1046:	eb c0       	rjmp	.+470    	; 0x121e <lcd_print3+0x2ae>
	{
		lcd_wr_char('E');
    1048:	85 e4       	ldi	r24, 0x45	; 69
    104a:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
	}
}
    104e:	e7 c0       	rjmp	.+462    	; 0x121e <lcd_print3+0x2ae>

//20 and not 0020
void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	char count = 0;
    1050:	f1 2c       	mov	r15, r1
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
    1052:	98 01       	movw	r18, r16
    1054:	36 95       	lsr	r19
    1056:	27 95       	ror	r18
    1058:	36 95       	lsr	r19
    105a:	27 95       	ror	r18
    105c:	36 95       	lsr	r19
    105e:	27 95       	ror	r18
    1060:	a5 ec       	ldi	r26, 0xC5	; 197
    1062:	b0 e2       	ldi	r27, 0x20	; 32
    1064:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    1068:	ac 01       	movw	r20, r24
    106a:	52 95       	swap	r21
    106c:	42 95       	swap	r20
    106e:	4f 70       	andi	r20, 0x0F	; 15
    1070:	45 27       	eor	r20, r21
    1072:	5f 70       	andi	r21, 0x0F	; 15
    1074:	45 27       	eor	r20, r21
    1076:	9a 01       	movw	r18, r20
    1078:	ad ec       	ldi	r26, 0xCD	; 205
    107a:	bc ec       	ldi	r27, 0xCC	; 204
    107c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    1080:	96 95       	lsr	r25
    1082:	87 95       	ror	r24
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	9c 01       	movw	r18, r24
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	82 0f       	add	r24, r18
    10a0:	93 1f       	adc	r25, r19
    10a2:	9a 01       	movw	r18, r20
    10a4:	28 1b       	sub	r18, r24
    10a6:	39 0b       	sbc	r19, r25
    10a8:	c9 01       	movw	r24, r18
    10aa:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    10ac:	80 33       	cpi	r24, 0x30	; 48
    10ae:	91 05       	cpc	r25, r1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <lcd_print3+0x144>
    10b2:	8d cf       	rjmp	.-230    	; 0xfce <lcd_print3+0x5e>
    10b4:	90 cf       	rjmp	.-224    	; 0xfd6 <lcd_print3+0x66>
			lcd_wr_char(million);
			count++;
		}
		flag=1;
	}
	if(digits==4 || flag==1)
    10b6:	c4 30       	cpi	r28, 0x04	; 4
    10b8:	d1 05       	cpc	r29, r1
    10ba:	09 f0       	breq	.+2      	; 0x10be <lcd_print3+0x14e>
    10bc:	90 cf       	rjmp	.-224    	; 0xfde <lcd_print3+0x6e>
    10be:	5b c0       	rjmp	.+182    	; 0x1176 <lcd_print3+0x206>
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
    10c0:	98 01       	movw	r18, r16
    10c2:	36 95       	lsr	r19
    10c4:	27 95       	ror	r18
    10c6:	36 95       	lsr	r19
    10c8:	27 95       	ror	r18
    10ca:	ab e7       	ldi	r26, 0x7B	; 123
    10cc:	b4 e1       	ldi	r27, 0x14	; 20
    10ce:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    10d2:	ac 01       	movw	r20, r24
    10d4:	56 95       	lsr	r21
    10d6:	47 95       	ror	r20
    10d8:	9a 01       	movw	r18, r20
    10da:	ad ec       	ldi	r26, 0xCD	; 205
    10dc:	bc ec       	ldi	r27, 0xCC	; 204
    10de:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    10e2:	96 95       	lsr	r25
    10e4:	87 95       	ror	r24
    10e6:	96 95       	lsr	r25
    10e8:	87 95       	ror	r24
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	9c 01       	movw	r18, r24
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	82 0f       	add	r24, r18
    1102:	93 1f       	adc	r25, r19
    1104:	9a 01       	movw	r18, r20
    1106:	28 1b       	sub	r18, r24
    1108:	39 0b       	sbc	r19, r25
    110a:	c9 01       	movw	r24, r18
    110c:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
    110e:	80 33       	cpi	r24, 0x30	; 48
    1110:	91 05       	cpc	r25, r1
    1112:	09 f0       	breq	.+2      	; 0x1116 <lcd_print3+0x1a6>
    1114:	6d cf       	rjmp	.-294    	; 0xff0 <lcd_print3+0x80>
    1116:	67 cf       	rjmp	.-306    	; 0xfe6 <lcd_print3+0x76>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
    1118:	98 01       	movw	r18, r16
    111a:	ad ec       	ldi	r26, 0xCD	; 205
    111c:	bc ec       	ldi	r27, 0xCC	; 204
    111e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    1122:	ac 01       	movw	r20, r24
    1124:	56 95       	lsr	r21
    1126:	47 95       	ror	r20
    1128:	56 95       	lsr	r21
    112a:	47 95       	ror	r20
    112c:	56 95       	lsr	r21
    112e:	47 95       	ror	r20
    1130:	9a 01       	movw	r18, r20
    1132:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    1136:	96 95       	lsr	r25
    1138:	87 95       	ror	r24
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	9c 01       	movw	r18, r24
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	82 0f       	add	r24, r18
    1156:	93 1f       	adc	r25, r19
    1158:	9a 01       	movw	r18, r20
    115a:	28 1b       	sub	r18, r24
    115c:	39 0b       	sbc	r19, r25
    115e:	c9 01       	movw	r24, r18
    1160:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
    1162:	80 33       	cpi	r24, 0x30	; 48
    1164:	91 05       	cpc	r25, r1
    1166:	09 f0       	breq	.+2      	; 0x116a <lcd_print3+0x1fa>
    1168:	4d cf       	rjmp	.-358    	; 0x1004 <lcd_print3+0x94>
    116a:	4b cf       	rjmp	.-362    	; 0x1002 <lcd_print3+0x92>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
    116c:	c1 30       	cpi	r28, 0x01	; 1
    116e:	d1 05       	cpc	r29, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <lcd_print3+0x204>
    1172:	67 cf       	rjmp	.-306    	; 0x1042 <lcd_print3+0xd2>
    1174:	49 cf       	rjmp	.-366    	; 0x1008 <lcd_print3+0x98>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
    1176:	98 01       	movw	r18, r16
    1178:	36 95       	lsr	r19
    117a:	27 95       	ror	r18
    117c:	36 95       	lsr	r19
    117e:	27 95       	ror	r18
    1180:	36 95       	lsr	r19
    1182:	27 95       	ror	r18
    1184:	a5 ec       	ldi	r26, 0xC5	; 197
    1186:	b0 e2       	ldi	r27, 0x20	; 32
    1188:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    118c:	ac 01       	movw	r20, r24
    118e:	52 95       	swap	r21
    1190:	42 95       	swap	r20
    1192:	4f 70       	andi	r20, 0x0F	; 15
    1194:	45 27       	eor	r20, r21
    1196:	5f 70       	andi	r21, 0x0F	; 15
    1198:	45 27       	eor	r20, r21
    119a:	9a 01       	movw	r18, r20
    119c:	ad ec       	ldi	r26, 0xCD	; 205
    119e:	bc ec       	ldi	r27, 0xCC	; 204
    11a0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__umulhisi3>
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	96 95       	lsr	r25
    11aa:	87 95       	ror	r24
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	9c 01       	movw	r18, r24
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	9a 01       	movw	r18, r20
    11c8:	28 1b       	sub	r18, r24
    11ca:	39 0b       	sbc	r19, r25
    11cc:	c9 01       	movw	r24, r18
    11ce:	c0 96       	adiw	r24, 0x30	; 48
		if(thousand != '0' || count != 0)	//If any non zero value has already been printed
    11d0:	80 33       	cpi	r24, 0x30	; 48
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <lcd_print3+0x268>
    11d6:	fe ce       	rjmp	.-516    	; 0xfd4 <lcd_print3+0x64>
    11d8:	f1 2c       	mov	r15, r1
    11da:	72 cf       	rjmp	.-284    	; 0x10c0 <lcd_print3+0x150>
	}
	
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
    11dc:	c8 01       	movw	r24, r16
    11de:	64 e6       	ldi	r22, 0x64	; 100
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	0e 94 bf 0c 	call	0x197e	; 0x197e <__udivmodhi4>
    11e6:	cb 01       	movw	r24, r22
    11e8:	6a e0       	ldi	r22, 0x0A	; 10
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	0e 94 bf 0c 	call	0x197e	; 0x197e <__udivmodhi4>
    11f0:	c0 96       	adiw	r24, 0x30	; 48
		if(hundred != '0' || count != 0)
    11f2:	80 33       	cpi	r24, 0x30	; 48
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <lcd_print3+0x28a>
    11f8:	fa ce       	rjmp	.-524    	; 0xfee <lcd_print3+0x7e>
    11fa:	f1 2c       	mov	r15, r1
    11fc:	8d cf       	rjmp	.-230    	; 0x1118 <lcd_print3+0x1a8>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	c8 01       	movw	r24, r16
    1204:	b9 01       	movw	r22, r18
    1206:	0e 94 bf 0c 	call	0x197e	; 0x197e <__udivmodhi4>
    120a:	cb 01       	movw	r24, r22
    120c:	b9 01       	movw	r22, r18
    120e:	0e 94 bf 0c 	call	0x197e	; 0x197e <__udivmodhi4>
    1212:	c0 96       	adiw	r24, 0x30	; 48
		if(tens != '0' || count != 0)
    1214:	80 33       	cpi	r24, 0x30	; 48
    1216:	91 05       	cpc	r25, r1
    1218:	09 f0       	breq	.+2      	; 0x121c <lcd_print3+0x2ac>
    121a:	f4 ce       	rjmp	.-536    	; 0x1004 <lcd_print3+0x94>
    121c:	f5 ce       	rjmp	.-534    	; 0x1008 <lcd_print3+0x98>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	08 95       	ret

0000122a <lcd_print4>:

//27.345A //27mA ...
void lcd_print4(char row, char col, float value, char* str1, char* str2)
{
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	d8 2f       	mov	r29, r24
    1240:	c6 2f       	mov	r28, r22
    1242:	49 01       	movw	r8, r18
    1244:	5a 01       	movw	r10, r20
	//Print in mA, mW, mW etc
	if (value<1000)
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	4a e7       	ldi	r20, 0x7A	; 122
    124c:	54 e4       	ldi	r21, 0x44	; 68
    124e:	c5 01       	movw	r24, r10
    1250:	b4 01       	movw	r22, r8
    1252:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__cmpsf2>
    1256:	88 23       	and	r24, r24
    1258:	64 f4       	brge	.+24     	; 0x1272 <lcd_print4+0x48>
	{
		lcd_print2(row,col,value,4, str1);
    125a:	c5 01       	movw	r24, r10
    125c:	b4 01       	movw	r22, r8
    125e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__fixunssfsi>
    1262:	24 e0       	ldi	r18, 0x04	; 4
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	ab 01       	movw	r20, r22
    1268:	6c 2f       	mov	r22, r28
    126a:	8d 2f       	mov	r24, r29
    126c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <lcd_print2>
    1270:	7b c0       	rjmp	.+246    	; 0x1368 <lcd_print4+0x13e>
		}	
		*/
	}
	
	//Print in A, V, W etc and clear the space after(incase previous was >=10000)
	else if (value>=1000 && value < 10000)
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	4a e7       	ldi	r20, 0x7A	; 122
    1278:	54 e4       	ldi	r21, 0x44	; 68
    127a:	c5 01       	movw	r24, r10
    127c:	b4 01       	movw	r22, r8
    127e:	0e 94 4d 0c 	call	0x189a	; 0x189a <__gesf2>
    1282:	88 23       	and	r24, r24
    1284:	cc f1       	brlt	.+114    	; 0x12f8 <lcd_print4+0xce>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e4       	ldi	r19, 0x40	; 64
    128a:	4c e1       	ldi	r20, 0x1C	; 28
    128c:	56 e4       	ldi	r21, 0x46	; 70
    128e:	c5 01       	movw	r24, r10
    1290:	b4 01       	movw	r22, r8
    1292:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__cmpsf2>
    1296:	88 23       	and	r24, r24
    1298:	7c f5       	brge	.+94     	; 0x12f8 <lcd_print4+0xce>
	{
		lcd_print3(row, col, value/1000, 1);
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	4a e7       	ldi	r20, 0x7A	; 122
    12a0:	54 e4       	ldi	r21, 0x44	; 68
    12a2:	c5 01       	movw	r24, r10
    12a4:	b4 01       	movw	r22, r8
    12a6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__divsf3>
    12aa:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__fixunssfsi>
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	ab 01       	movw	r20, r22
    12b4:	6c 2f       	mov	r22, r28
    12b6:	8d 2f       	mov	r24, r29
    12b8:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_print3>
		lcd_string2(row, col+1, ".");				//Print the decimal point
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	6c 0f       	add	r22, r28
    12c0:	45 e2       	ldi	r20, 0x25	; 37
    12c2:	51 e0       	ldi	r21, 0x01	; 1
    12c4:	8d 2f       	mov	r24, r29
    12c6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
		
		lcd_print5(row, col+2, (int)value%1000, 3, str2);		
    12ca:	c5 01       	movw	r24, r10
    12cc:	b4 01       	movw	r22, r8
    12ce:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__fixsfsi>
    12d2:	cb 01       	movw	r24, r22
    12d4:	68 ee       	ldi	r22, 0xE8	; 232
    12d6:	73 e0       	ldi	r23, 0x03	; 3
    12d8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__divmodhi4>
    12dc:	62 e0       	ldi	r22, 0x02	; 2
    12de:	6c 0f       	add	r22, r28
    12e0:	87 01       	movw	r16, r14
    12e2:	23 e0       	ldi	r18, 0x03	; 3
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	ac 01       	movw	r20, r24
    12e8:	8d 2f       	mov	r24, r29
    12ea:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <lcd_print5>
		/*							//Print A, V etc
		lcd_print(row, col+2, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		
		lcd_string("  ");
    12ee:	87 e2       	ldi	r24, 0x27	; 39
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_string>
    12f6:	38 c0       	rjmp	.+112    	; 0x1368 <lcd_print4+0x13e>
	}
	
	//Print in A, V, W etc
	else if (value>=10000)
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e4       	ldi	r19, 0x40	; 64
    12fc:	4c e1       	ldi	r20, 0x1C	; 28
    12fe:	56 e4       	ldi	r21, 0x46	; 70
    1300:	c5 01       	movw	r24, r10
    1302:	b4 01       	movw	r22, r8
    1304:	0e 94 4d 0c 	call	0x189a	; 0x189a <__gesf2>
    1308:	88 23       	and	r24, r24
    130a:	74 f1       	brlt	.+92     	; 0x1368 <lcd_print4+0x13e>
	{
		lcd_print3(row, col, value/1000, 2);
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	4a e7       	ldi	r20, 0x7A	; 122
    1312:	54 e4       	ldi	r21, 0x44	; 68
    1314:	c5 01       	movw	r24, r10
    1316:	b4 01       	movw	r22, r8
    1318:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__divsf3>
    131c:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__fixunssfsi>
    1320:	22 e0       	ldi	r18, 0x02	; 2
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	ab 01       	movw	r20, r22
    1326:	6c 2f       	mov	r22, r28
    1328:	8d 2f       	mov	r24, r29
    132a:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_print3>
		lcd_string2(row, col+2, ".");				//Print the decimal point
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	6c 0f       	add	r22, r28
    1332:	45 e2       	ldi	r20, 0x25	; 37
    1334:	51 e0       	ldi	r21, 0x01	; 1
    1336:	8d 2f       	mov	r24, r29
    1338:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
		
		lcd_print5(row, col+3, (int)value%1000, 3, str2);
    133c:	c5 01       	movw	r24, r10
    133e:	b4 01       	movw	r22, r8
    1340:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__fixsfsi>
    1344:	cb 01       	movw	r24, r22
    1346:	68 ee       	ldi	r22, 0xE8	; 232
    1348:	73 e0       	ldi	r23, 0x03	; 3
    134a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__divmodhi4>
    134e:	63 e0       	ldi	r22, 0x03	; 3
    1350:	6c 0f       	add	r22, r28
    1352:	87 01       	movw	r16, r14
    1354:	23 e0       	ldi	r18, 0x03	; 3
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	ac 01       	movw	r20, r24
    135a:	8d 2f       	mov	r24, r29
    135c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <lcd_print5>
		
		/*					
		lcd_print(row, col+3, (int)value%1000, 3);
		lcd_string(str2);							//Print A, V etc
		*/
		lcd_string(" ");
    1360:	88 e2       	ldi	r24, 0x28	; 40
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_string>
	}	
} 
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	bf 90       	pop	r11
    1376:	af 90       	pop	r10
    1378:	9f 90       	pop	r9
    137a:	8f 90       	pop	r8
    137c:	08 95       	ret

0000137e <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
    137e:	0e 94 11 04 	call	0x822	; 0x822 <lcd_port_config>
	adc_pin_config();
    1382:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
    1386:	08 95       	ret

00001388 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
    1388:	f8 94       	cli
	lcd_start();
    138a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_start>
	adc_config();
    138e:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
    1392:	78 94       	sei
    1394:	08 95       	ret

00001396 <main>:
}

int main(void)
{
	port_config();
    1396:	0e 94 bf 09 	call	0x137e	; 0x137e <port_config>
	init_devices();
    139a:	0e 94 c4 09 	call	0x1388	; 0x1388 <init_devices>
		
	lcd_string2(1, 7, "CCL");
    139e:	4a e2       	ldi	r20, 0x2A	; 42
    13a0:	51 e0       	ldi	r21, 0x01	; 1
    13a2:	67 e0       	ldi	r22, 0x07	; 7
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
    13aa:	2f ef       	ldi	r18, 0xFF	; 255
    13ac:	85 ea       	ldi	r24, 0xA5	; 165
    13ae:	9e e0       	ldi	r25, 0x0E	; 14
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	80 40       	sbci	r24, 0x00	; 0
    13b4:	90 40       	sbci	r25, 0x00	; 0
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <main+0x1a>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <main+0x24>
    13ba:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)	//Check if external 12v is connected
    13bc:	1d 9b       	sbis	0x03, 5	; 3
    13be:	1b c0       	rjmp	.+54     	; 0x13f6 <main+0x60>
	{
		extern float offset;
		extern float fan_offset;
		lcd_string2(2,1,"Supply Connected");
    13c0:	4e e2       	ldi	r20, 0x2E	; 46
    13c2:	51 e0       	ldi	r21, 0x01	; 1
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
		offset = 4;
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e8       	ldi	r26, 0x80	; 128
    13d2:	b0 e4       	ldi	r27, 0x40	; 64
    13d4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <offset>
    13d8:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <offset+0x1>
    13dc:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <offset+0x2>
    13e0:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <offset+0x3>
		fan_offset = 0;
    13e4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <fan_offset>
    13e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <fan_offset+0x1>
    13ec:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <fan_offset+0x2>
    13f0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <fan_offset+0x3>
    13f4:	12 c0       	rjmp	.+36     	; 0x141a <main+0x84>
	}
	
	else				//Check if external 12v is NOT connected
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
    13f6:	4f e3       	ldi	r20, 0x3F	; 63
    13f8:	51 e0       	ldi	r21, 0x01	; 1
    13fa:	62 e0       	ldi	r22, 0x02	; 2
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
		offset = 31.2;
    1402:	8a e9       	ldi	r24, 0x9A	; 154
    1404:	99 e9       	ldi	r25, 0x99	; 153
    1406:	a9 ef       	ldi	r26, 0xF9	; 249
    1408:	b1 e4       	ldi	r27, 0x41	; 65
    140a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <offset>
    140e:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <offset+0x1>
    1412:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <offset+0x2>
    1416:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <offset+0x3>
    141a:	2f ef       	ldi	r18, 0xFF	; 255
    141c:	8b e4       	ldi	r24, 0x4B	; 75
    141e:	9d e1       	ldi	r25, 0x1D	; 29
    1420:	21 50       	subi	r18, 0x01	; 1
    1422:	80 40       	sbci	r24, 0x00	; 0
    1424:	90 40       	sbci	r25, 0x00	; 0
    1426:	e1 f7       	brne	.-8      	; 0x1420 <main+0x8a>
    1428:	00 c0       	rjmp	.+0      	; 0x142a <main+0x94>
    142a:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
    142c:	0e 94 ce 04 	call	0x99c	; 0x99c <lcd_clear>
		1 for power 
		2 for voltage 		
		3 for current
		4 for error
		*/
		char flag = 0;						
    1430:	10 e0       	ldi	r17, 0x00	; 0
					print_current(1,1);
					if(flag == 3)
					break;
					
					lcd_string2(2, 1, "Current Exceeded");
					flag = 3;
    1432:	d3 e0       	ldi	r29, 0x03	; 3
				default:
					if(flag)
					break;
				
					lcd_string2(1, 6, "Error");
					flag = 4;
    1434:	04 e0       	ldi	r16, 0x04	; 4
	_delay_ms(600);
	lcd_clear();
	
	while (1)
	{
		update_current();
    1436:	0e 94 0c 01 	call	0x218	; 0x218 <update_current>
		update_voltage();
    143a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <update_voltage>
		update_power();
    143e:	0e 94 89 01 	call	0x312	; 0x312 <update_power>
		//update_gate_voltage();
	
	if(check_thresholds()==0)		//If under safe limits print everything
    1442:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <check_thresholds>
    1446:	81 11       	cpse	r24, r1
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <main+0xd2>
	//if(1)	
	{	
		print_current(1,1);
    144a:	61 e0       	ldi	r22, 0x01	; 1
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	0e 94 3b 02 	call	0x476	; 0x476 <print_current>
		print_voltage(1,10);
    1452:	6a e0       	ldi	r22, 0x0A	; 10
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	0e 94 56 02 	call	0x4ac	; 0x4ac <print_voltage>
		print_power(2,1);
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <print_power>
		//print_gate_voltage(2,10);
		//print_mos_power(2,10);
		
		print_fan_status();
    1462:	0e 94 8c 02 	call	0x518	; 0x518 <print_fan_status>
    1466:	e7 cf       	rjmp	.-50     	; 0x1436 <main+0xa0>
	}
	else							//If over safe limits print what is exceeded and show its value
	{		
		lcd_clear();
    1468:	0e 94 ce 04 	call	0x99c	; 0x99c <lcd_clear>
		1 for power 
		2 for voltage 		
		3 for current
		4 for error
		*/
		char flag = 0;						
    146c:	c1 2f       	mov	r28, r17
		
		while(check_thresholds())	//Stay here until over safe limits 
    146e:	42 c0       	rjmp	.+132    	; 0x14f4 <main+0x15e>
		{	
			update_current();
    1470:	0e 94 0c 01 	call	0x218	; 0x218 <update_current>
			update_voltage();
    1474:	0e 94 54 01 	call	0x2a8	; 0x2a8 <update_voltage>
			update_power();
    1478:	0e 94 89 01 	call	0x312	; 0x312 <update_power>
			update_gate_voltage();
    147c:	0e 94 06 02 	call	0x40c	; 0x40c <update_gate_voltage>
			
			switch (check_thresholds())	//Switch according to what limit is exceeded
    1480:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <check_thresholds>
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	89 f0       	breq	.+34     	; 0x14aa <main+0x114>
    1488:	83 30       	cpi	r24, 0x03	; 3
    148a:	e9 f0       	breq	.+58     	; 0x14c6 <main+0x130>
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	49 f5       	brne	.+82     	; 0x14e2 <main+0x14c>
			{
				case 1:				//Power exceeds threshold
					print_power(1,1);					
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	0e 94 71 02 	call	0x4e2	; 0x4e2 <print_power>
					if(flag == 1)		//To print what is exceeded only once
    1496:	c1 30       	cpi	r28, 0x01	; 1
    1498:	69 f1       	breq	.+90     	; 0x14f4 <main+0x15e>
					break;
						
					lcd_string2(2, 1, "Power Exceeded");
    149a:	4d e4       	ldi	r20, 0x4D	; 77
    149c:	51 e0       	ldi	r21, 0x01	; 1
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
					flag = 1;		//What is exceeded is printed once
    14a6:	c1 e0       	ldi	r28, 0x01	; 1
					break;
    14a8:	25 c0       	rjmp	.+74     	; 0x14f4 <main+0x15e>
			
				case 2:	//Voltage exceeds threshold
					print_voltage(1,1);
    14aa:	61 e0       	ldi	r22, 0x01	; 1
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0e 94 56 02 	call	0x4ac	; 0x4ac <print_voltage>
					if(flag == 2)
    14b2:	c2 30       	cpi	r28, 0x02	; 2
    14b4:	f9 f0       	breq	.+62     	; 0x14f4 <main+0x15e>
					break;
					
					lcd_string2(2, 1, "Voltage Exceeded");
    14b6:	4c e5       	ldi	r20, 0x5C	; 92
    14b8:	51 e0       	ldi	r21, 0x01	; 1
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
					flag = 2;
    14c2:	c2 e0       	ldi	r28, 0x02	; 2
					break;
    14c4:	17 c0       	rjmp	.+46     	; 0x14f4 <main+0x15e>
			 
				case 3:	//Current exceeds threshold
					print_current(1,1);
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 3b 02 	call	0x476	; 0x476 <print_current>
					if(flag == 3)
    14ce:	c3 30       	cpi	r28, 0x03	; 3
    14d0:	89 f0       	breq	.+34     	; 0x14f4 <main+0x15e>
					break;
					
					lcd_string2(2, 1, "Current Exceeded");
    14d2:	4d e6       	ldi	r20, 0x6D	; 109
    14d4:	51 e0       	ldi	r21, 0x01	; 1
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
					flag = 3;
    14de:	cd 2f       	mov	r28, r29
					break;
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <main+0x15e>
			
				default:
					if(flag)
    14e2:	c1 11       	cpse	r28, r1
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <main+0x15e>
					break;
				
					lcd_string2(1, 6, "Error");
    14e6:	4e e7       	ldi	r20, 0x7E	; 126
    14e8:	51 e0       	ldi	r21, 0x01	; 1
    14ea:	66 e0       	ldi	r22, 0x06	; 6
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	0e 94 68 04 	call	0x8d0	; 0x8d0 <lcd_string2>
					flag = 4;
    14f2:	c0 2f       	mov	r28, r16
		3 for current
		4 for error
		*/
		char flag = 0;						
		
		while(check_thresholds())	//Stay here until over safe limits 
    14f4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <check_thresholds>
    14f8:	81 11       	cpse	r24, r1
    14fa:	ba cf       	rjmp	.-140    	; 0x1470 <main+0xda>
					lcd_string2(1, 6, "Error");
					flag = 4;
					break;
			}
		}
		lcd_clear();
    14fc:	0e 94 ce 04 	call	0x99c	; 0x99c <lcd_clear>
    1500:	9a cf       	rjmp	.-204    	; 0x1436 <main+0xa0>

00001502 <__subsf3>:
    1502:	50 58       	subi	r21, 0x80	; 128

00001504 <__addsf3>:
    1504:	bb 27       	eor	r27, r27
    1506:	aa 27       	eor	r26, r26
    1508:	0e 94 99 0a 	call	0x1532	; 0x1532 <__addsf3x>
    150c:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_round>
    1510:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_pscA>
    1514:	38 f0       	brcs	.+14     	; 0x1524 <__addsf3+0x20>
    1516:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__fp_pscB>
    151a:	20 f0       	brcs	.+8      	; 0x1524 <__addsf3+0x20>
    151c:	39 f4       	brne	.+14     	; 0x152c <__addsf3+0x28>
    151e:	9f 3f       	cpi	r25, 0xFF	; 255
    1520:	19 f4       	brne	.+6      	; 0x1528 <__addsf3+0x24>
    1522:	26 f4       	brtc	.+8      	; 0x152c <__addsf3+0x28>
    1524:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__fp_nan>
    1528:	0e f4       	brtc	.+2      	; 0x152c <__addsf3+0x28>
    152a:	e0 95       	com	r30
    152c:	e7 fb       	bst	r30, 7
    152e:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_inf>

00001532 <__addsf3x>:
    1532:	e9 2f       	mov	r30, r25
    1534:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fp_split3>
    1538:	58 f3       	brcs	.-42     	; 0x1510 <__addsf3+0xc>
    153a:	ba 17       	cp	r27, r26
    153c:	62 07       	cpc	r22, r18
    153e:	73 07       	cpc	r23, r19
    1540:	84 07       	cpc	r24, r20
    1542:	95 07       	cpc	r25, r21
    1544:	20 f0       	brcs	.+8      	; 0x154e <__addsf3x+0x1c>
    1546:	79 f4       	brne	.+30     	; 0x1566 <__addsf3x+0x34>
    1548:	a6 f5       	brtc	.+104    	; 0x15b2 <__addsf3x+0x80>
    154a:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_zero>
    154e:	0e f4       	brtc	.+2      	; 0x1552 <__addsf3x+0x20>
    1550:	e0 95       	com	r30
    1552:	0b 2e       	mov	r0, r27
    1554:	ba 2f       	mov	r27, r26
    1556:	a0 2d       	mov	r26, r0
    1558:	0b 01       	movw	r0, r22
    155a:	b9 01       	movw	r22, r18
    155c:	90 01       	movw	r18, r0
    155e:	0c 01       	movw	r0, r24
    1560:	ca 01       	movw	r24, r20
    1562:	a0 01       	movw	r20, r0
    1564:	11 24       	eor	r1, r1
    1566:	ff 27       	eor	r31, r31
    1568:	59 1b       	sub	r21, r25
    156a:	99 f0       	breq	.+38     	; 0x1592 <__addsf3x+0x60>
    156c:	59 3f       	cpi	r21, 0xF9	; 249
    156e:	50 f4       	brcc	.+20     	; 0x1584 <__addsf3x+0x52>
    1570:	50 3e       	cpi	r21, 0xE0	; 224
    1572:	68 f1       	brcs	.+90     	; 0x15ce <__addsf3x+0x9c>
    1574:	1a 16       	cp	r1, r26
    1576:	f0 40       	sbci	r31, 0x00	; 0
    1578:	a2 2f       	mov	r26, r18
    157a:	23 2f       	mov	r18, r19
    157c:	34 2f       	mov	r19, r20
    157e:	44 27       	eor	r20, r20
    1580:	58 5f       	subi	r21, 0xF8	; 248
    1582:	f3 cf       	rjmp	.-26     	; 0x156a <__addsf3x+0x38>
    1584:	46 95       	lsr	r20
    1586:	37 95       	ror	r19
    1588:	27 95       	ror	r18
    158a:	a7 95       	ror	r26
    158c:	f0 40       	sbci	r31, 0x00	; 0
    158e:	53 95       	inc	r21
    1590:	c9 f7       	brne	.-14     	; 0x1584 <__addsf3x+0x52>
    1592:	7e f4       	brtc	.+30     	; 0x15b2 <__addsf3x+0x80>
    1594:	1f 16       	cp	r1, r31
    1596:	ba 0b       	sbc	r27, r26
    1598:	62 0b       	sbc	r22, r18
    159a:	73 0b       	sbc	r23, r19
    159c:	84 0b       	sbc	r24, r20
    159e:	ba f0       	brmi	.+46     	; 0x15ce <__addsf3x+0x9c>
    15a0:	91 50       	subi	r25, 0x01	; 1
    15a2:	a1 f0       	breq	.+40     	; 0x15cc <__addsf3x+0x9a>
    15a4:	ff 0f       	add	r31, r31
    15a6:	bb 1f       	adc	r27, r27
    15a8:	66 1f       	adc	r22, r22
    15aa:	77 1f       	adc	r23, r23
    15ac:	88 1f       	adc	r24, r24
    15ae:	c2 f7       	brpl	.-16     	; 0x15a0 <__addsf3x+0x6e>
    15b0:	0e c0       	rjmp	.+28     	; 0x15ce <__addsf3x+0x9c>
    15b2:	ba 0f       	add	r27, r26
    15b4:	62 1f       	adc	r22, r18
    15b6:	73 1f       	adc	r23, r19
    15b8:	84 1f       	adc	r24, r20
    15ba:	48 f4       	brcc	.+18     	; 0x15ce <__addsf3x+0x9c>
    15bc:	87 95       	ror	r24
    15be:	77 95       	ror	r23
    15c0:	67 95       	ror	r22
    15c2:	b7 95       	ror	r27
    15c4:	f7 95       	ror	r31
    15c6:	9e 3f       	cpi	r25, 0xFE	; 254
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <__addsf3x+0x9a>
    15ca:	b0 cf       	rjmp	.-160    	; 0x152c <__addsf3+0x28>
    15cc:	93 95       	inc	r25
    15ce:	88 0f       	add	r24, r24
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <__addsf3x+0xa2>
    15d2:	99 27       	eor	r25, r25
    15d4:	ee 0f       	add	r30, r30
    15d6:	97 95       	ror	r25
    15d8:	87 95       	ror	r24
    15da:	08 95       	ret

000015dc <__cmpsf2>:
    15dc:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_cmp>
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <__cmpsf2+0x8>
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	08 95       	ret

000015e6 <__divsf3>:
    15e6:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3x>
    15ea:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_round>
    15ee:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__fp_pscB>
    15f2:	58 f0       	brcs	.+22     	; 0x160a <__divsf3+0x24>
    15f4:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_pscA>
    15f8:	40 f0       	brcs	.+16     	; 0x160a <__divsf3+0x24>
    15fa:	29 f4       	brne	.+10     	; 0x1606 <__divsf3+0x20>
    15fc:	5f 3f       	cpi	r21, 0xFF	; 255
    15fe:	29 f0       	breq	.+10     	; 0x160a <__divsf3+0x24>
    1600:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_inf>
    1604:	51 11       	cpse	r21, r1
    1606:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_szero>
    160a:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__fp_nan>

0000160e <__divsf3x>:
    160e:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fp_split3>
    1612:	68 f3       	brcs	.-38     	; 0x15ee <__divsf3+0x8>

00001614 <__divsf3_pse>:
    1614:	99 23       	and	r25, r25
    1616:	b1 f3       	breq	.-20     	; 0x1604 <__divsf3+0x1e>
    1618:	55 23       	and	r21, r21
    161a:	91 f3       	breq	.-28     	; 0x1600 <__divsf3+0x1a>
    161c:	95 1b       	sub	r25, r21
    161e:	55 0b       	sbc	r21, r21
    1620:	bb 27       	eor	r27, r27
    1622:	aa 27       	eor	r26, r26
    1624:	62 17       	cp	r22, r18
    1626:	73 07       	cpc	r23, r19
    1628:	84 07       	cpc	r24, r20
    162a:	38 f0       	brcs	.+14     	; 0x163a <__divsf3_pse+0x26>
    162c:	9f 5f       	subi	r25, 0xFF	; 255
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	22 0f       	add	r18, r18
    1632:	33 1f       	adc	r19, r19
    1634:	44 1f       	adc	r20, r20
    1636:	aa 1f       	adc	r26, r26
    1638:	a9 f3       	breq	.-22     	; 0x1624 <__divsf3_pse+0x10>
    163a:	35 d0       	rcall	.+106    	; 0x16a6 <__divsf3_pse+0x92>
    163c:	0e 2e       	mov	r0, r30
    163e:	3a f0       	brmi	.+14     	; 0x164e <__divsf3_pse+0x3a>
    1640:	e0 e8       	ldi	r30, 0x80	; 128
    1642:	32 d0       	rcall	.+100    	; 0x16a8 <__divsf3_pse+0x94>
    1644:	91 50       	subi	r25, 0x01	; 1
    1646:	50 40       	sbci	r21, 0x00	; 0
    1648:	e6 95       	lsr	r30
    164a:	00 1c       	adc	r0, r0
    164c:	ca f7       	brpl	.-14     	; 0x1640 <__divsf3_pse+0x2c>
    164e:	2b d0       	rcall	.+86     	; 0x16a6 <__divsf3_pse+0x92>
    1650:	fe 2f       	mov	r31, r30
    1652:	29 d0       	rcall	.+82     	; 0x16a6 <__divsf3_pse+0x92>
    1654:	66 0f       	add	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	bb 1f       	adc	r27, r27
    165c:	26 17       	cp	r18, r22
    165e:	37 07       	cpc	r19, r23
    1660:	48 07       	cpc	r20, r24
    1662:	ab 07       	cpc	r26, r27
    1664:	b0 e8       	ldi	r27, 0x80	; 128
    1666:	09 f0       	breq	.+2      	; 0x166a <__divsf3_pse+0x56>
    1668:	bb 0b       	sbc	r27, r27
    166a:	80 2d       	mov	r24, r0
    166c:	bf 01       	movw	r22, r30
    166e:	ff 27       	eor	r31, r31
    1670:	93 58       	subi	r25, 0x83	; 131
    1672:	5f 4f       	sbci	r21, 0xFF	; 255
    1674:	3a f0       	brmi	.+14     	; 0x1684 <__divsf3_pse+0x70>
    1676:	9e 3f       	cpi	r25, 0xFE	; 254
    1678:	51 05       	cpc	r21, r1
    167a:	78 f0       	brcs	.+30     	; 0x169a <__divsf3_pse+0x86>
    167c:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_inf>
    1680:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_szero>
    1684:	5f 3f       	cpi	r21, 0xFF	; 255
    1686:	e4 f3       	brlt	.-8      	; 0x1680 <__divsf3_pse+0x6c>
    1688:	98 3e       	cpi	r25, 0xE8	; 232
    168a:	d4 f3       	brlt	.-12     	; 0x1680 <__divsf3_pse+0x6c>
    168c:	86 95       	lsr	r24
    168e:	77 95       	ror	r23
    1690:	67 95       	ror	r22
    1692:	b7 95       	ror	r27
    1694:	f7 95       	ror	r31
    1696:	9f 5f       	subi	r25, 0xFF	; 255
    1698:	c9 f7       	brne	.-14     	; 0x168c <__divsf3_pse+0x78>
    169a:	88 0f       	add	r24, r24
    169c:	91 1d       	adc	r25, r1
    169e:	96 95       	lsr	r25
    16a0:	87 95       	ror	r24
    16a2:	97 f9       	bld	r25, 7
    16a4:	08 95       	ret
    16a6:	e1 e0       	ldi	r30, 0x01	; 1
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	bb 1f       	adc	r27, r27
    16b0:	62 17       	cp	r22, r18
    16b2:	73 07       	cpc	r23, r19
    16b4:	84 07       	cpc	r24, r20
    16b6:	ba 07       	cpc	r27, r26
    16b8:	20 f0       	brcs	.+8      	; 0x16c2 <__divsf3_pse+0xae>
    16ba:	62 1b       	sub	r22, r18
    16bc:	73 0b       	sbc	r23, r19
    16be:	84 0b       	sbc	r24, r20
    16c0:	ba 0b       	sbc	r27, r26
    16c2:	ee 1f       	adc	r30, r30
    16c4:	88 f7       	brcc	.-30     	; 0x16a8 <__divsf3_pse+0x94>
    16c6:	e0 95       	com	r30
    16c8:	08 95       	ret

000016ca <__fixsfsi>:
    16ca:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__fixunssfsi>
    16ce:	68 94       	set
    16d0:	b1 11       	cpse	r27, r1
    16d2:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_szero>
    16d6:	08 95       	ret

000016d8 <__fixunssfsi>:
    16d8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_splitA>
    16dc:	88 f0       	brcs	.+34     	; 0x1700 <__fixunssfsi+0x28>
    16de:	9f 57       	subi	r25, 0x7F	; 127
    16e0:	98 f0       	brcs	.+38     	; 0x1708 <__fixunssfsi+0x30>
    16e2:	b9 2f       	mov	r27, r25
    16e4:	99 27       	eor	r25, r25
    16e6:	b7 51       	subi	r27, 0x17	; 23
    16e8:	b0 f0       	brcs	.+44     	; 0x1716 <__fixunssfsi+0x3e>
    16ea:	e1 f0       	breq	.+56     	; 0x1724 <__fixunssfsi+0x4c>
    16ec:	66 0f       	add	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	1a f0       	brmi	.+6      	; 0x16fc <__fixunssfsi+0x24>
    16f6:	ba 95       	dec	r27
    16f8:	c9 f7       	brne	.-14     	; 0x16ec <__fixunssfsi+0x14>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <__fixunssfsi+0x4c>
    16fc:	b1 30       	cpi	r27, 0x01	; 1
    16fe:	91 f0       	breq	.+36     	; 0x1724 <__fixunssfsi+0x4c>
    1700:	0e 94 46 0c 	call	0x188c	; 0x188c <__fp_zero>
    1704:	b1 e0       	ldi	r27, 0x01	; 1
    1706:	08 95       	ret
    1708:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_zero>
    170c:	67 2f       	mov	r22, r23
    170e:	78 2f       	mov	r23, r24
    1710:	88 27       	eor	r24, r24
    1712:	b8 5f       	subi	r27, 0xF8	; 248
    1714:	39 f0       	breq	.+14     	; 0x1724 <__fixunssfsi+0x4c>
    1716:	b9 3f       	cpi	r27, 0xF9	; 249
    1718:	cc f3       	brlt	.-14     	; 0x170c <__fixunssfsi+0x34>
    171a:	86 95       	lsr	r24
    171c:	77 95       	ror	r23
    171e:	67 95       	ror	r22
    1720:	b3 95       	inc	r27
    1722:	d9 f7       	brne	.-10     	; 0x171a <__fixunssfsi+0x42>
    1724:	3e f4       	brtc	.+14     	; 0x1734 <__fixunssfsi+0x5c>
    1726:	90 95       	com	r25
    1728:	80 95       	com	r24
    172a:	70 95       	com	r23
    172c:	61 95       	neg	r22
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	08 95       	ret

00001736 <__floatunsisf>:
    1736:	e8 94       	clt
    1738:	09 c0       	rjmp	.+18     	; 0x174c <__floatsisf+0x12>

0000173a <__floatsisf>:
    173a:	97 fb       	bst	r25, 7
    173c:	3e f4       	brtc	.+14     	; 0x174c <__floatsisf+0x12>
    173e:	90 95       	com	r25
    1740:	80 95       	com	r24
    1742:	70 95       	com	r23
    1744:	61 95       	neg	r22
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	99 23       	and	r25, r25
    174e:	a9 f0       	breq	.+42     	; 0x177a <__floatsisf+0x40>
    1750:	f9 2f       	mov	r31, r25
    1752:	96 e9       	ldi	r25, 0x96	; 150
    1754:	bb 27       	eor	r27, r27
    1756:	93 95       	inc	r25
    1758:	f6 95       	lsr	r31
    175a:	87 95       	ror	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	b7 95       	ror	r27
    1762:	f1 11       	cpse	r31, r1
    1764:	f8 cf       	rjmp	.-16     	; 0x1756 <__floatsisf+0x1c>
    1766:	fa f4       	brpl	.+62     	; 0x17a6 <__floatsisf+0x6c>
    1768:	bb 0f       	add	r27, r27
    176a:	11 f4       	brne	.+4      	; 0x1770 <__floatsisf+0x36>
    176c:	60 ff       	sbrs	r22, 0
    176e:	1b c0       	rjmp	.+54     	; 0x17a6 <__floatsisf+0x6c>
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	16 c0       	rjmp	.+44     	; 0x17a6 <__floatsisf+0x6c>
    177a:	88 23       	and	r24, r24
    177c:	11 f0       	breq	.+4      	; 0x1782 <__floatsisf+0x48>
    177e:	96 e9       	ldi	r25, 0x96	; 150
    1780:	11 c0       	rjmp	.+34     	; 0x17a4 <__floatsisf+0x6a>
    1782:	77 23       	and	r23, r23
    1784:	21 f0       	breq	.+8      	; 0x178e <__floatsisf+0x54>
    1786:	9e e8       	ldi	r25, 0x8E	; 142
    1788:	87 2f       	mov	r24, r23
    178a:	76 2f       	mov	r23, r22
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <__floatsisf+0x5e>
    178e:	66 23       	and	r22, r22
    1790:	71 f0       	breq	.+28     	; 0x17ae <__floatsisf+0x74>
    1792:	96 e8       	ldi	r25, 0x86	; 134
    1794:	86 2f       	mov	r24, r22
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	2a f0       	brmi	.+10     	; 0x17a6 <__floatsisf+0x6c>
    179c:	9a 95       	dec	r25
    179e:	66 0f       	add	r22, r22
    17a0:	77 1f       	adc	r23, r23
    17a2:	88 1f       	adc	r24, r24
    17a4:	da f7       	brpl	.-10     	; 0x179c <__floatsisf+0x62>
    17a6:	88 0f       	add	r24, r24
    17a8:	96 95       	lsr	r25
    17aa:	87 95       	ror	r24
    17ac:	97 f9       	bld	r25, 7
    17ae:	08 95       	ret

000017b0 <__fp_cmp>:
    17b0:	99 0f       	add	r25, r25
    17b2:	00 08       	sbc	r0, r0
    17b4:	55 0f       	add	r21, r21
    17b6:	aa 0b       	sbc	r26, r26
    17b8:	e0 e8       	ldi	r30, 0x80	; 128
    17ba:	fe ef       	ldi	r31, 0xFE	; 254
    17bc:	16 16       	cp	r1, r22
    17be:	17 06       	cpc	r1, r23
    17c0:	e8 07       	cpc	r30, r24
    17c2:	f9 07       	cpc	r31, r25
    17c4:	c0 f0       	brcs	.+48     	; 0x17f6 <__fp_cmp+0x46>
    17c6:	12 16       	cp	r1, r18
    17c8:	13 06       	cpc	r1, r19
    17ca:	e4 07       	cpc	r30, r20
    17cc:	f5 07       	cpc	r31, r21
    17ce:	98 f0       	brcs	.+38     	; 0x17f6 <__fp_cmp+0x46>
    17d0:	62 1b       	sub	r22, r18
    17d2:	73 0b       	sbc	r23, r19
    17d4:	84 0b       	sbc	r24, r20
    17d6:	95 0b       	sbc	r25, r21
    17d8:	39 f4       	brne	.+14     	; 0x17e8 <__fp_cmp+0x38>
    17da:	0a 26       	eor	r0, r26
    17dc:	61 f0       	breq	.+24     	; 0x17f6 <__fp_cmp+0x46>
    17de:	23 2b       	or	r18, r19
    17e0:	24 2b       	or	r18, r20
    17e2:	25 2b       	or	r18, r21
    17e4:	21 f4       	brne	.+8      	; 0x17ee <__fp_cmp+0x3e>
    17e6:	08 95       	ret
    17e8:	0a 26       	eor	r0, r26
    17ea:	09 f4       	brne	.+2      	; 0x17ee <__fp_cmp+0x3e>
    17ec:	a1 40       	sbci	r26, 0x01	; 1
    17ee:	a6 95       	lsr	r26
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	81 1d       	adc	r24, r1
    17f4:	81 1d       	adc	r24, r1
    17f6:	08 95       	ret

000017f8 <__fp_inf>:
    17f8:	97 f9       	bld	r25, 7
    17fa:	9f 67       	ori	r25, 0x7F	; 127
    17fc:	80 e8       	ldi	r24, 0x80	; 128
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	08 95       	ret

00001804 <__fp_nan>:
    1804:	9f ef       	ldi	r25, 0xFF	; 255
    1806:	80 ec       	ldi	r24, 0xC0	; 192
    1808:	08 95       	ret

0000180a <__fp_pscA>:
    180a:	00 24       	eor	r0, r0
    180c:	0a 94       	dec	r0
    180e:	16 16       	cp	r1, r22
    1810:	17 06       	cpc	r1, r23
    1812:	18 06       	cpc	r1, r24
    1814:	09 06       	cpc	r0, r25
    1816:	08 95       	ret

00001818 <__fp_pscB>:
    1818:	00 24       	eor	r0, r0
    181a:	0a 94       	dec	r0
    181c:	12 16       	cp	r1, r18
    181e:	13 06       	cpc	r1, r19
    1820:	14 06       	cpc	r1, r20
    1822:	05 06       	cpc	r0, r21
    1824:	08 95       	ret

00001826 <__fp_round>:
    1826:	09 2e       	mov	r0, r25
    1828:	03 94       	inc	r0
    182a:	00 0c       	add	r0, r0
    182c:	11 f4       	brne	.+4      	; 0x1832 <__fp_round+0xc>
    182e:	88 23       	and	r24, r24
    1830:	52 f0       	brmi	.+20     	; 0x1846 <__fp_round+0x20>
    1832:	bb 0f       	add	r27, r27
    1834:	40 f4       	brcc	.+16     	; 0x1846 <__fp_round+0x20>
    1836:	bf 2b       	or	r27, r31
    1838:	11 f4       	brne	.+4      	; 0x183e <__fp_round+0x18>
    183a:	60 ff       	sbrs	r22, 0
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <__fp_round+0x20>
    183e:	6f 5f       	subi	r22, 0xFF	; 255
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	8f 4f       	sbci	r24, 0xFF	; 255
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	08 95       	ret

00001848 <__fp_split3>:
    1848:	57 fd       	sbrc	r21, 7
    184a:	90 58       	subi	r25, 0x80	; 128
    184c:	44 0f       	add	r20, r20
    184e:	55 1f       	adc	r21, r21
    1850:	59 f0       	breq	.+22     	; 0x1868 <__fp_splitA+0x10>
    1852:	5f 3f       	cpi	r21, 0xFF	; 255
    1854:	71 f0       	breq	.+28     	; 0x1872 <__fp_splitA+0x1a>
    1856:	47 95       	ror	r20

00001858 <__fp_splitA>:
    1858:	88 0f       	add	r24, r24
    185a:	97 fb       	bst	r25, 7
    185c:	99 1f       	adc	r25, r25
    185e:	61 f0       	breq	.+24     	; 0x1878 <__fp_splitA+0x20>
    1860:	9f 3f       	cpi	r25, 0xFF	; 255
    1862:	79 f0       	breq	.+30     	; 0x1882 <__fp_splitA+0x2a>
    1864:	87 95       	ror	r24
    1866:	08 95       	ret
    1868:	12 16       	cp	r1, r18
    186a:	13 06       	cpc	r1, r19
    186c:	14 06       	cpc	r1, r20
    186e:	55 1f       	adc	r21, r21
    1870:	f2 cf       	rjmp	.-28     	; 0x1856 <__fp_split3+0xe>
    1872:	46 95       	lsr	r20
    1874:	f1 df       	rcall	.-30     	; 0x1858 <__fp_splitA>
    1876:	08 c0       	rjmp	.+16     	; 0x1888 <__fp_splitA+0x30>
    1878:	16 16       	cp	r1, r22
    187a:	17 06       	cpc	r1, r23
    187c:	18 06       	cpc	r1, r24
    187e:	99 1f       	adc	r25, r25
    1880:	f1 cf       	rjmp	.-30     	; 0x1864 <__fp_splitA+0xc>
    1882:	86 95       	lsr	r24
    1884:	71 05       	cpc	r23, r1
    1886:	61 05       	cpc	r22, r1
    1888:	08 94       	sec
    188a:	08 95       	ret

0000188c <__fp_zero>:
    188c:	e8 94       	clt

0000188e <__fp_szero>:
    188e:	bb 27       	eor	r27, r27
    1890:	66 27       	eor	r22, r22
    1892:	77 27       	eor	r23, r23
    1894:	cb 01       	movw	r24, r22
    1896:	97 f9       	bld	r25, 7
    1898:	08 95       	ret

0000189a <__gesf2>:
    189a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_cmp>
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <__gesf2+0x8>
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	08 95       	ret

000018a4 <__mulsf3>:
    18a4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3x>
    18a8:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_round>
    18ac:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_pscA>
    18b0:	38 f0       	brcs	.+14     	; 0x18c0 <__mulsf3+0x1c>
    18b2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__fp_pscB>
    18b6:	20 f0       	brcs	.+8      	; 0x18c0 <__mulsf3+0x1c>
    18b8:	95 23       	and	r25, r21
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <__mulsf3+0x1c>
    18bc:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_inf>
    18c0:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__fp_nan>
    18c4:	11 24       	eor	r1, r1
    18c6:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_szero>

000018ca <__mulsf3x>:
    18ca:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fp_split3>
    18ce:	70 f3       	brcs	.-36     	; 0x18ac <__mulsf3+0x8>

000018d0 <__mulsf3_pse>:
    18d0:	95 9f       	mul	r25, r21
    18d2:	c1 f3       	breq	.-16     	; 0x18c4 <__mulsf3+0x20>
    18d4:	95 0f       	add	r25, r21
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	55 1f       	adc	r21, r21
    18da:	62 9f       	mul	r22, r18
    18dc:	f0 01       	movw	r30, r0
    18de:	72 9f       	mul	r23, r18
    18e0:	bb 27       	eor	r27, r27
    18e2:	f0 0d       	add	r31, r0
    18e4:	b1 1d       	adc	r27, r1
    18e6:	63 9f       	mul	r22, r19
    18e8:	aa 27       	eor	r26, r26
    18ea:	f0 0d       	add	r31, r0
    18ec:	b1 1d       	adc	r27, r1
    18ee:	aa 1f       	adc	r26, r26
    18f0:	64 9f       	mul	r22, r20
    18f2:	66 27       	eor	r22, r22
    18f4:	b0 0d       	add	r27, r0
    18f6:	a1 1d       	adc	r26, r1
    18f8:	66 1f       	adc	r22, r22
    18fa:	82 9f       	mul	r24, r18
    18fc:	22 27       	eor	r18, r18
    18fe:	b0 0d       	add	r27, r0
    1900:	a1 1d       	adc	r26, r1
    1902:	62 1f       	adc	r22, r18
    1904:	73 9f       	mul	r23, r19
    1906:	b0 0d       	add	r27, r0
    1908:	a1 1d       	adc	r26, r1
    190a:	62 1f       	adc	r22, r18
    190c:	83 9f       	mul	r24, r19
    190e:	a0 0d       	add	r26, r0
    1910:	61 1d       	adc	r22, r1
    1912:	22 1f       	adc	r18, r18
    1914:	74 9f       	mul	r23, r20
    1916:	33 27       	eor	r19, r19
    1918:	a0 0d       	add	r26, r0
    191a:	61 1d       	adc	r22, r1
    191c:	23 1f       	adc	r18, r19
    191e:	84 9f       	mul	r24, r20
    1920:	60 0d       	add	r22, r0
    1922:	21 1d       	adc	r18, r1
    1924:	82 2f       	mov	r24, r18
    1926:	76 2f       	mov	r23, r22
    1928:	6a 2f       	mov	r22, r26
    192a:	11 24       	eor	r1, r1
    192c:	9f 57       	subi	r25, 0x7F	; 127
    192e:	50 40       	sbci	r21, 0x00	; 0
    1930:	9a f0       	brmi	.+38     	; 0x1958 <__mulsf3_pse+0x88>
    1932:	f1 f0       	breq	.+60     	; 0x1970 <__mulsf3_pse+0xa0>
    1934:	88 23       	and	r24, r24
    1936:	4a f0       	brmi	.+18     	; 0x194a <__mulsf3_pse+0x7a>
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	bb 1f       	adc	r27, r27
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	91 50       	subi	r25, 0x01	; 1
    1946:	50 40       	sbci	r21, 0x00	; 0
    1948:	a9 f7       	brne	.-22     	; 0x1934 <__mulsf3_pse+0x64>
    194a:	9e 3f       	cpi	r25, 0xFE	; 254
    194c:	51 05       	cpc	r21, r1
    194e:	80 f0       	brcs	.+32     	; 0x1970 <__mulsf3_pse+0xa0>
    1950:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_inf>
    1954:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_szero>
    1958:	5f 3f       	cpi	r21, 0xFF	; 255
    195a:	e4 f3       	brlt	.-8      	; 0x1954 <__mulsf3_pse+0x84>
    195c:	98 3e       	cpi	r25, 0xE8	; 232
    195e:	d4 f3       	brlt	.-12     	; 0x1954 <__mulsf3_pse+0x84>
    1960:	86 95       	lsr	r24
    1962:	77 95       	ror	r23
    1964:	67 95       	ror	r22
    1966:	b7 95       	ror	r27
    1968:	f7 95       	ror	r31
    196a:	e7 95       	ror	r30
    196c:	9f 5f       	subi	r25, 0xFF	; 255
    196e:	c1 f7       	brne	.-16     	; 0x1960 <__mulsf3_pse+0x90>
    1970:	fe 2b       	or	r31, r30
    1972:	88 0f       	add	r24, r24
    1974:	91 1d       	adc	r25, r1
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	97 f9       	bld	r25, 7
    197c:	08 95       	ret

0000197e <__udivmodhi4>:
    197e:	aa 1b       	sub	r26, r26
    1980:	bb 1b       	sub	r27, r27
    1982:	51 e1       	ldi	r21, 0x11	; 17
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <__udivmodhi4_ep>

00001986 <__udivmodhi4_loop>:
    1986:	aa 1f       	adc	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	a6 17       	cp	r26, r22
    198c:	b7 07       	cpc	r27, r23
    198e:	10 f0       	brcs	.+4      	; 0x1994 <__udivmodhi4_ep>
    1990:	a6 1b       	sub	r26, r22
    1992:	b7 0b       	sbc	r27, r23

00001994 <__udivmodhi4_ep>:
    1994:	88 1f       	adc	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	5a 95       	dec	r21
    199a:	a9 f7       	brne	.-22     	; 0x1986 <__udivmodhi4_loop>
    199c:	80 95       	com	r24
    199e:	90 95       	com	r25
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	08 95       	ret

000019a6 <__divmodhi4>:
    19a6:	97 fb       	bst	r25, 7
    19a8:	07 2e       	mov	r0, r23
    19aa:	16 f4       	brtc	.+4      	; 0x19b0 <__divmodhi4+0xa>
    19ac:	00 94       	com	r0
    19ae:	07 d0       	rcall	.+14     	; 0x19be <__divmodhi4_neg1>
    19b0:	77 fd       	sbrc	r23, 7
    19b2:	09 d0       	rcall	.+18     	; 0x19c6 <__divmodhi4_neg2>
    19b4:	0e 94 bf 0c 	call	0x197e	; 0x197e <__udivmodhi4>
    19b8:	07 fc       	sbrc	r0, 7
    19ba:	05 d0       	rcall	.+10     	; 0x19c6 <__divmodhi4_neg2>
    19bc:	3e f4       	brtc	.+14     	; 0x19cc <__divmodhi4_exit>

000019be <__divmodhi4_neg1>:
    19be:	90 95       	com	r25
    19c0:	81 95       	neg	r24
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	08 95       	ret

000019c6 <__divmodhi4_neg2>:
    19c6:	70 95       	com	r23
    19c8:	61 95       	neg	r22
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255

000019cc <__divmodhi4_exit>:
    19cc:	08 95       	ret

000019ce <__umulhisi3>:
    19ce:	a2 9f       	mul	r26, r18
    19d0:	b0 01       	movw	r22, r0
    19d2:	b3 9f       	mul	r27, r19
    19d4:	c0 01       	movw	r24, r0
    19d6:	a3 9f       	mul	r26, r19
    19d8:	70 0d       	add	r23, r0
    19da:	81 1d       	adc	r24, r1
    19dc:	11 24       	eor	r1, r1
    19de:	91 1d       	adc	r25, r1
    19e0:	b2 9f       	mul	r27, r18
    19e2:	70 0d       	add	r23, r0
    19e4:	81 1d       	adc	r24, r1
    19e6:	11 24       	eor	r1, r1
    19e8:	91 1d       	adc	r25, r1
    19ea:	08 95       	ret

000019ec <_exit>:
    19ec:	f8 94       	cli

000019ee <__stop_program>:
    19ee:	ff cf       	rjmp	.-2      	; 0x19ee <__stop_program>
