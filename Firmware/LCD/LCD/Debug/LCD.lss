
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000b9c  00000c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080012e  0080012e  00000c5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b7  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ace  00000000  00000000  00002267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2f  00000000  00000000  00002d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00003764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000812  00000000  00000000  00003e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000465b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <main>
  9e:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
#include <util/delay.h>

//ADC pin configuration
void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
  a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
  a8:	18 b8       	out	0x08, r1	; 8
  aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	//ADCSRA=0x85; //1 --- 0 101 ADC Enable, ADC Interrupt disable, ADC Prescaler=32
	ADCSRA=0x87; //1 --- 0 111 ADC Enable, ADC Interrupt disable, ADC Prescaler=128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b2:	08 95       	ret

000000b4 <read_adc>:
}

unsigned int read_adc()
{
	ADCSRA|=0x40; //ADSC: ADC Start Conversion: In Single Conversion mode, write this bit to one to start each conversion.	
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	while((ADCSRA & 0x10)==0); //ADIF: ADC Interrupt Flag: This bit is set when an ADC conversion completes and the Data Registers are updated.
  be:	80 81       	ld	r24, Z
  c0:	84 ff       	sbrs	r24, 4
  c2:	fd cf       	rjmp	.-6      	; 0xbe <read_adc+0xa>
	ADCSRA|=0x10;	//ADIF is cleared by writing a logical one to the flag.
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24
	
	unsigned char low = ADCL;
  ce:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
  d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	unsigned int val = 0x03 && high;
	val = val<<8;
	val = 256*high + low;
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	98 2f       	mov	r25, r24
  da:	88 27       	eor	r24, r24
	
	return val;
}
  dc:	82 0f       	add	r24, r18
  de:	91 1d       	adc	r25, r1
  e0:	08 95       	ret

000000e2 <read_adc_channel>:

unsigned int read_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
  e2:	88 30       	cpi	r24, 0x08	; 8
  e4:	58 f4       	brcc	.+22     	; 0xfc <read_adc_channel+0x1a>
	{	
		//ADMUX = 0x40 | channel;	//01 - - AVCC with external capacitor at AREF pin :--: 0000  ADC 0 (Channel)
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
  e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f e1       	ldi	r24, 0x1F	; 31
  ec:	9e e4       	ldi	r25, 0x4E	; 78
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <read_adc_channel+0xc>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <read_adc_channel+0x12>
  f4:	00 00       	nop
		_delay_ms(5);
		return read_adc();
  f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
  fa:	08 95       	ret
	}
	else
		return 22;				//error
  fc:	86 e1       	ldi	r24, 0x16	; 22
  fe:	90 e0       	ldi	r25, 0x00	; 0
}
 100:	08 95       	ret

00000102 <avg_read_adc_channel>:

unsigned int avg_read_adc_channel(char channel, char i)
{
 102:	8f 92       	push	r8
 104:	9f 92       	push	r9
 106:	af 92       	push	r10
 108:	bf 92       	push	r11
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	d8 2e       	mov	r13, r24
	float val = 0;
	for(int j = 1;j<=i;j++)
 11a:	e6 2e       	mov	r14, r22
 11c:	f1 2c       	mov	r15, r1
 11e:	1e 14       	cp	r1, r14
 120:	1f 04       	cpc	r1, r15
 122:	ec f4       	brge	.+58     	; 0x15e <avg_read_adc_channel+0x5c>
 124:	c1 e0       	ldi	r28, 0x01	; 1
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	81 2c       	mov	r8, r1
 12a:	91 2c       	mov	r9, r1
 12c:	54 01       	movw	r10, r8
	{
		val = val + read_adc_channel(channel)/i;
 12e:	87 01       	movw	r16, r14
 130:	8d 2d       	mov	r24, r13
 132:	0e 94 71 00 	call	0xe2	; 0xe2 <read_adc_channel>
 136:	b8 01       	movw	r22, r16
 138:	0e 94 a9 05 	call	0xb52	; 0xb52 <__udivmodhi4>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatunsisf>
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
 148:	c5 01       	movw	r24, r10
 14a:	b4 01       	movw	r22, r8
 14c:	0e 94 a1 03 	call	0x742	; 0x742 <__addsf3>
 150:	4b 01       	movw	r8, r22
 152:	5c 01       	movw	r10, r24
}

unsigned int avg_read_adc_channel(char channel, char i)
{
	float val = 0;
	for(int j = 1;j<=i;j++)
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	ec 16       	cp	r14, r28
 158:	fd 06       	cpc	r15, r29
 15a:	54 f7       	brge	.-44     	; 0x130 <avg_read_adc_channel+0x2e>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <avg_read_adc_channel+0x62>
		return 22;				//error
}

unsigned int avg_read_adc_channel(char channel, char i)
{
	float val = 0;
 15e:	81 2c       	mov	r8, r1
 160:	91 2c       	mov	r9, r1
 162:	54 01       	movw	r10, r8
	for(int j = 1;j<=i;j++)
	{
		val = val + read_adc_channel(channel)/i;
	}
	
	return val;
 164:	c5 01       	movw	r24, r10
 166:	b4 01       	movw	r22, r8
 168:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fixunssfsi>
 16c:	cb 01       	movw	r24, r22
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	df 90       	pop	r13
 17c:	bf 90       	pop	r11
 17e:	af 90       	pop	r10
 180:	9f 90       	pop	r9
 182:	8f 90       	pop	r8
 184:	08 95       	ret

00000186 <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
 186:	98 2f       	mov	r25, r24
 188:	88 1f       	adc	r24, r24
 18a:	88 27       	eor	r24, r24
 18c:	88 1f       	adc	r24, r24
 18e:	96 fd       	sbrc	r25, 6
 190:	02 c0       	rjmp	.+4      	; 0x196 <Bit_Reverse+0x10>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	01 c0       	rjmp	.+2      	; 0x198 <Bit_Reverse+0x12>
 196:	22 e0       	ldi	r18, 0x02	; 2
 198:	82 2b       	or	r24, r18
 19a:	95 fd       	sbrc	r25, 5
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <Bit_Reverse+0x1c>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <Bit_Reverse+0x1e>
 1a2:	24 e0       	ldi	r18, 0x04	; 4
 1a4:	82 2b       	or	r24, r18
 1a6:	94 fd       	sbrc	r25, 4
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Bit_Reverse+0x28>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <Bit_Reverse+0x2a>
 1ae:	28 e0       	ldi	r18, 0x08	; 8
 1b0:	82 2b       	or	r24, r18
 1b2:	93 fd       	sbrc	r25, 3
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Bit_Reverse+0x34>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <Bit_Reverse+0x36>
 1ba:	20 e1       	ldi	r18, 0x10	; 16
 1bc:	82 2b       	or	r24, r18
 1be:	92 fd       	sbrc	r25, 2
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <Bit_Reverse+0x40>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <Bit_Reverse+0x42>
 1c6:	20 e2       	ldi	r18, 0x20	; 32
 1c8:	82 2b       	or	r24, r18
 1ca:	91 fd       	sbrc	r25, 1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <Bit_Reverse+0x4c>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <Bit_Reverse+0x4e>
 1d2:	20 e4       	ldi	r18, 0x40	; 64
 1d4:	82 2b       	or	r24, r18
 1d6:	90 fd       	sbrc	r25, 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <Bit_Reverse+0x58>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <Bit_Reverse+0x5a>
 1de:	90 e8       	ldi	r25, 0x80	; 128
 1e0:	89 2b       	or	r24, r25
 1e2:	08 95       	ret

000001e4 <lcd_wr_command>:
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
 1e8:	80 7f       	andi	r24, 0xF0	; 240
 1ea:	0e 94 c3 00 	call	0x186	; 0x186 <Bit_Reverse>
 1ee:	88 0f       	add	r24, r24
 1f0:	88 0f       	add	r24, r24
 1f2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	93 7c       	andi	r25, 0xC3	; 195
 1fa:	9b b9       	out	0x0b, r25	; 11
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
 202:	98 2b       	or	r25, r24
 204:	9b b9       	out	0x0b, r25	; 11
 206:	5f 98       	cbi	0x0b, 7	; 11
 208:	5e 9a       	sbi	0x0b, 6	; 11
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	9e e4       	ldi	r25, 0x4E	; 78
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_wr_command+0x2a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_wr_command+0x30>
 214:	00 00       	nop
 216:	5e 98       	cbi	0x0b, 6	; 11
 218:	8c 2f       	mov	r24, r28
 21a:	82 95       	swap	r24
 21c:	80 7f       	andi	r24, 0xF0	; 240
 21e:	0e 94 c3 00 	call	0x186	; 0x186 <Bit_Reverse>
 222:	9b b1       	in	r25, 0x0b	; 11
 224:	93 7c       	andi	r25, 0xC3	; 195
 226:	9b b9       	out	0x0b, r25	; 11
 228:	9b b1       	in	r25, 0x0b	; 11
 22a:	88 0f       	add	r24, r24
 22c:	88 0f       	add	r24, r24
 22e:	98 2b       	or	r25, r24
 230:	9b b9       	out	0x0b, r25	; 11
 232:	5f 98       	cbi	0x0b, 7	; 11
 234:	5e 9a       	sbi	0x0b, 6	; 11
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	9e e4       	ldi	r25, 0x4E	; 78
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_wr_command+0x56>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_wr_command+0x5c>
 240:	00 00       	nop
 242:	5e 98       	cbi	0x0b, 6	; 11
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <lcd_wr_char>:
 248:	cf 93       	push	r28
 24a:	c8 2f       	mov	r28, r24
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	0e 94 c3 00 	call	0x186	; 0x186 <Bit_Reverse>
 252:	9b b1       	in	r25, 0x0b	; 11
 254:	93 7c       	andi	r25, 0xC3	; 195
 256:	9b b9       	out	0x0b, r25	; 11
 258:	9b b1       	in	r25, 0x0b	; 11
 25a:	88 0f       	add	r24, r24
 25c:	88 0f       	add	r24, r24
 25e:	98 2b       	or	r25, r24
 260:	9b b9       	out	0x0b, r25	; 11
 262:	5f 9a       	sbi	0x0b, 7	; 11
 264:	5e 9a       	sbi	0x0b, 6	; 11
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_wr_char+0x22>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_wr_char+0x28>
 270:	00 00       	nop
 272:	5e 98       	cbi	0x0b, 6	; 11
 274:	8c 2f       	mov	r24, r28
 276:	82 95       	swap	r24
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	0e 94 c3 00 	call	0x186	; 0x186 <Bit_Reverse>
 27e:	9b b1       	in	r25, 0x0b	; 11
 280:	93 7c       	andi	r25, 0xC3	; 195
 282:	9b b9       	out	0x0b, r25	; 11
 284:	9b b1       	in	r25, 0x0b	; 11
 286:	88 0f       	add	r24, r24
 288:	88 0f       	add	r24, r24
 28a:	98 2b       	or	r25, r24
 28c:	9b b9       	out	0x0b, r25	; 11
 28e:	5f 9a       	sbi	0x0b, 7	; 11
 290:	5e 9a       	sbi	0x0b, 6	; 11
 292:	8f e1       	ldi	r24, 0x1F	; 31
 294:	9e e4       	ldi	r25, 0x4E	; 78
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_wr_char+0x4e>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_wr_char+0x54>
 29c:	00 00       	nop
 29e:	5e 98       	cbi	0x0b, 6	; 11
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <lcd_port_config>:
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	8c 6f       	ori	r24, 0xFC	; 252
 2a8:	8a b9       	out	0x0a, r24	; 10
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	84 70       	andi	r24, 0x04	; 4
 2ae:	8b b9       	out	0x0b, r24	; 11
 2b0:	08 95       	ret

000002b2 <lcd_home>:
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
 2b8:	08 95       	ret

000002ba <lcd_cursor>:
	row
* Example Call: lcd_string(2,3)
*/
void lcd_cursor (char row, char column)
{
	switch (row) {
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <lcd_cursor+0xa>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	31 f0       	breq	.+12     	; 0x2ce <lcd_cursor+0x14>
 2c2:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2c4:	8f e7       	ldi	r24, 0x7F	; 127
 2c6:	86 0f       	add	r24, r22
 2c8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
 2cc:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ce:	8f eb       	ldi	r24, 0xBF	; 191
 2d0:	86 0f       	add	r24, r22
 2d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_string2>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ea 01       	movw	r28, r20
	lcd_cursor(row,column);	
 2de:	0e 94 5d 01 	call	0x2ba	; 0x2ba <lcd_cursor>
	while(*str != '\0')
 2e2:	88 81       	ld	r24, Y
 2e4:	88 23       	and	r24, r24
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <lcd_string2+0x1c>
 2e8:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
 2ea:	0e 94 24 01 	call	0x248	; 0x248 <lcd_wr_char>
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
	lcd_cursor(row,column);	
	while(*str != '\0')
 2ee:	89 91       	ld	r24, Y+
 2f0:	81 11       	cpse	r24, r1
 2f2:	fb cf       	rjmp	.-10     	; 0x2ea <lcd_string2+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <lcd_print>:
* Output: Integer is printed to the desired location and upto the desired number of digits
* Logic: 
* Example Call: lcd_string("hello")
*/
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	8a 01       	movw	r16, r20
 304:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 306:	88 23       	and	r24, r24
 308:	11 f0       	breq	.+4      	; 0x30e <lcd_print+0x14>
 30a:	61 11       	cpse	r22, r1
 30c:	03 c0       	rjmp	.+6      	; 0x314 <lcd_print+0x1a>
	{
		lcd_home();
 30e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_home>
 312:	02 c0       	rjmp	.+4      	; 0x318 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 314:	0e 94 5d 01 	call	0x2ba	; 0x2ba <lcd_cursor>
	}
	if(digits==5 || flag==1)
 318:	c5 30       	cpi	r28, 0x05	; 5
 31a:	d1 05       	cpc	r29, r1
 31c:	c9 f4       	brne	.+50     	; 0x350 <lcd_print+0x56>
	{
		million=value/10000+48;
 31e:	98 01       	movw	r18, r16
 320:	32 95       	swap	r19
 322:	22 95       	swap	r18
 324:	2f 70       	andi	r18, 0x0F	; 15
 326:	23 27       	eor	r18, r19
 328:	3f 70       	andi	r19, 0x0F	; 15
 32a:	23 27       	eor	r18, r19
 32c:	a7 e4       	ldi	r26, 0x47	; 71
 32e:	b3 e0       	ldi	r27, 0x03	; 3
 330:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	c0 96       	adiw	r24, 0x30	; 48
 342:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <million+0x1>
 346:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <million>
		lcd_wr_char(million);
 34a:	0e 94 24 01 	call	0x248	; 0x248 <lcd_wr_char>
 34e:	04 c0       	rjmp	.+8      	; 0x358 <lcd_print+0x5e>
		flag=1;
	}
	if(digits==4 || flag==1)
 350:	c4 30       	cpi	r28, 0x04	; 4
 352:	d1 05       	cpc	r29, r1
 354:	09 f0       	breq	.+2      	; 0x358 <lcd_print+0x5e>
 356:	c3 c0       	rjmp	.+390    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
	{
		temp = value/1000;
 358:	98 01       	movw	r18, r16
 35a:	36 95       	lsr	r19
 35c:	27 95       	ror	r18
 35e:	36 95       	lsr	r19
 360:	27 95       	ror	r18
 362:	36 95       	lsr	r19
 364:	27 95       	ror	r18
 366:	a5 ec       	ldi	r26, 0xC5	; 197
 368:	b0 e2       	ldi	r27, 0x20	; 32
 36a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 36e:	ac 01       	movw	r20, r24
 370:	52 95       	swap	r21
 372:	42 95       	swap	r20
 374:	4f 70       	andi	r20, 0x0F	; 15
 376:	45 27       	eor	r20, r21
 378:	5f 70       	andi	r21, 0x0F	; 15
 37a:	45 27       	eor	r20, r21
 37c:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <temp+0x1>
 380:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <temp>
		thousand = temp%10 + 48;
 384:	9a 01       	movw	r18, r20
 386:	ad ec       	ldi	r26, 0xCD	; 205
 388:	bc ec       	ldi	r27, 0xCC	; 204
 38a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	96 95       	lsr	r25
 394:	87 95       	ror	r24
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	9c 01       	movw	r18, r24
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	82 0f       	add	r24, r18
 3ae:	93 1f       	adc	r25, r19
 3b0:	9a 01       	movw	r18, r20
 3b2:	28 1b       	sub	r18, r24
 3b4:	39 0b       	sbc	r19, r25
 3b6:	c9 01       	movw	r24, r18
 3b8:	c0 96       	adiw	r24, 0x30	; 48
 3ba:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <thousand+0x1>
 3be:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <thousand>
		lcd_wr_char(thousand);
 3c2:	0e 94 24 01 	call	0x248	; 0x248 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 3c6:	98 01       	movw	r18, r16
 3c8:	36 95       	lsr	r19
 3ca:	27 95       	ror	r18
 3cc:	36 95       	lsr	r19
 3ce:	27 95       	ror	r18
 3d0:	ab e7       	ldi	r26, 0x7B	; 123
 3d2:	b4 e1       	ldi	r27, 0x14	; 20
 3d4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 3d8:	ac 01       	movw	r20, r24
 3da:	56 95       	lsr	r21
 3dc:	47 95       	ror	r20
 3de:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <temp+0x1>
 3e2:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <temp>
		hundred = temp%10 + 48;
 3e6:	9a 01       	movw	r18, r20
 3e8:	ad ec       	ldi	r26, 0xCD	; 205
 3ea:	bc ec       	ldi	r27, 0xCC	; 204
 3ec:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	9c 01       	movw	r18, r24
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
 412:	9a 01       	movw	r18, r20
 414:	28 1b       	sub	r18, r24
 416:	39 0b       	sbc	r19, r25
 418:	c9 01       	movw	r24, r18
 41a:	c0 96       	adiw	r24, 0x30	; 48
 41c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <hundred+0x1>
 420:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <hundred>
		lcd_wr_char(hundred);
 424:	0e 94 24 01 	call	0x248	; 0x248 <lcd_wr_char>
 428:	04 c0       	rjmp	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		flag=1;
	}
	if(digits==2 || flag==1)
 42a:	c2 30       	cpi	r28, 0x02	; 2
 42c:	d1 05       	cpc	r29, r1
 42e:	09 f0       	breq	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	5b c0       	rjmp	.+182    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
	{
		temp = value/10;
 432:	98 01       	movw	r18, r16
 434:	ad ec       	ldi	r26, 0xCD	; 205
 436:	bc ec       	ldi	r27, 0xCC	; 204
 438:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 43c:	ac 01       	movw	r20, r24
 43e:	56 95       	lsr	r21
 440:	47 95       	ror	r20
 442:	56 95       	lsr	r21
 444:	47 95       	ror	r20
 446:	56 95       	lsr	r21
 448:	47 95       	ror	r20
 44a:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <temp+0x1>
 44e:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <temp>
		tens = temp%10 + 48;
 452:	9a 01       	movw	r18, r20
 454:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	9c 01       	movw	r18, r24
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	9a 01       	movw	r18, r20
 47c:	28 1b       	sub	r18, r24
 47e:	39 0b       	sbc	r19, r25
 480:	c9 01       	movw	r24, r18
 482:	c0 96       	adiw	r24, 0x30	; 48
 484:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <tens+0x1>
 488:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <tens>
		lcd_wr_char(tens);
 48c:	0e 94 24 01 	call	0x248	; 0x248 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 490:	98 01       	movw	r18, r16
 492:	ad ec       	ldi	r26, 0xCD	; 205
 494:	bc ec       	ldi	r27, 0xCC	; 204
 496:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__umulhisi3>
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	9c 01       	movw	r18, r24
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	82 0f       	add	r24, r18
 4ba:	93 1f       	adc	r25, r19
 4bc:	98 01       	movw	r18, r16
 4be:	28 1b       	sub	r18, r24
 4c0:	39 0b       	sbc	r19, r25
 4c2:	c9 01       	movw	r24, r18
 4c4:	c0 96       	adiw	r24, 0x30	; 48
 4c6:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <unit+0x1>
 4ca:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <unit>
		lcd_wr_char(unit);
 4ce:	0e 94 24 01 	call	0x248	; 0x248 <lcd_wr_char>
	}
	if(digits>5)
 4d2:	26 97       	sbiw	r28, 0x06	; 6
 4d4:	6c f0       	brlt	.+26     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
	{
		lcd_wr_char('E');
 4d6:	85 e4       	ldi	r24, 0x45	; 69
 4d8:	0e 94 24 01 	call	0x248	; 0x248 <lcd_wr_char>
 4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 4de:	c3 30       	cpi	r28, 0x03	; 3
 4e0:	d1 05       	cpc	r29, r1
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	a2 cf       	rjmp	.-188    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 4e6:	6f cf       	rjmp	.-290    	; 0x3c6 <lcd_print+0xcc>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 4e8:	c1 30       	cpi	r28, 0x01	; 1
 4ea:	d1 05       	cpc	r29, r1
 4ec:	91 f7       	brne	.-28     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4ee:	d0 cf       	rjmp	.-96     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <lcd_start>:
 4fa:	8f e9       	ldi	r24, 0x9F	; 159
 4fc:	9f e0       	ldi	r25, 0x0F	; 15
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_start+0x4>
 502:	00 c0       	rjmp	.+0      	; 0x504 <lcd_start+0xa>
 504:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 506:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 508:	80 e3       	ldi	r24, 0x30	; 48
 50a:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 50c:	5e 9a       	sbi	0x0b, 6	; 11
 50e:	ef e1       	ldi	r30, 0x1F	; 31
 510:	fe e4       	ldi	r31, 0x4E	; 78
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <lcd_start+0x18>
 516:	00 c0       	rjmp	.+0      	; 0x518 <lcd_start+0x1e>
 518:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 51a:	5e 98       	cbi	0x0b, 6	; 11
 51c:	ef e9       	ldi	r30, 0x9F	; 159
 51e:	ff e0       	ldi	r31, 0x0F	; 15
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <lcd_start+0x26>
 524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_start+0x2c>
 526:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 528:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 52a:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 52c:	5e 9a       	sbi	0x0b, 6	; 11
 52e:	ef e1       	ldi	r30, 0x1F	; 31
 530:	fe e4       	ldi	r31, 0x4E	; 78
 532:	31 97       	sbiw	r30, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <lcd_start+0x38>
 536:	00 c0       	rjmp	.+0      	; 0x538 <lcd_start+0x3e>
 538:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 53a:	5e 98       	cbi	0x0b, 6	; 11
 53c:	ef e9       	ldi	r30, 0x9F	; 159
 53e:	ff e0       	ldi	r31, 0x0F	; 15
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <lcd_start+0x46>
 544:	00 c0       	rjmp	.+0      	; 0x546 <lcd_start+0x4c>
 546:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 548:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 54a:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 54c:	5e 9a       	sbi	0x0b, 6	; 11
 54e:	8f e1       	ldi	r24, 0x1F	; 31
 550:	9e e4       	ldi	r25, 0x4E	; 78
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <lcd_start+0x58>
 556:	00 c0       	rjmp	.+0      	; 0x558 <lcd_start+0x5e>
 558:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 55a:	5e 98       	cbi	0x0b, 6	; 11
 55c:	ef e9       	ldi	r30, 0x9F	; 159
 55e:	ff e0       	ldi	r31, 0x0F	; 15
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <lcd_start+0x66>
 564:	00 c0       	rjmp	.+0      	; 0x566 <lcd_start+0x6c>
 566:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 568:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 56a:	80 e1       	ldi	r24, 0x10	; 16
 56c:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 56e:	5e 9a       	sbi	0x0b, 6	; 11
 570:	8f e9       	ldi	r24, 0x9F	; 159
 572:	9f e0       	ldi	r25, 0x0F	; 15
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <lcd_start+0x7a>
 578:	00 c0       	rjmp	.+0      	; 0x57a <lcd_start+0x80>
 57a:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 57c:	5e 98       	cbi	0x0b, 6	; 11
 57e:	ef e9       	ldi	r30, 0x9F	; 159
 580:	ff e0       	ldi	r31, 0x0F	; 15
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <lcd_start+0x88>
 586:	00 c0       	rjmp	.+0      	; 0x588 <lcd_start+0x8e>
 588:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 58a:	88 e2       	ldi	r24, 0x28	; 40
 58c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 596:	8c e0       	ldi	r24, 0x0C	; 12
 598:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 59c:	80 e8       	ldi	r24, 0x80	; 128
 59e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
 5a2:	08 95       	ret

000005a4 <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_wr_command>
 5aa:	08 95       	ret

000005ac <port_config>:
#include "lcd.h"
#include "ADC.h"

void port_config (void)
{
	lcd_port_config();
 5ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_port_config>
	adc_pin_config();
 5b0:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
 5b4:	08 95       	ret

000005b6 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 5b6:	f8 94       	cli
	lcd_start();
 5b8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_start>
	adc_config();
 5bc:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
 5c0:	78 94       	sei
 5c2:	08 95       	ret

000005c4 <main>:
}

int main(void)
{
	port_config();
 5c4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <port_config>
	init_devices();
 5c8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <init_devices>
	float current = 0;
	float power = 0;
	//float gate_voltage = 0;
	float offset = 0;
	
	lcd_string2(1, 7, "CCL");
 5cc:	40 e0       	ldi	r20, 0x00	; 0
 5ce:	51 e0       	ldi	r21, 0x01	; 1
 5d0:	67 e0       	ldi	r22, 0x07	; 7
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_string2>
 5d8:	2f ef       	ldi	r18, 0xFF	; 255
 5da:	85 ea       	ldi	r24, 0xA5	; 165
 5dc:	9e e0       	ldi	r25, 0x0E	; 14
 5de:	21 50       	subi	r18, 0x01	; 1
 5e0:	80 40       	sbci	r24, 0x00	; 0
 5e2:	90 40       	sbci	r25, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <main+0x1a>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <main+0x24>
 5e8:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
 5ea:	1d 9b       	sbis	0x03, 5	; 3
 5ec:	0a c0       	rjmp	.+20     	; 0x602 <main+0x3e>
	{
		lcd_string2(2,1,"Supply Connected");
 5ee:	44 e0       	ldi	r20, 0x04	; 4
 5f0:	51 e0       	ldi	r21, 0x01	; 1
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_string2>
	
	float voltage = 0;
	float current = 0;
	float power = 0;
	//float gate_voltage = 0;
	float offset = 0;
 5fa:	c1 2c       	mov	r12, r1
 5fc:	d1 2c       	mov	r13, r1
 5fe:	76 01       	movw	r14, r12
 600:	10 c0       	rjmp	.+32     	; 0x622 <main+0x5e>
		lcd_string2(2,1,"Supply Connected");
	}
	
	else
	{
		lcd_string2(2,2,"12v Supply NC");
 602:	45 e1       	ldi	r20, 0x15	; 21
 604:	51 e0       	ldi	r21, 0x01	; 1
 606:	62 e0       	ldi	r22, 0x02	; 2
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_string2>
		offset = 28.2;
 60e:	0f 2e       	mov	r0, r31
 610:	fa e9       	ldi	r31, 0x9A	; 154
 612:	cf 2e       	mov	r12, r31
 614:	f9 e9       	ldi	r31, 0x99	; 153
 616:	df 2e       	mov	r13, r31
 618:	f1 ee       	ldi	r31, 0xE1	; 225
 61a:	ef 2e       	mov	r14, r31
 61c:	f1 e4       	ldi	r31, 0x41	; 65
 61e:	ff 2e       	mov	r15, r31
 620:	f0 2d       	mov	r31, r0
 622:	2f ef       	ldi	r18, 0xFF	; 255
 624:	8b e4       	ldi	r24, 0x4B	; 75
 626:	9d e1       	ldi	r25, 0x1D	; 29
 628:	21 50       	subi	r18, 0x01	; 1
 62a:	80 40       	sbci	r24, 0x00	; 0
 62c:	90 40       	sbci	r25, 0x00	; 0
 62e:	e1 f7       	brne	.-8      	; 0x628 <main+0x64>
 630:	00 c0       	rjmp	.+0      	; 0x632 <main+0x6e>
 632:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
 634:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_clear>
	while (1)
	{
		current = avg_read_adc_channel(0, 10);
 638:	6a e0       	ldi	r22, 0x0A	; 10
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	0e 94 81 00 	call	0x102	; 0x102 <avg_read_adc_channel>
 640:	bc 01       	movw	r22, r24
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatunsisf>
		current = current*1.953+5.7 + offset;
 64a:	27 ee       	ldi	r18, 0xE7	; 231
 64c:	3b ef       	ldi	r19, 0xFB	; 251
 64e:	49 ef       	ldi	r20, 0xF9	; 249
 650:	5f e3       	ldi	r21, 0x3F	; 63
 652:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 656:	26 e6       	ldi	r18, 0x66	; 102
 658:	36 e6       	ldi	r19, 0x66	; 102
 65a:	46 eb       	ldi	r20, 0xB6	; 182
 65c:	50 e4       	ldi	r21, 0x40	; 64
 65e:	0e 94 a1 03 	call	0x742	; 0x742 <__addsf3>
 662:	a7 01       	movw	r20, r14
 664:	96 01       	movw	r18, r12
 666:	0e 94 a1 03 	call	0x742	; 0x742 <__addsf3>
 66a:	4b 01       	movw	r8, r22
 66c:	5c 01       	movw	r10, r24
		lcd_print(1,1,current,4);
 66e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fixunssfsi>
 672:	24 e0       	ldi	r18, 0x04	; 4
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	ab 01       	movw	r20, r22
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_print>
		lcd_string2(1,5,"mA  ");
 680:	43 e2       	ldi	r20, 0x23	; 35
 682:	51 e0       	ldi	r21, 0x01	; 1
 684:	65 e0       	ldi	r22, 0x05	; 5
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_string2>
				
		voltage = avg_read_adc_channel(1, 10);
 68c:	6a e0       	ldi	r22, 0x0A	; 10
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	0e 94 81 00 	call	0x102	; 0x102 <avg_read_adc_channel>
 694:	bc 01       	movw	r22, r24
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatunsisf>
		voltage = voltage*29.3;
 69e:	26 e6       	ldi	r18, 0x66	; 102
 6a0:	36 e6       	ldi	r19, 0x66	; 102
 6a2:	4a ee       	ldi	r20, 0xEA	; 234
 6a4:	51 e4       	ldi	r21, 0x41	; 65
 6a6:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 6aa:	2b 01       	movw	r4, r22
 6ac:	3c 01       	movw	r6, r24
		lcd_print(1,10,voltage,5);
 6ae:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fixunssfsi>
 6b2:	25 e0       	ldi	r18, 0x05	; 5
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	ab 01       	movw	r20, r22
 6b8:	6a e0       	ldi	r22, 0x0A	; 10
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_print>
		lcd_string2(1,15,"mV");
 6c0:	48 e2       	ldi	r20, 0x28	; 40
 6c2:	51 e0       	ldi	r21, 0x01	; 1
 6c4:	6f e0       	ldi	r22, 0x0F	; 15
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_string2>
		
		power = voltage*current/1000;
 6cc:	a5 01       	movw	r20, r10
 6ce:	94 01       	movw	r18, r8
 6d0:	c3 01       	movw	r24, r6
 6d2:	b2 01       	movw	r22, r4
 6d4:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	4a e7       	ldi	r20, 0x7A	; 122
 6de:	54 e4       	ldi	r21, 0x44	; 68
 6e0:	0e 94 0d 04 	call	0x81a	; 0x81a <__divsf3>
		lcd_print(2,1,power,5);
 6e4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fixunssfsi>
 6e8:	25 e0       	ldi	r18, 0x05	; 5
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	ab 01       	movw	r20, r22
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_print>
		lcd_string2(2,6,"mW");
 6f6:	4b e2       	ldi	r20, 0x2B	; 43
 6f8:	51 e0       	ldi	r21, 0x01	; 1
 6fa:	66 e0       	ldi	r22, 0x06	; 6
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_string2>
		
		
		float gate_voltage = avg_read_adc_channel(2, 5)*7.5;
 702:	65 e0       	ldi	r22, 0x05	; 5
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	0e 94 81 00 	call	0x102	; 0x102 <avg_read_adc_channel>
 70a:	bc 01       	movw	r22, r24
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatunsisf>
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	40 ef       	ldi	r20, 0xF0	; 240
 71a:	50 e4       	ldi	r21, 0x40	; 64
 71c:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
		lcd_print(2,11,gate_voltage,4);
 720:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fixunssfsi>
 724:	24 e0       	ldi	r18, 0x04	; 4
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	ab 01       	movw	r20, r22
 72a:	6b e0       	ldi	r22, 0x0B	; 11
 72c:	82 e0       	ldi	r24, 0x02	; 2
 72e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_print>
 732:	8f e3       	ldi	r24, 0x3F	; 63
 734:	9c e9       	ldi	r25, 0x9C	; 156
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <main+0x172>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <main+0x178>
 73c:	00 00       	nop
 73e:	7c cf       	rjmp	.-264    	; 0x638 <main+0x74>

00000740 <__subsf3>:
 740:	50 58       	subi	r21, 0x80	; 128

00000742 <__addsf3>:
 742:	bb 27       	eor	r27, r27
 744:	aa 27       	eor	r26, r26
 746:	0e 94 b8 03 	call	0x770	; 0x770 <__addsf3x>
 74a:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_round>
 74e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fp_pscA>
 752:	38 f0       	brcs	.+14     	; 0x762 <__addsf3+0x20>
 754:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscB>
 758:	20 f0       	brcs	.+8      	; 0x762 <__addsf3+0x20>
 75a:	39 f4       	brne	.+14     	; 0x76a <__addsf3+0x28>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	19 f4       	brne	.+6      	; 0x766 <__addsf3+0x24>
 760:	26 f4       	brtc	.+8      	; 0x76a <__addsf3+0x28>
 762:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_nan>
 766:	0e f4       	brtc	.+2      	; 0x76a <__addsf3+0x28>
 768:	e0 95       	com	r30
 76a:	e7 fb       	bst	r30, 7
 76c:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>

00000770 <__addsf3x>:
 770:	e9 2f       	mov	r30, r25
 772:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_split3>
 776:	58 f3       	brcs	.-42     	; 0x74e <__addsf3+0xc>
 778:	ba 17       	cp	r27, r26
 77a:	62 07       	cpc	r22, r18
 77c:	73 07       	cpc	r23, r19
 77e:	84 07       	cpc	r24, r20
 780:	95 07       	cpc	r25, r21
 782:	20 f0       	brcs	.+8      	; 0x78c <__addsf3x+0x1c>
 784:	79 f4       	brne	.+30     	; 0x7a4 <__addsf3x+0x34>
 786:	a6 f5       	brtc	.+104    	; 0x7f0 <__addsf3x+0x80>
 788:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_zero>
 78c:	0e f4       	brtc	.+2      	; 0x790 <__addsf3x+0x20>
 78e:	e0 95       	com	r30
 790:	0b 2e       	mov	r0, r27
 792:	ba 2f       	mov	r27, r26
 794:	a0 2d       	mov	r26, r0
 796:	0b 01       	movw	r0, r22
 798:	b9 01       	movw	r22, r18
 79a:	90 01       	movw	r18, r0
 79c:	0c 01       	movw	r0, r24
 79e:	ca 01       	movw	r24, r20
 7a0:	a0 01       	movw	r20, r0
 7a2:	11 24       	eor	r1, r1
 7a4:	ff 27       	eor	r31, r31
 7a6:	59 1b       	sub	r21, r25
 7a8:	99 f0       	breq	.+38     	; 0x7d0 <__addsf3x+0x60>
 7aa:	59 3f       	cpi	r21, 0xF9	; 249
 7ac:	50 f4       	brcc	.+20     	; 0x7c2 <__addsf3x+0x52>
 7ae:	50 3e       	cpi	r21, 0xE0	; 224
 7b0:	68 f1       	brcs	.+90     	; 0x80c <__addsf3x+0x9c>
 7b2:	1a 16       	cp	r1, r26
 7b4:	f0 40       	sbci	r31, 0x00	; 0
 7b6:	a2 2f       	mov	r26, r18
 7b8:	23 2f       	mov	r18, r19
 7ba:	34 2f       	mov	r19, r20
 7bc:	44 27       	eor	r20, r20
 7be:	58 5f       	subi	r21, 0xF8	; 248
 7c0:	f3 cf       	rjmp	.-26     	; 0x7a8 <__addsf3x+0x38>
 7c2:	46 95       	lsr	r20
 7c4:	37 95       	ror	r19
 7c6:	27 95       	ror	r18
 7c8:	a7 95       	ror	r26
 7ca:	f0 40       	sbci	r31, 0x00	; 0
 7cc:	53 95       	inc	r21
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__addsf3x+0x52>
 7d0:	7e f4       	brtc	.+30     	; 0x7f0 <__addsf3x+0x80>
 7d2:	1f 16       	cp	r1, r31
 7d4:	ba 0b       	sbc	r27, r26
 7d6:	62 0b       	sbc	r22, r18
 7d8:	73 0b       	sbc	r23, r19
 7da:	84 0b       	sbc	r24, r20
 7dc:	ba f0       	brmi	.+46     	; 0x80c <__addsf3x+0x9c>
 7de:	91 50       	subi	r25, 0x01	; 1
 7e0:	a1 f0       	breq	.+40     	; 0x80a <__addsf3x+0x9a>
 7e2:	ff 0f       	add	r31, r31
 7e4:	bb 1f       	adc	r27, r27
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	c2 f7       	brpl	.-16     	; 0x7de <__addsf3x+0x6e>
 7ee:	0e c0       	rjmp	.+28     	; 0x80c <__addsf3x+0x9c>
 7f0:	ba 0f       	add	r27, r26
 7f2:	62 1f       	adc	r22, r18
 7f4:	73 1f       	adc	r23, r19
 7f6:	84 1f       	adc	r24, r20
 7f8:	48 f4       	brcc	.+18     	; 0x80c <__addsf3x+0x9c>
 7fa:	87 95       	ror	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b7 95       	ror	r27
 802:	f7 95       	ror	r31
 804:	9e 3f       	cpi	r25, 0xFE	; 254
 806:	08 f0       	brcs	.+2      	; 0x80a <__addsf3x+0x9a>
 808:	b0 cf       	rjmp	.-160    	; 0x76a <__addsf3+0x28>
 80a:	93 95       	inc	r25
 80c:	88 0f       	add	r24, r24
 80e:	08 f0       	brcs	.+2      	; 0x812 <__addsf3x+0xa2>
 810:	99 27       	eor	r25, r25
 812:	ee 0f       	add	r30, r30
 814:	97 95       	ror	r25
 816:	87 95       	ror	r24
 818:	08 95       	ret

0000081a <__divsf3>:
 81a:	0e 94 21 04 	call	0x842	; 0x842 <__divsf3x>
 81e:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_round>
 822:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscB>
 826:	58 f0       	brcs	.+22     	; 0x83e <__divsf3+0x24>
 828:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fp_pscA>
 82c:	40 f0       	brcs	.+16     	; 0x83e <__divsf3+0x24>
 82e:	29 f4       	brne	.+10     	; 0x83a <__divsf3+0x20>
 830:	5f 3f       	cpi	r21, 0xFF	; 255
 832:	29 f0       	breq	.+10     	; 0x83e <__divsf3+0x24>
 834:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
 838:	51 11       	cpse	r21, r1
 83a:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_szero>
 83e:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_nan>

00000842 <__divsf3x>:
 842:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_split3>
 846:	68 f3       	brcs	.-38     	; 0x822 <__divsf3+0x8>

00000848 <__divsf3_pse>:
 848:	99 23       	and	r25, r25
 84a:	b1 f3       	breq	.-20     	; 0x838 <__divsf3+0x1e>
 84c:	55 23       	and	r21, r21
 84e:	91 f3       	breq	.-28     	; 0x834 <__divsf3+0x1a>
 850:	95 1b       	sub	r25, r21
 852:	55 0b       	sbc	r21, r21
 854:	bb 27       	eor	r27, r27
 856:	aa 27       	eor	r26, r26
 858:	62 17       	cp	r22, r18
 85a:	73 07       	cpc	r23, r19
 85c:	84 07       	cpc	r24, r20
 85e:	38 f0       	brcs	.+14     	; 0x86e <__divsf3_pse+0x26>
 860:	9f 5f       	subi	r25, 0xFF	; 255
 862:	5f 4f       	sbci	r21, 0xFF	; 255
 864:	22 0f       	add	r18, r18
 866:	33 1f       	adc	r19, r19
 868:	44 1f       	adc	r20, r20
 86a:	aa 1f       	adc	r26, r26
 86c:	a9 f3       	breq	.-22     	; 0x858 <__divsf3_pse+0x10>
 86e:	35 d0       	rcall	.+106    	; 0x8da <__divsf3_pse+0x92>
 870:	0e 2e       	mov	r0, r30
 872:	3a f0       	brmi	.+14     	; 0x882 <__divsf3_pse+0x3a>
 874:	e0 e8       	ldi	r30, 0x80	; 128
 876:	32 d0       	rcall	.+100    	; 0x8dc <__divsf3_pse+0x94>
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	50 40       	sbci	r21, 0x00	; 0
 87c:	e6 95       	lsr	r30
 87e:	00 1c       	adc	r0, r0
 880:	ca f7       	brpl	.-14     	; 0x874 <__divsf3_pse+0x2c>
 882:	2b d0       	rcall	.+86     	; 0x8da <__divsf3_pse+0x92>
 884:	fe 2f       	mov	r31, r30
 886:	29 d0       	rcall	.+82     	; 0x8da <__divsf3_pse+0x92>
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	bb 1f       	adc	r27, r27
 890:	26 17       	cp	r18, r22
 892:	37 07       	cpc	r19, r23
 894:	48 07       	cpc	r20, r24
 896:	ab 07       	cpc	r26, r27
 898:	b0 e8       	ldi	r27, 0x80	; 128
 89a:	09 f0       	breq	.+2      	; 0x89e <__divsf3_pse+0x56>
 89c:	bb 0b       	sbc	r27, r27
 89e:	80 2d       	mov	r24, r0
 8a0:	bf 01       	movw	r22, r30
 8a2:	ff 27       	eor	r31, r31
 8a4:	93 58       	subi	r25, 0x83	; 131
 8a6:	5f 4f       	sbci	r21, 0xFF	; 255
 8a8:	3a f0       	brmi	.+14     	; 0x8b8 <__divsf3_pse+0x70>
 8aa:	9e 3f       	cpi	r25, 0xFE	; 254
 8ac:	51 05       	cpc	r21, r1
 8ae:	78 f0       	brcs	.+30     	; 0x8ce <__divsf3_pse+0x86>
 8b0:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
 8b4:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_szero>
 8b8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ba:	e4 f3       	brlt	.-8      	; 0x8b4 <__divsf3_pse+0x6c>
 8bc:	98 3e       	cpi	r25, 0xE8	; 232
 8be:	d4 f3       	brlt	.-12     	; 0x8b4 <__divsf3_pse+0x6c>
 8c0:	86 95       	lsr	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b7 95       	ror	r27
 8c8:	f7 95       	ror	r31
 8ca:	9f 5f       	subi	r25, 0xFF	; 255
 8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__divsf3_pse+0x78>
 8ce:	88 0f       	add	r24, r24
 8d0:	91 1d       	adc	r25, r1
 8d2:	96 95       	lsr	r25
 8d4:	87 95       	ror	r24
 8d6:	97 f9       	bld	r25, 7
 8d8:	08 95       	ret
 8da:	e1 e0       	ldi	r30, 0x01	; 1
 8dc:	66 0f       	add	r22, r22
 8de:	77 1f       	adc	r23, r23
 8e0:	88 1f       	adc	r24, r24
 8e2:	bb 1f       	adc	r27, r27
 8e4:	62 17       	cp	r22, r18
 8e6:	73 07       	cpc	r23, r19
 8e8:	84 07       	cpc	r24, r20
 8ea:	ba 07       	cpc	r27, r26
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__divsf3_pse+0xae>
 8ee:	62 1b       	sub	r22, r18
 8f0:	73 0b       	sbc	r23, r19
 8f2:	84 0b       	sbc	r24, r20
 8f4:	ba 0b       	sbc	r27, r26
 8f6:	ee 1f       	adc	r30, r30
 8f8:	88 f7       	brcc	.-30     	; 0x8dc <__divsf3_pse+0x94>
 8fa:	e0 95       	com	r30
 8fc:	08 95       	ret

000008fe <__fixunssfsi>:
 8fe:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_splitA>
 902:	88 f0       	brcs	.+34     	; 0x926 <__stack+0x27>
 904:	9f 57       	subi	r25, 0x7F	; 127
 906:	98 f0       	brcs	.+38     	; 0x92e <__stack+0x2f>
 908:	b9 2f       	mov	r27, r25
 90a:	99 27       	eor	r25, r25
 90c:	b7 51       	subi	r27, 0x17	; 23
 90e:	b0 f0       	brcs	.+44     	; 0x93c <__stack+0x3d>
 910:	e1 f0       	breq	.+56     	; 0x94a <__stack+0x4b>
 912:	66 0f       	add	r22, r22
 914:	77 1f       	adc	r23, r23
 916:	88 1f       	adc	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	1a f0       	brmi	.+6      	; 0x922 <__stack+0x23>
 91c:	ba 95       	dec	r27
 91e:	c9 f7       	brne	.-14     	; 0x912 <__stack+0x13>
 920:	14 c0       	rjmp	.+40     	; 0x94a <__stack+0x4b>
 922:	b1 30       	cpi	r27, 0x01	; 1
 924:	91 f0       	breq	.+36     	; 0x94a <__stack+0x4b>
 926:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_zero>
 92a:	b1 e0       	ldi	r27, 0x01	; 1
 92c:	08 95       	ret
 92e:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_zero>
 932:	67 2f       	mov	r22, r23
 934:	78 2f       	mov	r23, r24
 936:	88 27       	eor	r24, r24
 938:	b8 5f       	subi	r27, 0xF8	; 248
 93a:	39 f0       	breq	.+14     	; 0x94a <__stack+0x4b>
 93c:	b9 3f       	cpi	r27, 0xF9	; 249
 93e:	cc f3       	brlt	.-14     	; 0x932 <__stack+0x33>
 940:	86 95       	lsr	r24
 942:	77 95       	ror	r23
 944:	67 95       	ror	r22
 946:	b3 95       	inc	r27
 948:	d9 f7       	brne	.-10     	; 0x940 <__stack+0x41>
 94a:	3e f4       	brtc	.+14     	; 0x95a <__stack+0x5b>
 94c:	90 95       	com	r25
 94e:	80 95       	com	r24
 950:	70 95       	com	r23
 952:	61 95       	neg	r22
 954:	7f 4f       	sbci	r23, 0xFF	; 255
 956:	8f 4f       	sbci	r24, 0xFF	; 255
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	08 95       	ret

0000095c <__floatunsisf>:
 95c:	e8 94       	clt
 95e:	09 c0       	rjmp	.+18     	; 0x972 <__floatsisf+0x12>

00000960 <__floatsisf>:
 960:	97 fb       	bst	r25, 7
 962:	3e f4       	brtc	.+14     	; 0x972 <__floatsisf+0x12>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	99 23       	and	r25, r25
 974:	a9 f0       	breq	.+42     	; 0x9a0 <__floatsisf+0x40>
 976:	f9 2f       	mov	r31, r25
 978:	96 e9       	ldi	r25, 0x96	; 150
 97a:	bb 27       	eor	r27, r27
 97c:	93 95       	inc	r25
 97e:	f6 95       	lsr	r31
 980:	87 95       	ror	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	b7 95       	ror	r27
 988:	f1 11       	cpse	r31, r1
 98a:	f8 cf       	rjmp	.-16     	; 0x97c <__floatsisf+0x1c>
 98c:	fa f4       	brpl	.+62     	; 0x9cc <__floatsisf+0x6c>
 98e:	bb 0f       	add	r27, r27
 990:	11 f4       	brne	.+4      	; 0x996 <__floatsisf+0x36>
 992:	60 ff       	sbrs	r22, 0
 994:	1b c0       	rjmp	.+54     	; 0x9cc <__floatsisf+0x6c>
 996:	6f 5f       	subi	r22, 0xFF	; 255
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	16 c0       	rjmp	.+44     	; 0x9cc <__floatsisf+0x6c>
 9a0:	88 23       	and	r24, r24
 9a2:	11 f0       	breq	.+4      	; 0x9a8 <__floatsisf+0x48>
 9a4:	96 e9       	ldi	r25, 0x96	; 150
 9a6:	11 c0       	rjmp	.+34     	; 0x9ca <__floatsisf+0x6a>
 9a8:	77 23       	and	r23, r23
 9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatsisf+0x54>
 9ac:	9e e8       	ldi	r25, 0x8E	; 142
 9ae:	87 2f       	mov	r24, r23
 9b0:	76 2f       	mov	r23, r22
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <__floatsisf+0x5e>
 9b4:	66 23       	and	r22, r22
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <__floatsisf+0x74>
 9b8:	96 e8       	ldi	r25, 0x86	; 134
 9ba:	86 2f       	mov	r24, r22
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	2a f0       	brmi	.+10     	; 0x9cc <__floatsisf+0x6c>
 9c2:	9a 95       	dec	r25
 9c4:	66 0f       	add	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	da f7       	brpl	.-10     	; 0x9c2 <__floatsisf+0x62>
 9cc:	88 0f       	add	r24, r24
 9ce:	96 95       	lsr	r25
 9d0:	87 95       	ror	r24
 9d2:	97 f9       	bld	r25, 7
 9d4:	08 95       	ret

000009d6 <__fp_inf>:
 9d6:	97 f9       	bld	r25, 7
 9d8:	9f 67       	ori	r25, 0x7F	; 127
 9da:	80 e8       	ldi	r24, 0x80	; 128
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	08 95       	ret

000009e2 <__fp_nan>:
 9e2:	9f ef       	ldi	r25, 0xFF	; 255
 9e4:	80 ec       	ldi	r24, 0xC0	; 192
 9e6:	08 95       	ret

000009e8 <__fp_pscA>:
 9e8:	00 24       	eor	r0, r0
 9ea:	0a 94       	dec	r0
 9ec:	16 16       	cp	r1, r22
 9ee:	17 06       	cpc	r1, r23
 9f0:	18 06       	cpc	r1, r24
 9f2:	09 06       	cpc	r0, r25
 9f4:	08 95       	ret

000009f6 <__fp_pscB>:
 9f6:	00 24       	eor	r0, r0
 9f8:	0a 94       	dec	r0
 9fa:	12 16       	cp	r1, r18
 9fc:	13 06       	cpc	r1, r19
 9fe:	14 06       	cpc	r1, r20
 a00:	05 06       	cpc	r0, r21
 a02:	08 95       	ret

00000a04 <__fp_round>:
 a04:	09 2e       	mov	r0, r25
 a06:	03 94       	inc	r0
 a08:	00 0c       	add	r0, r0
 a0a:	11 f4       	brne	.+4      	; 0xa10 <__fp_round+0xc>
 a0c:	88 23       	and	r24, r24
 a0e:	52 f0       	brmi	.+20     	; 0xa24 <__fp_round+0x20>
 a10:	bb 0f       	add	r27, r27
 a12:	40 f4       	brcc	.+16     	; 0xa24 <__fp_round+0x20>
 a14:	bf 2b       	or	r27, r31
 a16:	11 f4       	brne	.+4      	; 0xa1c <__fp_round+0x18>
 a18:	60 ff       	sbrs	r22, 0
 a1a:	04 c0       	rjmp	.+8      	; 0xa24 <__fp_round+0x20>
 a1c:	6f 5f       	subi	r22, 0xFF	; 255
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255
 a20:	8f 4f       	sbci	r24, 0xFF	; 255
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	08 95       	ret

00000a26 <__fp_split3>:
 a26:	57 fd       	sbrc	r21, 7
 a28:	90 58       	subi	r25, 0x80	; 128
 a2a:	44 0f       	add	r20, r20
 a2c:	55 1f       	adc	r21, r21
 a2e:	59 f0       	breq	.+22     	; 0xa46 <__fp_splitA+0x10>
 a30:	5f 3f       	cpi	r21, 0xFF	; 255
 a32:	71 f0       	breq	.+28     	; 0xa50 <__fp_splitA+0x1a>
 a34:	47 95       	ror	r20

00000a36 <__fp_splitA>:
 a36:	88 0f       	add	r24, r24
 a38:	97 fb       	bst	r25, 7
 a3a:	99 1f       	adc	r25, r25
 a3c:	61 f0       	breq	.+24     	; 0xa56 <__fp_splitA+0x20>
 a3e:	9f 3f       	cpi	r25, 0xFF	; 255
 a40:	79 f0       	breq	.+30     	; 0xa60 <__fp_splitA+0x2a>
 a42:	87 95       	ror	r24
 a44:	08 95       	ret
 a46:	12 16       	cp	r1, r18
 a48:	13 06       	cpc	r1, r19
 a4a:	14 06       	cpc	r1, r20
 a4c:	55 1f       	adc	r21, r21
 a4e:	f2 cf       	rjmp	.-28     	; 0xa34 <__fp_split3+0xe>
 a50:	46 95       	lsr	r20
 a52:	f1 df       	rcall	.-30     	; 0xa36 <__fp_splitA>
 a54:	08 c0       	rjmp	.+16     	; 0xa66 <__fp_splitA+0x30>
 a56:	16 16       	cp	r1, r22
 a58:	17 06       	cpc	r1, r23
 a5a:	18 06       	cpc	r1, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	f1 cf       	rjmp	.-30     	; 0xa42 <__fp_splitA+0xc>
 a60:	86 95       	lsr	r24
 a62:	71 05       	cpc	r23, r1
 a64:	61 05       	cpc	r22, r1
 a66:	08 94       	sec
 a68:	08 95       	ret

00000a6a <__fp_zero>:
 a6a:	e8 94       	clt

00000a6c <__fp_szero>:
 a6c:	bb 27       	eor	r27, r27
 a6e:	66 27       	eor	r22, r22
 a70:	77 27       	eor	r23, r23
 a72:	cb 01       	movw	r24, r22
 a74:	97 f9       	bld	r25, 7
 a76:	08 95       	ret

00000a78 <__mulsf3>:
 a78:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3x>
 a7c:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_round>
 a80:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fp_pscA>
 a84:	38 f0       	brcs	.+14     	; 0xa94 <__mulsf3+0x1c>
 a86:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscB>
 a8a:	20 f0       	brcs	.+8      	; 0xa94 <__mulsf3+0x1c>
 a8c:	95 23       	and	r25, r21
 a8e:	11 f0       	breq	.+4      	; 0xa94 <__mulsf3+0x1c>
 a90:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
 a94:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_nan>
 a98:	11 24       	eor	r1, r1
 a9a:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_szero>

00000a9e <__mulsf3x>:
 a9e:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_split3>
 aa2:	70 f3       	brcs	.-36     	; 0xa80 <__mulsf3+0x8>

00000aa4 <__mulsf3_pse>:
 aa4:	95 9f       	mul	r25, r21
 aa6:	c1 f3       	breq	.-16     	; 0xa98 <__mulsf3+0x20>
 aa8:	95 0f       	add	r25, r21
 aaa:	50 e0       	ldi	r21, 0x00	; 0
 aac:	55 1f       	adc	r21, r21
 aae:	62 9f       	mul	r22, r18
 ab0:	f0 01       	movw	r30, r0
 ab2:	72 9f       	mul	r23, r18
 ab4:	bb 27       	eor	r27, r27
 ab6:	f0 0d       	add	r31, r0
 ab8:	b1 1d       	adc	r27, r1
 aba:	63 9f       	mul	r22, r19
 abc:	aa 27       	eor	r26, r26
 abe:	f0 0d       	add	r31, r0
 ac0:	b1 1d       	adc	r27, r1
 ac2:	aa 1f       	adc	r26, r26
 ac4:	64 9f       	mul	r22, r20
 ac6:	66 27       	eor	r22, r22
 ac8:	b0 0d       	add	r27, r0
 aca:	a1 1d       	adc	r26, r1
 acc:	66 1f       	adc	r22, r22
 ace:	82 9f       	mul	r24, r18
 ad0:	22 27       	eor	r18, r18
 ad2:	b0 0d       	add	r27, r0
 ad4:	a1 1d       	adc	r26, r1
 ad6:	62 1f       	adc	r22, r18
 ad8:	73 9f       	mul	r23, r19
 ada:	b0 0d       	add	r27, r0
 adc:	a1 1d       	adc	r26, r1
 ade:	62 1f       	adc	r22, r18
 ae0:	83 9f       	mul	r24, r19
 ae2:	a0 0d       	add	r26, r0
 ae4:	61 1d       	adc	r22, r1
 ae6:	22 1f       	adc	r18, r18
 ae8:	74 9f       	mul	r23, r20
 aea:	33 27       	eor	r19, r19
 aec:	a0 0d       	add	r26, r0
 aee:	61 1d       	adc	r22, r1
 af0:	23 1f       	adc	r18, r19
 af2:	84 9f       	mul	r24, r20
 af4:	60 0d       	add	r22, r0
 af6:	21 1d       	adc	r18, r1
 af8:	82 2f       	mov	r24, r18
 afa:	76 2f       	mov	r23, r22
 afc:	6a 2f       	mov	r22, r26
 afe:	11 24       	eor	r1, r1
 b00:	9f 57       	subi	r25, 0x7F	; 127
 b02:	50 40       	sbci	r21, 0x00	; 0
 b04:	9a f0       	brmi	.+38     	; 0xb2c <__mulsf3_pse+0x88>
 b06:	f1 f0       	breq	.+60     	; 0xb44 <__mulsf3_pse+0xa0>
 b08:	88 23       	and	r24, r24
 b0a:	4a f0       	brmi	.+18     	; 0xb1e <__mulsf3_pse+0x7a>
 b0c:	ee 0f       	add	r30, r30
 b0e:	ff 1f       	adc	r31, r31
 b10:	bb 1f       	adc	r27, r27
 b12:	66 1f       	adc	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	91 50       	subi	r25, 0x01	; 1
 b1a:	50 40       	sbci	r21, 0x00	; 0
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <__mulsf3_pse+0x64>
 b1e:	9e 3f       	cpi	r25, 0xFE	; 254
 b20:	51 05       	cpc	r21, r1
 b22:	80 f0       	brcs	.+32     	; 0xb44 <__mulsf3_pse+0xa0>
 b24:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_inf>
 b28:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_szero>
 b2c:	5f 3f       	cpi	r21, 0xFF	; 255
 b2e:	e4 f3       	brlt	.-8      	; 0xb28 <__mulsf3_pse+0x84>
 b30:	98 3e       	cpi	r25, 0xE8	; 232
 b32:	d4 f3       	brlt	.-12     	; 0xb28 <__mulsf3_pse+0x84>
 b34:	86 95       	lsr	r24
 b36:	77 95       	ror	r23
 b38:	67 95       	ror	r22
 b3a:	b7 95       	ror	r27
 b3c:	f7 95       	ror	r31
 b3e:	e7 95       	ror	r30
 b40:	9f 5f       	subi	r25, 0xFF	; 255
 b42:	c1 f7       	brne	.-16     	; 0xb34 <__mulsf3_pse+0x90>
 b44:	fe 2b       	or	r31, r30
 b46:	88 0f       	add	r24, r24
 b48:	91 1d       	adc	r25, r1
 b4a:	96 95       	lsr	r25
 b4c:	87 95       	ror	r24
 b4e:	97 f9       	bld	r25, 7
 b50:	08 95       	ret

00000b52 <__udivmodhi4>:
 b52:	aa 1b       	sub	r26, r26
 b54:	bb 1b       	sub	r27, r27
 b56:	51 e1       	ldi	r21, 0x11	; 17
 b58:	07 c0       	rjmp	.+14     	; 0xb68 <__udivmodhi4_ep>

00000b5a <__udivmodhi4_loop>:
 b5a:	aa 1f       	adc	r26, r26
 b5c:	bb 1f       	adc	r27, r27
 b5e:	a6 17       	cp	r26, r22
 b60:	b7 07       	cpc	r27, r23
 b62:	10 f0       	brcs	.+4      	; 0xb68 <__udivmodhi4_ep>
 b64:	a6 1b       	sub	r26, r22
 b66:	b7 0b       	sbc	r27, r23

00000b68 <__udivmodhi4_ep>:
 b68:	88 1f       	adc	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	5a 95       	dec	r21
 b6e:	a9 f7       	brne	.-22     	; 0xb5a <__udivmodhi4_loop>
 b70:	80 95       	com	r24
 b72:	90 95       	com	r25
 b74:	bc 01       	movw	r22, r24
 b76:	cd 01       	movw	r24, r26
 b78:	08 95       	ret

00000b7a <__umulhisi3>:
 b7a:	a2 9f       	mul	r26, r18
 b7c:	b0 01       	movw	r22, r0
 b7e:	b3 9f       	mul	r27, r19
 b80:	c0 01       	movw	r24, r0
 b82:	a3 9f       	mul	r26, r19
 b84:	70 0d       	add	r23, r0
 b86:	81 1d       	adc	r24, r1
 b88:	11 24       	eor	r1, r1
 b8a:	91 1d       	adc	r25, r1
 b8c:	b2 9f       	mul	r27, r18
 b8e:	70 0d       	add	r23, r0
 b90:	81 1d       	adc	r24, r1
 b92:	11 24       	eor	r1, r1
 b94:	91 1d       	adc	r25, r1
 b96:	08 95       	ret

00000b98 <_exit>:
 b98:	f8 94       	cli

00000b9a <__stop_program>:
 b9a:	ff cf       	rjmp	.-2      	; 0xb9a <__stop_program>
