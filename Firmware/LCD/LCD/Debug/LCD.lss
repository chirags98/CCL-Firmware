
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001634  000016c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800132  00800132  000016fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b87  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c29  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e9e  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00004f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  000052dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe8  00000000  00000000  000058cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000068b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e3       	ldi	r30, 0x34	; 52
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 35       	cpi	r26, 0x59	; 89
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <main>
      9e:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
      a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
      a8:	18 b8       	out	0x08, r1	; 8
      aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
      b2:	83 b7       	in	r24, 0x33	; 51
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	83 bf       	out	0x33, r24	; 51
      b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
      ba:	83 b7       	in	r24, 0x33	; 51
      bc:	81 7f       	andi	r24, 0xF1	; 241
      be:	82 60       	ori	r24, 0x02	; 2
      c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
      c2:	83 b7       	in	r24, 0x33	; 51
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
      c8:	88 95       	sleep
	sleep_disable();
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8e 7f       	andi	r24, 0xFE	; 254
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
      d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	8f e9       	ldi	r24, 0x9F	; 159
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
      e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
      e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
      ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	d8 2e       	mov	r13, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     104:	06 2f       	mov	r16, r22
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	10 16       	cp	r1, r16
     10a:	11 06       	cpc	r1, r17
     10c:	34 f5       	brge	.+76     	; 0x15a <avg_read_adc_channel+0x6e>
     10e:	c1 e0       	ldi	r28, 0x01	; 1
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	81 2c       	mov	r8, r1
     114:	91 2c       	mov	r9, r1
     116:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
     118:	e8 2e       	mov	r14, r24
     11a:	f1 2c       	mov	r15, r1
     11c:	c7 01       	movw	r24, r14
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	9c 01       	movw	r18, r24
     124:	2d 5a       	subi	r18, 0xAD	; 173
     126:	3e 4f       	sbci	r19, 0xFE	; 254
     128:	79 01       	movw	r14, r18
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
     12a:	8d 2d       	mov	r24, r13
     12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel];
     130:	f7 01       	movw	r30, r14
     132:	40 81       	ld	r20, Z
     134:	51 81       	ldd	r21, Z+1	; 0x01
     136:	ba 01       	movw	r22, r20
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     140:	9b 01       	movw	r18, r22
     142:	ac 01       	movw	r20, r24
     144:	c5 01       	movw	r24, r10
     146:	b4 01       	movw	r22, r8
     148:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     14c:	4b 01       	movw	r8, r22
     14e:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
     150:	21 96       	adiw	r28, 0x01	; 1
     152:	0c 17       	cp	r16, r28
     154:	1d 07       	cpc	r17, r29
     156:	4c f7       	brge	.-46     	; 0x12a <avg_read_adc_channel+0x3e>
     158:	03 c0       	rjmp	.+6      	; 0x160 <avg_read_adc_channel+0x74>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
     15a:	81 2c       	mov	r8, r1
     15c:	91 2c       	mov	r9, r1
     15e:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel];
	}
	
	adc_val[channel] = val/i;
     160:	cd 2d       	mov	r28, r13
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	b8 01       	movw	r22, r16
     166:	11 0f       	add	r17, r17
     168:	88 0b       	sbc	r24, r24
     16a:	99 0b       	sbc	r25, r25
     16c:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatsisf>
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	c5 01       	movw	r24, r10
     176:	b4 01       	movw	r22, r8
     178:	0e 94 15 09 	call	0x122a	; 0x122a <__divsf3>
     17c:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     180:	cc 0f       	add	r28, r28
     182:	dd 1f       	adc	r29, r29
     184:	cd 5a       	subi	r28, 0xAD	; 173
     186:	de 4f       	sbci	r29, 0xFE	; 254
     188:	79 83       	std	Y+1, r23	; 0x01
     18a:	68 83       	st	Y, r22
	
	return adc_val[channel];
     18c:	88 81       	ld	r24, Y
     18e:	99 81       	ldd	r25, Y+1	; 0x01
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	bf 90       	pop	r11
     1a0:	af 90       	pop	r10
     1a2:	9f 90       	pop	r9
     1a4:	8f 90       	pop	r8
     1a6:	08 95       	ret

000001a8 <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	3f 93       	push	r19
     1b6:	4f 93       	push	r20
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
     1bc:	ef 93       	push	r30
     1be:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1c0:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
     1c4:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
     1c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
     1cc:	ef 70       	andi	r30, 0x0F	; 15
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
	unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	21 e0       	ldi	r18, 0x01	; 1
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	81 11       	cpse	r24, r1
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_21+0x34>
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	ed 5a       	subi	r30, 0xAD	; 173
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
     1e8:	20 81       	ld	r18, Z
     1ea:	31 81       	ldd	r19, Z+1	; 0x01
     1ec:	32 2f       	mov	r19, r18
     1ee:	22 27       	eor	r18, r18
     1f0:	31 83       	std	Z+1, r19	; 0x01
     1f2:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	98 2f       	mov	r25, r24
     1f8:	88 27       	eor	r24, r24
     1fa:	84 0f       	add	r24, r20
     1fc:	91 1d       	adc	r25, r1
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	9f 91       	pop	r25
     208:	8f 91       	pop	r24
     20a:	4f 91       	pop	r20
     20c:	3f 91       	pop	r19
     20e:	2f 91       	pop	r18
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <update_current>:
int v_thresh = 25000;
int power_thresh = 10000;

void update_current()
{
	current = avg_read_adc_channel(0, 10);		//0-2A	Least count = 1.95mv
     21a:	6a e0       	ldi	r22, 0x0A	; 10
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     222:	bc 01       	movw	r22, r24
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
	current = current*1.953 + 0.3 + offset;		//1.953*(1.0228, 9.57, 1.1054, 1.016,1.0570)
     22c:	27 ee       	ldi	r18, 0xE7	; 231
     22e:	3b ef       	ldi	r19, 0xFB	; 251
     230:	49 ef       	ldi	r20, 0xF9	; 249
     232:	5f e3       	ldi	r21, 0x3F	; 63
     234:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     238:	2a e9       	ldi	r18, 0x9A	; 154
     23a:	39 e9       	ldi	r19, 0x99	; 153
     23c:	49 e9       	ldi	r20, 0x99	; 153
     23e:	5e e3       	ldi	r21, 0x3E	; 62
     240:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     244:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <__data_end>
     248:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <__data_end+0x1>
     24c:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <__data_end+0x2>
     250:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <__data_end+0x3>
     254:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     258:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <current>
     25c:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <current+0x1>
     260:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <current+0x2>
     264:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <current+0x3>
     268:	08 95       	ret

0000026a <update_voltage>:
}

void update_voltage()
{
	voltage = avg_read_adc_channel(1, 10);		//0-30V	Least count = 29.29mv
     26a:	6a e0       	ldi	r22, 0x0A	; 10
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     272:	bc 01       	movw	r22, r24
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
	voltage = voltage*29.29;	
     27c:	2c ee       	ldi	r18, 0xEC	; 236
     27e:	31 e5       	ldi	r19, 0x51	; 81
     280:	4a ee       	ldi	r20, 0xEA	; 234
     282:	51 e4       	ldi	r21, 0x41	; 65
     284:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     288:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <voltage>
     28c:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <voltage+0x1>
     290:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <voltage+0x2>
     294:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <voltage+0x3>
     298:	08 95       	ret

0000029a <update_power>:
}

void update_power()
{
	power = voltage*current/1000;
     29a:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <current>
     29e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <current+0x1>
     2a2:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <current+0x2>
     2a6:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <current+0x3>
     2aa:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage>
     2ae:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x1>
     2b2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x2>
     2b6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x3>
     2ba:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	4a e7       	ldi	r20, 0x7A	; 122
     2c4:	54 e4       	ldi	r21, 0x44	; 68
     2c6:	0e 94 15 09 	call	0x122a	; 0x122a <__divsf3>
     2ca:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <power>
     2ce:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <power+0x1>
     2d2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <power+0x2>
     2d6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <power+0x3>
     2da:	08 95       	ret

000002dc <update_gate_voltage>:
}

void update_gate_voltage()
{
	gate_voltage = avg_read_adc_channel(2, 10)*7.5;		//0-7.68V	
     2dc:	6a e0       	ldi	r22, 0x0A	; 10
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
     2e4:	bc 01       	movw	r22, r24
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 ef       	ldi	r20, 0xF0	; 240
     2f4:	50 e4       	ldi	r21, 0x40	; 64
     2f6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     2fa:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <gate_voltage>
     2fe:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <gate_voltage+0x1>
     302:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <gate_voltage+0x2>
     306:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <gate_voltage+0x3>
     30a:	08 95       	ret

0000030c <print_current>:
}

void print_current(char row, char col)
{
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	d8 2f       	mov	r29, r24
     31e:	c6 2f       	mov	r28, r22
	if (current<1000)
     320:	c0 90 3e 01 	lds	r12, 0x013E	; 0x80013e <current>
     324:	d0 90 3f 01 	lds	r13, 0x013F	; 0x80013f <current+0x1>
     328:	e0 90 40 01 	lds	r14, 0x0140	; 0x800140 <current+0x2>
     32c:	f0 90 41 01 	lds	r15, 0x0141	; 0x800141 <current+0x3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a e7       	ldi	r20, 0x7A	; 122
     336:	54 e4       	ldi	r21, 0x44	; 68
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 10 09 	call	0x1220	; 0x1220 <__cmpsf2>
     340:	88 23       	and	r24, r24
     342:	74 f4       	brge	.+28     	; 0x360 <print_current+0x54>
	lcd_print2(row,col,current,4, "mA");					//Least count = 1.95mA
     344:	c7 01       	movw	r24, r14
     346:	b6 01       	movw	r22, r12
     348:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     34c:	00 e0       	ldi	r16, 0x00	; 0
     34e:	11 e0       	ldi	r17, 0x01	; 1
     350:	24 e0       	ldi	r18, 0x04	; 4
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	ab 01       	movw	r20, r22
     356:	6c 2f       	mov	r22, r28
     358:	8d 2f       	mov	r24, r29
     35a:	0e 94 b3 04 	call	0x966	; 0x966 <lcd_print2>
     35e:	3d c0       	rjmp	.+122    	; 0x3da <print_current+0xce>
	
	else if (current>=1000)
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	4a e7       	ldi	r20, 0x7A	; 122
     366:	54 e4       	ldi	r21, 0x44	; 68
     368:	c7 01       	movw	r24, r14
     36a:	b6 01       	movw	r22, r12
     36c:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gesf2>
     370:	88 23       	and	r24, r24
     372:	9c f1       	brlt	.+102    	; 0x3da <print_current+0xce>
	{
		lcd_print3(row, col, current/1000, 1);
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	4a e7       	ldi	r20, 0x7A	; 122
     37a:	54 e4       	ldi	r21, 0x44	; 68
     37c:	c7 01       	movw	r24, r14
     37e:	b6 01       	movw	r22, r12
     380:	0e 94 15 09 	call	0x122a	; 0x122a <__divsf3>
     384:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	ab 01       	movw	r20, r22
     38e:	6c 2f       	mov	r22, r28
     390:	8d 2f       	mov	r24, r29
     392:	0e 94 b9 06 	call	0xd72	; 0xd72 <lcd_print3>
		lcd_string2(row, col+1, ".");
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	6c 0f       	add	r22, r28
     39a:	43 e0       	ldi	r20, 0x03	; 3
     39c:	51 e0       	ldi	r21, 0x01	; 1
     39e:	8d 2f       	mov	r24, r29
     3a0:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_string2>
		lcd_print(row, col+2, (int)current%1000, 3);		//Least count = 1.95mA
     3a4:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <current>
     3a8:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <current+0x1>
     3ac:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <current+0x2>
     3b0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <current+0x3>
     3b4:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     3b8:	cb 01       	movw	r24, r22
     3ba:	68 ee       	ldi	r22, 0xE8	; 232
     3bc:	73 e0       	ldi	r23, 0x03	; 3
     3be:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divmodhi4>
     3c2:	62 e0       	ldi	r22, 0x02	; 2
     3c4:	6c 0f       	add	r22, r28
     3c6:	23 e0       	ldi	r18, 0x03	; 3
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	ac 01       	movw	r20, r24
     3cc:	8d 2f       	mov	r24, r29
     3ce:	0e 94 b3 03 	call	0x766	; 0x766 <lcd_print>
		lcd_string("A");
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string>
	}
	
	//lcd_print2(row,col,current,4, "mA");					//Least count = 1.95mA
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	08 95       	ret

000003ec <print_voltage>:

void print_voltage(char row, char col)
{
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	d8 2f       	mov	r29, r24
     3fe:	c6 2f       	mov	r28, r22
	if (voltage<1000)
     400:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <voltage>
     404:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <voltage+0x1>
     408:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <voltage+0x2>
     40c:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <voltage+0x3>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	4a e7       	ldi	r20, 0x7A	; 122
     416:	54 e4       	ldi	r21, 0x44	; 68
     418:	c7 01       	movw	r24, r14
     41a:	b6 01       	movw	r22, r12
     41c:	0e 94 10 09 	call	0x1220	; 0x1220 <__cmpsf2>
     420:	88 23       	and	r24, r24
     422:	74 f4       	brge	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	lcd_print2(row,col,voltage,4, "mV");
     424:	c7 01       	movw	r24, r14
     426:	b6 01       	movw	r22, r12
     428:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     42c:	05 e0       	ldi	r16, 0x05	; 5
     42e:	11 e0       	ldi	r17, 0x01	; 1
     430:	24 e0       	ldi	r18, 0x04	; 4
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	ab 01       	movw	r20, r22
     436:	6c 2f       	mov	r22, r28
     438:	8d 2f       	mov	r24, r29
     43a:	0e 94 b3 04 	call	0x966	; 0x966 <lcd_print2>
     43e:	85 c0       	rjmp	.+266    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	
	else if (voltage>=1000 && voltage < 10000)
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	4a e7       	ldi	r20, 0x7A	; 122
     446:	54 e4       	ldi	r21, 0x44	; 68
     448:	c7 01       	movw	r24, r14
     44a:	b6 01       	movw	r22, r12
     44c:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gesf2>
     450:	88 23       	and	r24, r24
     452:	f4 f1       	brlt	.+124    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e4       	ldi	r19, 0x40	; 64
     458:	4c e1       	ldi	r20, 0x1C	; 28
     45a:	56 e4       	ldi	r21, 0x46	; 70
     45c:	c7 01       	movw	r24, r14
     45e:	b6 01       	movw	r22, r12
     460:	0e 94 10 09 	call	0x1220	; 0x1220 <__cmpsf2>
     464:	88 23       	and	r24, r24
     466:	a4 f5       	brge	.+104    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	{
		lcd_print3(row, col, voltage/1000, 1);
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	4a e7       	ldi	r20, 0x7A	; 122
     46e:	54 e4       	ldi	r21, 0x44	; 68
     470:	c7 01       	movw	r24, r14
     472:	b6 01       	movw	r22, r12
     474:	0e 94 15 09 	call	0x122a	; 0x122a <__divsf3>
     478:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     47c:	21 e0       	ldi	r18, 0x01	; 1
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	ab 01       	movw	r20, r22
     482:	6c 2f       	mov	r22, r28
     484:	8d 2f       	mov	r24, r29
     486:	0e 94 b9 06 	call	0xd72	; 0xd72 <lcd_print3>
		lcd_string2(row, col+1, ".");
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	6c 0f       	add	r22, r28
     48e:	43 e0       	ldi	r20, 0x03	; 3
     490:	51 e0       	ldi	r21, 0x01	; 1
     492:	8d 2f       	mov	r24, r29
     494:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_string2>
		lcd_print(row, col+2, (int)voltage%1000, 3);		//Least count = 1.95mA
     498:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage>
     49c:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x1>
     4a0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x2>
     4a4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x3>
     4a8:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     4ac:	cb 01       	movw	r24, r22
     4ae:	68 ee       	ldi	r22, 0xE8	; 232
     4b0:	73 e0       	ldi	r23, 0x03	; 3
     4b2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divmodhi4>
     4b6:	62 e0       	ldi	r22, 0x02	; 2
     4b8:	6c 0f       	add	r22, r28
     4ba:	23 e0       	ldi	r18, 0x03	; 3
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	ac 01       	movw	r20, r24
     4c0:	8d 2f       	mov	r24, r29
     4c2:	0e 94 b3 03 	call	0x766	; 0x766 <lcd_print>
		lcd_string("V ");
     4c6:	88 e0       	ldi	r24, 0x08	; 8
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string>
     4ce:	3d c0       	rjmp	.+122    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	}
	
	else if (voltage>=10000)
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e4       	ldi	r19, 0x40	; 64
     4d4:	4c e1       	ldi	r20, 0x1C	; 28
     4d6:	56 e4       	ldi	r21, 0x46	; 70
     4d8:	c7 01       	movw	r24, r14
     4da:	b6 01       	movw	r22, r12
     4dc:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gesf2>
     4e0:	88 23       	and	r24, r24
     4e2:	9c f1       	brlt	.+102    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	{
		lcd_print3(row, col, voltage/1000, 2);
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	4a e7       	ldi	r20, 0x7A	; 122
     4ea:	54 e4       	ldi	r21, 0x44	; 68
     4ec:	c7 01       	movw	r24, r14
     4ee:	b6 01       	movw	r22, r12
     4f0:	0e 94 15 09 	call	0x122a	; 0x122a <__divsf3>
     4f4:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     4f8:	22 e0       	ldi	r18, 0x02	; 2
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	ab 01       	movw	r20, r22
     4fe:	6c 2f       	mov	r22, r28
     500:	8d 2f       	mov	r24, r29
     502:	0e 94 b9 06 	call	0xd72	; 0xd72 <lcd_print3>
		lcd_string2(row, col+2, ".");
     506:	62 e0       	ldi	r22, 0x02	; 2
     508:	6c 0f       	add	r22, r28
     50a:	43 e0       	ldi	r20, 0x03	; 3
     50c:	51 e0       	ldi	r21, 0x01	; 1
     50e:	8d 2f       	mov	r24, r29
     510:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_string2>
		lcd_print(row, col+3, (int)voltage%1000, 3);		//Least count = 1.95mA
     514:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage>
     518:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x1>
     51c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x2>
     520:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x3>
     524:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     528:	cb 01       	movw	r24, r22
     52a:	68 ee       	ldi	r22, 0xE8	; 232
     52c:	73 e0       	ldi	r23, 0x03	; 3
     52e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__divmodhi4>
     532:	63 e0       	ldi	r22, 0x03	; 3
     534:	6c 0f       	add	r22, r28
     536:	23 e0       	ldi	r18, 0x03	; 3
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	ac 01       	movw	r20, r24
     53c:	8d 2f       	mov	r24, r29
     53e:	0e 94 b3 03 	call	0x766	; 0x766 <lcd_print>
		lcd_string("V");
     542:	86 e0       	ldi	r24, 0x06	; 6
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 84 03 	call	0x708	; 0x708 <lcd_string>
	}
	
	//lcd_print2(row,col,voltage,5, "mV");					//Least count = 29.29mv
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	08 95       	ret

0000055c <print_power>:

void print_power(char row, char col)
{
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	c8 2f       	mov	r28, r24
     566:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,power,5, "mW");
     568:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <power>
     56c:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <power+0x1>
     570:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <power+0x2>
     574:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <power+0x3>
     578:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     57c:	0b e0       	ldi	r16, 0x0B	; 11
     57e:	11 e0       	ldi	r17, 0x01	; 1
     580:	25 e0       	ldi	r18, 0x05	; 5
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	ab 01       	movw	r20, r22
     586:	6d 2f       	mov	r22, r29
     588:	8c 2f       	mov	r24, r28
     58a:	0e 94 b3 04 	call	0x966	; 0x966 <lcd_print2>
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	08 95       	ret

00000598 <print_gate_voltage>:

void print_gate_voltage(char row, char col)
{
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	c8 2f       	mov	r28, r24
     5a2:	d6 2f       	mov	r29, r22
	lcd_print2(row,col,gate_voltage,4, "mV");				//Least count = 7.5mv
     5a4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <gate_voltage>
     5a8:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <gate_voltage+0x1>
     5ac:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <gate_voltage+0x2>
     5b0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <gate_voltage+0x3>
     5b4:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     5b8:	05 e0       	ldi	r16, 0x05	; 5
     5ba:	11 e0       	ldi	r17, 0x01	; 1
     5bc:	24 e0       	ldi	r18, 0x04	; 4
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	ab 01       	movw	r20, r22
     5c2:	6d 2f       	mov	r22, r29
     5c4:	8c 2f       	mov	r24, r28
     5c6:	0e 94 b3 04 	call	0x966	; 0x966 <lcd_print2>
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <Bit_Reverse>:
	return x;
}
*/

static unsigned char Bit_Reverse(unsigned char aByte)
{
     5d4:	98 2f       	mov	r25, r24
return (aByte & 0x80 ? 0x01 : 0) |
     5d6:	88 1f       	adc	r24, r24
     5d8:	88 27       	eor	r24, r24
     5da:	88 1f       	adc	r24, r24
     5dc:	96 fd       	sbrc	r25, 6
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <Bit_Reverse+0x10>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <Bit_Reverse+0x12>
     5e4:	22 e0       	ldi	r18, 0x02	; 2
     5e6:	82 2b       	or	r24, r18
     5e8:	95 fd       	sbrc	r25, 5
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <Bit_Reverse+0x1c>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <Bit_Reverse+0x1e>
     5f0:	24 e0       	ldi	r18, 0x04	; 4
     5f2:	82 2b       	or	r24, r18
     5f4:	94 fd       	sbrc	r25, 4
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <Bit_Reverse+0x28>
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <Bit_Reverse+0x2a>
     5fc:	28 e0       	ldi	r18, 0x08	; 8
     5fe:	82 2b       	or	r24, r18
     600:	93 fd       	sbrc	r25, 3
     602:	02 c0       	rjmp	.+4      	; 0x608 <Bit_Reverse+0x34>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	01 c0       	rjmp	.+2      	; 0x60a <Bit_Reverse+0x36>
     608:	20 e1       	ldi	r18, 0x10	; 16
     60a:	82 2b       	or	r24, r18
     60c:	92 fd       	sbrc	r25, 2
     60e:	02 c0       	rjmp	.+4      	; 0x614 <Bit_Reverse+0x40>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	01 c0       	rjmp	.+2      	; 0x616 <Bit_Reverse+0x42>
     614:	20 e2       	ldi	r18, 0x20	; 32
     616:	82 2b       	or	r24, r18
     618:	91 fd       	sbrc	r25, 1
     61a:	02 c0       	rjmp	.+4      	; 0x620 <Bit_Reverse+0x4c>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	01 c0       	rjmp	.+2      	; 0x622 <Bit_Reverse+0x4e>
     620:	20 e4       	ldi	r18, 0x40	; 64
     622:	82 2b       	or	r24, r18
     624:	90 fd       	sbrc	r25, 0
     626:	02 c0       	rjmp	.+4      	; 0x62c <Bit_Reverse+0x58>
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	01 c0       	rjmp	.+2      	; 0x62e <Bit_Reverse+0x5a>
     62c:	90 e8       	ldi	r25, 0x80	; 128
(aByte & 0x10 ? 0x08 : 0) |
(aByte & 0x08 ? 0x10 : 0) |
(aByte & 0x04 ? 0x20 : 0) |
(aByte & 0x02 ? 0x40 : 0) |
(aByte & 0x01 ? 0x80 : 0);
}
     62e:	89 2b       	or	r24, r25
     630:	08 95       	ret

00000632 <lcd_wr_command>:
* Logic: Outputs the command values to the lcd via PORTC
		 This function is used to give various commands to the LCD to perform various functions 
* Example Call: lcd_wr_command(0x80) To bring cursor at home position
*/
static void lcd_wr_command(unsigned char cmd)
{
     632:	cf 93       	push	r28
     634:	c8 2f       	mov	r28, r24
	static unsigned char temp;
	temp = cmd;
	
	temp = temp & 0xF0;		//Mask lower nibble
	
	temp = Bit_Reverse(temp);
     636:	80 7f       	andi	r24, 0xF0	; 240
     638:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Bit_Reverse>
	temp = temp<<2;
     63c:	88 0f       	add	r24, r24
     63e:	88 0f       	add	r24, r24
     640:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <temp.1665>
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     644:	9b b1       	in	r25, 0x0b	; 11
     646:	93 7c       	andi	r25, 0xC3	; 195
     648:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= temp;		//Output upper nibble
     64a:	8b b1       	in	r24, 0x0b	; 11
     64c:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <temp.1665>
     650:	98 2b       	or	r25, r24
     652:	9b b9       	out	0x0b, r25	; 11
	
	cbit(lcd_port,RS);
     654:	5f 98       	cbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     656:	5e 9a       	sbi	0x0b, 6	; 11
     658:	8f e1       	ldi	r24, 0x1F	; 31
     65a:	9e e4       	ldi	r25, 0x4E	; 78
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <lcd_wr_command+0x2a>
     660:	00 c0       	rjmp	.+0      	; 0x662 <lcd_wr_command+0x30>
     662:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     664:	5e 98       	cbi	0x0b, 6	; 11
	
	cmd = cmd & 0x0F;		//Mask upper nibble
	cmd = cmd<<4;			//Move data into position for o/p
	
	cmd = Bit_Reverse(cmd);
     666:	8c 2f       	mov	r24, r28
     668:	82 95       	swap	r24
     66a:	80 7f       	andi	r24, 0xF0	; 240
     66c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Bit_Reverse>
	cmd = cmd<<2;
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     670:	9b b1       	in	r25, 0x0b	; 11
     672:	93 7c       	andi	r25, 0xC3	; 195
     674:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= cmd;		//Output lower nibble
     676:	9b b1       	in	r25, 0x0b	; 11
	
	cmd = cmd & 0x0F;		//Mask upper nibble
	cmd = cmd<<4;			//Move data into position for o/p
	
	cmd = Bit_Reverse(cmd);
	cmd = cmd<<2;
     678:	88 0f       	add	r24, r24
     67a:	88 0f       	add	r24, r24
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
	
	lcd_port |= cmd;		//Output lower nibble
     67c:	98 2b       	or	r25, r24
     67e:	9b b9       	out	0x0b, r25	; 11
	
	cbit(lcd_port,RS);
     680:	5f 98       	cbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     682:	5e 9a       	sbi	0x0b, 6	; 11
     684:	8f e1       	ldi	r24, 0x1F	; 31
     686:	9e e4       	ldi	r25, 0x4E	; 78
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <lcd_wr_command+0x56>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <lcd_wr_command+0x5c>
     68e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     690:	5e 98       	cbi	0x0b, 6	; 11
}
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <lcd_wr_char>:
* Output: Function to write character on LCD
* Logic: Outputs the appropriate values to the lcd via PORTC
* Example Call: lcd_wr_char(0x41) -to write a to the lcd
*/
static void lcd_wr_char(char letter)
{
     696:	cf 93       	push	r28
     698:	c8 2f       	mov	r28, r24
	char temp;
	temp = letter;
	temp = temp & 0xF0;
	
	temp = Bit_Reverse(temp);
     69a:	80 7f       	andi	r24, 0xF0	; 240
     69c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Bit_Reverse>
	temp = temp << 2;
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     6a0:	9b b1       	in	r25, 0x0b	; 11
     6a2:	93 7c       	andi	r25, 0xC3	; 195
     6a4:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= temp;
     6a6:	9b b1       	in	r25, 0x0b	; 11
	char temp;
	temp = letter;
	temp = temp & 0xF0;
	
	temp = Bit_Reverse(temp);
	temp = temp << 2;
     6a8:	88 0f       	add	r24, r24
     6aa:	88 0f       	add	r24, r24
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
	
	lcd_port |= temp;
     6ac:	98 2b       	or	r25, r24
     6ae:	9b b9       	out	0x0b, r25	; 11
	
	sbit(lcd_port,RS);
     6b0:	5f 9a       	sbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     6b2:	5e 9a       	sbi	0x0b, 6	; 11
     6b4:	8f e1       	ldi	r24, 0x1F	; 31
     6b6:	9e e4       	ldi	r25, 0x4E	; 78
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <lcd_wr_char+0x22>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <lcd_wr_char+0x28>
     6be:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     6c0:	5e 98       	cbi	0x0b, 6	; 11

	letter = letter & 0x0F;
	letter = letter<<4;
	
	letter = Bit_Reverse(letter);
     6c2:	8c 2f       	mov	r24, r28
     6c4:	82 95       	swap	r24
     6c6:	80 7f       	andi	r24, 0xF0	; 240
     6c8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Bit_Reverse>
	letter = letter << 2;
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
     6cc:	9b b1       	in	r25, 0x0b	; 11
     6ce:	93 7c       	andi	r25, 0xC3	; 195
     6d0:	9b b9       	out	0x0b, r25	; 11
	
	lcd_port |= letter;
     6d2:	9b b1       	in	r25, 0x0b	; 11

	letter = letter & 0x0F;
	letter = letter<<4;
	
	letter = Bit_Reverse(letter);
	letter = letter << 2;
     6d4:	88 0f       	add	r24, r24
     6d6:	88 0f       	add	r24, r24
	//lcd_port &= 0x0F;		//Clear output 0000 1111
	lcd_port &= 0xC3;		//Clear output 1100 0011
	
	lcd_port |= letter;
     6d8:	98 2b       	or	r25, r24
     6da:	9b b9       	out	0x0b, r25	; 11
	
	sbit(lcd_port,RS);
     6dc:	5f 9a       	sbi	0x0b, 7	; 11
	sbit(lcd_port,EN);
     6de:	5e 9a       	sbi	0x0b, 6	; 11
     6e0:	8f e1       	ldi	r24, 0x1F	; 31
     6e2:	9e e4       	ldi	r25, 0x4E	; 78
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <lcd_wr_char+0x4e>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <lcd_wr_char+0x54>
     6ea:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     6ec:	5e 98       	cbi	0x0b, 6	; 11
}
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <lcd_port_config>:
* Example Call: lcd_port_config()
*/
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRD = DDRD | 0xFC; //all the LCD pin's direction set as output (1111 1100)
     6f2:	8a b1       	in	r24, 0x0a	; 10
     6f4:	8c 6f       	ori	r24, 0xFC	; 252
     6f6:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD & 0x04; // all the LCD pins are set to logic 0 except LCD D7
     6f8:	8b b1       	in	r24, 0x0b	; 11
     6fa:	84 70       	andi	r24, 0x04	; 4
     6fc:	8b b9       	out	0x0b, r24	; 11
     6fe:	08 95       	ret

00000700 <lcd_home>:
* Logic: Passes 0x80 to lcd_wr_command
* Example Call: lcd_home()
*/
void lcd_home(void)
{
	lcd_wr_command(0x80);
     700:	80 e8       	ldi	r24, 0x80	; 128
     702:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
     706:	08 95       	ret

00000708 <lcd_string>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string(char *str)
{
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ec 01       	movw	r28, r24
	while(*str != '\0')
     70e:	88 81       	ld	r24, Y
     710:	88 23       	and	r24, r24
     712:	31 f0       	breq	.+12     	; 0x720 <lcd_string+0x18>
     714:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
     716:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string(char *str)
{
	while(*str != '\0')
     71a:	89 91       	ld	r24, Y+
     71c:	81 11       	cpse	r24, r1
     71e:	fb cf       	rjmp	.-10     	; 0x716 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <lcd_cursor>:
	row
* Example Call: lcd_string(2,3)
*/
void lcd_cursor (char row, char column)
{
	switch (row) {
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	19 f0       	breq	.+6      	; 0x730 <lcd_cursor+0xa>
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	31 f0       	breq	.+12     	; 0x73a <lcd_cursor+0x14>
     72e:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
     730:	8f e7       	ldi	r24, 0x7F	; 127
     732:	86 0f       	add	r24, r22
     734:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
     738:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     73a:	8f eb       	ldi	r24, 0xBF	; 191
     73c:	86 0f       	add	r24, r22
     73e:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
     742:	08 95       	ret

00000744 <lcd_string2>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ea 01       	movw	r28, r20
	lcd_cursor(row,column);	
     74a:	0e 94 93 03 	call	0x726	; 0x726 <lcd_cursor>
	while(*str != '\0')
     74e:	88 81       	ld	r24, Y
     750:	88 23       	and	r24, r24
     752:	31 f0       	breq	.+12     	; 0x760 <lcd_string2+0x1c>
     754:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
     756:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
	lcd_cursor(row,column);	
	while(*str != '\0')
     75a:	89 91       	ld	r24, Y+
     75c:	81 11       	cpse	r24, r1
     75e:	fb cf       	rjmp	.-10     	; 0x756 <lcd_string2+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <lcd_print>:
* Output: Integer is printed to the desired location and upto the desired number of digits
* Logic: 
* Example Call: lcd_string("hello")
*/
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	8a 01       	movw	r16, r20
     770:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     772:	88 23       	and	r24, r24
     774:	11 f0       	breq	.+4      	; 0x77a <lcd_print+0x14>
     776:	61 11       	cpse	r22, r1
     778:	03 c0       	rjmp	.+6      	; 0x780 <lcd_print+0x1a>
	{
		lcd_home();
     77a:	0e 94 80 03 	call	0x700	; 0x700 <lcd_home>
     77e:	02 c0       	rjmp	.+4      	; 0x784 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     780:	0e 94 93 03 	call	0x726	; 0x726 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     784:	c5 30       	cpi	r28, 0x05	; 5
     786:	d1 05       	cpc	r29, r1
     788:	c9 f4       	brne	.+50     	; 0x7bc <lcd_print+0x56>
	{
		million=value/10000+48;
     78a:	98 01       	movw	r18, r16
     78c:	32 95       	swap	r19
     78e:	22 95       	swap	r18
     790:	2f 70       	andi	r18, 0x0F	; 15
     792:	23 27       	eor	r18, r19
     794:	3f 70       	andi	r19, 0x0F	; 15
     796:	23 27       	eor	r18, r19
     798:	a7 e4       	ldi	r26, 0x47	; 71
     79a:	b3 e0       	ldi	r27, 0x03	; 3
     79c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     7a0:	96 95       	lsr	r25
     7a2:	87 95       	ror	r24
     7a4:	96 95       	lsr	r25
     7a6:	87 95       	ror	r24
     7a8:	96 95       	lsr	r25
     7aa:	87 95       	ror	r24
     7ac:	c0 96       	adiw	r24, 0x30	; 48
     7ae:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <million+0x1>
     7b2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <million>
		//if(million != '0')
		lcd_wr_char(million);
     7b6:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <lcd_print+0x5e>
		flag=1;
	}
	if(digits==4 || flag==1)
     7bc:	c4 30       	cpi	r28, 0x04	; 4
     7be:	d1 05       	cpc	r29, r1
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <lcd_print+0x5e>
     7c2:	c3 c0       	rjmp	.+390    	; 0x94a <__stack+0x4b>
	{
		temp = value/1000;
     7c4:	98 01       	movw	r18, r16
     7c6:	36 95       	lsr	r19
     7c8:	27 95       	ror	r18
     7ca:	36 95       	lsr	r19
     7cc:	27 95       	ror	r18
     7ce:	36 95       	lsr	r19
     7d0:	27 95       	ror	r18
     7d2:	a5 ec       	ldi	r26, 0xC5	; 197
     7d4:	b0 e2       	ldi	r27, 0x20	; 32
     7d6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     7da:	ac 01       	movw	r20, r24
     7dc:	52 95       	swap	r21
     7de:	42 95       	swap	r20
     7e0:	4f 70       	andi	r20, 0x0F	; 15
     7e2:	45 27       	eor	r20, r21
     7e4:	5f 70       	andi	r21, 0x0F	; 15
     7e6:	45 27       	eor	r20, r21
     7e8:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     7ec:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		thousand = temp%10 + 48;
     7f0:	9a 01       	movw	r18, r20
     7f2:	ad ec       	ldi	r26, 0xCD	; 205
     7f4:	bc ec       	ldi	r27, 0xCC	; 204
     7f6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     7fa:	96 95       	lsr	r25
     7fc:	87 95       	ror	r24
     7fe:	96 95       	lsr	r25
     800:	87 95       	ror	r24
     802:	96 95       	lsr	r25
     804:	87 95       	ror	r24
     806:	9c 01       	movw	r18, r24
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	9a 01       	movw	r18, r20
     81e:	28 1b       	sub	r18, r24
     820:	39 0b       	sbc	r19, r25
     822:	c9 01       	movw	r24, r18
     824:	c0 96       	adiw	r24, 0x30	; 48
     826:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <thousand+0x1>
     82a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <thousand>
		//if(thousand != '0')
		lcd_wr_char(thousand);
     82e:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     832:	98 01       	movw	r18, r16
     834:	36 95       	lsr	r19
     836:	27 95       	ror	r18
     838:	36 95       	lsr	r19
     83a:	27 95       	ror	r18
     83c:	ab e7       	ldi	r26, 0x7B	; 123
     83e:	b4 e1       	ldi	r27, 0x14	; 20
     840:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     844:	ac 01       	movw	r20, r24
     846:	56 95       	lsr	r21
     848:	47 95       	ror	r20
     84a:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     84e:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		hundred = temp%10 + 48;
     852:	9a 01       	movw	r18, r20
     854:	ad ec       	ldi	r26, 0xCD	; 205
     856:	bc ec       	ldi	r27, 0xCC	; 204
     858:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     85c:	96 95       	lsr	r25
     85e:	87 95       	ror	r24
     860:	96 95       	lsr	r25
     862:	87 95       	ror	r24
     864:	96 95       	lsr	r25
     866:	87 95       	ror	r24
     868:	9c 01       	movw	r18, r24
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	82 0f       	add	r24, r18
     87c:	93 1f       	adc	r25, r19
     87e:	9a 01       	movw	r18, r20
     880:	28 1b       	sub	r18, r24
     882:	39 0b       	sbc	r19, r25
     884:	c9 01       	movw	r24, r18
     886:	c0 96       	adiw	r24, 0x30	; 48
     888:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hundred+0x1>
     88c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <hundred>
		//if(hundred != '0')
		lcd_wr_char(hundred);
     890:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
     894:	04 c0       	rjmp	.+8      	; 0x89e <lcd_print+0x138>
		flag=1;
	}
	if(digits==2 || flag==1)
     896:	c2 30       	cpi	r28, 0x02	; 2
     898:	d1 05       	cpc	r29, r1
     89a:	09 f0       	breq	.+2      	; 0x89e <lcd_print+0x138>
     89c:	5b c0       	rjmp	.+182    	; 0x954 <__stack+0x55>
	{
		temp = value/10;
     89e:	98 01       	movw	r18, r16
     8a0:	ad ec       	ldi	r26, 0xCD	; 205
     8a2:	bc ec       	ldi	r27, 0xCC	; 204
     8a4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     8a8:	ac 01       	movw	r20, r24
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	56 95       	lsr	r21
     8b0:	47 95       	ror	r20
     8b2:	56 95       	lsr	r21
     8b4:	47 95       	ror	r20
     8b6:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     8ba:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		tens = temp%10 + 48;
     8be:	9a 01       	movw	r18, r20
     8c0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     8c4:	96 95       	lsr	r25
     8c6:	87 95       	ror	r24
     8c8:	96 95       	lsr	r25
     8ca:	87 95       	ror	r24
     8cc:	96 95       	lsr	r25
     8ce:	87 95       	ror	r24
     8d0:	9c 01       	movw	r18, r24
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	82 0f       	add	r24, r18
     8e4:	93 1f       	adc	r25, r19
     8e6:	9a 01       	movw	r18, r20
     8e8:	28 1b       	sub	r18, r24
     8ea:	39 0b       	sbc	r19, r25
     8ec:	c9 01       	movw	r24, r18
     8ee:	c0 96       	adiw	r24, 0x30	; 48
     8f0:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <tens+0x1>
     8f4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tens>
		//if(tens != '0')
		lcd_wr_char(tens);
     8f8:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     8fc:	98 01       	movw	r18, r16
     8fe:	ad ec       	ldi	r26, 0xCD	; 205
     900:	bc ec       	ldi	r27, 0xCC	; 204
     902:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     906:	96 95       	lsr	r25
     908:	87 95       	ror	r24
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	9c 01       	movw	r18, r24
     914:	22 0f       	add	r18, r18
     916:	33 1f       	adc	r19, r19
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	98 01       	movw	r18, r16
     92a:	28 1b       	sub	r18, r24
     92c:	39 0b       	sbc	r19, r25
     92e:	c9 01       	movw	r24, r18
     930:	c0 96       	adiw	r24, 0x30	; 48
     932:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <unit+0x1>
     936:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <unit>
		//if(unit != '0')
		lcd_wr_char(unit);
     93a:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
	}
	if(digits>5)
     93e:	26 97       	sbiw	r28, 0x06	; 6
     940:	6c f0       	brlt	.+26     	; 0x95c <__stack+0x5d>
	{
		lcd_wr_char('E');
     942:	85 e4       	ldi	r24, 0x45	; 69
     944:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
     948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0x5d>
		thousand = temp%10 + 48;
		//if(thousand != '0')
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     94a:	c3 30       	cpi	r28, 0x03	; 3
     94c:	d1 05       	cpc	r29, r1
     94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0x53>
     950:	a2 cf       	rjmp	.-188    	; 0x896 <lcd_print+0x130>
     952:	6f cf       	rjmp	.-290    	; 0x832 <lcd_print+0xcc>
		tens = temp%10 + 48;
		//if(tens != '0')
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
     954:	c1 30       	cpi	r28, 0x01	; 1
     956:	d1 05       	cpc	r29, r1
     958:	91 f7       	brne	.-28     	; 0x93e <__stack+0x3f>
     95a:	d0 cf       	rjmp	.-96     	; 0x8fc <lcd_print+0x196>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <lcd_print2>:

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	6a 01       	movw	r12, r20
     976:	79 01       	movw	r14, r18
	unsigned char flag=0;
	char count = 0;
	
	if(row==0||coloumn==0)
     978:	88 23       	and	r24, r24
     97a:	11 f0       	breq	.+4      	; 0x980 <lcd_print2+0x1a>
     97c:	61 11       	cpse	r22, r1
     97e:	03 c0       	rjmp	.+6      	; 0x986 <lcd_print2+0x20>
	{
		lcd_home();
     980:	0e 94 80 03 	call	0x700	; 0x700 <lcd_home>
     984:	02 c0       	rjmp	.+4      	; 0x98a <lcd_print2+0x24>
	}
	else
	{
		lcd_cursor(row,coloumn);
     986:	0e 94 93 03 	call	0x726	; 0x726 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     98a:	25 e0       	ldi	r18, 0x05	; 5
     98c:	e2 16       	cp	r14, r18
     98e:	f1 04       	cpc	r15, r1
     990:	f1 f4       	brne	.+60     	; 0x9ce <lcd_print2+0x68>
	{
		million=value/10000+48;
     992:	96 01       	movw	r18, r12
     994:	32 95       	swap	r19
     996:	22 95       	swap	r18
     998:	2f 70       	andi	r18, 0x0F	; 15
     99a:	23 27       	eor	r18, r19
     99c:	3f 70       	andi	r19, 0x0F	; 15
     99e:	23 27       	eor	r18, r19
     9a0:	a7 e4       	ldi	r26, 0x47	; 71
     9a2:	b3 e0       	ldi	r27, 0x03	; 3
     9a4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     9a8:	96 95       	lsr	r25
     9aa:	87 95       	ror	r24
     9ac:	96 95       	lsr	r25
     9ae:	87 95       	ror	r24
     9b0:	96 95       	lsr	r25
     9b2:	87 95       	ror	r24
     9b4:	c0 96       	adiw	r24, 0x30	; 48
     9b6:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <million+0x1>
     9ba:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <million>
		if(million != '0')
     9be:	80 33       	cpi	r24, 0x30	; 48
     9c0:	91 05       	cpc	r25, r1
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <lcd_print2+0x60>
     9c4:	76 c0       	rjmp	.+236    	; 0xab2 <lcd_print2+0x14c>
		{
			lcd_wr_char(million);
     9c6:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
			count++;	
     9ca:	c1 e0       	ldi	r28, 0x01	; 1
     9cc:	73 c0       	rjmp	.+230    	; 0xab4 <lcd_print2+0x14e>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
     9ce:	34 e0       	ldi	r19, 0x04	; 4
     9d0:	e3 16       	cp	r14, r19
     9d2:	f1 04       	cpc	r15, r1
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <lcd_print2+0x72>
     9d6:	dc c0       	rjmp	.+440    	; 0xb90 <lcd_print2+0x22a>
     9d8:	21 c1       	rjmp	.+578    	; 0xc1c <lcd_print2+0x2b6>
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)
     9da:	cc 23       	and	r28, r28
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <lcd_print2+0x7a>
     9de:	a4 c0       	rjmp	.+328    	; 0xb28 <lcd_print2+0x1c2>
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <lcd_print2+0x7e>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     9e2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		if(thousand != '0' || count != 0)
		{
			lcd_wr_char(thousand);
     9e4:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
			count++;
     9e8:	cf 5f       	subi	r28, 0xFF	; 255
     9ea:	9e c0       	rjmp	.+316    	; 0xb28 <lcd_print2+0x1c2>
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
     9ec:	cc 23       	and	r28, r28
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <lcd_print2+0x8c>
     9f0:	d5 c0       	rjmp	.+426    	; 0xb9c <lcd_print2+0x236>
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <lcd_print2+0x90>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     9f4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/100;
		hundred = temp%10 + 48;
		if(hundred != '0' || count != 0)
		{
			lcd_wr_char(hundred);
     9f6:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
			count++;
     9fa:	cf 5f       	subi	r28, 0xFF	; 255
     9fc:	cf c0       	rjmp	.+414    	; 0xb9c <lcd_print2+0x236>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	e8 16       	cp	r14, r24
     a02:	f1 04       	cpc	r15, r1
     a04:	09 f0       	breq	.+2      	; 0xa08 <lcd_print2+0xa2>
     a06:	fc c0       	rjmp	.+504    	; 0xc00 <lcd_print2+0x29a>
     a08:	79 c1       	rjmp	.+754    	; 0xcfc <lcd_print2+0x396>
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
     a0a:	cc 23       	and	r28, r28
     a0c:	39 f0       	breq	.+14     	; 0xa1c <lcd_print2+0xb6>
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <lcd_print2+0xac>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     a10:	c0 e0       	ldi	r28, 0x00	; 0
	{
		temp = value/10;
		tens = temp%10 + 48;
		if(tens != '0' || count != 0)
		{
			lcd_wr_char(tens);
     a12:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
			count++;
     a16:	cf 5f       	subi	r28, 0xFF	; 255
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <lcd_print2+0xb6>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     a1a:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     a1c:	96 01       	movw	r18, r12
     a1e:	ad ec       	ldi	r26, 0xCD	; 205
     a20:	bc ec       	ldi	r27, 0xCC	; 204
     a22:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	96 95       	lsr	r25
     a2c:	87 95       	ror	r24
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	9c 01       	movw	r18, r24
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	82 0f       	add	r24, r18
     a46:	93 1f       	adc	r25, r19
     a48:	f6 01       	movw	r30, r12
     a4a:	e8 1b       	sub	r30, r24
     a4c:	f9 0b       	sbc	r31, r25
     a4e:	cf 01       	movw	r24, r30
     a50:	c0 96       	adiw	r24, 0x30	; 48
     a52:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <unit+0x1>
     a56:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <unit>
		lcd_wr_char(unit);
     a5a:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
		count++;
     a5e:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(digits>5)
     a60:	f6 e0       	ldi	r31, 0x06	; 6
     a62:	ef 16       	cp	r14, r31
     a64:	f1 04       	cpc	r15, r1
     a66:	1c f0       	brlt	.+6      	; 0xa6e <lcd_print2+0x108>
	{
		lcd_wr_char('E');
     a68:	85 e4       	ldi	r24, 0x45	; 69
     a6a:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
	}
	
	while(*str != '\0')
     a6e:	f8 01       	movw	r30, r16
     a70:	80 81       	ld	r24, Z
     a72:	88 23       	and	r24, r24
     a74:	09 f4       	brne	.+2      	; 0xa78 <lcd_print2+0x112>
     a76:	cb c0       	rjmp	.+406    	; 0xc0e <lcd_print2+0x2a8>
     a78:	0f 5f       	subi	r16, 0xFF	; 255
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(*str);
     a7c:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
		count++;
     a80:	cf 5f       	subi	r28, 0xFF	; 255
		digits++;
     a82:	ff ef       	ldi	r31, 0xFF	; 255
     a84:	ef 1a       	sub	r14, r31
     a86:	ff 0a       	sbc	r15, r31
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
	while(*str != '\0')
     a88:	f8 01       	movw	r30, r16
     a8a:	81 91       	ld	r24, Z+
     a8c:	8f 01       	movw	r16, r30
     a8e:	81 11       	cpse	r24, r1
     a90:	f5 cf       	rjmp	.-22     	; 0xa7c <lcd_print2+0x116>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     a92:	8c 2f       	mov	r24, r28
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	8e 15       	cp	r24, r14
     a98:	9f 05       	cpc	r25, r15
     a9a:	0c f0       	brlt	.+2      	; 0xa9e <lcd_print2+0x138>
     a9c:	62 c1       	rjmp	.+708    	; 0xd62 <lcd_print2+0x3fc>
	{
		while(count != digits)
		{
			lcd_wr_char(32);
     a9e:	80 e2       	ldi	r24, 0x20	; 32
     aa0:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
			count++;
     aa4:	cf 5f       	subi	r28, 0xFF	; 255
		str++;		
	}
	
	if(count<digits)
	{
		while(count != digits)
     aa6:	8c 2f       	mov	r24, r28
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	8e 15       	cp	r24, r14
     aac:	9f 05       	cpc	r25, r15
     aae:	b9 f7       	brne	.-18     	; 0xa9e <lcd_print2+0x138>
     ab0:	58 c1       	rjmp	.+688    	; 0xd62 <lcd_print2+0x3fc>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     ab2:	c0 e0       	ldi	r28, 0x00	; 0
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     ab4:	96 01       	movw	r18, r12
     ab6:	36 95       	lsr	r19
     ab8:	27 95       	ror	r18
     aba:	36 95       	lsr	r19
     abc:	27 95       	ror	r18
     abe:	36 95       	lsr	r19
     ac0:	27 95       	ror	r18
     ac2:	a5 ec       	ldi	r26, 0xC5	; 197
     ac4:	b0 e2       	ldi	r27, 0x20	; 32
     ac6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     aca:	ac 01       	movw	r20, r24
     acc:	52 95       	swap	r21
     ace:	42 95       	swap	r20
     ad0:	4f 70       	andi	r20, 0x0F	; 15
     ad2:	45 27       	eor	r20, r21
     ad4:	5f 70       	andi	r21, 0x0F	; 15
     ad6:	45 27       	eor	r20, r21
     ad8:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     adc:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		thousand = temp%10 + 48;
     ae0:	9a 01       	movw	r18, r20
     ae2:	ad ec       	ldi	r26, 0xCD	; 205
     ae4:	bc ec       	ldi	r27, 0xCC	; 204
     ae6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     aea:	96 95       	lsr	r25
     aec:	87 95       	ror	r24
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	96 95       	lsr	r25
     af4:	87 95       	ror	r24
     af6:	9c 01       	movw	r18, r24
     af8:	22 0f       	add	r18, r18
     afa:	33 1f       	adc	r19, r19
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	82 0f       	add	r24, r18
     b0a:	93 1f       	adc	r25, r19
     b0c:	9a 01       	movw	r18, r20
     b0e:	28 1b       	sub	r18, r24
     b10:	39 0b       	sbc	r19, r25
     b12:	c9 01       	movw	r24, r18
     b14:	c0 96       	adiw	r24, 0x30	; 48
     b16:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <thousand+0x1>
     b1a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <thousand>
		if(thousand != '0' || count != 0)
     b1e:	80 33       	cpi	r24, 0x30	; 48
     b20:	91 05       	cpc	r25, r1
     b22:	09 f0       	breq	.+2      	; 0xb26 <lcd_print2+0x1c0>
     b24:	5f cf       	rjmp	.-322    	; 0x9e4 <lcd_print2+0x7e>
     b26:	59 cf       	rjmp	.-334    	; 0x9da <lcd_print2+0x74>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     b28:	96 01       	movw	r18, r12
     b2a:	36 95       	lsr	r19
     b2c:	27 95       	ror	r18
     b2e:	36 95       	lsr	r19
     b30:	27 95       	ror	r18
     b32:	ab e7       	ldi	r26, 0x7B	; 123
     b34:	b4 e1       	ldi	r27, 0x14	; 20
     b36:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     b3a:	ac 01       	movw	r20, r24
     b3c:	56 95       	lsr	r21
     b3e:	47 95       	ror	r20
     b40:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     b44:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		hundred = temp%10 + 48;
     b48:	9a 01       	movw	r18, r20
     b4a:	ad ec       	ldi	r26, 0xCD	; 205
     b4c:	bc ec       	ldi	r27, 0xCC	; 204
     b4e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     b52:	96 95       	lsr	r25
     b54:	87 95       	ror	r24
     b56:	96 95       	lsr	r25
     b58:	87 95       	ror	r24
     b5a:	96 95       	lsr	r25
     b5c:	87 95       	ror	r24
     b5e:	9c 01       	movw	r18, r24
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	82 0f       	add	r24, r18
     b72:	93 1f       	adc	r25, r19
     b74:	fa 01       	movw	r30, r20
     b76:	e8 1b       	sub	r30, r24
     b78:	f9 0b       	sbc	r31, r25
     b7a:	cf 01       	movw	r24, r30
     b7c:	c0 96       	adiw	r24, 0x30	; 48
     b7e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hundred+0x1>
     b82:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <hundred>
		if(hundred != '0' || count != 0)
     b86:	80 33       	cpi	r24, 0x30	; 48
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f0       	breq	.+2      	; 0xb8e <lcd_print2+0x228>
     b8c:	34 cf       	rjmp	.-408    	; 0x9f6 <lcd_print2+0x90>
     b8e:	2e cf       	rjmp	.-420    	; 0x9ec <lcd_print2+0x86>
			lcd_wr_char(thousand);
			count++;
		}
		flag=1;
	}
	if(digits==3 || flag==1)
     b90:	f3 e0       	ldi	r31, 0x03	; 3
     b92:	ef 16       	cp	r14, r31
     b94:	f1 04       	cpc	r15, r1
     b96:	09 f0       	breq	.+2      	; 0xb9a <lcd_print2+0x234>
     b98:	32 cf       	rjmp	.-412    	; 0x9fe <lcd_print2+0x98>
     b9a:	7b c0       	rjmp	.+246    	; 0xc92 <lcd_print2+0x32c>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     b9c:	96 01       	movw	r18, r12
     b9e:	ad ec       	ldi	r26, 0xCD	; 205
     ba0:	bc ec       	ldi	r27, 0xCC	; 204
     ba2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     ba6:	ac 01       	movw	r20, r24
     ba8:	56 95       	lsr	r21
     baa:	47 95       	ror	r20
     bac:	56 95       	lsr	r21
     bae:	47 95       	ror	r20
     bb0:	56 95       	lsr	r21
     bb2:	47 95       	ror	r20
     bb4:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     bb8:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		tens = temp%10 + 48;
     bbc:	9a 01       	movw	r18, r20
     bbe:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	9c 01       	movw	r18, r24
     bd0:	22 0f       	add	r18, r18
     bd2:	33 1f       	adc	r19, r19
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	82 0f       	add	r24, r18
     be2:	93 1f       	adc	r25, r19
     be4:	9a 01       	movw	r18, r20
     be6:	28 1b       	sub	r18, r24
     be8:	39 0b       	sbc	r19, r25
     bea:	c9 01       	movw	r24, r18
     bec:	c0 96       	adiw	r24, 0x30	; 48
     bee:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <tens+0x1>
     bf2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tens>
		if(tens != '0' || count != 0)
     bf6:	80 33       	cpi	r24, 0x30	; 48
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <lcd_print2+0x298>
     bfc:	0a cf       	rjmp	.-492    	; 0xa12 <lcd_print2+0xac>
     bfe:	05 cf       	rjmp	.-502    	; 0xa0a <lcd_print2+0xa4>
			lcd_wr_char(tens);
			count++;
		}
		flag=1;
	}
	if(digits==1 || flag==1)
     c00:	31 e0       	ldi	r19, 0x01	; 1
     c02:	e3 16       	cp	r14, r19
     c04:	f1 04       	cpc	r15, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <lcd_print2+0x2a4>
     c08:	08 cf       	rjmp	.-496    	; 0xa1a <lcd_print2+0xb4>
}

void lcd_print2(char row, char coloumn, unsigned int value, int digits, char* str)
{
	unsigned char flag=0;
	char count = 0;
     c0a:	c0 e0       	ldi	r28, 0x00	; 0
     c0c:	29 cf       	rjmp	.-430    	; 0xa60 <lcd_print2+0xfa>
		count++;
		digits++;
		str++;		
	}
	
	if(count<digits)
     c0e:	8c 2f       	mov	r24, r28
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	8e 15       	cp	r24, r14
     c14:	9f 05       	cpc	r25, r15
     c16:	0c f4       	brge	.+2      	; 0xc1a <lcd_print2+0x2b4>
     c18:	42 cf       	rjmp	.-380    	; 0xa9e <lcd_print2+0x138>
     c1a:	a3 c0       	rjmp	.+326    	; 0xd62 <lcd_print2+0x3fc>
		}
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     c1c:	96 01       	movw	r18, r12
     c1e:	36 95       	lsr	r19
     c20:	27 95       	ror	r18
     c22:	36 95       	lsr	r19
     c24:	27 95       	ror	r18
     c26:	36 95       	lsr	r19
     c28:	27 95       	ror	r18
     c2a:	a5 ec       	ldi	r26, 0xC5	; 197
     c2c:	b0 e2       	ldi	r27, 0x20	; 32
     c2e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     c32:	ac 01       	movw	r20, r24
     c34:	52 95       	swap	r21
     c36:	42 95       	swap	r20
     c38:	4f 70       	andi	r20, 0x0F	; 15
     c3a:	45 27       	eor	r20, r21
     c3c:	5f 70       	andi	r21, 0x0F	; 15
     c3e:	45 27       	eor	r20, r21
     c40:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     c44:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		thousand = temp%10 + 48;
     c48:	9a 01       	movw	r18, r20
     c4a:	ad ec       	ldi	r26, 0xCD	; 205
     c4c:	bc ec       	ldi	r27, 0xCC	; 204
     c4e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     c52:	96 95       	lsr	r25
     c54:	87 95       	ror	r24
     c56:	96 95       	lsr	r25
     c58:	87 95       	ror	r24
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	9c 01       	movw	r18, r24
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	fa 01       	movw	r30, r20
     c76:	e8 1b       	sub	r30, r24
     c78:	f9 0b       	sbc	r31, r25
     c7a:	cf 01       	movw	r24, r30
     c7c:	c0 96       	adiw	r24, 0x30	; 48
     c7e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <thousand+0x1>
     c82:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <thousand>
		if(thousand != '0' || count != 0)
     c86:	80 33       	cpi	r24, 0x30	; 48
     c88:	91 05       	cpc	r25, r1
     c8a:	09 f0       	breq	.+2      	; 0xc8e <lcd_print2+0x328>
     c8c:	aa ce       	rjmp	.-684    	; 0x9e2 <lcd_print2+0x7c>
     c8e:	c0 e0       	ldi	r28, 0x00	; 0
     c90:	4b cf       	rjmp	.-362    	; 0xb28 <lcd_print2+0x1c2>
		}
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     c92:	96 01       	movw	r18, r12
     c94:	36 95       	lsr	r19
     c96:	27 95       	ror	r18
     c98:	36 95       	lsr	r19
     c9a:	27 95       	ror	r18
     c9c:	ab e7       	ldi	r26, 0x7B	; 123
     c9e:	b4 e1       	ldi	r27, 0x14	; 20
     ca0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     ca4:	ac 01       	movw	r20, r24
     ca6:	56 95       	lsr	r21
     ca8:	47 95       	ror	r20
     caa:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     cae:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		hundred = temp%10 + 48;
     cb2:	9a 01       	movw	r18, r20
     cb4:	ad ec       	ldi	r26, 0xCD	; 205
     cb6:	bc ec       	ldi	r27, 0xCC	; 204
     cb8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     cbc:	96 95       	lsr	r25
     cbe:	87 95       	ror	r24
     cc0:	96 95       	lsr	r25
     cc2:	87 95       	ror	r24
     cc4:	96 95       	lsr	r25
     cc6:	87 95       	ror	r24
     cc8:	9c 01       	movw	r18, r24
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	82 0f       	add	r24, r18
     cdc:	93 1f       	adc	r25, r19
     cde:	9a 01       	movw	r18, r20
     ce0:	28 1b       	sub	r18, r24
     ce2:	39 0b       	sbc	r19, r25
     ce4:	c9 01       	movw	r24, r18
     ce6:	c0 96       	adiw	r24, 0x30	; 48
     ce8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hundred+0x1>
     cec:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <hundred>
		if(hundred != '0' || count != 0)
     cf0:	80 33       	cpi	r24, 0x30	; 48
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <lcd_print2+0x392>
     cf6:	7e ce       	rjmp	.-772    	; 0x9f4 <lcd_print2+0x8e>
     cf8:	c0 e0       	ldi	r28, 0x00	; 0
     cfa:	50 cf       	rjmp	.-352    	; 0xb9c <lcd_print2+0x236>
		}
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
     cfc:	96 01       	movw	r18, r12
     cfe:	ad ec       	ldi	r26, 0xCD	; 205
     d00:	bc ec       	ldi	r27, 0xCC	; 204
     d02:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     d06:	ac 01       	movw	r20, r24
     d08:	56 95       	lsr	r21
     d0a:	47 95       	ror	r20
     d0c:	56 95       	lsr	r21
     d0e:	47 95       	ror	r20
     d10:	56 95       	lsr	r21
     d12:	47 95       	ror	r20
     d14:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     d18:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		tens = temp%10 + 48;
     d1c:	9a 01       	movw	r18, r20
     d1e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     d22:	96 95       	lsr	r25
     d24:	87 95       	ror	r24
     d26:	96 95       	lsr	r25
     d28:	87 95       	ror	r24
     d2a:	96 95       	lsr	r25
     d2c:	87 95       	ror	r24
     d2e:	9c 01       	movw	r18, r24
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	fa 01       	movw	r30, r20
     d46:	e8 1b       	sub	r30, r24
     d48:	f9 0b       	sbc	r31, r25
     d4a:	cf 01       	movw	r24, r30
     d4c:	c0 96       	adiw	r24, 0x30	; 48
     d4e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <tens+0x1>
     d52:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tens>
		if(tens != '0' || count != 0)
     d56:	80 33       	cpi	r24, 0x30	; 48
     d58:	91 05       	cpc	r25, r1
     d5a:	09 f0       	breq	.+2      	; 0xd5e <lcd_print2+0x3f8>
     d5c:	59 ce       	rjmp	.-846    	; 0xa10 <lcd_print2+0xaa>
     d5e:	c0 e0       	ldi	r28, 0x00	; 0
     d60:	5d ce       	rjmp	.-838    	; 0xa1c <lcd_print2+0xb6>
		{
			lcd_wr_char(32);
			count++;
		}	
	}	
}
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	08 95       	ret

00000d72 <lcd_print3>:

void lcd_print3(char row, char coloumn, unsigned int value, int digits)
{
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ea 01       	movw	r28, r20
     d7c:	89 01       	movw	r16, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     d7e:	88 23       	and	r24, r24
     d80:	11 f0       	breq	.+4      	; 0xd86 <lcd_print3+0x14>
     d82:	61 11       	cpse	r22, r1
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <lcd_print3+0x1a>
	{
		lcd_home();
     d86:	0e 94 80 03 	call	0x700	; 0x700 <lcd_home>
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <lcd_print3+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     d8c:	0e 94 93 03 	call	0x726	; 0x726 <lcd_cursor>
	}
	
	if(digits==5 || flag==1)
     d90:	05 30       	cpi	r16, 0x05	; 5
     d92:	11 05       	cpc	r17, r1
     d94:	e1 f4       	brne	.+56     	; 0xdce <lcd_print3+0x5c>
	{
		million=value/10000+48;
     d96:	9e 01       	movw	r18, r28
     d98:	32 95       	swap	r19
     d9a:	22 95       	swap	r18
     d9c:	2f 70       	andi	r18, 0x0F	; 15
     d9e:	23 27       	eor	r18, r19
     da0:	3f 70       	andi	r19, 0x0F	; 15
     da2:	23 27       	eor	r18, r19
     da4:	a7 e4       	ldi	r26, 0x47	; 71
     da6:	b3 e0       	ldi	r27, 0x03	; 3
     da8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     dac:	96 95       	lsr	r25
     dae:	87 95       	ror	r24
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	c0 96       	adiw	r24, 0x30	; 48
     dba:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <million+0x1>
     dbe:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <million>
		if(million != '0')
     dc2:	80 33       	cpi	r24, 0x30	; 48
     dc4:	91 05       	cpc	r25, r1
     dc6:	39 f0       	breq	.+14     	; 0xdd6 <lcd_print3+0x64>
		lcd_wr_char(million);
     dc8:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <lcd_print3+0x64>
		flag=1;
	}
	if(digits==4 || flag==1)
     dce:	04 30       	cpi	r16, 0x04	; 4
     dd0:	11 05       	cpc	r17, r1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <lcd_print3+0x64>
     dd4:	b0 c0       	rjmp	.+352    	; 0xf36 <lcd_print3+0x1c4>
	{
		temp = value/1000;
     dd6:	9e 01       	movw	r18, r28
     dd8:	36 95       	lsr	r19
     dda:	27 95       	ror	r18
     ddc:	36 95       	lsr	r19
     dde:	27 95       	ror	r18
     de0:	36 95       	lsr	r19
     de2:	27 95       	ror	r18
     de4:	a5 ec       	ldi	r26, 0xC5	; 197
     de6:	b0 e2       	ldi	r27, 0x20	; 32
     de8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     dec:	ac 01       	movw	r20, r24
     dee:	52 95       	swap	r21
     df0:	42 95       	swap	r20
     df2:	4f 70       	andi	r20, 0x0F	; 15
     df4:	45 27       	eor	r20, r21
     df6:	5f 70       	andi	r21, 0x0F	; 15
     df8:	45 27       	eor	r20, r21
     dfa:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     dfe:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		thousand = temp%10 + 48;
     e02:	9a 01       	movw	r18, r20
     e04:	ad ec       	ldi	r26, 0xCD	; 205
     e06:	bc ec       	ldi	r27, 0xCC	; 204
     e08:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     e0c:	96 95       	lsr	r25
     e0e:	87 95       	ror	r24
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	9c 01       	movw	r18, r24
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	82 0f       	add	r24, r18
     e2c:	93 1f       	adc	r25, r19
     e2e:	9a 01       	movw	r18, r20
     e30:	28 1b       	sub	r18, r24
     e32:	39 0b       	sbc	r19, r25
     e34:	c9 01       	movw	r24, r18
     e36:	c0 96       	adiw	r24, 0x30	; 48
     e38:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <thousand+0x1>
     e3c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <thousand>
		if(thousand != '0')
     e40:	80 33       	cpi	r24, 0x30	; 48
     e42:	91 05       	cpc	r25, r1
     e44:	11 f0       	breq	.+4      	; 0xe4a <lcd_print3+0xd8>
		lcd_wr_char(thousand);
     e46:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     e4a:	9e 01       	movw	r18, r28
     e4c:	36 95       	lsr	r19
     e4e:	27 95       	ror	r18
     e50:	36 95       	lsr	r19
     e52:	27 95       	ror	r18
     e54:	ab e7       	ldi	r26, 0x7B	; 123
     e56:	b4 e1       	ldi	r27, 0x14	; 20
     e58:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     e5c:	ac 01       	movw	r20, r24
     e5e:	56 95       	lsr	r21
     e60:	47 95       	ror	r20
     e62:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     e66:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		hundred = temp%10 + 48;
     e6a:	9a 01       	movw	r18, r20
     e6c:	ad ec       	ldi	r26, 0xCD	; 205
     e6e:	bc ec       	ldi	r27, 0xCC	; 204
     e70:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	96 95       	lsr	r25
     e7a:	87 95       	ror	r24
     e7c:	96 95       	lsr	r25
     e7e:	87 95       	ror	r24
     e80:	9c 01       	movw	r18, r24
     e82:	22 0f       	add	r18, r18
     e84:	33 1f       	adc	r19, r19
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	9a 01       	movw	r18, r20
     e98:	28 1b       	sub	r18, r24
     e9a:	39 0b       	sbc	r19, r25
     e9c:	c9 01       	movw	r24, r18
     e9e:	c0 96       	adiw	r24, 0x30	; 48
     ea0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hundred+0x1>
     ea4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <hundred>
		if(hundred != '0')
     ea8:	80 33       	cpi	r24, 0x30	; 48
     eaa:	91 05       	cpc	r25, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <lcd_print3+0x14a>
		lcd_wr_char(hundred);
     eae:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <lcd_print3+0x14a>
		flag=1;
	}
	if(digits==2 || flag==1)
     eb4:	02 30       	cpi	r16, 0x02	; 2
     eb6:	11 05       	cpc	r17, r1
     eb8:	09 f0       	breq	.+2      	; 0xebc <lcd_print3+0x14a>
     eba:	64 c0       	rjmp	.+200    	; 0xf84 <lcd_print3+0x212>
	{
		temp = value/10;
     ebc:	9e 01       	movw	r18, r28
     ebe:	ad ec       	ldi	r26, 0xCD	; 205
     ec0:	bc ec       	ldi	r27, 0xCC	; 204
     ec2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     ec6:	ac 01       	movw	r20, r24
     ec8:	56 95       	lsr	r21
     eca:	47 95       	ror	r20
     ecc:	56 95       	lsr	r21
     ece:	47 95       	ror	r20
     ed0:	56 95       	lsr	r21
     ed2:	47 95       	ror	r20
     ed4:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <temp+0x1>
     ed8:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <temp>
		tens = temp%10 + 48;
     edc:	9a 01       	movw	r18, r20
     ede:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     ee2:	96 95       	lsr	r25
     ee4:	87 95       	ror	r24
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	9c 01       	movw	r18, r24
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	9a 01       	movw	r18, r20
     f06:	28 1b       	sub	r18, r24
     f08:	39 0b       	sbc	r19, r25
     f0a:	c9 01       	movw	r24, r18
     f0c:	c0 96       	adiw	r24, 0x30	; 48
     f0e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <tens+0x1>
     f12:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tens>
		if(tens != '0')
     f16:	80 33       	cpi	r24, 0x30	; 48
     f18:	91 05       	cpc	r25, r1
     f1a:	91 f0       	breq	.+36     	; 0xf40 <lcd_print3+0x1ce>
		lcd_wr_char(tens);
     f1c:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <lcd_print3+0x1ce>
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		if(unit != '0')
		lcd_wr_char(unit);
     f22:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
	}
	if(digits>5)
     f26:	06 30       	cpi	r16, 0x06	; 6
     f28:	11 05       	cpc	r17, r1
     f2a:	0c f4       	brge	.+2      	; 0xf2e <lcd_print3+0x1bc>
     f2c:	50 c0       	rjmp	.+160    	; 0xfce <lcd_print3+0x25c>
	{
		lcd_wr_char('E');
     f2e:	85 e4       	ldi	r24, 0x45	; 69
     f30:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_wr_char>
     f34:	4c c0       	rjmp	.+152    	; 0xfce <lcd_print3+0x25c>
		thousand = temp%10 + 48;
		if(thousand != '0')
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     f36:	03 30       	cpi	r16, 0x03	; 3
     f38:	11 05       	cpc	r17, r1
     f3a:	09 f0       	breq	.+2      	; 0xf3e <lcd_print3+0x1cc>
     f3c:	bb cf       	rjmp	.-138    	; 0xeb4 <lcd_print3+0x142>
     f3e:	85 cf       	rjmp	.-246    	; 0xe4a <lcd_print3+0xd8>
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     f40:	9e 01       	movw	r18, r28
     f42:	ad ec       	ldi	r26, 0xCD	; 205
     f44:	bc ec       	ldi	r27, 0xCC	; 204
     f46:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	9c 01       	movw	r18, r24
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	c8 1b       	sub	r28, r24
     f6e:	d9 0b       	sbc	r29, r25
     f70:	ce 01       	movw	r24, r28
     f72:	c0 96       	adiw	r24, 0x30	; 48
     f74:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <unit+0x1>
     f78:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <unit>
		if(unit != '0')
     f7c:	80 33       	cpi	r24, 0x30	; 48
     f7e:	91 05       	cpc	r25, r1
     f80:	81 f6       	brne	.-96     	; 0xf22 <lcd_print3+0x1b0>
     f82:	d1 cf       	rjmp	.-94     	; 0xf26 <lcd_print3+0x1b4>
		tens = temp%10 + 48;
		if(tens != '0')
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
     f84:	01 30       	cpi	r16, 0x01	; 1
     f86:	11 05       	cpc	r17, r1
     f88:	71 f6       	brne	.-100    	; 0xf26 <lcd_print3+0x1b4>
	{
		unit = value%10 + 48;
     f8a:	9e 01       	movw	r18, r28
     f8c:	ad ec       	ldi	r26, 0xCD	; 205
     f8e:	bc ec       	ldi	r27, 0xCC	; 204
     f90:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__umulhisi3>
     f94:	96 95       	lsr	r25
     f96:	87 95       	ror	r24
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	9c 01       	movw	r18, r24
     fa2:	22 0f       	add	r18, r18
     fa4:	33 1f       	adc	r19, r19
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	c8 1b       	sub	r28, r24
     fb8:	d9 0b       	sbc	r29, r25
     fba:	ce 01       	movw	r24, r28
     fbc:	c0 96       	adiw	r24, 0x30	; 48
     fbe:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <unit+0x1>
     fc2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <unit>
		if(unit != '0')
     fc6:	80 33       	cpi	r24, 0x30	; 48
     fc8:	91 05       	cpc	r25, r1
     fca:	09 f0       	breq	.+2      	; 0xfce <lcd_print3+0x25c>
     fcc:	aa cf       	rjmp	.-172    	; 0xf22 <lcd_print3+0x1b0>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	08 95       	ret

00000fd8 <lcd_start>:
     fd8:	8f e9       	ldi	r24, 0x9F	; 159
     fda:	9f e0       	ldi	r25, 0x0F	; 15
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <lcd_start+0x4>
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <lcd_start+0xa>
     fe2:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     fe4:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
     fea:	5e 9a       	sbi	0x0b, 6	; 11
     fec:	ef e1       	ldi	r30, 0x1F	; 31
     fee:	fe e4       	ldi	r31, 0x4E	; 78
     ff0:	31 97       	sbiw	r30, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <lcd_start+0x18>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <lcd_start+0x1e>
     ff6:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     ff8:	5e 98       	cbi	0x0b, 6	; 11
     ffa:	ef e9       	ldi	r30, 0x9F	; 159
     ffc:	ff e0       	ldi	r31, 0x0F	; 15
     ffe:	31 97       	sbiw	r30, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <lcd_start+0x26>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <lcd_start+0x2c>
    1004:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1006:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
    1008:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
    100a:	5e 9a       	sbi	0x0b, 6	; 11
    100c:	ef e1       	ldi	r30, 0x1F	; 31
    100e:	fe e4       	ldi	r31, 0x4E	; 78
    1010:	31 97       	sbiw	r30, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <lcd_start+0x38>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <lcd_start+0x3e>
    1016:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1018:	5e 98       	cbi	0x0b, 6	; 11
    101a:	ef e9       	ldi	r30, 0x9F	; 159
    101c:	ff e0       	ldi	r31, 0x0F	; 15
    101e:	31 97       	sbiw	r30, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <lcd_start+0x46>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <lcd_start+0x4c>
    1024:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1026:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
    1028:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
    102a:	5e 9a       	sbi	0x0b, 6	; 11
    102c:	8f e1       	ldi	r24, 0x1F	; 31
    102e:	9e e4       	ldi	r25, 0x4E	; 78
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <lcd_start+0x58>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <lcd_start+0x5e>
    1036:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1038:	5e 98       	cbi	0x0b, 6	; 11
    103a:	ef e9       	ldi	r30, 0x9F	; 159
    103c:	ff e0       	ldi	r31, 0x0F	; 15
    103e:	31 97       	sbiw	r30, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <lcd_start+0x66>
    1042:	00 c0       	rjmp	.+0      	; 0x1044 <lcd_start+0x6c>
    1044:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1046:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
    104c:	5e 9a       	sbi	0x0b, 6	; 11
    104e:	8f e9       	ldi	r24, 0x9F	; 159
    1050:	9f e0       	ldi	r25, 0x0F	; 15
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <lcd_start+0x7a>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <lcd_start+0x80>
    1058:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    105a:	5e 98       	cbi	0x0b, 6	; 11
    105c:	ef e9       	ldi	r30, 0x9F	; 159
    105e:	ff e0       	ldi	r31, 0x0F	; 15
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <lcd_start+0x88>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <lcd_start+0x8e>
    1066:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1068:	88 e2       	ldi	r24, 0x28	; 40
    106a:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
    1074:	8c e0       	ldi	r24, 0x0C	; 12
    1076:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
    107a:	80 e8       	ldi	r24, 0x80	; 128
    107c:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
    1080:	08 95       	ret

00001082 <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	0e 94 19 03 	call	0x632	; 0x632 <lcd_wr_command>
    1088:	08 95       	ret

0000108a <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <lcd_port_config>
	adc_pin_config();
    108e:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
    1092:	08 95       	ret

00001094 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
    1094:	f8 94       	cli
	lcd_start();
    1096:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <lcd_start>
	adc_config();
    109a:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
    109e:	78 94       	sei
    10a0:	08 95       	ret

000010a2 <main>:
}

int main(void)
{
	port_config();
    10a2:	0e 94 45 08 	call	0x108a	; 0x108a <port_config>
	init_devices();
    10a6:	0e 94 4a 08 	call	0x1094	; 0x1094 <init_devices>
		
	lcd_string2(1, 7, "CCL");
    10aa:	4e e0       	ldi	r20, 0x0E	; 14
    10ac:	51 e0       	ldi	r21, 0x01	; 1
    10ae:	67 e0       	ldi	r22, 0x07	; 7
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_string2>
    10b6:	2f ef       	ldi	r18, 0xFF	; 255
    10b8:	85 ea       	ldi	r24, 0xA5	; 165
    10ba:	9e e0       	ldi	r25, 0x0E	; 14
    10bc:	21 50       	subi	r18, 0x01	; 1
    10be:	80 40       	sbci	r24, 0x00	; 0
    10c0:	90 40       	sbci	r25, 0x00	; 0
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <main+0x1a>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <main+0x24>
    10c6:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
    10c8:	1d 9b       	sbis	0x03, 5	; 3
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <main+0x38>
	{
		lcd_string2(2,1,"Supply Connected");
    10cc:	42 e1       	ldi	r20, 0x12	; 18
    10ce:	51 e0       	ldi	r21, 0x01	; 1
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_string2>
    10d8:	12 c0       	rjmp	.+36     	; 0x10fe <main+0x5c>
	}
	
	else
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
    10da:	43 e2       	ldi	r20, 0x23	; 35
    10dc:	51 e0       	ldi	r21, 0x01	; 1
    10de:	62 e0       	ldi	r22, 0x02	; 2
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_string2>
		offset = 26.2;
    10e6:	8a e9       	ldi	r24, 0x9A	; 154
    10e8:	99 e9       	ldi	r25, 0x99	; 153
    10ea:	a1 ed       	ldi	r26, 0xD1	; 209
    10ec:	b1 e4       	ldi	r27, 0x41	; 65
    10ee:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
    10f2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
    10f6:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <__data_end+0x2>
    10fa:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <__data_end+0x3>
    10fe:	2f ef       	ldi	r18, 0xFF	; 255
    1100:	8b e4       	ldi	r24, 0x4B	; 75
    1102:	9d e1       	ldi	r25, 0x1D	; 29
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	80 40       	sbci	r24, 0x00	; 0
    1108:	90 40       	sbci	r25, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <main+0x62>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <main+0x6c>
    110e:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
    1110:	0e 94 41 08 	call	0x1082	; 0x1082 <lcd_clear>
	
	while (1)
	{
		update_current();
    1114:	0e 94 0d 01 	call	0x21a	; 0x21a <update_current>
		update_voltage();
    1118:	0e 94 35 01 	call	0x26a	; 0x26a <update_voltage>
		update_power();
    111c:	0e 94 4d 01 	call	0x29a	; 0x29a <update_power>
		update_gate_voltage();
    1120:	0e 94 6e 01 	call	0x2dc	; 0x2dc <update_gate_voltage>
	
	//if(check_thresholds()==0)	
	if(1)	
	{	
		print_current(1,1);
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	0e 94 86 01 	call	0x30c	; 0x30c <print_current>
		print_voltage(1,10);
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 f6 01 	call	0x3ec	; 0x3ec <print_voltage>
		print_power(2,1);
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	0e 94 ae 02 	call	0x55c	; 0x55c <print_power>
		print_gate_voltage(2,10);
    113c:	6a e0       	ldi	r22, 0x0A	; 10
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	0e 94 cc 02 	call	0x598	; 0x598 <print_gate_voltage>
    1144:	e7 cf       	rjmp	.-50     	; 0x1114 <main+0x72>

00001146 <__subsf3>:
    1146:	50 58       	subi	r21, 0x80	; 128

00001148 <__addsf3>:
    1148:	bb 27       	eor	r27, r27
    114a:	aa 27       	eor	r26, r26
    114c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3x>
    1150:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__fp_round>
    1154:	0e 94 27 0a 	call	0x144e	; 0x144e <__fp_pscA>
    1158:	38 f0       	brcs	.+14     	; 0x1168 <__addsf3+0x20>
    115a:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_pscB>
    115e:	20 f0       	brcs	.+8      	; 0x1168 <__addsf3+0x20>
    1160:	39 f4       	brne	.+14     	; 0x1170 <__addsf3+0x28>
    1162:	9f 3f       	cpi	r25, 0xFF	; 255
    1164:	19 f4       	brne	.+6      	; 0x116c <__addsf3+0x24>
    1166:	26 f4       	brtc	.+8      	; 0x1170 <__addsf3+0x28>
    1168:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_nan>
    116c:	0e f4       	brtc	.+2      	; 0x1170 <__addsf3+0x28>
    116e:	e0 95       	com	r30
    1170:	e7 fb       	bst	r30, 7
    1172:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__fp_inf>

00001176 <__addsf3x>:
    1176:	e9 2f       	mov	r30, r25
    1178:	0e 94 46 0a 	call	0x148c	; 0x148c <__fp_split3>
    117c:	58 f3       	brcs	.-42     	; 0x1154 <__addsf3+0xc>
    117e:	ba 17       	cp	r27, r26
    1180:	62 07       	cpc	r22, r18
    1182:	73 07       	cpc	r23, r19
    1184:	84 07       	cpc	r24, r20
    1186:	95 07       	cpc	r25, r21
    1188:	20 f0       	brcs	.+8      	; 0x1192 <__addsf3x+0x1c>
    118a:	79 f4       	brne	.+30     	; 0x11aa <__addsf3x+0x34>
    118c:	a6 f5       	brtc	.+104    	; 0x11f6 <__addsf3x+0x80>
    118e:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_zero>
    1192:	0e f4       	brtc	.+2      	; 0x1196 <__addsf3x+0x20>
    1194:	e0 95       	com	r30
    1196:	0b 2e       	mov	r0, r27
    1198:	ba 2f       	mov	r27, r26
    119a:	a0 2d       	mov	r26, r0
    119c:	0b 01       	movw	r0, r22
    119e:	b9 01       	movw	r22, r18
    11a0:	90 01       	movw	r18, r0
    11a2:	0c 01       	movw	r0, r24
    11a4:	ca 01       	movw	r24, r20
    11a6:	a0 01       	movw	r20, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	ff 27       	eor	r31, r31
    11ac:	59 1b       	sub	r21, r25
    11ae:	99 f0       	breq	.+38     	; 0x11d6 <__addsf3x+0x60>
    11b0:	59 3f       	cpi	r21, 0xF9	; 249
    11b2:	50 f4       	brcc	.+20     	; 0x11c8 <__addsf3x+0x52>
    11b4:	50 3e       	cpi	r21, 0xE0	; 224
    11b6:	68 f1       	brcs	.+90     	; 0x1212 <__addsf3x+0x9c>
    11b8:	1a 16       	cp	r1, r26
    11ba:	f0 40       	sbci	r31, 0x00	; 0
    11bc:	a2 2f       	mov	r26, r18
    11be:	23 2f       	mov	r18, r19
    11c0:	34 2f       	mov	r19, r20
    11c2:	44 27       	eor	r20, r20
    11c4:	58 5f       	subi	r21, 0xF8	; 248
    11c6:	f3 cf       	rjmp	.-26     	; 0x11ae <__addsf3x+0x38>
    11c8:	46 95       	lsr	r20
    11ca:	37 95       	ror	r19
    11cc:	27 95       	ror	r18
    11ce:	a7 95       	ror	r26
    11d0:	f0 40       	sbci	r31, 0x00	; 0
    11d2:	53 95       	inc	r21
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__addsf3x+0x52>
    11d6:	7e f4       	brtc	.+30     	; 0x11f6 <__addsf3x+0x80>
    11d8:	1f 16       	cp	r1, r31
    11da:	ba 0b       	sbc	r27, r26
    11dc:	62 0b       	sbc	r22, r18
    11de:	73 0b       	sbc	r23, r19
    11e0:	84 0b       	sbc	r24, r20
    11e2:	ba f0       	brmi	.+46     	; 0x1212 <__addsf3x+0x9c>
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	a1 f0       	breq	.+40     	; 0x1210 <__addsf3x+0x9a>
    11e8:	ff 0f       	add	r31, r31
    11ea:	bb 1f       	adc	r27, r27
    11ec:	66 1f       	adc	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	c2 f7       	brpl	.-16     	; 0x11e4 <__addsf3x+0x6e>
    11f4:	0e c0       	rjmp	.+28     	; 0x1212 <__addsf3x+0x9c>
    11f6:	ba 0f       	add	r27, r26
    11f8:	62 1f       	adc	r22, r18
    11fa:	73 1f       	adc	r23, r19
    11fc:	84 1f       	adc	r24, r20
    11fe:	48 f4       	brcc	.+18     	; 0x1212 <__addsf3x+0x9c>
    1200:	87 95       	ror	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	b7 95       	ror	r27
    1208:	f7 95       	ror	r31
    120a:	9e 3f       	cpi	r25, 0xFE	; 254
    120c:	08 f0       	brcs	.+2      	; 0x1210 <__addsf3x+0x9a>
    120e:	b0 cf       	rjmp	.-160    	; 0x1170 <__addsf3+0x28>
    1210:	93 95       	inc	r25
    1212:	88 0f       	add	r24, r24
    1214:	08 f0       	brcs	.+2      	; 0x1218 <__addsf3x+0xa2>
    1216:	99 27       	eor	r25, r25
    1218:	ee 0f       	add	r30, r30
    121a:	97 95       	ror	r25
    121c:	87 95       	ror	r24
    121e:	08 95       	ret

00001220 <__cmpsf2>:
    1220:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_cmp>
    1224:	08 f4       	brcc	.+2      	; 0x1228 <__cmpsf2+0x8>
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	08 95       	ret

0000122a <__divsf3>:
    122a:	0e 94 29 09 	call	0x1252	; 0x1252 <__divsf3x>
    122e:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__fp_round>
    1232:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_pscB>
    1236:	58 f0       	brcs	.+22     	; 0x124e <__divsf3+0x24>
    1238:	0e 94 27 0a 	call	0x144e	; 0x144e <__fp_pscA>
    123c:	40 f0       	brcs	.+16     	; 0x124e <__divsf3+0x24>
    123e:	29 f4       	brne	.+10     	; 0x124a <__divsf3+0x20>
    1240:	5f 3f       	cpi	r21, 0xFF	; 255
    1242:	29 f0       	breq	.+10     	; 0x124e <__divsf3+0x24>
    1244:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__fp_inf>
    1248:	51 11       	cpse	r21, r1
    124a:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    124e:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_nan>

00001252 <__divsf3x>:
    1252:	0e 94 46 0a 	call	0x148c	; 0x148c <__fp_split3>
    1256:	68 f3       	brcs	.-38     	; 0x1232 <__divsf3+0x8>

00001258 <__divsf3_pse>:
    1258:	99 23       	and	r25, r25
    125a:	b1 f3       	breq	.-20     	; 0x1248 <__divsf3+0x1e>
    125c:	55 23       	and	r21, r21
    125e:	91 f3       	breq	.-28     	; 0x1244 <__divsf3+0x1a>
    1260:	95 1b       	sub	r25, r21
    1262:	55 0b       	sbc	r21, r21
    1264:	bb 27       	eor	r27, r27
    1266:	aa 27       	eor	r26, r26
    1268:	62 17       	cp	r22, r18
    126a:	73 07       	cpc	r23, r19
    126c:	84 07       	cpc	r24, r20
    126e:	38 f0       	brcs	.+14     	; 0x127e <__divsf3_pse+0x26>
    1270:	9f 5f       	subi	r25, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	44 1f       	adc	r20, r20
    127a:	aa 1f       	adc	r26, r26
    127c:	a9 f3       	breq	.-22     	; 0x1268 <__divsf3_pse+0x10>
    127e:	35 d0       	rcall	.+106    	; 0x12ea <__divsf3_pse+0x92>
    1280:	0e 2e       	mov	r0, r30
    1282:	3a f0       	brmi	.+14     	; 0x1292 <__divsf3_pse+0x3a>
    1284:	e0 e8       	ldi	r30, 0x80	; 128
    1286:	32 d0       	rcall	.+100    	; 0x12ec <__divsf3_pse+0x94>
    1288:	91 50       	subi	r25, 0x01	; 1
    128a:	50 40       	sbci	r21, 0x00	; 0
    128c:	e6 95       	lsr	r30
    128e:	00 1c       	adc	r0, r0
    1290:	ca f7       	brpl	.-14     	; 0x1284 <__divsf3_pse+0x2c>
    1292:	2b d0       	rcall	.+86     	; 0x12ea <__divsf3_pse+0x92>
    1294:	fe 2f       	mov	r31, r30
    1296:	29 d0       	rcall	.+82     	; 0x12ea <__divsf3_pse+0x92>
    1298:	66 0f       	add	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	88 1f       	adc	r24, r24
    129e:	bb 1f       	adc	r27, r27
    12a0:	26 17       	cp	r18, r22
    12a2:	37 07       	cpc	r19, r23
    12a4:	48 07       	cpc	r20, r24
    12a6:	ab 07       	cpc	r26, r27
    12a8:	b0 e8       	ldi	r27, 0x80	; 128
    12aa:	09 f0       	breq	.+2      	; 0x12ae <__divsf3_pse+0x56>
    12ac:	bb 0b       	sbc	r27, r27
    12ae:	80 2d       	mov	r24, r0
    12b0:	bf 01       	movw	r22, r30
    12b2:	ff 27       	eor	r31, r31
    12b4:	93 58       	subi	r25, 0x83	; 131
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	3a f0       	brmi	.+14     	; 0x12c8 <__divsf3_pse+0x70>
    12ba:	9e 3f       	cpi	r25, 0xFE	; 254
    12bc:	51 05       	cpc	r21, r1
    12be:	78 f0       	brcs	.+30     	; 0x12de <__divsf3_pse+0x86>
    12c0:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__fp_inf>
    12c4:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    12c8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ca:	e4 f3       	brlt	.-8      	; 0x12c4 <__divsf3_pse+0x6c>
    12cc:	98 3e       	cpi	r25, 0xE8	; 232
    12ce:	d4 f3       	brlt	.-12     	; 0x12c4 <__divsf3_pse+0x6c>
    12d0:	86 95       	lsr	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	f7 95       	ror	r31
    12da:	9f 5f       	subi	r25, 0xFF	; 255
    12dc:	c9 f7       	brne	.-14     	; 0x12d0 <__divsf3_pse+0x78>
    12de:	88 0f       	add	r24, r24
    12e0:	91 1d       	adc	r25, r1
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	97 f9       	bld	r25, 7
    12e8:	08 95       	ret
    12ea:	e1 e0       	ldi	r30, 0x01	; 1
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	bb 1f       	adc	r27, r27
    12f4:	62 17       	cp	r22, r18
    12f6:	73 07       	cpc	r23, r19
    12f8:	84 07       	cpc	r24, r20
    12fa:	ba 07       	cpc	r27, r26
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <__divsf3_pse+0xae>
    12fe:	62 1b       	sub	r22, r18
    1300:	73 0b       	sbc	r23, r19
    1302:	84 0b       	sbc	r24, r20
    1304:	ba 0b       	sbc	r27, r26
    1306:	ee 1f       	adc	r30, r30
    1308:	88 f7       	brcc	.-30     	; 0x12ec <__divsf3_pse+0x94>
    130a:	e0 95       	com	r30
    130c:	08 95       	ret

0000130e <__fixsfsi>:
    130e:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
    1312:	68 94       	set
    1314:	b1 11       	cpse	r27, r1
    1316:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    131a:	08 95       	ret

0000131c <__fixunssfsi>:
    131c:	0e 94 4e 0a 	call	0x149c	; 0x149c <__fp_splitA>
    1320:	88 f0       	brcs	.+34     	; 0x1344 <__fixunssfsi+0x28>
    1322:	9f 57       	subi	r25, 0x7F	; 127
    1324:	98 f0       	brcs	.+38     	; 0x134c <__fixunssfsi+0x30>
    1326:	b9 2f       	mov	r27, r25
    1328:	99 27       	eor	r25, r25
    132a:	b7 51       	subi	r27, 0x17	; 23
    132c:	b0 f0       	brcs	.+44     	; 0x135a <__fixunssfsi+0x3e>
    132e:	e1 f0       	breq	.+56     	; 0x1368 <__fixunssfsi+0x4c>
    1330:	66 0f       	add	r22, r22
    1332:	77 1f       	adc	r23, r23
    1334:	88 1f       	adc	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	1a f0       	brmi	.+6      	; 0x1340 <__fixunssfsi+0x24>
    133a:	ba 95       	dec	r27
    133c:	c9 f7       	brne	.-14     	; 0x1330 <__fixunssfsi+0x14>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <__fixunssfsi+0x4c>
    1340:	b1 30       	cpi	r27, 0x01	; 1
    1342:	91 f0       	breq	.+36     	; 0x1368 <__fixunssfsi+0x4c>
    1344:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fp_zero>
    1348:	b1 e0       	ldi	r27, 0x01	; 1
    134a:	08 95       	ret
    134c:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_zero>
    1350:	67 2f       	mov	r22, r23
    1352:	78 2f       	mov	r23, r24
    1354:	88 27       	eor	r24, r24
    1356:	b8 5f       	subi	r27, 0xF8	; 248
    1358:	39 f0       	breq	.+14     	; 0x1368 <__fixunssfsi+0x4c>
    135a:	b9 3f       	cpi	r27, 0xF9	; 249
    135c:	cc f3       	brlt	.-14     	; 0x1350 <__fixunssfsi+0x34>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b3 95       	inc	r27
    1366:	d9 f7       	brne	.-10     	; 0x135e <__fixunssfsi+0x42>
    1368:	3e f4       	brtc	.+14     	; 0x1378 <__fixunssfsi+0x5c>
    136a:	90 95       	com	r25
    136c:	80 95       	com	r24
    136e:	70 95       	com	r23
    1370:	61 95       	neg	r22
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	08 95       	ret

0000137a <__floatunsisf>:
    137a:	e8 94       	clt
    137c:	09 c0       	rjmp	.+18     	; 0x1390 <__floatsisf+0x12>

0000137e <__floatsisf>:
    137e:	97 fb       	bst	r25, 7
    1380:	3e f4       	brtc	.+14     	; 0x1390 <__floatsisf+0x12>
    1382:	90 95       	com	r25
    1384:	80 95       	com	r24
    1386:	70 95       	com	r23
    1388:	61 95       	neg	r22
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	99 23       	and	r25, r25
    1392:	a9 f0       	breq	.+42     	; 0x13be <__floatsisf+0x40>
    1394:	f9 2f       	mov	r31, r25
    1396:	96 e9       	ldi	r25, 0x96	; 150
    1398:	bb 27       	eor	r27, r27
    139a:	93 95       	inc	r25
    139c:	f6 95       	lsr	r31
    139e:	87 95       	ror	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b7 95       	ror	r27
    13a6:	f1 11       	cpse	r31, r1
    13a8:	f8 cf       	rjmp	.-16     	; 0x139a <__floatsisf+0x1c>
    13aa:	fa f4       	brpl	.+62     	; 0x13ea <__floatsisf+0x6c>
    13ac:	bb 0f       	add	r27, r27
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <__floatsisf+0x36>
    13b0:	60 ff       	sbrs	r22, 0
    13b2:	1b c0       	rjmp	.+54     	; 0x13ea <__floatsisf+0x6c>
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <__floatsisf+0x6c>
    13be:	88 23       	and	r24, r24
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <__floatsisf+0x48>
    13c2:	96 e9       	ldi	r25, 0x96	; 150
    13c4:	11 c0       	rjmp	.+34     	; 0x13e8 <__floatsisf+0x6a>
    13c6:	77 23       	and	r23, r23
    13c8:	21 f0       	breq	.+8      	; 0x13d2 <__floatsisf+0x54>
    13ca:	9e e8       	ldi	r25, 0x8E	; 142
    13cc:	87 2f       	mov	r24, r23
    13ce:	76 2f       	mov	r23, r22
    13d0:	05 c0       	rjmp	.+10     	; 0x13dc <__floatsisf+0x5e>
    13d2:	66 23       	and	r22, r22
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <__floatsisf+0x74>
    13d6:	96 e8       	ldi	r25, 0x86	; 134
    13d8:	86 2f       	mov	r24, r22
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	2a f0       	brmi	.+10     	; 0x13ea <__floatsisf+0x6c>
    13e0:	9a 95       	dec	r25
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	da f7       	brpl	.-10     	; 0x13e0 <__floatsisf+0x62>
    13ea:	88 0f       	add	r24, r24
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	97 f9       	bld	r25, 7
    13f2:	08 95       	ret

000013f4 <__fp_cmp>:
    13f4:	99 0f       	add	r25, r25
    13f6:	00 08       	sbc	r0, r0
    13f8:	55 0f       	add	r21, r21
    13fa:	aa 0b       	sbc	r26, r26
    13fc:	e0 e8       	ldi	r30, 0x80	; 128
    13fe:	fe ef       	ldi	r31, 0xFE	; 254
    1400:	16 16       	cp	r1, r22
    1402:	17 06       	cpc	r1, r23
    1404:	e8 07       	cpc	r30, r24
    1406:	f9 07       	cpc	r31, r25
    1408:	c0 f0       	brcs	.+48     	; 0x143a <__fp_cmp+0x46>
    140a:	12 16       	cp	r1, r18
    140c:	13 06       	cpc	r1, r19
    140e:	e4 07       	cpc	r30, r20
    1410:	f5 07       	cpc	r31, r21
    1412:	98 f0       	brcs	.+38     	; 0x143a <__fp_cmp+0x46>
    1414:	62 1b       	sub	r22, r18
    1416:	73 0b       	sbc	r23, r19
    1418:	84 0b       	sbc	r24, r20
    141a:	95 0b       	sbc	r25, r21
    141c:	39 f4       	brne	.+14     	; 0x142c <__fp_cmp+0x38>
    141e:	0a 26       	eor	r0, r26
    1420:	61 f0       	breq	.+24     	; 0x143a <__fp_cmp+0x46>
    1422:	23 2b       	or	r18, r19
    1424:	24 2b       	or	r18, r20
    1426:	25 2b       	or	r18, r21
    1428:	21 f4       	brne	.+8      	; 0x1432 <__fp_cmp+0x3e>
    142a:	08 95       	ret
    142c:	0a 26       	eor	r0, r26
    142e:	09 f4       	brne	.+2      	; 0x1432 <__fp_cmp+0x3e>
    1430:	a1 40       	sbci	r26, 0x01	; 1
    1432:	a6 95       	lsr	r26
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	81 1d       	adc	r24, r1
    1438:	81 1d       	adc	r24, r1
    143a:	08 95       	ret

0000143c <__fp_inf>:
    143c:	97 f9       	bld	r25, 7
    143e:	9f 67       	ori	r25, 0x7F	; 127
    1440:	80 e8       	ldi	r24, 0x80	; 128
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	08 95       	ret

00001448 <__fp_nan>:
    1448:	9f ef       	ldi	r25, 0xFF	; 255
    144a:	80 ec       	ldi	r24, 0xC0	; 192
    144c:	08 95       	ret

0000144e <__fp_pscA>:
    144e:	00 24       	eor	r0, r0
    1450:	0a 94       	dec	r0
    1452:	16 16       	cp	r1, r22
    1454:	17 06       	cpc	r1, r23
    1456:	18 06       	cpc	r1, r24
    1458:	09 06       	cpc	r0, r25
    145a:	08 95       	ret

0000145c <__fp_pscB>:
    145c:	00 24       	eor	r0, r0
    145e:	0a 94       	dec	r0
    1460:	12 16       	cp	r1, r18
    1462:	13 06       	cpc	r1, r19
    1464:	14 06       	cpc	r1, r20
    1466:	05 06       	cpc	r0, r21
    1468:	08 95       	ret

0000146a <__fp_round>:
    146a:	09 2e       	mov	r0, r25
    146c:	03 94       	inc	r0
    146e:	00 0c       	add	r0, r0
    1470:	11 f4       	brne	.+4      	; 0x1476 <__fp_round+0xc>
    1472:	88 23       	and	r24, r24
    1474:	52 f0       	brmi	.+20     	; 0x148a <__fp_round+0x20>
    1476:	bb 0f       	add	r27, r27
    1478:	40 f4       	brcc	.+16     	; 0x148a <__fp_round+0x20>
    147a:	bf 2b       	or	r27, r31
    147c:	11 f4       	brne	.+4      	; 0x1482 <__fp_round+0x18>
    147e:	60 ff       	sbrs	r22, 0
    1480:	04 c0       	rjmp	.+8      	; 0x148a <__fp_round+0x20>
    1482:	6f 5f       	subi	r22, 0xFF	; 255
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	08 95       	ret

0000148c <__fp_split3>:
    148c:	57 fd       	sbrc	r21, 7
    148e:	90 58       	subi	r25, 0x80	; 128
    1490:	44 0f       	add	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	59 f0       	breq	.+22     	; 0x14ac <__fp_splitA+0x10>
    1496:	5f 3f       	cpi	r21, 0xFF	; 255
    1498:	71 f0       	breq	.+28     	; 0x14b6 <__fp_splitA+0x1a>
    149a:	47 95       	ror	r20

0000149c <__fp_splitA>:
    149c:	88 0f       	add	r24, r24
    149e:	97 fb       	bst	r25, 7
    14a0:	99 1f       	adc	r25, r25
    14a2:	61 f0       	breq	.+24     	; 0x14bc <__fp_splitA+0x20>
    14a4:	9f 3f       	cpi	r25, 0xFF	; 255
    14a6:	79 f0       	breq	.+30     	; 0x14c6 <__fp_splitA+0x2a>
    14a8:	87 95       	ror	r24
    14aa:	08 95       	ret
    14ac:	12 16       	cp	r1, r18
    14ae:	13 06       	cpc	r1, r19
    14b0:	14 06       	cpc	r1, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	f2 cf       	rjmp	.-28     	; 0x149a <__fp_split3+0xe>
    14b6:	46 95       	lsr	r20
    14b8:	f1 df       	rcall	.-30     	; 0x149c <__fp_splitA>
    14ba:	08 c0       	rjmp	.+16     	; 0x14cc <__fp_splitA+0x30>
    14bc:	16 16       	cp	r1, r22
    14be:	17 06       	cpc	r1, r23
    14c0:	18 06       	cpc	r1, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	f1 cf       	rjmp	.-30     	; 0x14a8 <__fp_splitA+0xc>
    14c6:	86 95       	lsr	r24
    14c8:	71 05       	cpc	r23, r1
    14ca:	61 05       	cpc	r22, r1
    14cc:	08 94       	sec
    14ce:	08 95       	ret

000014d0 <__fp_zero>:
    14d0:	e8 94       	clt

000014d2 <__fp_szero>:
    14d2:	bb 27       	eor	r27, r27
    14d4:	66 27       	eor	r22, r22
    14d6:	77 27       	eor	r23, r23
    14d8:	cb 01       	movw	r24, r22
    14da:	97 f9       	bld	r25, 7
    14dc:	08 95       	ret

000014de <__gesf2>:
    14de:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_cmp>
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <__gesf2+0x8>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	08 95       	ret

000014e8 <__mulsf3>:
    14e8:	0e 94 87 0a 	call	0x150e	; 0x150e <__mulsf3x>
    14ec:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__fp_round>
    14f0:	0e 94 27 0a 	call	0x144e	; 0x144e <__fp_pscA>
    14f4:	38 f0       	brcs	.+14     	; 0x1504 <__mulsf3+0x1c>
    14f6:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_pscB>
    14fa:	20 f0       	brcs	.+8      	; 0x1504 <__mulsf3+0x1c>
    14fc:	95 23       	and	r25, r21
    14fe:	11 f0       	breq	.+4      	; 0x1504 <__mulsf3+0x1c>
    1500:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__fp_inf>
    1504:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_nan>
    1508:	11 24       	eor	r1, r1
    150a:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>

0000150e <__mulsf3x>:
    150e:	0e 94 46 0a 	call	0x148c	; 0x148c <__fp_split3>
    1512:	70 f3       	brcs	.-36     	; 0x14f0 <__mulsf3+0x8>

00001514 <__mulsf3_pse>:
    1514:	95 9f       	mul	r25, r21
    1516:	c1 f3       	breq	.-16     	; 0x1508 <__mulsf3+0x20>
    1518:	95 0f       	add	r25, r21
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	55 1f       	adc	r21, r21
    151e:	62 9f       	mul	r22, r18
    1520:	f0 01       	movw	r30, r0
    1522:	72 9f       	mul	r23, r18
    1524:	bb 27       	eor	r27, r27
    1526:	f0 0d       	add	r31, r0
    1528:	b1 1d       	adc	r27, r1
    152a:	63 9f       	mul	r22, r19
    152c:	aa 27       	eor	r26, r26
    152e:	f0 0d       	add	r31, r0
    1530:	b1 1d       	adc	r27, r1
    1532:	aa 1f       	adc	r26, r26
    1534:	64 9f       	mul	r22, r20
    1536:	66 27       	eor	r22, r22
    1538:	b0 0d       	add	r27, r0
    153a:	a1 1d       	adc	r26, r1
    153c:	66 1f       	adc	r22, r22
    153e:	82 9f       	mul	r24, r18
    1540:	22 27       	eor	r18, r18
    1542:	b0 0d       	add	r27, r0
    1544:	a1 1d       	adc	r26, r1
    1546:	62 1f       	adc	r22, r18
    1548:	73 9f       	mul	r23, r19
    154a:	b0 0d       	add	r27, r0
    154c:	a1 1d       	adc	r26, r1
    154e:	62 1f       	adc	r22, r18
    1550:	83 9f       	mul	r24, r19
    1552:	a0 0d       	add	r26, r0
    1554:	61 1d       	adc	r22, r1
    1556:	22 1f       	adc	r18, r18
    1558:	74 9f       	mul	r23, r20
    155a:	33 27       	eor	r19, r19
    155c:	a0 0d       	add	r26, r0
    155e:	61 1d       	adc	r22, r1
    1560:	23 1f       	adc	r18, r19
    1562:	84 9f       	mul	r24, r20
    1564:	60 0d       	add	r22, r0
    1566:	21 1d       	adc	r18, r1
    1568:	82 2f       	mov	r24, r18
    156a:	76 2f       	mov	r23, r22
    156c:	6a 2f       	mov	r22, r26
    156e:	11 24       	eor	r1, r1
    1570:	9f 57       	subi	r25, 0x7F	; 127
    1572:	50 40       	sbci	r21, 0x00	; 0
    1574:	9a f0       	brmi	.+38     	; 0x159c <__mulsf3_pse+0x88>
    1576:	f1 f0       	breq	.+60     	; 0x15b4 <__mulsf3_pse+0xa0>
    1578:	88 23       	and	r24, r24
    157a:	4a f0       	brmi	.+18     	; 0x158e <__mulsf3_pse+0x7a>
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	bb 1f       	adc	r27, r27
    1582:	66 1f       	adc	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	88 1f       	adc	r24, r24
    1588:	91 50       	subi	r25, 0x01	; 1
    158a:	50 40       	sbci	r21, 0x00	; 0
    158c:	a9 f7       	brne	.-22     	; 0x1578 <__mulsf3_pse+0x64>
    158e:	9e 3f       	cpi	r25, 0xFE	; 254
    1590:	51 05       	cpc	r21, r1
    1592:	80 f0       	brcs	.+32     	; 0x15b4 <__mulsf3_pse+0xa0>
    1594:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__fp_inf>
    1598:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    159c:	5f 3f       	cpi	r21, 0xFF	; 255
    159e:	e4 f3       	brlt	.-8      	; 0x1598 <__mulsf3_pse+0x84>
    15a0:	98 3e       	cpi	r25, 0xE8	; 232
    15a2:	d4 f3       	brlt	.-12     	; 0x1598 <__mulsf3_pse+0x84>
    15a4:	86 95       	lsr	r24
    15a6:	77 95       	ror	r23
    15a8:	67 95       	ror	r22
    15aa:	b7 95       	ror	r27
    15ac:	f7 95       	ror	r31
    15ae:	e7 95       	ror	r30
    15b0:	9f 5f       	subi	r25, 0xFF	; 255
    15b2:	c1 f7       	brne	.-16     	; 0x15a4 <__mulsf3_pse+0x90>
    15b4:	fe 2b       	or	r31, r30
    15b6:	88 0f       	add	r24, r24
    15b8:	91 1d       	adc	r25, r1
    15ba:	96 95       	lsr	r25
    15bc:	87 95       	ror	r24
    15be:	97 f9       	bld	r25, 7
    15c0:	08 95       	ret

000015c2 <__divmodhi4>:
    15c2:	97 fb       	bst	r25, 7
    15c4:	07 2e       	mov	r0, r23
    15c6:	16 f4       	brtc	.+4      	; 0x15cc <__divmodhi4+0xa>
    15c8:	00 94       	com	r0
    15ca:	07 d0       	rcall	.+14     	; 0x15da <__divmodhi4_neg1>
    15cc:	77 fd       	sbrc	r23, 7
    15ce:	09 d0       	rcall	.+18     	; 0x15e2 <__divmodhi4_neg2>
    15d0:	0e 94 04 0b 	call	0x1608	; 0x1608 <__udivmodhi4>
    15d4:	07 fc       	sbrc	r0, 7
    15d6:	05 d0       	rcall	.+10     	; 0x15e2 <__divmodhi4_neg2>
    15d8:	3e f4       	brtc	.+14     	; 0x15e8 <__divmodhi4_exit>

000015da <__divmodhi4_neg1>:
    15da:	90 95       	com	r25
    15dc:	81 95       	neg	r24
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	08 95       	ret

000015e2 <__divmodhi4_neg2>:
    15e2:	70 95       	com	r23
    15e4:	61 95       	neg	r22
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255

000015e8 <__divmodhi4_exit>:
    15e8:	08 95       	ret

000015ea <__umulhisi3>:
    15ea:	a2 9f       	mul	r26, r18
    15ec:	b0 01       	movw	r22, r0
    15ee:	b3 9f       	mul	r27, r19
    15f0:	c0 01       	movw	r24, r0
    15f2:	a3 9f       	mul	r26, r19
    15f4:	70 0d       	add	r23, r0
    15f6:	81 1d       	adc	r24, r1
    15f8:	11 24       	eor	r1, r1
    15fa:	91 1d       	adc	r25, r1
    15fc:	b2 9f       	mul	r27, r18
    15fe:	70 0d       	add	r23, r0
    1600:	81 1d       	adc	r24, r1
    1602:	11 24       	eor	r1, r1
    1604:	91 1d       	adc	r25, r1
    1606:	08 95       	ret

00001608 <__udivmodhi4>:
    1608:	aa 1b       	sub	r26, r26
    160a:	bb 1b       	sub	r27, r27
    160c:	51 e1       	ldi	r21, 0x11	; 17
    160e:	07 c0       	rjmp	.+14     	; 0x161e <__udivmodhi4_ep>

00001610 <__udivmodhi4_loop>:
    1610:	aa 1f       	adc	r26, r26
    1612:	bb 1f       	adc	r27, r27
    1614:	a6 17       	cp	r26, r22
    1616:	b7 07       	cpc	r27, r23
    1618:	10 f0       	brcs	.+4      	; 0x161e <__udivmodhi4_ep>
    161a:	a6 1b       	sub	r26, r22
    161c:	b7 0b       	sbc	r27, r23

0000161e <__udivmodhi4_ep>:
    161e:	88 1f       	adc	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	5a 95       	dec	r21
    1624:	a9 f7       	brne	.-22     	; 0x1610 <__udivmodhi4_loop>
    1626:	80 95       	com	r24
    1628:	90 95       	com	r25
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	08 95       	ret

00001630 <_exit>:
    1630:	f8 94       	cli

00001632 <__stop_program>:
    1632:	ff cf       	rjmp	.-2      	; 0x1632 <__stop_program>
