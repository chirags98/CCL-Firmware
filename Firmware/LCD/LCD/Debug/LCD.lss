
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000ffc  00001090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080016c  0080016c  000010fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a1  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c48  00000000  00000000  00002c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c86  00000000  00000000  0000389d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00004524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d5  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa0  00000000  00000000  00004e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000058cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <main>
  9e:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_pin_config>:
volatile unsigned int adc_val[3];
//volatile char flag = 0;

void adc_pin_config (void)
{
	DDRC = 0x00; //set PORTF direction as input
  a6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00; //set PORTF pins floating
  a8:	18 b8       	out	0x08, r1	; 8
  aa:	08 95       	ret

000000ac <adc_config>:
}

void adc_config(void)
{
	ADCSRA=0x8F;	//1 --- 1 111 ADC Enable, ADC Interrupt enable, ADC Prescaler=128
  ac:	8f e8       	ldi	r24, 0x8F	; 143
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	SMCR |= 0x02;	//---- 001 0 ADC Noise Reduction mode, sleep enable/disable
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	83 bf       	out	0x33, r24	; 51
  b8:	08 95       	ret

000000ba <read_adc>:
	/*
	SMCR |= 0x01;		//ADC Start Conversion
	SMCR &= 0x02;
	*/			//Does not work
		
	set_sleep_mode (SLEEP_MODE_ADC);
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	81 7f       	andi	r24, 0xF1	; 241
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	83 bf       	out	0x33, r24	; 51
	// Enter Sleep Mode To Trigger ADC Measurement
	// CPU Will Wake Up From ADC Interrupt
	sleep_cpu();
  c8:	88 95       	sleep
	sleep_disable();
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	83 bf       	out	0x33, r24	; 51
  d0:	08 95       	ret

000000d2 <update_adc_channel>:
}

void update_adc_channel(char channel)
{
	if (channel>=0 && channel<=7)
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	50 f4       	brcc	.+20     	; 0xea <update_adc_channel+0x18>
	{	
		ADMUX = 0x00 | channel;	//00 - - AREF, Internal Vref turned off :--: 0000  ADC 0 (Channel)
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <update_adc_channel+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <update_adc_channel+0x12>
  e4:	00 00       	nop
		_delay_ms(1);
		read_adc();
  e6:	0e 94 5d 00 	call	0xba	; 0xba <read_adc>
  ea:	08 95       	ret

000000ec <avg_read_adc_channel>:
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
  ec:	7f 92       	push	r7
  ee:	8f 92       	push	r8
  f0:	9f 92       	push	r9
  f2:	af 92       	push	r10
  f4:	bf 92       	push	r11
  f6:	cf 92       	push	r12
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	78 2e       	mov	r7, r24
	float val = 0;
	
	for(int j = 1;j<=i;j++)
 108:	c6 2e       	mov	r12, r22
 10a:	d1 2c       	mov	r13, r1
 10c:	1c 14       	cp	r1, r12
 10e:	1d 04       	cpc	r1, r13
 110:	34 f5       	brge	.+76     	; 0x15e <avg_read_adc_channel+0x72>
 112:	c1 e0       	ldi	r28, 0x01	; 1
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	81 2c       	mov	r8, r1
 118:	91 2c       	mov	r9, r1
 11a:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
 11c:	08 2f       	mov	r16, r24
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	00 0f       	add	r16, r16
 122:	11 1f       	adc	r17, r17
 124:	02 57       	subi	r16, 0x72	; 114
 126:	1e 4f       	sbci	r17, 0xFE	; 254
 128:	76 01       	movw	r14, r12
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
	{
		update_adc_channel(channel);
 12a:	87 2d       	mov	r24, r7
 12c:	0e 94 69 00 	call	0xd2	; 0xd2 <update_adc_channel>
		val = val + adc_val[channel]/i;
 130:	f8 01       	movw	r30, r16
 132:	80 81       	ld	r24, Z
 134:	91 81       	ldd	r25, Z+1	; 0x01
 136:	b7 01       	movw	r22, r14
 138:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodhi4>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__floatunsisf>
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
 148:	c5 01       	movw	r24, r10
 14a:	b4 01       	movw	r22, r8
 14c:	0e 94 a3 05 	call	0xb46	; 0xb46 <__addsf3>
 150:	4b 01       	movw	r8, r22
 152:	5c 01       	movw	r10, r24

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
	
	for(int j = 1;j<=i;j++)
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	cc 16       	cp	r12, r28
 158:	dd 06       	cpc	r13, r29
 15a:	3c f7       	brge	.-50     	; 0x12a <avg_read_adc_channel+0x3e>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <avg_read_adc_channel+0x78>
	}
}

unsigned int avg_read_adc_channel(unsigned char channel, unsigned char i)
{
	float val = 0;
 15e:	81 2c       	mov	r8, r1
 160:	91 2c       	mov	r9, r1
 162:	54 01       	movw	r10, r8
	{
		update_adc_channel(channel);
		val = val + adc_val[channel]/i;
	}
	
	adc_val[channel] = val;
 164:	c7 2d       	mov	r28, r7
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	c5 01       	movw	r24, r10
 16a:	b4 01       	movw	r22, r8
 16c:	0e 94 86 06 	call	0xd0c	; 0xd0c <__fixunssfsi>
 170:	fe 01       	movw	r30, r28
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	e2 57       	subi	r30, 0x72	; 114
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	71 83       	std	Z+1, r23	; 0x01
 17c:	60 83       	st	Z, r22
	
	return adc_val[channel];
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	df 90       	pop	r13
 190:	cf 90       	pop	r12
 192:	bf 90       	pop	r11
 194:	af 90       	pop	r10
 196:	9f 90       	pop	r9
 198:	8f 90       	pop	r8
 19a:	7f 90       	pop	r7
 19c:	08 95       	ret

0000019e <__vector_21>:

//Conversion complete 
ISR(ADC_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
 1b6:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
 1ba:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	unsigned char high = ADCH;
 1be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

//Conversion complete 
ISR(ADC_vect)
{
	unsigned char channel = ADMUX & 0x0F;	//Read channel number by masking upper nibble
 1c2:	ef 70       	andi	r30, 0x0F	; 15
	//ADIF is automatically cleared by writing a logical one to the flag.
	//Read ADC value
	unsigned char low = ADCL;
	unsigned char high = ADCH;
	
	adc_val[channel] = 0x03 && high;
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 11       	cpse	r24, r1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__vector_21+0x34>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e2 57       	subi	r30, 0x72	; 114
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	31 83       	std	Z+1, r19	; 0x01
 1dc:	20 83       	st	Z, r18
	adc_val[channel] = adc_val[channel]<<8;
 1de:	20 81       	ld	r18, Z
 1e0:	31 81       	ldd	r19, Z+1	; 0x01
 1e2:	32 2f       	mov	r19, r18
 1e4:	22 27       	eor	r18, r18
 1e6:	31 83       	std	Z+1, r19	; 0x01
 1e8:	20 83       	st	Z, r18
	adc_val[channel] = 256*high + low;
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	98 2f       	mov	r25, r24
 1ee:	88 27       	eor	r24, r24
 1f0:	84 0f       	add	r24, r20
 1f2:	91 1d       	adc	r25, r1
 1f4:	91 83       	std	Z+1, r25	; 0x01
 1f6:	80 83       	st	Z, r24
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <update_current>:
int v_thresh = 25000;
int power_thresh = 10000;

void update_current()
{
	current = avg_read_adc_channel(0, 10);		//0-2A	Least count = 1.95mv
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
 218:	bc 01       	movw	r22, r24
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__floatunsisf>
	current = current*1.953 + 0.3 + offset;		//1.953*(1.0228, 9.57, 1.1054, 1.016,1.0570)
 222:	27 ee       	ldi	r18, 0xE7	; 231
 224:	3b ef       	ldi	r19, 0xFB	; 251
 226:	49 ef       	ldi	r20, 0xF9	; 249
 228:	5f e3       	ldi	r21, 0x3F	; 63
 22a:	0e 94 6c 07 	call	0xed8	; 0xed8 <__mulsf3>
 22e:	2a e9       	ldi	r18, 0x9A	; 154
 230:	39 e9       	ldi	r19, 0x99	; 153
 232:	49 e9       	ldi	r20, 0x99	; 153
 234:	5e e3       	ldi	r21, 0x3E	; 62
 236:	0e 94 a3 05 	call	0xb46	; 0xb46 <__addsf3>
 23a:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <offset>
 23e:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <offset+0x1>
 242:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <offset+0x2>
 246:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <offset+0x3>
 24a:	0e 94 a3 05 	call	0xb46	; 0xb46 <__addsf3>
 24e:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <current>
 252:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <current+0x1>
 256:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <current+0x2>
 25a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <current+0x3>
 25e:	08 95       	ret

00000260 <update_voltage>:
}

void update_voltage()
{
	voltage = avg_read_adc_channel(1, 10);		//0-30V	Least count = 29.29mv
 260:	6a e0       	ldi	r22, 0x0A	; 10
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
 268:	bc 01       	movw	r22, r24
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__floatunsisf>
	voltage = voltage*29.29;	
 272:	2c ee       	ldi	r18, 0xEC	; 236
 274:	31 e5       	ldi	r19, 0x51	; 81
 276:	4a ee       	ldi	r20, 0xEA	; 234
 278:	51 e4       	ldi	r21, 0x41	; 65
 27a:	0e 94 6c 07 	call	0xed8	; 0xed8 <__mulsf3>
 27e:	60 93 7d 01 	sts	0x017D, r22	; 0x80017d <voltage>
 282:	70 93 7e 01 	sts	0x017E, r23	; 0x80017e <voltage+0x1>
 286:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <voltage+0x2>
 28a:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <voltage+0x3>
 28e:	08 95       	ret

00000290 <update_power>:
}

void update_power()
{
	power = voltage*current/1000;
 290:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <current>
 294:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <current+0x1>
 298:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <current+0x2>
 29c:	50 91 7c 01 	lds	r21, 0x017C	; 0x80017c <current+0x3>
 2a0:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <voltage>
 2a4:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <voltage+0x1>
 2a8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <voltage+0x2>
 2ac:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <voltage+0x3>
 2b0:	0e 94 6c 07 	call	0xed8	; 0xed8 <__mulsf3>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	4a e7       	ldi	r20, 0x7A	; 122
 2ba:	54 e4       	ldi	r21, 0x44	; 68
 2bc:	0e 94 14 06 	call	0xc28	; 0xc28 <__divsf3>
 2c0:	60 93 75 01 	sts	0x0175, r22	; 0x800175 <power>
 2c4:	70 93 76 01 	sts	0x0176, r23	; 0x800176 <power+0x1>
 2c8:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <power+0x2>
 2cc:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <power+0x3>
 2d0:	08 95       	ret

000002d2 <update_gate_voltage>:
}

void update_gate_voltage()
{
	gate_voltage = avg_read_adc_channel(2, 10)*7.5;		//0-7.68V	
 2d2:	6a e0       	ldi	r22, 0x0A	; 10
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 76 00 	call	0xec	; 0xec <avg_read_adc_channel>
 2da:	bc 01       	movw	r22, r24
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__floatunsisf>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	40 ef       	ldi	r20, 0xF0	; 240
 2ea:	50 e4       	ldi	r21, 0x40	; 64
 2ec:	0e 94 6c 07 	call	0xed8	; 0xed8 <__mulsf3>
 2f0:	60 93 71 01 	sts	0x0171, r22	; 0x800171 <gate_voltage>
 2f4:	70 93 72 01 	sts	0x0172, r23	; 0x800172 <gate_voltage+0x1>
 2f8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <gate_voltage+0x2>
 2fc:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <gate_voltage+0x3>
 300:	08 95       	ret

00000302 <print_current>:
}

void print_current(char row, char col)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	d8 2f       	mov	r29, r24
 308:	c6 2f       	mov	r28, r22
	lcd_print(row,col,current,4);					//Least count = 1.95mv
 30a:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <current>
 30e:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <current+0x1>
 312:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <current+0x2>
 316:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <current+0x3>
 31a:	0e 94 86 06 	call	0xd0c	; 0xd0c <__fixunssfsi>
 31e:	24 e0       	ldi	r18, 0x04	; 4
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	ab 01       	movw	r20, r22
 324:	6c 2f       	mov	r22, r28
 326:	8d 2f       	mov	r24, r29
 328:	0e 94 99 03 	call	0x732	; 0x732 <lcd_print>
	lcd_string2(row,col+4,"mA  ");
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	6c 0f       	add	r22, r28
 330:	46 e0       	ldi	r20, 0x06	; 6
 332:	51 e0       	ldi	r21, 0x01	; 1
 334:	8d 2f       	mov	r24, r29
 336:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <print_voltage>:

void print_voltage(char row, char col)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	d8 2f       	mov	r29, r24
 346:	c6 2f       	mov	r28, r22
	lcd_print(row,col,voltage,5);					//Least count = 29.23mv
 348:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <voltage>
 34c:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <voltage+0x1>
 350:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <voltage+0x2>
 354:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <voltage+0x3>
 358:	0e 94 86 06 	call	0xd0c	; 0xd0c <__fixunssfsi>
 35c:	25 e0       	ldi	r18, 0x05	; 5
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	ab 01       	movw	r20, r22
 362:	6c 2f       	mov	r22, r28
 364:	8d 2f       	mov	r24, r29
 366:	0e 94 99 03 	call	0x732	; 0x732 <lcd_print>
	lcd_string2(row,col+5,"mV");
 36a:	65 e0       	ldi	r22, 0x05	; 5
 36c:	6c 0f       	add	r22, r28
 36e:	4b e0       	ldi	r20, 0x0B	; 11
 370:	51 e0       	ldi	r21, 0x01	; 1
 372:	8d 2f       	mov	r24, r29
 374:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <print_power>:

void print_power(char row, char col)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	d8 2f       	mov	r29, r24
 384:	c6 2f       	mov	r28, r22
	lcd_print(row,col,power,5);
 386:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <power>
 38a:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <power+0x1>
 38e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <power+0x2>
 392:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <power+0x3>
 396:	0e 94 86 06 	call	0xd0c	; 0xd0c <__fixunssfsi>
 39a:	25 e0       	ldi	r18, 0x05	; 5
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	ab 01       	movw	r20, r22
 3a0:	6c 2f       	mov	r22, r28
 3a2:	8d 2f       	mov	r24, r29
 3a4:	0e 94 99 03 	call	0x732	; 0x732 <lcd_print>
	lcd_string2(row,col+5,"mW");
 3a8:	65 e0       	ldi	r22, 0x05	; 5
 3aa:	6c 0f       	add	r22, r28
 3ac:	4e e0       	ldi	r20, 0x0E	; 14
 3ae:	51 e0       	ldi	r21, 0x01	; 1
 3b0:	8d 2f       	mov	r24, r29
 3b2:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <print_gate_voltage>:

void print_gate_voltage(char row, char col)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	d8 2f       	mov	r29, r24
 3c2:	c6 2f       	mov	r28, r22
	lcd_print(row,col,gate_voltage,4);				//Least count = 7.5mv
 3c4:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <gate_voltage>
 3c8:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <gate_voltage+0x1>
 3cc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <gate_voltage+0x2>
 3d0:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <gate_voltage+0x3>
 3d4:	0e 94 86 06 	call	0xd0c	; 0xd0c <__fixunssfsi>
 3d8:	24 e0       	ldi	r18, 0x04	; 4
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	ab 01       	movw	r20, r22
 3de:	6c 2f       	mov	r22, r28
 3e0:	8d 2f       	mov	r24, r29
 3e2:	0e 94 99 03 	call	0x732	; 0x732 <lcd_print>
	lcd_string2(row,col+4,"mV");
 3e6:	64 e0       	ldi	r22, 0x04	; 4
 3e8:	6c 0f       	add	r22, r28
 3ea:	4b e0       	ldi	r20, 0x0B	; 11
 3ec:	51 e0       	ldi	r21, 0x01	; 1
 3ee:	8d 2f       	mov	r24, r29
 3f0:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <check_thresholds>:

char check_thresholds()
{
 3fa:	af 92       	push	r10
 3fc:	bf 92       	push	r11
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
	static char val = 0;
	
	if (current<current_thresh && voltage<v_thresh && power<power_thresh)
 40e:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <current_thresh>
 412:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <current_thresh+0x1>
 416:	c0 90 79 01 	lds	r12, 0x0179	; 0x800179 <current>
 41a:	d0 90 7a 01 	lds	r13, 0x017A	; 0x80017a <current+0x1>
 41e:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <current+0x2>
 422:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <current+0x3>
 426:	be 01       	movw	r22, r28
 428:	0d 2e       	mov	r0, r29
 42a:	00 0c       	add	r0, r0
 42c:	88 0b       	sbc	r24, r24
 42e:	99 0b       	sbc	r25, r25
 430:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatsisf>
 434:	a7 01       	movw	r20, r14
 436:	96 01       	movw	r18, r12
 438:	0e 94 67 07 	call	0xece	; 0xece <__gesf2>
 43c:	18 16       	cp	r1, r24
 43e:	0c f0       	brlt	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	4b c0       	rjmp	.+150    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 442:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <v_thresh>
 446:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <v_thresh+0x1>
 44a:	b8 01       	movw	r22, r16
 44c:	01 2e       	mov	r0, r17
 44e:	00 0c       	add	r0, r0
 450:	88 0b       	sbc	r24, r24
 452:	99 0b       	sbc	r25, r25
 454:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatsisf>
 458:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <voltage>
 45c:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <voltage+0x1>
 460:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <voltage+0x2>
 464:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <voltage+0x3>
 468:	0e 94 67 07 	call	0xece	; 0xece <__gesf2>
 46c:	18 16       	cp	r1, r24
 46e:	a4 f5       	brge	.+104    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 470:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_start>
 474:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_start+0x1>
 478:	b5 01       	movw	r22, r10
 47a:	0b 2c       	mov	r0, r11
 47c:	00 0c       	add	r0, r0
 47e:	88 0b       	sbc	r24, r24
 480:	99 0b       	sbc	r25, r25
 482:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatsisf>
 486:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <power>
 48a:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <power+0x1>
 48e:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <power+0x2>
 492:	50 91 78 01 	lds	r21, 0x0178	; 0x800178 <power+0x3>
 496:	0e 94 67 07 	call	0xece	; 0xece <__gesf2>
 49a:	18 16       	cp	r1, r24
 49c:	ec f4       	brge	.+58     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	{
		if (val == 1)
 49e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a6:	79 c0       	rjmp	.+242    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
		{
			power_thresh += 500;
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	a8 1a       	sub	r10, r24
 4ac:	8e ef       	ldi	r24, 0xFE	; 254
 4ae:	b8 0a       	sbc	r11, r24
 4b0:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
 4b4:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
			v_thresh += 2000;
 4b8:	00 53       	subi	r16, 0x30	; 48
 4ba:	18 4f       	sbci	r17, 0xF8	; 248
 4bc:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <v_thresh+0x1>
 4c0:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <v_thresh>
			current_thresh += 100;
 4c4:	cc 59       	subi	r28, 0x9C	; 156
 4c6:	df 4f       	sbci	r29, 0xFF	; 255
 4c8:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
 4cc:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 0;
 4d0:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
		}
		
		return 0;	//All okay
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	68 c0       	rjmp	.+208    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	}
	
	else
	{	
		if (val == 0)
 4d8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 4dc:	81 11       	cpse	r24, r1
 4de:	1d c0       	rjmp	.+58     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		{
			power_thresh -= 500;
 4e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4e8:	84 5f       	subi	r24, 0xF4	; 244
 4ea:	91 40       	sbci	r25, 0x01	; 1
 4ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			v_thresh -= 2000;
 4f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <v_thresh>
 4f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <v_thresh+0x1>
 4fc:	80 5d       	subi	r24, 0xD0	; 208
 4fe:	97 40       	sbci	r25, 0x07	; 7
 500:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <v_thresh+0x1>
 504:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <v_thresh>
			current_thresh -= 100;
 508:	c4 56       	subi	r28, 0x64	; 100
 50a:	d1 09       	sbc	r29, r1
 50c:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <current_thresh+0x1>
 510:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <current_thresh>
			val = 1;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
		}
		
		if (power>power_thresh)
 51a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 51e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 522:	07 2e       	mov	r0, r23
 524:	00 0c       	add	r0, r0
 526:	88 0b       	sbc	r24, r24
 528:	99 0b       	sbc	r25, r25
 52a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatsisf>
 52e:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <power>
 532:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <power+0x1>
 536:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <power+0x2>
 53a:	50 91 78 01 	lds	r21, 0x0178	; 0x800178 <power+0x3>
 53e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__cmpsf2>
 542:	88 23       	and	r24, r24
 544:	64 f1       	brlt	.+88     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			return 1;
	
		else if (voltage>v_thresh)
 546:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <v_thresh>
 54a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <v_thresh+0x1>
 54e:	07 2e       	mov	r0, r23
 550:	00 0c       	add	r0, r0
 552:	88 0b       	sbc	r24, r24
 554:	99 0b       	sbc	r25, r25
 556:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatsisf>
 55a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <voltage>
 55e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <voltage+0x1>
 562:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <voltage+0x2>
 566:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <voltage+0x3>
 56a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__cmpsf2>
 56e:	88 23       	and	r24, r24
 570:	c4 f0       	brlt	.+48     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			return 2;

		else if (current>current_thresh)	
 572:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <current_thresh>
 576:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <current_thresh+0x1>
 57a:	07 2e       	mov	r0, r23
 57c:	00 0c       	add	r0, r0
 57e:	88 0b       	sbc	r24, r24
 580:	99 0b       	sbc	r25, r25
 582:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__floatsisf>
 586:	9b 01       	movw	r18, r22
 588:	ac 01       	movw	r20, r24
 58a:	c7 01       	movw	r24, r14
 58c:	b6 01       	movw	r22, r12
 58e:	0e 94 67 07 	call	0xece	; 0xece <__gesf2>
 592:	18 16       	cp	r1, r24
 594:	44 f0       	brlt	.+16     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
			return 3;
	
		else
			return 4;	//Error
 596:	84 e0       	ldi	r24, 0x04	; 4
 598:	07 c0       	rjmp	.+14     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			v_thresh += 2000;
			current_thresh += 100;
			val = 0;
		}
		
		return 0;	//All okay
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			current_thresh -= 100;
			val = 1;
		}
		
		if (power>power_thresh)
			return 1;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	
		else if (voltage>v_thresh)
			return 2;
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>

		else if (current>current_thresh)	
			return 3;
 5a6:	83 e0       	ldi	r24, 0x03	; 3
	
		else
			return 4;	//Error
	}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	bf 90       	pop	r11
 5ba:	af 90       	pop	r10
 5bc:	08 95       	ret

000005be <Bit_Reverse>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
 5be:	98 2f       	mov	r25, r24
 5c0:	88 1f       	adc	r24, r24
 5c2:	88 27       	eor	r24, r24
 5c4:	88 1f       	adc	r24, r24
 5c6:	96 fd       	sbrc	r25, 6
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <Bit_Reverse+0x10>
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <Bit_Reverse+0x12>
 5ce:	22 e0       	ldi	r18, 0x02	; 2
 5d0:	82 2b       	or	r24, r18
 5d2:	95 fd       	sbrc	r25, 5
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <Bit_Reverse+0x1c>
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <Bit_Reverse+0x1e>
 5da:	24 e0       	ldi	r18, 0x04	; 4
 5dc:	82 2b       	or	r24, r18
 5de:	94 fd       	sbrc	r25, 4
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <Bit_Reverse+0x28>
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <Bit_Reverse+0x2a>
 5e6:	28 e0       	ldi	r18, 0x08	; 8
 5e8:	82 2b       	or	r24, r18
 5ea:	93 fd       	sbrc	r25, 3
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <Bit_Reverse+0x34>
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <Bit_Reverse+0x36>
 5f2:	20 e1       	ldi	r18, 0x10	; 16
 5f4:	82 2b       	or	r24, r18
 5f6:	92 fd       	sbrc	r25, 2
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <Bit_Reverse+0x40>
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <Bit_Reverse+0x42>
 5fe:	20 e2       	ldi	r18, 0x20	; 32
 600:	82 2b       	or	r24, r18
 602:	91 fd       	sbrc	r25, 1
 604:	02 c0       	rjmp	.+4      	; 0x60a <Bit_Reverse+0x4c>
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	01 c0       	rjmp	.+2      	; 0x60c <Bit_Reverse+0x4e>
 60a:	20 e4       	ldi	r18, 0x40	; 64
 60c:	82 2b       	or	r24, r18
 60e:	90 fd       	sbrc	r25, 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <Bit_Reverse+0x58>
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	01 c0       	rjmp	.+2      	; 0x618 <Bit_Reverse+0x5a>
 616:	90 e8       	ldi	r25, 0x80	; 128
 618:	89 2b       	or	r24, r25
 61a:	08 95       	ret

0000061c <lcd_wr_command>:
 61c:	cf 93       	push	r28
 61e:	c8 2f       	mov	r28, r24
 620:	80 7f       	andi	r24, 0xF0	; 240
 622:	0e 94 df 02 	call	0x5be	; 0x5be <Bit_Reverse>
 626:	88 0f       	add	r24, r24
 628:	88 0f       	add	r24, r24
 62a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <temp.1654>
 62e:	9b b1       	in	r25, 0x0b	; 11
 630:	93 7c       	andi	r25, 0xC3	; 195
 632:	9b b9       	out	0x0b, r25	; 11
 634:	8b b1       	in	r24, 0x0b	; 11
 636:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <temp.1654>
 63a:	98 2b       	or	r25, r24
 63c:	9b b9       	out	0x0b, r25	; 11
 63e:	5f 98       	cbi	0x0b, 7	; 11
 640:	5e 9a       	sbi	0x0b, 6	; 11
 642:	8f e1       	ldi	r24, 0x1F	; 31
 644:	9e e4       	ldi	r25, 0x4E	; 78
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <lcd_wr_command+0x2a>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <lcd_wr_command+0x30>
 64c:	00 00       	nop
 64e:	5e 98       	cbi	0x0b, 6	; 11
 650:	8c 2f       	mov	r24, r28
 652:	82 95       	swap	r24
 654:	80 7f       	andi	r24, 0xF0	; 240
 656:	0e 94 df 02 	call	0x5be	; 0x5be <Bit_Reverse>
 65a:	9b b1       	in	r25, 0x0b	; 11
 65c:	93 7c       	andi	r25, 0xC3	; 195
 65e:	9b b9       	out	0x0b, r25	; 11
 660:	9b b1       	in	r25, 0x0b	; 11
 662:	88 0f       	add	r24, r24
 664:	88 0f       	add	r24, r24
 666:	98 2b       	or	r25, r24
 668:	9b b9       	out	0x0b, r25	; 11
 66a:	5f 98       	cbi	0x0b, 7	; 11
 66c:	5e 9a       	sbi	0x0b, 6	; 11
 66e:	8f e1       	ldi	r24, 0x1F	; 31
 670:	9e e4       	ldi	r25, 0x4E	; 78
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <lcd_wr_command+0x56>
 676:	00 c0       	rjmp	.+0      	; 0x678 <lcd_wr_command+0x5c>
 678:	00 00       	nop
 67a:	5e 98       	cbi	0x0b, 6	; 11
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <lcd_wr_char>:
 680:	cf 93       	push	r28
 682:	c8 2f       	mov	r28, r24
 684:	80 7f       	andi	r24, 0xF0	; 240
 686:	0e 94 df 02 	call	0x5be	; 0x5be <Bit_Reverse>
 68a:	9b b1       	in	r25, 0x0b	; 11
 68c:	93 7c       	andi	r25, 0xC3	; 195
 68e:	9b b9       	out	0x0b, r25	; 11
 690:	9b b1       	in	r25, 0x0b	; 11
 692:	88 0f       	add	r24, r24
 694:	88 0f       	add	r24, r24
 696:	98 2b       	or	r25, r24
 698:	9b b9       	out	0x0b, r25	; 11
 69a:	5f 9a       	sbi	0x0b, 7	; 11
 69c:	5e 9a       	sbi	0x0b, 6	; 11
 69e:	8f e1       	ldi	r24, 0x1F	; 31
 6a0:	9e e4       	ldi	r25, 0x4E	; 78
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <lcd_wr_char+0x22>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <lcd_wr_char+0x28>
 6a8:	00 00       	nop
 6aa:	5e 98       	cbi	0x0b, 6	; 11
 6ac:	8c 2f       	mov	r24, r28
 6ae:	82 95       	swap	r24
 6b0:	80 7f       	andi	r24, 0xF0	; 240
 6b2:	0e 94 df 02 	call	0x5be	; 0x5be <Bit_Reverse>
 6b6:	9b b1       	in	r25, 0x0b	; 11
 6b8:	93 7c       	andi	r25, 0xC3	; 195
 6ba:	9b b9       	out	0x0b, r25	; 11
 6bc:	9b b1       	in	r25, 0x0b	; 11
 6be:	88 0f       	add	r24, r24
 6c0:	88 0f       	add	r24, r24
 6c2:	98 2b       	or	r25, r24
 6c4:	9b b9       	out	0x0b, r25	; 11
 6c6:	5f 9a       	sbi	0x0b, 7	; 11
 6c8:	5e 9a       	sbi	0x0b, 6	; 11
 6ca:	8f e1       	ldi	r24, 0x1F	; 31
 6cc:	9e e4       	ldi	r25, 0x4E	; 78
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <lcd_wr_char+0x4e>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <lcd_wr_char+0x54>
 6d4:	00 00       	nop
 6d6:	5e 98       	cbi	0x0b, 6	; 11
 6d8:	cf 91       	pop	r28
 6da:	08 95       	ret

000006dc <lcd_port_config>:
 6dc:	8a b1       	in	r24, 0x0a	; 10
 6de:	8c 6f       	ori	r24, 0xFC	; 252
 6e0:	8a b9       	out	0x0a, r24	; 10
 6e2:	8b b1       	in	r24, 0x0b	; 11
 6e4:	84 70       	andi	r24, 0x04	; 4
 6e6:	8b b9       	out	0x0b, r24	; 11
 6e8:	08 95       	ret

000006ea <lcd_home>:
 6ea:	80 e8       	ldi	r24, 0x80	; 128
 6ec:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
 6f0:	08 95       	ret

000006f2 <lcd_cursor>:
	row
* Example Call: lcd_string(2,3)
*/
void lcd_cursor (char row, char column)
{
	switch (row) {
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	19 f0       	breq	.+6      	; 0x6fc <lcd_cursor+0xa>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	31 f0       	breq	.+12     	; 0x706 <lcd_cursor+0x14>
 6fa:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 6fc:	8f e7       	ldi	r24, 0x7F	; 127
 6fe:	86 0f       	add	r24, r22
 700:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
 704:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 706:	8f eb       	ldi	r24, 0xBF	; 191
 708:	86 0f       	add	r24, r22
 70a:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
 70e:	08 95       	ret

00000710 <lcd_string2>:
* Output: Prints string on the LCD
* Logic:  Prints each character to the LCD in a while loop until EOF is reached
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	ea 01       	movw	r28, r20
	lcd_cursor(row,column);	
 716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <lcd_cursor>
	while(*str != '\0')
 71a:	88 81       	ld	r24, Y
 71c:	88 23       	and	r24, r24
 71e:	31 f0       	breq	.+12     	; 0x72c <lcd_string2+0x1c>
 720:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
 722:	0e 94 40 03 	call	0x680	; 0x680 <lcd_wr_char>
* Example Call: lcd_string("hello")
*/
void lcd_string2(char row, char column, char *str)
{
	lcd_cursor(row,column);	
	while(*str != '\0')
 726:	89 91       	ld	r24, Y+
 728:	81 11       	cpse	r24, r1
 72a:	fb cf       	rjmp	.-10     	; 0x722 <lcd_string2+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <lcd_print>:
* Output: Integer is printed to the desired location and upto the desired number of digits
* Logic: 
* Example Call: lcd_string("hello")
*/
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	8a 01       	movw	r16, r20
 73c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 73e:	88 23       	and	r24, r24
 740:	11 f0       	breq	.+4      	; 0x746 <lcd_print+0x14>
 742:	61 11       	cpse	r22, r1
 744:	03 c0       	rjmp	.+6      	; 0x74c <lcd_print+0x1a>
	{
		lcd_home();
 746:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_home>
 74a:	02 c0       	rjmp	.+4      	; 0x750 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 74c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 750:	c5 30       	cpi	r28, 0x05	; 5
 752:	d1 05       	cpc	r29, r1
 754:	c9 f4       	brne	.+50     	; 0x788 <lcd_print+0x56>
	{
		million=value/10000+48;
 756:	98 01       	movw	r18, r16
 758:	32 95       	swap	r19
 75a:	22 95       	swap	r18
 75c:	2f 70       	andi	r18, 0x0F	; 15
 75e:	23 27       	eor	r18, r19
 760:	3f 70       	andi	r19, 0x0F	; 15
 762:	23 27       	eor	r18, r19
 764:	a7 e4       	ldi	r26, 0x47	; 71
 766:	b3 e0       	ldi	r27, 0x03	; 3
 768:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 76c:	96 95       	lsr	r25
 76e:	87 95       	ror	r24
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	96 95       	lsr	r25
 776:	87 95       	ror	r24
 778:	c0 96       	adiw	r24, 0x30	; 48
 77a:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <million+0x1>
 77e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <million>
		lcd_wr_char(million);
 782:	0e 94 40 03 	call	0x680	; 0x680 <lcd_wr_char>
 786:	04 c0       	rjmp	.+8      	; 0x790 <lcd_print+0x5e>
		flag=1;
	}
	if(digits==4 || flag==1)
 788:	c4 30       	cpi	r28, 0x04	; 4
 78a:	d1 05       	cpc	r29, r1
 78c:	09 f0       	breq	.+2      	; 0x790 <lcd_print+0x5e>
 78e:	c3 c0       	rjmp	.+390    	; 0x916 <__stack+0x17>
	{
		temp = value/1000;
 790:	98 01       	movw	r18, r16
 792:	36 95       	lsr	r19
 794:	27 95       	ror	r18
 796:	36 95       	lsr	r19
 798:	27 95       	ror	r18
 79a:	36 95       	lsr	r19
 79c:	27 95       	ror	r18
 79e:	a5 ec       	ldi	r26, 0xC5	; 197
 7a0:	b0 e2       	ldi	r27, 0x20	; 32
 7a2:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 7a6:	ac 01       	movw	r20, r24
 7a8:	52 95       	swap	r21
 7aa:	42 95       	swap	r20
 7ac:	4f 70       	andi	r20, 0x0F	; 15
 7ae:	45 27       	eor	r20, r21
 7b0:	5f 70       	andi	r21, 0x0F	; 15
 7b2:	45 27       	eor	r20, r21
 7b4:	50 93 8d 01 	sts	0x018D, r21	; 0x80018d <temp+0x1>
 7b8:	40 93 8c 01 	sts	0x018C, r20	; 0x80018c <temp>
		thousand = temp%10 + 48;
 7bc:	9a 01       	movw	r18, r20
 7be:	ad ec       	ldi	r26, 0xCD	; 205
 7c0:	bc ec       	ldi	r27, 0xCC	; 204
 7c2:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 7c6:	96 95       	lsr	r25
 7c8:	87 95       	ror	r24
 7ca:	96 95       	lsr	r25
 7cc:	87 95       	ror	r24
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	9c 01       	movw	r18, r24
 7d4:	22 0f       	add	r18, r18
 7d6:	33 1f       	adc	r19, r19
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	82 0f       	add	r24, r18
 7e6:	93 1f       	adc	r25, r19
 7e8:	9a 01       	movw	r18, r20
 7ea:	28 1b       	sub	r18, r24
 7ec:	39 0b       	sbc	r19, r25
 7ee:	c9 01       	movw	r24, r18
 7f0:	c0 96       	adiw	r24, 0x30	; 48
 7f2:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <thousand+0x1>
 7f6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <thousand>
		lcd_wr_char(thousand);
 7fa:	0e 94 40 03 	call	0x680	; 0x680 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 7fe:	98 01       	movw	r18, r16
 800:	36 95       	lsr	r19
 802:	27 95       	ror	r18
 804:	36 95       	lsr	r19
 806:	27 95       	ror	r18
 808:	ab e7       	ldi	r26, 0x7B	; 123
 80a:	b4 e1       	ldi	r27, 0x14	; 20
 80c:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 810:	ac 01       	movw	r20, r24
 812:	56 95       	lsr	r21
 814:	47 95       	ror	r20
 816:	50 93 8d 01 	sts	0x018D, r21	; 0x80018d <temp+0x1>
 81a:	40 93 8c 01 	sts	0x018C, r20	; 0x80018c <temp>
		hundred = temp%10 + 48;
 81e:	9a 01       	movw	r18, r20
 820:	ad ec       	ldi	r26, 0xCD	; 205
 822:	bc ec       	ldi	r27, 0xCC	; 204
 824:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 828:	96 95       	lsr	r25
 82a:	87 95       	ror	r24
 82c:	96 95       	lsr	r25
 82e:	87 95       	ror	r24
 830:	96 95       	lsr	r25
 832:	87 95       	ror	r24
 834:	9c 01       	movw	r18, r24
 836:	22 0f       	add	r18, r18
 838:	33 1f       	adc	r19, r19
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	82 0f       	add	r24, r18
 848:	93 1f       	adc	r25, r19
 84a:	9a 01       	movw	r18, r20
 84c:	28 1b       	sub	r18, r24
 84e:	39 0b       	sbc	r19, r25
 850:	c9 01       	movw	r24, r18
 852:	c0 96       	adiw	r24, 0x30	; 48
 854:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <hundred+0x1>
 858:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <hundred>
		lcd_wr_char(hundred);
 85c:	0e 94 40 03 	call	0x680	; 0x680 <lcd_wr_char>
 860:	04 c0       	rjmp	.+8      	; 0x86a <lcd_print+0x138>
		flag=1;
	}
	if(digits==2 || flag==1)
 862:	c2 30       	cpi	r28, 0x02	; 2
 864:	d1 05       	cpc	r29, r1
 866:	09 f0       	breq	.+2      	; 0x86a <lcd_print+0x138>
 868:	5b c0       	rjmp	.+182    	; 0x920 <__stack+0x21>
	{
		temp = value/10;
 86a:	98 01       	movw	r18, r16
 86c:	ad ec       	ldi	r26, 0xCD	; 205
 86e:	bc ec       	ldi	r27, 0xCC	; 204
 870:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 874:	ac 01       	movw	r20, r24
 876:	56 95       	lsr	r21
 878:	47 95       	ror	r20
 87a:	56 95       	lsr	r21
 87c:	47 95       	ror	r20
 87e:	56 95       	lsr	r21
 880:	47 95       	ror	r20
 882:	50 93 8d 01 	sts	0x018D, r21	; 0x80018d <temp+0x1>
 886:	40 93 8c 01 	sts	0x018C, r20	; 0x80018c <temp>
		tens = temp%10 + 48;
 88a:	9a 01       	movw	r18, r20
 88c:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 890:	96 95       	lsr	r25
 892:	87 95       	ror	r24
 894:	96 95       	lsr	r25
 896:	87 95       	ror	r24
 898:	96 95       	lsr	r25
 89a:	87 95       	ror	r24
 89c:	9c 01       	movw	r18, r24
 89e:	22 0f       	add	r18, r18
 8a0:	33 1f       	adc	r19, r19
 8a2:	88 0f       	add	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	88 0f       	add	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	82 0f       	add	r24, r18
 8b0:	93 1f       	adc	r25, r19
 8b2:	9a 01       	movw	r18, r20
 8b4:	28 1b       	sub	r18, r24
 8b6:	39 0b       	sbc	r19, r25
 8b8:	c9 01       	movw	r24, r18
 8ba:	c0 96       	adiw	r24, 0x30	; 48
 8bc:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <tens+0x1>
 8c0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <tens>
		lcd_wr_char(tens);
 8c4:	0e 94 40 03 	call	0x680	; 0x680 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 8c8:	98 01       	movw	r18, r16
 8ca:	ad ec       	ldi	r26, 0xCD	; 205
 8cc:	bc ec       	ldi	r27, 0xCC	; 204
 8ce:	0e 94 ed 07 	call	0xfda	; 0xfda <__umulhisi3>
 8d2:	96 95       	lsr	r25
 8d4:	87 95       	ror	r24
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	96 95       	lsr	r25
 8dc:	87 95       	ror	r24
 8de:	9c 01       	movw	r18, r24
 8e0:	22 0f       	add	r18, r18
 8e2:	33 1f       	adc	r19, r19
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	82 0f       	add	r24, r18
 8f2:	93 1f       	adc	r25, r19
 8f4:	98 01       	movw	r18, r16
 8f6:	28 1b       	sub	r18, r24
 8f8:	39 0b       	sbc	r19, r25
 8fa:	c9 01       	movw	r24, r18
 8fc:	c0 96       	adiw	r24, 0x30	; 48
 8fe:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <unit+0x1>
 902:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <unit>
		lcd_wr_char(unit);
 906:	0e 94 40 03 	call	0x680	; 0x680 <lcd_wr_char>
	}
	if(digits>5)
 90a:	26 97       	sbiw	r28, 0x06	; 6
 90c:	6c f0       	brlt	.+26     	; 0x928 <__stack+0x29>
	{
		lcd_wr_char('E');
 90e:	85 e4       	ldi	r24, 0x45	; 69
 910:	0e 94 40 03 	call	0x680	; 0x680 <lcd_wr_char>
 914:	09 c0       	rjmp	.+18     	; 0x928 <__stack+0x29>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 916:	c3 30       	cpi	r28, 0x03	; 3
 918:	d1 05       	cpc	r29, r1
 91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0x1f>
 91c:	a2 cf       	rjmp	.-188    	; 0x862 <lcd_print+0x130>
 91e:	6f cf       	rjmp	.-290    	; 0x7fe <lcd_print+0xcc>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 920:	c1 30       	cpi	r28, 0x01	; 1
 922:	d1 05       	cpc	r29, r1
 924:	91 f7       	brne	.-28     	; 0x90a <__stack+0xb>
 926:	d0 cf       	rjmp	.-96     	; 0x8c8 <lcd_print+0x196>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	08 95       	ret

00000932 <lcd_start>:
 932:	8f e9       	ldi	r24, 0x9F	; 159
 934:	9f e0       	ldi	r25, 0x0F	; 15
 936:	01 97       	sbiw	r24, 0x01	; 1
 938:	f1 f7       	brne	.-4      	; 0x936 <lcd_start+0x4>
 93a:	00 c0       	rjmp	.+0      	; 0x93c <lcd_start+0xa>
 93c:	00 00       	nop
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 93e:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x30;				//Sending 3 (0011 0000)
	lcd_port = 0x30;				//Sending 3 (0011 0000)
 940:	80 e3       	ldi	r24, 0x30	; 48
 942:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 944:	5e 9a       	sbi	0x0b, 6	; 11
 946:	ef e1       	ldi	r30, 0x1F	; 31
 948:	fe e4       	ldi	r31, 0x4E	; 78
 94a:	31 97       	sbiw	r30, 0x01	; 1
 94c:	f1 f7       	brne	.-4      	; 0x94a <lcd_start+0x18>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <lcd_start+0x1e>
 950:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 952:	5e 98       	cbi	0x0b, 6	; 11
 954:	ef e9       	ldi	r30, 0x9F	; 159
 956:	ff e0       	ldi	r31, 0x0F	; 15
 958:	31 97       	sbiw	r30, 0x01	; 1
 95a:	f1 f7       	brne	.-4      	; 0x958 <lcd_start+0x26>
 95c:	00 c0       	rjmp	.+0      	; 0x95e <lcd_start+0x2c>
 95e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 960:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 962:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 964:	5e 9a       	sbi	0x0b, 6	; 11
 966:	ef e1       	ldi	r30, 0x1F	; 31
 968:	fe e4       	ldi	r31, 0x4E	; 78
 96a:	31 97       	sbiw	r30, 0x01	; 1
 96c:	f1 f7       	brne	.-4      	; 0x96a <lcd_start+0x38>
 96e:	00 c0       	rjmp	.+0      	; 0x970 <lcd_start+0x3e>
 970:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 972:	5e 98       	cbi	0x0b, 6	; 11
 974:	ef e9       	ldi	r30, 0x9F	; 159
 976:	ff e0       	ldi	r31, 0x0F	; 15
 978:	31 97       	sbiw	r30, 0x01	; 1
 97a:	f1 f7       	brne	.-4      	; 0x978 <lcd_start+0x46>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <lcd_start+0x4c>
 97e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 980:	5f 98       	cbi	0x0b, 7	; 11
	lcd_port = 0x30;				//Sending 3
 982:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 984:	5e 9a       	sbi	0x0b, 6	; 11
 986:	8f e1       	ldi	r24, 0x1F	; 31
 988:	9e e4       	ldi	r25, 0x4E	; 78
 98a:	01 97       	sbiw	r24, 0x01	; 1
 98c:	f1 f7       	brne	.-4      	; 0x98a <lcd_start+0x58>
 98e:	00 c0       	rjmp	.+0      	; 0x990 <lcd_start+0x5e>
 990:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 992:	5e 98       	cbi	0x0b, 6	; 11
 994:	ef e9       	ldi	r30, 0x9F	; 159
 996:	ff e0       	ldi	r31, 0x0F	; 15
 998:	31 97       	sbiw	r30, 0x01	; 1
 99a:	f1 f7       	brne	.-4      	; 0x998 <lcd_start+0x66>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <lcd_start+0x6c>
 99e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 9a0:	5f 98       	cbi	0x0b, 7	; 11
	//lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	lcd_port = 0x10;				
 9a2:	80 e1       	ldi	r24, 0x10	; 16
 9a4:	8b b9       	out	0x0b, r24	; 11
	sbit(lcd_port,EN);				//Set Enable Pin
 9a6:	5e 9a       	sbi	0x0b, 6	; 11
 9a8:	8f e9       	ldi	r24, 0x9F	; 159
 9aa:	9f e0       	ldi	r25, 0x0F	; 15
 9ac:	01 97       	sbiw	r24, 0x01	; 1
 9ae:	f1 f7       	brne	.-4      	; 0x9ac <lcd_start+0x7a>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <lcd_start+0x80>
 9b2:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 9b4:	5e 98       	cbi	0x0b, 6	; 11
 9b6:	ef e9       	ldi	r30, 0x9F	; 159
 9b8:	ff e0       	ldi	r31, 0x0F	; 15
 9ba:	31 97       	sbiw	r30, 0x01	; 1
 9bc:	f1 f7       	brne	.-4      	; 0x9ba <lcd_start+0x88>
 9be:	00 c0       	rjmp	.+0      	; 0x9c0 <lcd_start+0x8e>
 9c0:	00 00       	nop
*/
static void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 9c2:	88 e2       	ldi	r24, 0x28	; 40
 9c4:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
	lcd_wr_command(0x01);			//Clear Display
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
	//lcd_wr_command(0x06);			//Increment cursor (Shift to right)
	lcd_wr_command(0x0C);			//Display on, cursor off
 9ce:	8c e0       	ldi	r24, 0x0C	; 12
 9d0:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
	lcd_wr_command(0x80);			//Force cursor to begigning of first line
 9d4:	80 e8       	ldi	r24, 0x80	; 128
 9d6:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
 9da:	08 95       	ret

000009dc <lcd_clear>:
* Logic: Writes spaces to both the rows of the LCD
* Example Call: lcd_clear()
*/
void lcd_clear(void)
{
	lcd_wr_command(0x01);
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	0e 94 0e 03 	call	0x61c	; 0x61c <lcd_wr_command>
 9e2:	08 95       	ret

000009e4 <port_config>:
#include "ADC.h"
#include "CCL.h"

void port_config (void)
{
	lcd_port_config();
 9e4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_port_config>
	adc_pin_config();
 9e8:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_pin_config>
 9ec:	08 95       	ret

000009ee <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 9ee:	f8 94       	cli
	lcd_start();
 9f0:	0e 94 99 04 	call	0x932	; 0x932 <lcd_start>
	adc_config();
 9f4:	0e 94 56 00 	call	0xac	; 0xac <adc_config>
	sei();   //Enables the global interrupts
 9f8:	78 94       	sei
 9fa:	08 95       	ret

000009fc <main>:
}

int main(void)
{
	port_config();
 9fc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <port_config>
	init_devices();
 a00:	0e 94 f7 04 	call	0x9ee	; 0x9ee <init_devices>
		
	lcd_string2(1, 7, "CCL");
 a04:	41 e1       	ldi	r20, 0x11	; 17
 a06:	51 e0       	ldi	r21, 0x01	; 1
 a08:	67 e0       	ldi	r22, 0x07	; 7
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
 a10:	2f ef       	ldi	r18, 0xFF	; 255
 a12:	85 ea       	ldi	r24, 0xA5	; 165
 a14:	9e e0       	ldi	r25, 0x0E	; 14
 a16:	21 50       	subi	r18, 0x01	; 1
 a18:	80 40       	sbci	r24, 0x00	; 0
 a1a:	90 40       	sbci	r25, 0x00	; 0
 a1c:	e1 f7       	brne	.-8      	; 0xa16 <main+0x1a>
 a1e:	00 c0       	rjmp	.+0      	; 0xa20 <main+0x24>
 a20:	00 00       	nop
	_delay_ms(300);
	
	if (PINB & 0x20)
 a22:	1d 9b       	sbis	0x03, 5	; 3
 a24:	07 c0       	rjmp	.+14     	; 0xa34 <main+0x38>
	{
		lcd_string2(2,1,"Supply Connected");
 a26:	45 e1       	ldi	r20, 0x15	; 21
 a28:	51 e0       	ldi	r21, 0x01	; 1
 a2a:	61 e0       	ldi	r22, 0x01	; 1
 a2c:	82 e0       	ldi	r24, 0x02	; 2
 a2e:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
 a32:	12 c0       	rjmp	.+36     	; 0xa58 <main+0x5c>
	}
	
	else
	{
		extern float offset;
		lcd_string2(2,2,"12v Supply NC");
 a34:	46 e2       	ldi	r20, 0x26	; 38
 a36:	51 e0       	ldi	r21, 0x01	; 1
 a38:	62 e0       	ldi	r22, 0x02	; 2
 a3a:	82 e0       	ldi	r24, 0x02	; 2
 a3c:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
		offset = 26.2;
 a40:	8a e9       	ldi	r24, 0x9A	; 154
 a42:	99 e9       	ldi	r25, 0x99	; 153
 a44:	a1 ed       	ldi	r26, 0xD1	; 209
 a46:	b1 e4       	ldi	r27, 0x41	; 65
 a48:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <offset>
 a4c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <offset+0x1>
 a50:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <offset+0x2>
 a54:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <offset+0x3>
 a58:	2f ef       	ldi	r18, 0xFF	; 255
 a5a:	8b e4       	ldi	r24, 0x4B	; 75
 a5c:	9d e1       	ldi	r25, 0x1D	; 29
 a5e:	21 50       	subi	r18, 0x01	; 1
 a60:	80 40       	sbci	r24, 0x00	; 0
 a62:	90 40       	sbci	r25, 0x00	; 0
 a64:	e1 f7       	brne	.-8      	; 0xa5e <main+0x62>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0x6c>
 a68:	00 00       	nop
	}
	
	_delay_ms(600);
	lcd_clear();
 a6a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lcd_clear>
		print_gate_voltage(2,11);
	}
	else
	{
		lcd_clear();
		char flag = 0;
 a6e:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(600);
	lcd_clear();
	
	while (1)
	{
		update_current();
 a70:	0e 94 08 01 	call	0x210	; 0x210 <update_current>
		update_voltage();
 a74:	0e 94 30 01 	call	0x260	; 0x260 <update_voltage>
		update_power();
 a78:	0e 94 48 01 	call	0x290	; 0x290 <update_power>
		update_gate_voltage();
 a7c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_gate_voltage>
	
	if(check_thresholds()==0)	
 a80:	0e 94 fd 01 	call	0x3fa	; 0x3fa <check_thresholds>
 a84:	81 11       	cpse	r24, r1
 a86:	11 c0       	rjmp	.+34     	; 0xaaa <main+0xae>
	{	
		print_current(1,1);
 a88:	61 e0       	ldi	r22, 0x01	; 1
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	0e 94 81 01 	call	0x302	; 0x302 <print_current>
		print_voltage(1,10);
 a90:	6a e0       	ldi	r22, 0x0A	; 10
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	0e 94 a0 01 	call	0x340	; 0x340 <print_voltage>
		print_power(2,1);
 a98:	61 e0       	ldi	r22, 0x01	; 1
 a9a:	82 e0       	ldi	r24, 0x02	; 2
 a9c:	0e 94 bf 01 	call	0x37e	; 0x37e <print_power>
		print_gate_voltage(2,11);
 aa0:	6b e0       	ldi	r22, 0x0B	; 11
 aa2:	82 e0       	ldi	r24, 0x02	; 2
 aa4:	0e 94 de 01 	call	0x3bc	; 0x3bc <print_gate_voltage>
 aa8:	e3 cf       	rjmp	.-58     	; 0xa70 <main+0x74>
	}
	else
	{
		lcd_clear();
 aaa:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lcd_clear>
		char flag = 0;
 aae:	cd 2f       	mov	r28, r29
		while(check_thresholds())
 ab0:	42 c0       	rjmp	.+132    	; 0xb36 <main+0x13a>
		{	
			update_current();
 ab2:	0e 94 08 01 	call	0x210	; 0x210 <update_current>
			update_voltage();
 ab6:	0e 94 30 01 	call	0x260	; 0x260 <update_voltage>
			update_power();
 aba:	0e 94 48 01 	call	0x290	; 0x290 <update_power>
			update_gate_voltage();
 abe:	0e 94 69 01 	call	0x2d2	; 0x2d2 <update_gate_voltage>
			
			switch (check_thresholds())
 ac2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <check_thresholds>
 ac6:	82 30       	cpi	r24, 0x02	; 2
 ac8:	89 f0       	breq	.+34     	; 0xaec <main+0xf0>
 aca:	83 30       	cpi	r24, 0x03	; 3
 acc:	e9 f0       	breq	.+58     	; 0xb08 <main+0x10c>
 ace:	81 30       	cpi	r24, 0x01	; 1
 ad0:	49 f5       	brne	.+82     	; 0xb24 <main+0x128>
			{
				case 1:	//Power exceeds threshold
					print_power(1,1);
 ad2:	61 e0       	ldi	r22, 0x01	; 1
 ad4:	0e 94 bf 01 	call	0x37e	; 0x37e <print_power>
					
					if(flag)
 ad8:	c1 11       	cpse	r28, r1
 ada:	2d c0       	rjmp	.+90     	; 0xb36 <main+0x13a>
					break;
						
					lcd_string2(2, 1, "Power Exceeded");
 adc:	44 e3       	ldi	r20, 0x34	; 52
 ade:	51 e0       	ldi	r21, 0x01	; 1
 ae0:	61 e0       	ldi	r22, 0x01	; 1
 ae2:	82 e0       	ldi	r24, 0x02	; 2
 ae4:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
					flag = 1;
 ae8:	c1 e0       	ldi	r28, 0x01	; 1
					break;
 aea:	25 c0       	rjmp	.+74     	; 0xb36 <main+0x13a>
			
				case 2:	//Voltage
					print_voltage(1,1);
 aec:	61 e0       	ldi	r22, 0x01	; 1
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	0e 94 a0 01 	call	0x340	; 0x340 <print_voltage>
					if(flag)
 af4:	c1 11       	cpse	r28, r1
 af6:	1f c0       	rjmp	.+62     	; 0xb36 <main+0x13a>
					break;
					
					lcd_string2(1, 1, "Voltage Exceeded");
 af8:	43 e4       	ldi	r20, 0x43	; 67
 afa:	51 e0       	ldi	r21, 0x01	; 1
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
					flag = 1;
 b04:	c1 e0       	ldi	r28, 0x01	; 1
					break;
 b06:	17 c0       	rjmp	.+46     	; 0xb36 <main+0x13a>
			
				case 3:	//Current
					print_current(1,1);
 b08:	61 e0       	ldi	r22, 0x01	; 1
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	0e 94 81 01 	call	0x302	; 0x302 <print_current>
					if(flag)
 b10:	c1 11       	cpse	r28, r1
 b12:	11 c0       	rjmp	.+34     	; 0xb36 <main+0x13a>
					break;
					
					lcd_string2(1, 1, "Current Exceeded");
 b14:	44 e5       	ldi	r20, 0x54	; 84
 b16:	51 e0       	ldi	r21, 0x01	; 1
 b18:	61 e0       	ldi	r22, 0x01	; 1
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
					flag = 1;
 b20:	c1 e0       	ldi	r28, 0x01	; 1
					break;
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <main+0x13a>
			
				default:
					if(flag)
 b24:	c1 11       	cpse	r28, r1
 b26:	07 c0       	rjmp	.+14     	; 0xb36 <main+0x13a>
					break;
				
					lcd_string2(1, 6, "Error");
 b28:	45 e6       	ldi	r20, 0x65	; 101
 b2a:	51 e0       	ldi	r21, 0x01	; 1
 b2c:	66 e0       	ldi	r22, 0x06	; 6
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	0e 94 88 03 	call	0x710	; 0x710 <lcd_string2>
					flag = 1;
 b34:	c1 e0       	ldi	r28, 0x01	; 1
	}
	else
	{
		lcd_clear();
		char flag = 0;
		while(check_thresholds())
 b36:	0e 94 fd 01 	call	0x3fa	; 0x3fa <check_thresholds>
 b3a:	81 11       	cpse	r24, r1
 b3c:	ba cf       	rjmp	.-140    	; 0xab2 <main+0xb6>
					lcd_string2(1, 6, "Error");
					flag = 1;
					break;
			}
		}
		lcd_clear();
 b3e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lcd_clear>
 b42:	96 cf       	rjmp	.-212    	; 0xa70 <main+0x74>

00000b44 <__subsf3>:
 b44:	50 58       	subi	r21, 0x80	; 128

00000b46 <__addsf3>:
 b46:	bb 27       	eor	r27, r27
 b48:	aa 27       	eor	r26, r26
 b4a:	0e 94 ba 05 	call	0xb74	; 0xb74 <__addsf3x>
 b4e:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_round>
 b52:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscA>
 b56:	38 f0       	brcs	.+14     	; 0xb66 <__addsf3+0x20>
 b58:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_pscB>
 b5c:	20 f0       	brcs	.+8      	; 0xb66 <__addsf3+0x20>
 b5e:	39 f4       	brne	.+14     	; 0xb6e <__addsf3+0x28>
 b60:	9f 3f       	cpi	r25, 0xFF	; 255
 b62:	19 f4       	brne	.+6      	; 0xb6a <__addsf3+0x24>
 b64:	26 f4       	brtc	.+8      	; 0xb6e <__addsf3+0x28>
 b66:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_nan>
 b6a:	0e f4       	brtc	.+2      	; 0xb6e <__addsf3+0x28>
 b6c:	e0 95       	com	r30
 b6e:	e7 fb       	bst	r30, 7
 b70:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>

00000b74 <__addsf3x>:
 b74:	e9 2f       	mov	r30, r25
 b76:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_split3>
 b7a:	58 f3       	brcs	.-42     	; 0xb52 <__addsf3+0xc>
 b7c:	ba 17       	cp	r27, r26
 b7e:	62 07       	cpc	r22, r18
 b80:	73 07       	cpc	r23, r19
 b82:	84 07       	cpc	r24, r20
 b84:	95 07       	cpc	r25, r21
 b86:	20 f0       	brcs	.+8      	; 0xb90 <__addsf3x+0x1c>
 b88:	79 f4       	brne	.+30     	; 0xba8 <__addsf3x+0x34>
 b8a:	a6 f5       	brtc	.+104    	; 0xbf4 <__addsf3x+0x80>
 b8c:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_zero>
 b90:	0e f4       	brtc	.+2      	; 0xb94 <__addsf3x+0x20>
 b92:	e0 95       	com	r30
 b94:	0b 2e       	mov	r0, r27
 b96:	ba 2f       	mov	r27, r26
 b98:	a0 2d       	mov	r26, r0
 b9a:	0b 01       	movw	r0, r22
 b9c:	b9 01       	movw	r22, r18
 b9e:	90 01       	movw	r18, r0
 ba0:	0c 01       	movw	r0, r24
 ba2:	ca 01       	movw	r24, r20
 ba4:	a0 01       	movw	r20, r0
 ba6:	11 24       	eor	r1, r1
 ba8:	ff 27       	eor	r31, r31
 baa:	59 1b       	sub	r21, r25
 bac:	99 f0       	breq	.+38     	; 0xbd4 <__addsf3x+0x60>
 bae:	59 3f       	cpi	r21, 0xF9	; 249
 bb0:	50 f4       	brcc	.+20     	; 0xbc6 <__addsf3x+0x52>
 bb2:	50 3e       	cpi	r21, 0xE0	; 224
 bb4:	68 f1       	brcs	.+90     	; 0xc10 <__addsf3x+0x9c>
 bb6:	1a 16       	cp	r1, r26
 bb8:	f0 40       	sbci	r31, 0x00	; 0
 bba:	a2 2f       	mov	r26, r18
 bbc:	23 2f       	mov	r18, r19
 bbe:	34 2f       	mov	r19, r20
 bc0:	44 27       	eor	r20, r20
 bc2:	58 5f       	subi	r21, 0xF8	; 248
 bc4:	f3 cf       	rjmp	.-26     	; 0xbac <__addsf3x+0x38>
 bc6:	46 95       	lsr	r20
 bc8:	37 95       	ror	r19
 bca:	27 95       	ror	r18
 bcc:	a7 95       	ror	r26
 bce:	f0 40       	sbci	r31, 0x00	; 0
 bd0:	53 95       	inc	r21
 bd2:	c9 f7       	brne	.-14     	; 0xbc6 <__addsf3x+0x52>
 bd4:	7e f4       	brtc	.+30     	; 0xbf4 <__addsf3x+0x80>
 bd6:	1f 16       	cp	r1, r31
 bd8:	ba 0b       	sbc	r27, r26
 bda:	62 0b       	sbc	r22, r18
 bdc:	73 0b       	sbc	r23, r19
 bde:	84 0b       	sbc	r24, r20
 be0:	ba f0       	brmi	.+46     	; 0xc10 <__addsf3x+0x9c>
 be2:	91 50       	subi	r25, 0x01	; 1
 be4:	a1 f0       	breq	.+40     	; 0xc0e <__addsf3x+0x9a>
 be6:	ff 0f       	add	r31, r31
 be8:	bb 1f       	adc	r27, r27
 bea:	66 1f       	adc	r22, r22
 bec:	77 1f       	adc	r23, r23
 bee:	88 1f       	adc	r24, r24
 bf0:	c2 f7       	brpl	.-16     	; 0xbe2 <__addsf3x+0x6e>
 bf2:	0e c0       	rjmp	.+28     	; 0xc10 <__addsf3x+0x9c>
 bf4:	ba 0f       	add	r27, r26
 bf6:	62 1f       	adc	r22, r18
 bf8:	73 1f       	adc	r23, r19
 bfa:	84 1f       	adc	r24, r20
 bfc:	48 f4       	brcc	.+18     	; 0xc10 <__addsf3x+0x9c>
 bfe:	87 95       	ror	r24
 c00:	77 95       	ror	r23
 c02:	67 95       	ror	r22
 c04:	b7 95       	ror	r27
 c06:	f7 95       	ror	r31
 c08:	9e 3f       	cpi	r25, 0xFE	; 254
 c0a:	08 f0       	brcs	.+2      	; 0xc0e <__addsf3x+0x9a>
 c0c:	b0 cf       	rjmp	.-160    	; 0xb6e <__addsf3+0x28>
 c0e:	93 95       	inc	r25
 c10:	88 0f       	add	r24, r24
 c12:	08 f0       	brcs	.+2      	; 0xc16 <__addsf3x+0xa2>
 c14:	99 27       	eor	r25, r25
 c16:	ee 0f       	add	r30, r30
 c18:	97 95       	ror	r25
 c1a:	87 95       	ror	r24
 c1c:	08 95       	ret

00000c1e <__cmpsf2>:
 c1e:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_cmp>
 c22:	08 f4       	brcc	.+2      	; 0xc26 <__cmpsf2+0x8>
 c24:	81 e0       	ldi	r24, 0x01	; 1
 c26:	08 95       	ret

00000c28 <__divsf3>:
 c28:	0e 94 28 06 	call	0xc50	; 0xc50 <__divsf3x>
 c2c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_round>
 c30:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_pscB>
 c34:	58 f0       	brcs	.+22     	; 0xc4c <__divsf3+0x24>
 c36:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscA>
 c3a:	40 f0       	brcs	.+16     	; 0xc4c <__divsf3+0x24>
 c3c:	29 f4       	brne	.+10     	; 0xc48 <__divsf3+0x20>
 c3e:	5f 3f       	cpi	r21, 0xFF	; 255
 c40:	29 f0       	breq	.+10     	; 0xc4c <__divsf3+0x24>
 c42:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
 c46:	51 11       	cpse	r21, r1
 c48:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_szero>
 c4c:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_nan>

00000c50 <__divsf3x>:
 c50:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_split3>
 c54:	68 f3       	brcs	.-38     	; 0xc30 <__divsf3+0x8>

00000c56 <__divsf3_pse>:
 c56:	99 23       	and	r25, r25
 c58:	b1 f3       	breq	.-20     	; 0xc46 <__divsf3+0x1e>
 c5a:	55 23       	and	r21, r21
 c5c:	91 f3       	breq	.-28     	; 0xc42 <__divsf3+0x1a>
 c5e:	95 1b       	sub	r25, r21
 c60:	55 0b       	sbc	r21, r21
 c62:	bb 27       	eor	r27, r27
 c64:	aa 27       	eor	r26, r26
 c66:	62 17       	cp	r22, r18
 c68:	73 07       	cpc	r23, r19
 c6a:	84 07       	cpc	r24, r20
 c6c:	38 f0       	brcs	.+14     	; 0xc7c <__divsf3_pse+0x26>
 c6e:	9f 5f       	subi	r25, 0xFF	; 255
 c70:	5f 4f       	sbci	r21, 0xFF	; 255
 c72:	22 0f       	add	r18, r18
 c74:	33 1f       	adc	r19, r19
 c76:	44 1f       	adc	r20, r20
 c78:	aa 1f       	adc	r26, r26
 c7a:	a9 f3       	breq	.-22     	; 0xc66 <__divsf3_pse+0x10>
 c7c:	35 d0       	rcall	.+106    	; 0xce8 <__divsf3_pse+0x92>
 c7e:	0e 2e       	mov	r0, r30
 c80:	3a f0       	brmi	.+14     	; 0xc90 <__divsf3_pse+0x3a>
 c82:	e0 e8       	ldi	r30, 0x80	; 128
 c84:	32 d0       	rcall	.+100    	; 0xcea <__divsf3_pse+0x94>
 c86:	91 50       	subi	r25, 0x01	; 1
 c88:	50 40       	sbci	r21, 0x00	; 0
 c8a:	e6 95       	lsr	r30
 c8c:	00 1c       	adc	r0, r0
 c8e:	ca f7       	brpl	.-14     	; 0xc82 <__divsf3_pse+0x2c>
 c90:	2b d0       	rcall	.+86     	; 0xce8 <__divsf3_pse+0x92>
 c92:	fe 2f       	mov	r31, r30
 c94:	29 d0       	rcall	.+82     	; 0xce8 <__divsf3_pse+0x92>
 c96:	66 0f       	add	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	bb 1f       	adc	r27, r27
 c9e:	26 17       	cp	r18, r22
 ca0:	37 07       	cpc	r19, r23
 ca2:	48 07       	cpc	r20, r24
 ca4:	ab 07       	cpc	r26, r27
 ca6:	b0 e8       	ldi	r27, 0x80	; 128
 ca8:	09 f0       	breq	.+2      	; 0xcac <__divsf3_pse+0x56>
 caa:	bb 0b       	sbc	r27, r27
 cac:	80 2d       	mov	r24, r0
 cae:	bf 01       	movw	r22, r30
 cb0:	ff 27       	eor	r31, r31
 cb2:	93 58       	subi	r25, 0x83	; 131
 cb4:	5f 4f       	sbci	r21, 0xFF	; 255
 cb6:	3a f0       	brmi	.+14     	; 0xcc6 <__divsf3_pse+0x70>
 cb8:	9e 3f       	cpi	r25, 0xFE	; 254
 cba:	51 05       	cpc	r21, r1
 cbc:	78 f0       	brcs	.+30     	; 0xcdc <__divsf3_pse+0x86>
 cbe:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
 cc2:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_szero>
 cc6:	5f 3f       	cpi	r21, 0xFF	; 255
 cc8:	e4 f3       	brlt	.-8      	; 0xcc2 <__divsf3_pse+0x6c>
 cca:	98 3e       	cpi	r25, 0xE8	; 232
 ccc:	d4 f3       	brlt	.-12     	; 0xcc2 <__divsf3_pse+0x6c>
 cce:	86 95       	lsr	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	b7 95       	ror	r27
 cd6:	f7 95       	ror	r31
 cd8:	9f 5f       	subi	r25, 0xFF	; 255
 cda:	c9 f7       	brne	.-14     	; 0xcce <__divsf3_pse+0x78>
 cdc:	88 0f       	add	r24, r24
 cde:	91 1d       	adc	r25, r1
 ce0:	96 95       	lsr	r25
 ce2:	87 95       	ror	r24
 ce4:	97 f9       	bld	r25, 7
 ce6:	08 95       	ret
 ce8:	e1 e0       	ldi	r30, 0x01	; 1
 cea:	66 0f       	add	r22, r22
 cec:	77 1f       	adc	r23, r23
 cee:	88 1f       	adc	r24, r24
 cf0:	bb 1f       	adc	r27, r27
 cf2:	62 17       	cp	r22, r18
 cf4:	73 07       	cpc	r23, r19
 cf6:	84 07       	cpc	r24, r20
 cf8:	ba 07       	cpc	r27, r26
 cfa:	20 f0       	brcs	.+8      	; 0xd04 <__divsf3_pse+0xae>
 cfc:	62 1b       	sub	r22, r18
 cfe:	73 0b       	sbc	r23, r19
 d00:	84 0b       	sbc	r24, r20
 d02:	ba 0b       	sbc	r27, r26
 d04:	ee 1f       	adc	r30, r30
 d06:	88 f7       	brcc	.-30     	; 0xcea <__divsf3_pse+0x94>
 d08:	e0 95       	com	r30
 d0a:	08 95       	ret

00000d0c <__fixunssfsi>:
 d0c:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_splitA>
 d10:	88 f0       	brcs	.+34     	; 0xd34 <__fixunssfsi+0x28>
 d12:	9f 57       	subi	r25, 0x7F	; 127
 d14:	98 f0       	brcs	.+38     	; 0xd3c <__fixunssfsi+0x30>
 d16:	b9 2f       	mov	r27, r25
 d18:	99 27       	eor	r25, r25
 d1a:	b7 51       	subi	r27, 0x17	; 23
 d1c:	b0 f0       	brcs	.+44     	; 0xd4a <__fixunssfsi+0x3e>
 d1e:	e1 f0       	breq	.+56     	; 0xd58 <__fixunssfsi+0x4c>
 d20:	66 0f       	add	r22, r22
 d22:	77 1f       	adc	r23, r23
 d24:	88 1f       	adc	r24, r24
 d26:	99 1f       	adc	r25, r25
 d28:	1a f0       	brmi	.+6      	; 0xd30 <__fixunssfsi+0x24>
 d2a:	ba 95       	dec	r27
 d2c:	c9 f7       	brne	.-14     	; 0xd20 <__fixunssfsi+0x14>
 d2e:	14 c0       	rjmp	.+40     	; 0xd58 <__fixunssfsi+0x4c>
 d30:	b1 30       	cpi	r27, 0x01	; 1
 d32:	91 f0       	breq	.+36     	; 0xd58 <__fixunssfsi+0x4c>
 d34:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_zero>
 d38:	b1 e0       	ldi	r27, 0x01	; 1
 d3a:	08 95       	ret
 d3c:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_zero>
 d40:	67 2f       	mov	r22, r23
 d42:	78 2f       	mov	r23, r24
 d44:	88 27       	eor	r24, r24
 d46:	b8 5f       	subi	r27, 0xF8	; 248
 d48:	39 f0       	breq	.+14     	; 0xd58 <__fixunssfsi+0x4c>
 d4a:	b9 3f       	cpi	r27, 0xF9	; 249
 d4c:	cc f3       	brlt	.-14     	; 0xd40 <__fixunssfsi+0x34>
 d4e:	86 95       	lsr	r24
 d50:	77 95       	ror	r23
 d52:	67 95       	ror	r22
 d54:	b3 95       	inc	r27
 d56:	d9 f7       	brne	.-10     	; 0xd4e <__fixunssfsi+0x42>
 d58:	3e f4       	brtc	.+14     	; 0xd68 <__fixunssfsi+0x5c>
 d5a:	90 95       	com	r25
 d5c:	80 95       	com	r24
 d5e:	70 95       	com	r23
 d60:	61 95       	neg	r22
 d62:	7f 4f       	sbci	r23, 0xFF	; 255
 d64:	8f 4f       	sbci	r24, 0xFF	; 255
 d66:	9f 4f       	sbci	r25, 0xFF	; 255
 d68:	08 95       	ret

00000d6a <__floatunsisf>:
 d6a:	e8 94       	clt
 d6c:	09 c0       	rjmp	.+18     	; 0xd80 <__floatsisf+0x12>

00000d6e <__floatsisf>:
 d6e:	97 fb       	bst	r25, 7
 d70:	3e f4       	brtc	.+14     	; 0xd80 <__floatsisf+0x12>
 d72:	90 95       	com	r25
 d74:	80 95       	com	r24
 d76:	70 95       	com	r23
 d78:	61 95       	neg	r22
 d7a:	7f 4f       	sbci	r23, 0xFF	; 255
 d7c:	8f 4f       	sbci	r24, 0xFF	; 255
 d7e:	9f 4f       	sbci	r25, 0xFF	; 255
 d80:	99 23       	and	r25, r25
 d82:	a9 f0       	breq	.+42     	; 0xdae <__floatsisf+0x40>
 d84:	f9 2f       	mov	r31, r25
 d86:	96 e9       	ldi	r25, 0x96	; 150
 d88:	bb 27       	eor	r27, r27
 d8a:	93 95       	inc	r25
 d8c:	f6 95       	lsr	r31
 d8e:	87 95       	ror	r24
 d90:	77 95       	ror	r23
 d92:	67 95       	ror	r22
 d94:	b7 95       	ror	r27
 d96:	f1 11       	cpse	r31, r1
 d98:	f8 cf       	rjmp	.-16     	; 0xd8a <__floatsisf+0x1c>
 d9a:	fa f4       	brpl	.+62     	; 0xdda <__floatsisf+0x6c>
 d9c:	bb 0f       	add	r27, r27
 d9e:	11 f4       	brne	.+4      	; 0xda4 <__floatsisf+0x36>
 da0:	60 ff       	sbrs	r22, 0
 da2:	1b c0       	rjmp	.+54     	; 0xdda <__floatsisf+0x6c>
 da4:	6f 5f       	subi	r22, 0xFF	; 255
 da6:	7f 4f       	sbci	r23, 0xFF	; 255
 da8:	8f 4f       	sbci	r24, 0xFF	; 255
 daa:	9f 4f       	sbci	r25, 0xFF	; 255
 dac:	16 c0       	rjmp	.+44     	; 0xdda <__floatsisf+0x6c>
 dae:	88 23       	and	r24, r24
 db0:	11 f0       	breq	.+4      	; 0xdb6 <__floatsisf+0x48>
 db2:	96 e9       	ldi	r25, 0x96	; 150
 db4:	11 c0       	rjmp	.+34     	; 0xdd8 <__floatsisf+0x6a>
 db6:	77 23       	and	r23, r23
 db8:	21 f0       	breq	.+8      	; 0xdc2 <__floatsisf+0x54>
 dba:	9e e8       	ldi	r25, 0x8E	; 142
 dbc:	87 2f       	mov	r24, r23
 dbe:	76 2f       	mov	r23, r22
 dc0:	05 c0       	rjmp	.+10     	; 0xdcc <__floatsisf+0x5e>
 dc2:	66 23       	and	r22, r22
 dc4:	71 f0       	breq	.+28     	; 0xde2 <__floatsisf+0x74>
 dc6:	96 e8       	ldi	r25, 0x86	; 134
 dc8:	86 2f       	mov	r24, r22
 dca:	70 e0       	ldi	r23, 0x00	; 0
 dcc:	60 e0       	ldi	r22, 0x00	; 0
 dce:	2a f0       	brmi	.+10     	; 0xdda <__floatsisf+0x6c>
 dd0:	9a 95       	dec	r25
 dd2:	66 0f       	add	r22, r22
 dd4:	77 1f       	adc	r23, r23
 dd6:	88 1f       	adc	r24, r24
 dd8:	da f7       	brpl	.-10     	; 0xdd0 <__floatsisf+0x62>
 dda:	88 0f       	add	r24, r24
 ddc:	96 95       	lsr	r25
 dde:	87 95       	ror	r24
 de0:	97 f9       	bld	r25, 7
 de2:	08 95       	ret

00000de4 <__fp_cmp>:
 de4:	99 0f       	add	r25, r25
 de6:	00 08       	sbc	r0, r0
 de8:	55 0f       	add	r21, r21
 dea:	aa 0b       	sbc	r26, r26
 dec:	e0 e8       	ldi	r30, 0x80	; 128
 dee:	fe ef       	ldi	r31, 0xFE	; 254
 df0:	16 16       	cp	r1, r22
 df2:	17 06       	cpc	r1, r23
 df4:	e8 07       	cpc	r30, r24
 df6:	f9 07       	cpc	r31, r25
 df8:	c0 f0       	brcs	.+48     	; 0xe2a <__fp_cmp+0x46>
 dfa:	12 16       	cp	r1, r18
 dfc:	13 06       	cpc	r1, r19
 dfe:	e4 07       	cpc	r30, r20
 e00:	f5 07       	cpc	r31, r21
 e02:	98 f0       	brcs	.+38     	; 0xe2a <__fp_cmp+0x46>
 e04:	62 1b       	sub	r22, r18
 e06:	73 0b       	sbc	r23, r19
 e08:	84 0b       	sbc	r24, r20
 e0a:	95 0b       	sbc	r25, r21
 e0c:	39 f4       	brne	.+14     	; 0xe1c <__fp_cmp+0x38>
 e0e:	0a 26       	eor	r0, r26
 e10:	61 f0       	breq	.+24     	; 0xe2a <__fp_cmp+0x46>
 e12:	23 2b       	or	r18, r19
 e14:	24 2b       	or	r18, r20
 e16:	25 2b       	or	r18, r21
 e18:	21 f4       	brne	.+8      	; 0xe22 <__fp_cmp+0x3e>
 e1a:	08 95       	ret
 e1c:	0a 26       	eor	r0, r26
 e1e:	09 f4       	brne	.+2      	; 0xe22 <__fp_cmp+0x3e>
 e20:	a1 40       	sbci	r26, 0x01	; 1
 e22:	a6 95       	lsr	r26
 e24:	8f ef       	ldi	r24, 0xFF	; 255
 e26:	81 1d       	adc	r24, r1
 e28:	81 1d       	adc	r24, r1
 e2a:	08 95       	ret

00000e2c <__fp_inf>:
 e2c:	97 f9       	bld	r25, 7
 e2e:	9f 67       	ori	r25, 0x7F	; 127
 e30:	80 e8       	ldi	r24, 0x80	; 128
 e32:	70 e0       	ldi	r23, 0x00	; 0
 e34:	60 e0       	ldi	r22, 0x00	; 0
 e36:	08 95       	ret

00000e38 <__fp_nan>:
 e38:	9f ef       	ldi	r25, 0xFF	; 255
 e3a:	80 ec       	ldi	r24, 0xC0	; 192
 e3c:	08 95       	ret

00000e3e <__fp_pscA>:
 e3e:	00 24       	eor	r0, r0
 e40:	0a 94       	dec	r0
 e42:	16 16       	cp	r1, r22
 e44:	17 06       	cpc	r1, r23
 e46:	18 06       	cpc	r1, r24
 e48:	09 06       	cpc	r0, r25
 e4a:	08 95       	ret

00000e4c <__fp_pscB>:
 e4c:	00 24       	eor	r0, r0
 e4e:	0a 94       	dec	r0
 e50:	12 16       	cp	r1, r18
 e52:	13 06       	cpc	r1, r19
 e54:	14 06       	cpc	r1, r20
 e56:	05 06       	cpc	r0, r21
 e58:	08 95       	ret

00000e5a <__fp_round>:
 e5a:	09 2e       	mov	r0, r25
 e5c:	03 94       	inc	r0
 e5e:	00 0c       	add	r0, r0
 e60:	11 f4       	brne	.+4      	; 0xe66 <__fp_round+0xc>
 e62:	88 23       	and	r24, r24
 e64:	52 f0       	brmi	.+20     	; 0xe7a <__fp_round+0x20>
 e66:	bb 0f       	add	r27, r27
 e68:	40 f4       	brcc	.+16     	; 0xe7a <__fp_round+0x20>
 e6a:	bf 2b       	or	r27, r31
 e6c:	11 f4       	brne	.+4      	; 0xe72 <__fp_round+0x18>
 e6e:	60 ff       	sbrs	r22, 0
 e70:	04 c0       	rjmp	.+8      	; 0xe7a <__fp_round+0x20>
 e72:	6f 5f       	subi	r22, 0xFF	; 255
 e74:	7f 4f       	sbci	r23, 0xFF	; 255
 e76:	8f 4f       	sbci	r24, 0xFF	; 255
 e78:	9f 4f       	sbci	r25, 0xFF	; 255
 e7a:	08 95       	ret

00000e7c <__fp_split3>:
 e7c:	57 fd       	sbrc	r21, 7
 e7e:	90 58       	subi	r25, 0x80	; 128
 e80:	44 0f       	add	r20, r20
 e82:	55 1f       	adc	r21, r21
 e84:	59 f0       	breq	.+22     	; 0xe9c <__fp_splitA+0x10>
 e86:	5f 3f       	cpi	r21, 0xFF	; 255
 e88:	71 f0       	breq	.+28     	; 0xea6 <__fp_splitA+0x1a>
 e8a:	47 95       	ror	r20

00000e8c <__fp_splitA>:
 e8c:	88 0f       	add	r24, r24
 e8e:	97 fb       	bst	r25, 7
 e90:	99 1f       	adc	r25, r25
 e92:	61 f0       	breq	.+24     	; 0xeac <__fp_splitA+0x20>
 e94:	9f 3f       	cpi	r25, 0xFF	; 255
 e96:	79 f0       	breq	.+30     	; 0xeb6 <__fp_splitA+0x2a>
 e98:	87 95       	ror	r24
 e9a:	08 95       	ret
 e9c:	12 16       	cp	r1, r18
 e9e:	13 06       	cpc	r1, r19
 ea0:	14 06       	cpc	r1, r20
 ea2:	55 1f       	adc	r21, r21
 ea4:	f2 cf       	rjmp	.-28     	; 0xe8a <__fp_split3+0xe>
 ea6:	46 95       	lsr	r20
 ea8:	f1 df       	rcall	.-30     	; 0xe8c <__fp_splitA>
 eaa:	08 c0       	rjmp	.+16     	; 0xebc <__fp_splitA+0x30>
 eac:	16 16       	cp	r1, r22
 eae:	17 06       	cpc	r1, r23
 eb0:	18 06       	cpc	r1, r24
 eb2:	99 1f       	adc	r25, r25
 eb4:	f1 cf       	rjmp	.-30     	; 0xe98 <__fp_splitA+0xc>
 eb6:	86 95       	lsr	r24
 eb8:	71 05       	cpc	r23, r1
 eba:	61 05       	cpc	r22, r1
 ebc:	08 94       	sec
 ebe:	08 95       	ret

00000ec0 <__fp_zero>:
 ec0:	e8 94       	clt

00000ec2 <__fp_szero>:
 ec2:	bb 27       	eor	r27, r27
 ec4:	66 27       	eor	r22, r22
 ec6:	77 27       	eor	r23, r23
 ec8:	cb 01       	movw	r24, r22
 eca:	97 f9       	bld	r25, 7
 ecc:	08 95       	ret

00000ece <__gesf2>:
 ece:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_cmp>
 ed2:	08 f4       	brcc	.+2      	; 0xed6 <__gesf2+0x8>
 ed4:	8f ef       	ldi	r24, 0xFF	; 255
 ed6:	08 95       	ret

00000ed8 <__mulsf3>:
 ed8:	0e 94 7f 07 	call	0xefe	; 0xefe <__mulsf3x>
 edc:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_round>
 ee0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscA>
 ee4:	38 f0       	brcs	.+14     	; 0xef4 <__mulsf3+0x1c>
 ee6:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_pscB>
 eea:	20 f0       	brcs	.+8      	; 0xef4 <__mulsf3+0x1c>
 eec:	95 23       	and	r25, r21
 eee:	11 f0       	breq	.+4      	; 0xef4 <__mulsf3+0x1c>
 ef0:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
 ef4:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_nan>
 ef8:	11 24       	eor	r1, r1
 efa:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_szero>

00000efe <__mulsf3x>:
 efe:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_split3>
 f02:	70 f3       	brcs	.-36     	; 0xee0 <__mulsf3+0x8>

00000f04 <__mulsf3_pse>:
 f04:	95 9f       	mul	r25, r21
 f06:	c1 f3       	breq	.-16     	; 0xef8 <__mulsf3+0x20>
 f08:	95 0f       	add	r25, r21
 f0a:	50 e0       	ldi	r21, 0x00	; 0
 f0c:	55 1f       	adc	r21, r21
 f0e:	62 9f       	mul	r22, r18
 f10:	f0 01       	movw	r30, r0
 f12:	72 9f       	mul	r23, r18
 f14:	bb 27       	eor	r27, r27
 f16:	f0 0d       	add	r31, r0
 f18:	b1 1d       	adc	r27, r1
 f1a:	63 9f       	mul	r22, r19
 f1c:	aa 27       	eor	r26, r26
 f1e:	f0 0d       	add	r31, r0
 f20:	b1 1d       	adc	r27, r1
 f22:	aa 1f       	adc	r26, r26
 f24:	64 9f       	mul	r22, r20
 f26:	66 27       	eor	r22, r22
 f28:	b0 0d       	add	r27, r0
 f2a:	a1 1d       	adc	r26, r1
 f2c:	66 1f       	adc	r22, r22
 f2e:	82 9f       	mul	r24, r18
 f30:	22 27       	eor	r18, r18
 f32:	b0 0d       	add	r27, r0
 f34:	a1 1d       	adc	r26, r1
 f36:	62 1f       	adc	r22, r18
 f38:	73 9f       	mul	r23, r19
 f3a:	b0 0d       	add	r27, r0
 f3c:	a1 1d       	adc	r26, r1
 f3e:	62 1f       	adc	r22, r18
 f40:	83 9f       	mul	r24, r19
 f42:	a0 0d       	add	r26, r0
 f44:	61 1d       	adc	r22, r1
 f46:	22 1f       	adc	r18, r18
 f48:	74 9f       	mul	r23, r20
 f4a:	33 27       	eor	r19, r19
 f4c:	a0 0d       	add	r26, r0
 f4e:	61 1d       	adc	r22, r1
 f50:	23 1f       	adc	r18, r19
 f52:	84 9f       	mul	r24, r20
 f54:	60 0d       	add	r22, r0
 f56:	21 1d       	adc	r18, r1
 f58:	82 2f       	mov	r24, r18
 f5a:	76 2f       	mov	r23, r22
 f5c:	6a 2f       	mov	r22, r26
 f5e:	11 24       	eor	r1, r1
 f60:	9f 57       	subi	r25, 0x7F	; 127
 f62:	50 40       	sbci	r21, 0x00	; 0
 f64:	9a f0       	brmi	.+38     	; 0xf8c <__mulsf3_pse+0x88>
 f66:	f1 f0       	breq	.+60     	; 0xfa4 <__mulsf3_pse+0xa0>
 f68:	88 23       	and	r24, r24
 f6a:	4a f0       	brmi	.+18     	; 0xf7e <__mulsf3_pse+0x7a>
 f6c:	ee 0f       	add	r30, r30
 f6e:	ff 1f       	adc	r31, r31
 f70:	bb 1f       	adc	r27, r27
 f72:	66 1f       	adc	r22, r22
 f74:	77 1f       	adc	r23, r23
 f76:	88 1f       	adc	r24, r24
 f78:	91 50       	subi	r25, 0x01	; 1
 f7a:	50 40       	sbci	r21, 0x00	; 0
 f7c:	a9 f7       	brne	.-22     	; 0xf68 <__mulsf3_pse+0x64>
 f7e:	9e 3f       	cpi	r25, 0xFE	; 254
 f80:	51 05       	cpc	r21, r1
 f82:	80 f0       	brcs	.+32     	; 0xfa4 <__mulsf3_pse+0xa0>
 f84:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
 f88:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_szero>
 f8c:	5f 3f       	cpi	r21, 0xFF	; 255
 f8e:	e4 f3       	brlt	.-8      	; 0xf88 <__mulsf3_pse+0x84>
 f90:	98 3e       	cpi	r25, 0xE8	; 232
 f92:	d4 f3       	brlt	.-12     	; 0xf88 <__mulsf3_pse+0x84>
 f94:	86 95       	lsr	r24
 f96:	77 95       	ror	r23
 f98:	67 95       	ror	r22
 f9a:	b7 95       	ror	r27
 f9c:	f7 95       	ror	r31
 f9e:	e7 95       	ror	r30
 fa0:	9f 5f       	subi	r25, 0xFF	; 255
 fa2:	c1 f7       	brne	.-16     	; 0xf94 <__mulsf3_pse+0x90>
 fa4:	fe 2b       	or	r31, r30
 fa6:	88 0f       	add	r24, r24
 fa8:	91 1d       	adc	r25, r1
 faa:	96 95       	lsr	r25
 fac:	87 95       	ror	r24
 fae:	97 f9       	bld	r25, 7
 fb0:	08 95       	ret

00000fb2 <__udivmodhi4>:
 fb2:	aa 1b       	sub	r26, r26
 fb4:	bb 1b       	sub	r27, r27
 fb6:	51 e1       	ldi	r21, 0x11	; 17
 fb8:	07 c0       	rjmp	.+14     	; 0xfc8 <__udivmodhi4_ep>

00000fba <__udivmodhi4_loop>:
 fba:	aa 1f       	adc	r26, r26
 fbc:	bb 1f       	adc	r27, r27
 fbe:	a6 17       	cp	r26, r22
 fc0:	b7 07       	cpc	r27, r23
 fc2:	10 f0       	brcs	.+4      	; 0xfc8 <__udivmodhi4_ep>
 fc4:	a6 1b       	sub	r26, r22
 fc6:	b7 0b       	sbc	r27, r23

00000fc8 <__udivmodhi4_ep>:
 fc8:	88 1f       	adc	r24, r24
 fca:	99 1f       	adc	r25, r25
 fcc:	5a 95       	dec	r21
 fce:	a9 f7       	brne	.-22     	; 0xfba <__udivmodhi4_loop>
 fd0:	80 95       	com	r24
 fd2:	90 95       	com	r25
 fd4:	bc 01       	movw	r22, r24
 fd6:	cd 01       	movw	r24, r26
 fd8:	08 95       	ret

00000fda <__umulhisi3>:
 fda:	a2 9f       	mul	r26, r18
 fdc:	b0 01       	movw	r22, r0
 fde:	b3 9f       	mul	r27, r19
 fe0:	c0 01       	movw	r24, r0
 fe2:	a3 9f       	mul	r26, r19
 fe4:	70 0d       	add	r23, r0
 fe6:	81 1d       	adc	r24, r1
 fe8:	11 24       	eor	r1, r1
 fea:	91 1d       	adc	r25, r1
 fec:	b2 9f       	mul	r27, r18
 fee:	70 0d       	add	r23, r0
 ff0:	81 1d       	adc	r24, r1
 ff2:	11 24       	eor	r1, r1
 ff4:	91 1d       	adc	r25, r1
 ff6:	08 95       	ret

00000ff8 <_exit>:
 ff8:	f8 94       	cli

00000ffa <__stop_program>:
 ffa:	ff cf       	rjmp	.-2      	; 0xffa <__stop_program>
